(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1553435,      27537]
NotebookOptionsPosition[   1548583,      27450]
NotebookOutlinePosition[   1549080,      27468]
CellTagsIndexPosition[   1549037,      27465]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\:041b\:0430\:0431\:043e\:0440\:0430\:0442\:043e\:0440\:043d\:0430\
\:044f", " ", "\:0440\:0430\:0431\:043e\:0442\:0430", " ", "8"}]], "Input",
 CellChangeTimes->{{3.8791335826061378`*^9, 
  3.8791335947227764`*^9}},ExpressionUUID->"9987bfc2-17ee-431c-b991-\
267b194bba6f"],

Cell[BoxData[
 RowBox[{"\:0420\:0430\:0431\:043e\:0442\:0430", " ", "\:0441", " ", 
  "\:0411\:0414", " "}]], "Input",
 CellChangeTimes->{{3.87913359629521*^9, 
  3.8791336052720423`*^9}},ExpressionUUID->"2dc6c530-b5cf-4f3e-8ffc-\
6bb541a307a6"],

Cell[BoxData[
 RowBox[{"\:0421\:043e\:0437\:0434\:0430\:0434\:0438\:043c", " ", 
  "\:043f\:043e\:0434\:043a\:043b\:044e\:0447\:0435\:043d\:0438\:0435", " ", 
  "\:043a", " ", "\:0411\:0414"}]], "Input",
 CellChangeTimes->{{3.8791336184445896`*^9, 
  3.8791336253331804`*^9}},ExpressionUUID->"3f5cc84f-fb9b-4aa7-a63b-\
56700a3cbd78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"conn", "=", " ", 
  RowBox[{"DatabaseReference", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Backend\>\"", " ", "\[Rule]", " ", "\"\<postgres\>\""}], 
     ",", " ", 
     RowBox[{"\"\<Host\>\"", " ", "\[Rule]", " ", "\"\<localhost\>\""}], ",", 
     " ", 
     RowBox[{"\"\<Port\>\"", " ", "\[Rule]", " ", "5432"}], ",", " ", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<citytransport\>\""}], ",", " ", 
     RowBox[{"\"\<Username\>\"", " ", "\[Rule]", " ", "\"\<postgres\>\""}], 
     ",", " ", 
     RowBox[{"\"\<Password\>\"", " ", "\[Rule]", " ", "\"\<6675\>\""}]}], 
    "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.879133634218265*^9, {3.879133808613807*^9, 3.879133813548767*^9}, {
   3.879133877304958*^9, 3.8791338899303007`*^9}, {3.879133922871572*^9, 
   3.87913395700875*^9}, {3.879134186551941*^9, 3.879134193070402*^9}, {
   3.8791342538447075`*^9, 3.879134325497349*^9}, {3.879134371404468*^9, 
   3.8791343832550025`*^9}, {3.8791344851385155`*^9, 
   3.8791344890337653`*^9}, {3.8791348010662203`*^9, 3.8791348166711884`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"164c5184-6afc-4665-9c2e-e906ab3d4901"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DatabaseReference",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                10.869016023673117`, {0., 10.869016023673117`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{21.0264, 18.2393}, {21.0264, 15.5973}, {17.2094, 
                13.456299999999999`}, {12.500399999999999`, 
                13.456299999999999`}, {7.791399999999999, 
                13.456299999999999`}, {3.973399999999998, 15.5973}, {
                3.973399999999998, 18.2393}, {3.973399999999998, 20.8813}, {
                7.791399999999999, 23.0213}, {12.500399999999999`, 23.0213}, {
                17.2094, 23.0213}, {21.0264, 20.8813}, {21.0264, 
                18.2393}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0Bmg5x3ifYbbvNHNpeB+6Qc1WA82vsTeN2nRR0
kJh6hTNjkgmcv4H5eY+GrRGcz+Tbwut/Xh+ufyJ/ldnqe9oOMPNhfFuu64sL
7hrA+YobijIm9prA9cP4MPNhfJj9MP0w96G7H8a/JV2TaPRV00E2KsX6/nlZ
OB8iz+Pwa0H65leT9eB8mH0w/qqmQM+5BqZw/Zau7kU/683h5sP4lS/VDDl6
DFHlG0zh+mF8FPOBfJj9MP2o7kO4HwAEYoXy
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{12.5, 23.0215}, {
                7.7909999999999995`, 23.0215}, {3.974, 20.880499999999998`}, {
                3.974, 18.2395}, {3.974, 6.7605}, {3.974, 
                4.119500000000002}, {7.7909999999999995`, 
                1.9785000000000004`}, {12.5, 1.9785000000000004`}, {17.209, 
                1.9785000000000004`}, {21.026, 4.119500000000002}, {21.026, 
                6.7605}, {21.026, 18.2395}, {21.026, 20.880499999999998`}, {
                17.209, 23.0215}, {12.5, 23.0215}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 
                 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{20.552699999999998`, 10.5869}, {20.552699999999998`,
                  8.2539}, {16.8647, 6.2819}, {12.499699999999997`, 6.2819}, {
                 8.135699999999998, 6.2819}, {4.4476999999999975`, 8.2539}, {
                 4.4476999999999975`, 10.5869}, {4.4476999999999975`, 
                 12.0379}, {5.9087, 10.3139}, {8.926699999999999, 9.1519}, {
                 12.499699999999997`, 9.1519}, {16.073699999999995`, 
                 9.1519}, {19.0907, 10.3139}, {20.552699999999998`, 
                 12.0379}}, {{20.552699999999998`, 6.7609}, {
                 20.552699999999998`, 4.4279}, {16.8647, 
                 2.4559000000000015`}, {12.499699999999997`, 
                 2.4559000000000015`}, {8.135699999999998, 
                 2.4559000000000015`}, {4.4476999999999975`, 4.4279}, {
                 4.4476999999999975`, 6.7609}, {4.4476999999999975`, 
                 8.2119}, {5.9087, 6.4879}, {8.926699999999999, 5.3259}, {
                 12.499699999999997`, 5.3259}, {16.073699999999995`, 
                 5.3259}, {19.0907, 6.4879}, {20.552699999999998`, 8.2119}},
                  CompressedData["
1:eJxTTMoPSmViYGBQBWIQPe/sqvNX2UwdUs7Eep/YbuTAFj/DR/SPCZxvLGhm
s5fJ1KE/uERler+RA0z9/NVrb8SnIfgbmJ/3aNgi+AqOH5PPrDV0UH3SPO/s
LRMH7xPstrNVDR1O13vsr+01cUj7/iRx4TIDOD+H8+eC9Ms6cP7sZ7LLX2ho
OLy4ueZXzF0DB4Eqs9V25ioOISCL/2vA+elKORVVrgpwvsPazHuFpwTh+mF8
mPkwPsz+G9I1iUZTBeDue/H6gKXyKX64+2F8mP9gfJj/OQrXdN9+wQ8PnwAD
rZXCAgLw8IOph/EzGlmO9m/khfMDatdtS/rP7RAC1P6/AcGH2Qfjc0rPi9Pk
lobzy+YsUt5Zw+dwbMbuaRPOyzpMANn//7s9LHxgfOWdf9q/dBvC+cDYCXtT
bwrXD+PDzIfxYfbD+DD3qfNzb13miUgv6OkHACYRDMY=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAwBmIQ7fgx+UxstoGDtP5dFTZGXYdHx2fsniag4/AmcIdc
q7aBA1eGUk5FlIHDl79XKl6yYfIb1A61LS83dGBrnOrc/UbfYXbo/NVrdxjC
5bN8P/cFfzF0aBe7ee67sIHDPoOZWhKmxg5HFTYUZQgaEuQnx95xY7bQd/h0
yTdJIMLIIc+kYbvDIR2Hypdqhhw8xg5OazPvFXLpOjglPL2gZG3iwOjbwuuf
r+Ngc9+/d/o5UzhfFeTA06YORV19Tz7N13LY9hnoQE9TB6Durr4ULYfMiW9r
7E1NHW5J1yQaTdVwKN83X0p/r4lDHND6itPqDrd/1mXtKTF12Lj/zTybHHWH
DpB/Nps6LH/hofd/oRrE/GwzB7Hfp9+ddFZxKM4AGnjf1EHkgsuNDyVKDg+A
zsn7ZOIANI1bRUPR4fRC122f7xo7PPkkfyn/voIDKPhyjhs7uN748MVrpoKD
bFSK9f31xg4g63RCFByaD5xa6DrN2GG+jc6VWWoKDkIggVZjBzGPgD8Sn+Ud
RNe5P6wqMXZwWHJ/H98ceYdOR2CAJBk7aCzo3PDwpZzDGhmggfbGDmu2JdXf
tJVzAAXXbUljBy431VKmWbJQ9xk5eFU36/uoyToIRFhuOXHNyGEZyLjNMg7v
gKETt8vIIY0hv5HFVQYSPnONHBJCgtQXdEo6+JiDbDR04JCeF6fpLe6wt2Sy
BIuYocO71wcslb1EIe4LAaYH7W/T7woLOySBLHhh4PAGJH9K0IFJG5hC+gzh
fLD5tkZwPth9k0wc9h0UVwt2VYCEd7eZg8W1o7kmDJpw/uSVTYGedw3g/DJ/
ObGsXhO4fhgfZj6M/2H5MW/zlQYObEIi9sfuGDn0Tc8Tam7Qc0DPHwDu+047

                 "], {{12.500399999999999`, 20.349}, {13.1264, 20.689}, {
                 13.2204, 20.739}, {13.8234, 21.064}, {13.8704, 20.414}, {
                 13.8474, 20.076}, {13.776399999999999`, 
                 19.281000000000002`}, {13.4294, 19.478}, {
                 12.732399999999998`, 19.725}, {12.732399999999998`, 
                 19.725}, {12.732399999999998`, 19.725}, {12.593399999999999`,
                  20.18}, {12.500399999999999`, 20.349}}, CompressedData["
1:eJxTTMoPSmViYGCwAGIQ/UHMI+DPDAmHtteBO+Rc9R2u7HksIusp7fBNI6b/
kKmhQ9RloMBcOYcdcq2vA38YOQgu3XtQ/JmiQ9aekskSLcYOTY+Oz9gdpgyR
tzBxeDAHpELZocsx4ekFJ1OHePZzkoFRag429/17p58zdQhmXTzJilEdLp/a
kRx7h03DIeTx0tlHFEwc6np2ZnPu1HC487Mua88UYwcNkMBJbQe3bZ//Xtlh
5KDrLPP6kZmBQ+NU5+6c5YYOIvbH7mw9YujQfODUQlczQ4dTRkc26r0zdEgS
iLDcomHo8JP/5fb1ykYOb4Deaz1tgME3BirPazZ0eFdjbxoXZeBwZdYz2eUr
VB2qRda5P9xl4ABy/q1oVYdXaoYca/YYOJyYsXvaBH5VBzuu64sL9ho4/Dr9
7uThQypw/q5szp8LnivD+Tc+fPGKZFN28OJh0m7fZuDAXMGtovFP0QEkbbvK
wMF//ZTUjsVKDs8uKN3+KWfoALL+BYeKAzD0v2rUEOZDIkDJYZErMIC2GELD
X9FBHhgdO/YZOmwV/X36HaeSg+KGooyJbw0dGraDdCg5gIKzQtPI4drRXJOG
70oO6kDvyVgZOcwFaZ+u5LDq4yXfJAMjh4gVpmetz8k7zJoJBDeB4fvUfsl9
O3mI/ARDh43738yzeaPgAPKeWKWhw6V8YIzfVHRwAkavUjRhfk2iUahBloLD
L2B0l3w2cFj2wkPvv6KCQzHQtTX2mHxw+KarOJROlmAJyzNwmApKQHPUIe4J
MHDIAUlvVneYApTm8zVwkFsONGA/gh93x4254jSCDzL9b5kmJDw8DRwMtFYK
X2DRc3gATK55QToOoOD2yNNxSAalJw4dhwn8VWar92lBwveetoMFKAAZNOH8
eTY6wCSkDOdvePhy6qYeOYed4Pyh64Ce3wCDEYra
                 "], {{12.500399999999999`, 23.5}, {7.4533999999999985`, 
                 23.5}, {3.500399999999999, 21.189}, {3.500399999999999, 
                 18.239}, {3.500399999999999, 15.289000000000001`}, {
                 7.4533999999999985`, 12.979000000000001`}, {
                 12.500399999999999`, 12.979000000000001`}, {17.5464, 
                 12.979000000000001`}, {21.5004, 15.289000000000001`}, {
                 21.5004, 18.239}, {21.5004, 21.189}, {17.5464, 23.5}, {
                 12.500399999999999`, 23.5}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{14.2646, 17.915}, {13.7296, 18.136}, {13.1496, 
                18.369999999999997`}, {12.3616, 18.305999999999997`}, {
                12.2906, 18.188}, {12.2226, 18.096999999999998`}, {12.1756, 
                17.967}, {12.5466, 17.992}, {12.9416, 17.915}, {13.3826, 
                17.771}, {13.8006, 17.837}, {13.8476, 17.849999999999998`}, {
                14.2646, 17.915}}}]}}, AspectRatio -> Automatic, 
             ImageSize -> {25., 25.}, PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"citytransport\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PostgreSQL\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {
                9.782114421305806, {0., 9.782114421305806}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{21.0264, 18.2393}, {21.0264, 15.5973}, {17.2094, 
                13.456299999999999`}, {12.500399999999999`, 
                13.456299999999999`}, {7.791399999999999, 
                13.456299999999999`}, {3.973399999999998, 15.5973}, {
                3.973399999999998, 18.2393}, {3.973399999999998, 20.8813}, {
                7.791399999999999, 23.0213}, {12.500399999999999`, 23.0213}, {
                17.2094, 23.0213}, {21.0264, 20.8813}, {21.0264, 
                18.2393}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0Bmg5x3ifYbbvNHNpeB+6Qc1WA82vsTeN2nRR0
kJh6hTNjkgmcv4H5eY+GrRGcz+Tbwut/Xh+ufyJ/ldnqe9oOMPNhfFuu64sL
7hrA+YobijIm9prA9cP4MPNhfJj9MP0w96G7H8a/JV2TaPRV00E2KsX6/nlZ
OB8iz+Pwa0H65leT9eB8mH0w/qqmQM+5BqZw/Zau7kU/683h5sP4lS/VDDl6
DFHlG0zh+mF8FPOBfJj9MP2o7kO4HwAEYoXy
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{12.5, 23.0215}, {
                7.7909999999999995`, 23.0215}, {3.974, 20.880499999999998`}, {
                3.974, 18.2395}, {3.974, 6.7605}, {3.974, 
                4.119500000000002}, {7.7909999999999995`, 
                1.9785000000000004`}, {12.5, 1.9785000000000004`}, {17.209, 
                1.9785000000000004`}, {21.026, 4.119500000000002}, {21.026, 
                6.7605}, {21.026, 18.2395}, {21.026, 20.880499999999998`}, {
                17.209, 23.0215}, {12.5, 23.0215}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 
                 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{20.552699999999998`, 10.5869}, {20.552699999999998`,
                  8.2539}, {16.8647, 6.2819}, {12.499699999999997`, 6.2819}, {
                 8.135699999999998, 6.2819}, {4.4476999999999975`, 8.2539}, {
                 4.4476999999999975`, 10.5869}, {4.4476999999999975`, 
                 12.0379}, {5.9087, 10.3139}, {8.926699999999999, 9.1519}, {
                 12.499699999999997`, 9.1519}, {16.073699999999995`, 
                 9.1519}, {19.0907, 10.3139}, {20.552699999999998`, 
                 12.0379}}, {{20.552699999999998`, 6.7609}, {
                 20.552699999999998`, 4.4279}, {16.8647, 
                 2.4559000000000015`}, {12.499699999999997`, 
                 2.4559000000000015`}, {8.135699999999998, 
                 2.4559000000000015`}, {4.4476999999999975`, 4.4279}, {
                 4.4476999999999975`, 6.7609}, {4.4476999999999975`, 
                 8.2119}, {5.9087, 6.4879}, {8.926699999999999, 5.3259}, {
                 12.499699999999997`, 5.3259}, {16.073699999999995`, 
                 5.3259}, {19.0907, 6.4879}, {20.552699999999998`, 
                 8.2119}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQPe/sqvNX2UwdUs7Eep/YbuTAFj/DR/SPCZxvLGhm
s5fJ1KE/uERler+RA0z9/NVrb8SnIfgbmJ/3aNgi+AqOH5PPrDV0UH3SPO/s
LRMH7xPstrNVDR1O13vsr+01cUj7/iRx4TIDOD+H8+eC9Ms6cP7sZ7LLX2ho
OLy4ueZXzF0DB4Eqs9V25ioOISCL/2vA+elKORVVrgpwvsPazHuFpwTh+mF8
mPkwPsz+G9I1iUZTBeDue/H6gKXyKX64+2F8mP9gfJj/OQrXdN9+wQ8PnwAD
rZXCAgLw8IOph/EzGlmO9m/khfMDatdtS/rP7RAC1P6/AcGH2Qfjc0rPi9Pk
lobzy+YsUt5Zw+dwbMbuaRPOyzpMANn//7s9LHxgfOWdf9q/dBvC+cDYCXtT
bwrXD+PDzIfxYfbD+DD3qfNzb13miUgv6OkHACYRDMY=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAwBmIQ7fgx+UxstoGDtP5dFTZGXYdHx2fsniag4/AmcIdc
q7aBA1eGUk5FlIHDl79XKl6yYfIb1A61LS83dGBrnOrc/UbfYXbo/NVrdxjC
5bN8P/cFfzF0aBe7ee67sIHDPoOZWhKmxg5HFTYUZQgaEuQnx95xY7bQd/h0
yTdJIMLIIc+kYbvDIR2Hypdqhhw8xg5OazPvFXLpOjglPL2gZG3iwOjbwuuf
r+Ngc9+/d/o5UzhfFeTA06YORV19Tz7N13LY9hnoQE9TB6Durr4ULYfMiW9r
7E1NHW5J1yQaTdVwKN83X0p/r4lDHND6itPqDrd/1mXtKTF12Lj/zTybHHWH
DpB/Nps6LH/hofd/oRrE/GwzB7Hfp9+ddFZxKM4AGnjf1EHkgsuNDyVKDg+A
zsn7ZOIANI1bRUPR4fRC122f7xo7PPkkfyn/voIDKPhyjhs7uN748MVrpoKD
bFSK9f31xg4g63RCFByaD5xa6DrN2GG+jc6VWWoKDkIggVZjBzGPgD8Sn+Ud
RNe5P6wqMXZwWHJ/H98ceYdOR2CAJBk7aCzo3PDwpZzDGhmggfbGDmu2JdXf
tJVzAAXXbUljBy431VKmWbJQ9xk5eFU36/uoyToIRFhuOXHNyGEZyLjNMg7v
gKETt8vIIY0hv5HFVQYSPnONHBJCgtQXdEo6+JiDbDR04JCeF6fpLe6wt2Sy
BIuYocO71wcslb1EIe4LAaYH7W/T7woLOySBLHhh4PAGJH9K0IFJG5hC+gzh
fLD5tkZwPth9k0wc9h0UVwt2VYCEd7eZg8W1o7kmDJpw/uSVTYGedw3g/DJ/
ObGsXhO4fhgfZj6M/2H5MW/zlQYObEIi9sfuGDn0Tc8Tam7Qc0DPHwDu+047

                 "], {{12.500399999999999`, 20.349}, {13.1264, 20.689}, {
                 13.2204, 20.739}, {13.8234, 21.064}, {13.8704, 20.414}, {
                 13.8474, 20.076}, {13.776399999999999`, 
                 19.281000000000002`}, {13.4294, 19.478}, {
                 12.732399999999998`, 19.725}, {12.732399999999998`, 
                 19.725}, {12.732399999999998`, 19.725}, {12.593399999999999`,
                  20.18}, {12.500399999999999`, 20.349}}, CompressedData["
1:eJxTTMoPSmViYGCwAGIQ/UHMI+DPDAmHtteBO+Rc9R2u7HksIusp7fBNI6b/
kKmhQ9RloMBcOYcdcq2vA38YOQgu3XtQ/JmiQ9aekskSLcYOTY+Oz9gdpgyR
tzBxeDAHpELZocsx4ekFJ1OHePZzkoFRag429/17p58zdQhmXTzJilEdLp/a
kRx7h03DIeTx0tlHFEwc6np2ZnPu1HC487Mua88UYwcNkMBJbQe3bZ//Xtlh
5KDrLPP6kZmBQ+NU5+6c5YYOIvbH7mw9YujQfODUQlczQ4dTRkc26r0zdEgS
iLDcomHo8JP/5fb1ykYOb4Deaz1tgME3BirPazZ0eFdjbxoXZeBwZdYz2eUr
VB2qRda5P9xl4ABy/q1oVYdXaoYca/YYOJyYsXvaBH5VBzuu64sL9ho4/Dr9
7uThQypw/q5szp8LnivD+Tc+fPGKZFN28OJh0m7fZuDAXMGtovFP0QEkbbvK
wMF//ZTUjsVKDs8uKN3+KWfoALL+BYeKAzD0v2rUEOZDIkDJYZErMIC2GELD
X9FBHhgdO/YZOmwV/X36HaeSg+KGooyJbw0dGraDdCg5gIKzQtPI4drRXJOG
70oO6kDvyVgZOcwFaZ+u5LDq4yXfJAMjh4gVpmetz8k7zJoJBDeB4fvUfsl9
O3mI/ARDh43738yzeaPgAPKeWKWhw6V8YIzfVHRwAkavUjRhfk2iUahBloLD
L2B0l3w2cFj2wkPvv6KCQzHQtTX2mHxw+KarOJROlmAJyzNwmApKQHPUIe4J
MHDIAUlvVneYApTm8zVwkFsONGA/gh93x4254jSCDzL9b5kmJDw8DRwMtFYK
X2DRc3gATK55QToOoOD2yNNxSAalJw4dhwn8VWar92lBwveetoMFKAAZNOH8
eTY6wCSkDOdvePhy6qYeOYed4Pyh64Ce3wCDEYra
                 "], {{12.500399999999999`, 23.5}, {7.4533999999999985`, 
                 23.5}, {3.500399999999999, 21.189}, {3.500399999999999, 
                 18.239}, {3.500399999999999, 15.289000000000001`}, {
                 7.4533999999999985`, 12.979000000000001`}, {
                 12.500399999999999`, 12.979000000000001`}, {17.5464, 
                 12.979000000000001`}, {21.5004, 15.289000000000001`}, {
                 21.5004, 18.239}, {21.5004, 21.189}, {17.5464, 23.5}, {
                 12.500399999999999`, 23.5}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{14.2646, 17.915}, {13.7296, 18.136}, {13.1496, 
                18.369999999999997`}, {12.3616, 18.305999999999997`}, {
                12.2906, 18.188}, {12.2226, 18.096999999999998`}, {12.1756, 
                17.967}, {12.5466, 17.992}, {12.9416, 17.915}, {13.3826, 
                17.771}, {13.8006, 17.837}, {13.8476, 17.849999999999998`}, {
                14.2646, 17.915}}}]}}, AspectRatio -> Automatic, 
             ImageSize -> {25., 25.}, PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"citytransport\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PostgreSQL\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Host: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"localhost\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"sf4hbktnop5h\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Password: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"********\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5432", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Username: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"postgres\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  DatabaseReference[
   Association[
   "Backend" -> "postgres", "Host" -> "localhost", "Port" -> 5432, "Name" -> 
    "citytransport", "Username" -> "postgres", "Password" -> "6675"]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8791336362919183`*^9, 3.8791338143657055`*^9, {3.8791339422506332`*^9, 
   3.879133957848584*^9}, 3.8791342122337594`*^9, {3.879134255897199*^9, 
   3.879134325880073*^9}, {3.8791343753154755`*^9, 3.8791343839610147`*^9}, 
   3.879134490124936*^9, {3.879134812817004*^9, 3.879134817309994*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"56e2f065-d6b1-4f15-b915-a9bc2a75cb09"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\:041f\:0440\:043e\:0432\:0435\:0440\:0438\:043c", " ", 
  "\:0441\:043e\:0435\:0434\:0438\:043d\:0435\:043d\:0438\:0435"}]], "Input",
 CellChangeTimes->{{3.87913364273845*^9, 
  3.8791336457738733`*^9}},ExpressionUUID->"a455687f-f2c8-41c3-b74e-\
65ee88f1d9c4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"DatabaseConnect", "[", "conn", "]"}], "\[IndentingNewLine]", 
 RowBox[{"conn", "[", "\"\<Connected\>\"", "]"}]}], "Input",
 CellChangeTimes->{
  3.8791339604496145`*^9, {3.8791342740092325`*^9, 3.879134282551573*^9}, {
   3.8791344784459095`*^9, 3.8791344981565504`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"212ddc31-92cb-4e7a-8ce6-4425d4e2bec3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Database connection was successful.\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"DatabaseSuccess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Database connection was successful.\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"DatabaseSuccess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success["DatabaseSuccess", 
   Association[
   "MessageTemplate" :> MessageName[DatabaseReference, "conn"], 
    "MessageParameters" :> {}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.879133659289029*^9, 3.8791338204553432`*^9, 3.8791339613209443`*^9, {
   3.8791342593316402`*^9, 3.8791343282753534`*^9}, 3.8791343786167297`*^9, {
   3.879134479719261*^9, 3.879134498787411*^9}, 3.8791348211297274`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"4aded084-aed7-41ab-a50b-54d57a50a845"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.879133659289029*^9, 3.8791338204553432`*^9, 3.8791339613209443`*^9, {
   3.8791342593316402`*^9, 3.8791343282753534`*^9}, 3.8791343786167297`*^9, {
   3.879134479719261*^9, 3.879134498787411*^9}, 3.8791348211620874`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"2b9def8f-3cd1-4280-b4b1-7d33a4c914f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"conn", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Username\>\"", ",", "\"\<Port\>\""}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8791345167672997`*^9, 3.879134529175291*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"17acdf8c-3f7a-4f6a-b716-20532e614c45"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Username\"\>", "\[Rule]", "\<\"postgres\"\>"}], ",", 
   RowBox[{"\<\"Port\"\>", "\[Rule]", "5432"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87913482784706*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"4c9d91f2-bb3c-47fd-bd32-4aa0f24aa3b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"bdObject", "=", 
   RowBox[{"RelationalDatabase", "[", "conn", "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "\:043f\:0440\:0435\:0434\:0441\:0442\:0430\:0432\:043b\:044f\:0435\:0442",
     " ", "\:0438\:043d\:0444\:043e\:0440\:043c\:0430\:0446\:0438\:044e", " ",
     "\:0441\:0445\:0435\:043c\:044b", " ", "\:043e", " ", 
    "\:0440\:0435\:043b\:044f\:0446\:0438\:043e\:043d\:043d\:043e\:0439", " ",
     "\:0431\:0430\:0437\:0435", " ", 
    RowBox[{"\:0434\:0430\:043d\:043d\:044b\:0445", "."}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "\:0434\:0430\:0435\:0442", " ", "\:043f\:043e\:043b\:043d\:0443\:044e", 
     " ", "\:0441\:0445\:0435\:043c\:0443", " ", "\:0431\:0430\:0437\:044b", 
     " ", "\:0434\:0430\:043d\:043d\:044b\:0445"}], ",", 
    RowBox[{
    "\:043d\:0430", " ", "\:043a\:043e\:0442\:043e\:0440\:0443\:044e", " ", 
     "\:0441\:0441\:044b\:043b\:0430\:0435\:0442\:0441\:044f", " ", "db"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.879134561550181*^9, 3.879134584524455*^9}, {
  3.8791347172899933`*^9, 3.8791347281610537`*^9}, {3.8791612690773125`*^9, 
  3.8791612710825624`*^9}},ExpressionUUID->"fbf3b259-6361-40a5-9337-\
e0c4fa6ef1ef"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["RelationalDatabase",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                10.869016023673117`, {0., 10.869016023673117`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[0.651, 0.651, 0.651], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 
                 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 3.5}, {20., 
                 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5,
                  21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 21.5}, {20., 
                 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5, 21.}}, {{20.5, 
                 22.5}, {5.5, 22.5}, {4.947999999999999, 22.5}, {4.5, 
                 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 2.947}, {
                 4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 2.5}, {21.052, 
                 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 21.5}, {21.5, 
                 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3},
                 {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2,
                 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                 0}, {1, 3, 3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 
                3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {
                5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 
                21.5}, {6., 21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 
                21.276}, {20.5, 21.}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {8., 
                17.015}, {8., 15.8}, {8., 9.2}, {8., 7.984999999999999}, {
                10.239, 7.}, {13., 7.}, {15.761, 7.}, {18., 
                7.984999999999999}, {18., 9.2}, {18., 15.8}, {18., 17.015}, {
                15.761, 18.}, {13., 18.}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 10.8633}, {8.6, 
                 11.833300000000001`}, {8.6, 12.500300000000001`}, {8.6, 
                 14.1133}, {9.586, 13.4603}, {11.151, 13.0463}, {13., 
                 13.0463}, {14.849, 13.0463}, {16.414, 13.4603}, {17.4, 
                 14.1133}, {17.4, 12.500300000000001`}, {17.4, 
                 11.833300000000001`}, {15.686, 10.8633}, {13., 10.8633}}, {{
                 17.4, 9.2273}, {17.4, 8.560300000000002}, {15.686, 7.5913}, {
                 13., 7.5913}, {10.314, 7.5913}, {8.6, 8.560300000000002}, {
                 8.6, 9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                 9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                 9.772300000000001}, {16.414, 10.1873}, {17.4, 10.8413}}, {{
                 13., 17.4093}, {15.686, 17.4093}, {17.4, 
                 16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                 15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                 14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {8.6, 
                 16.439300000000003`}, {10.314, 17.4093}, {13., 17.4093}}, {{
                 13., 18.5003}, {9.864, 18.5003}, {7.5, 17.3273}, {7.5, 
                 15.772300000000001`}, {7.5, 9.2273}, {7.5, 
                 7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                 6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                 7.673300000000001}, {18.5, 9.2273}, {18.5, 
                 15.772300000000001`}, {18.5, 17.3273}, {16.136, 18.5003}, {
                 13., 18.5003}}}]}}, AspectRatio -> Automatic, 
             ImageSize -> {25., 25.}, PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PostgreSQL\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {9.78211430170387, {0., 9.78211430170387}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[0.651, 0.651, 0.651], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 
                 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 3.5}, {20., 
                 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5,
                  21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 21.5}, {20., 
                 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5, 21.}}, {{20.5, 
                 22.5}, {5.5, 22.5}, {4.947999999999999, 22.5}, {4.5, 
                 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 2.947}, {
                 4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 2.5}, {21.052, 
                 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 21.5}, {21.5, 
                 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3,
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{
                0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1,
                 0}, {1, 3, 3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 
                3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {
                5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 
                21.5}, {6., 21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 
                21.276}, {20.5, 21.}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {8., 
                17.015}, {8., 15.8}, {8., 9.2}, {8., 7.984999999999999}, {
                10.239, 7.}, {13., 7.}, {15.761, 7.}, {18., 
                7.984999999999999}, {18., 9.2}, {18., 15.8}, {18., 17.015}, {
                15.761, 18.}, {13., 18.}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 10.8633}, {8.6, 
                 11.833300000000001`}, {8.6, 12.500300000000001`}, {8.6, 
                 14.1133}, {9.586, 13.4603}, {11.151, 13.0463}, {13., 
                 13.0463}, {14.849, 13.0463}, {16.414, 13.4603}, {17.4, 
                 14.1133}, {17.4, 12.500300000000001`}, {17.4, 
                 11.833300000000001`}, {15.686, 10.8633}, {13., 10.8633}}, {{
                 17.4, 9.2273}, {17.4, 8.560300000000002}, {15.686, 7.5913}, {
                 13., 7.5913}, {10.314, 7.5913}, {8.6, 8.560300000000002}, {
                 8.6, 9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                 9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                 9.772300000000001}, {16.414, 10.1873}, {17.4, 10.8413}}, {{
                 13., 17.4093}, {15.686, 17.4093}, {17.4, 
                 16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                 15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                 14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {8.6, 
                 16.439300000000003`}, {10.314, 17.4093}, {13., 17.4093}}, {{
                 13., 18.5003}, {9.864, 18.5003}, {7.5, 17.3273}, {7.5, 
                 15.772300000000001`}, {7.5, 9.2273}, {7.5, 
                 7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                 6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                 7.673300000000001}, {18.5, 9.2273}, {18.5, 
                 15.772300000000001`}, {18.5, 17.3273}, {16.136, 18.5003}, {
                 13., 18.5003}}}]}}, AspectRatio -> Automatic, 
             ImageSize -> {25., 25.}, PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PostgreSQL\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    TagBox["\"Tables: \"", "SummaryItemAnnotation"], 
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"router\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"router\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_r\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_r\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_r\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"startmar\""}, {
                    StyleBox["\"Nullable:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "True"}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endmar\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"router", 
                    Column[{
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"dataintro\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"dataintro\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_d\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_d\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_d\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"countproezd\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"countproezd\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"countproezd\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"datareg\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"dataintro", 
                    Column[{
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tranname\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> A\
utomatic], "\"tranname\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_tr\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_tr\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox["\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_tr\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"name\""}, {
                    StyleBox["\"Nullable:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "True"}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"number\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> {}], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"tranname", 
                    Column[{
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"indexes\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"indexes\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "\"id\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"data_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"data_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"data_id\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"route_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"route_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"route_id\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"work_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"work_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"work_id\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tran_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tran_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox["\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"tran_id\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"indexes", 
                    Column[{
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"worktime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"worktime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_w\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_w\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_w\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"starttime\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox["\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endtime\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"worktime", 
                    Column[{
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"transport\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"transport\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_t\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_t\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"INTEGER\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_t\""}, {
                    StyleBox["\"Nullable:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "False"}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> A\
utomatic], "\"name\""}}, AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"name\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"number\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"count\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"count\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"count\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"starttime\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endtime\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"datareg\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"startmar\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NativeTypeString:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox[
                    "\"Default:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "None"}, {
                    StyleBox[
                    "\"Indexed:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "False"}, {
                    StyleBox[
                    "\"Name:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endmar\""}, {
                    StyleBox[
                    "\"Nullable:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "True"}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"transport", 
                    Column[{
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues :> {}], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                  GridBoxAlignment -> {"Rows" -> {{Top}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RelationalDatabase[
   Association[
   "Tables" -> Association[
     "router" -> Association[
       "PrimaryKey" -> Association["ConstraintName" -> None, "Columns" -> {}],
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id_r" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "startmar" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
      "dataintro" -> 
      Association[
       "PrimaryKey" -> 
        Association["ConstraintName" -> None, "Columns" -> {"id_d"}], 
        "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id_d" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "countproezd" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
      "tranname" -> 
      Association[
       "PrimaryKey" -> 
        Association["ConstraintName" -> None, "Columns" -> {"id_tr"}], 
        "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id_tr" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "name" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
      "indexes" -> 
      Association[
       "PrimaryKey" -> 
        Association["ConstraintName" -> None, "Columns" -> {"id"}], 
        "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "data_id" -> 
          Association[
           "Nullable" -> True, "BackendType" -> "Integer", "NativeTypeString" -> 
            "INTEGER"], "route_id" -> 
          Association[
           "Nullable" -> True, "BackendType" -> "Integer", "NativeTypeString" -> 
            "INTEGER"], "work_id" -> 
          Association[
           "Nullable" -> True, "BackendType" -> "Integer", "NativeTypeString" -> 
            "INTEGER"], "tran_id" -> 
          Association[
           "Nullable" -> True, "BackendType" -> "Integer", "NativeTypeString" -> 
            "INTEGER"]], "Schema" -> "public"], "worktime" -> 
      Association[
       "PrimaryKey" -> 
        Association["ConstraintName" -> None, "Columns" -> {"id_w"}], 
        "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id_w" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "starttime" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
      "transport" -> 
      Association[
       "PrimaryKey" -> 
        Association["ConstraintName" -> None, "Columns" -> {"id_t"}], 
        "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
        "Columns" -> 
        Association[
         "id_t" -> Association[
           "Nullable" -> False, "BackendType" -> "Integer", 
            "NativeTypeString" -> "INTEGER"], "name" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "count" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "starttime" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "startmar" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
          Association[
           "Nullable" -> True, "BackendType" -> {"String", 255}, 
            "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"]], 
    "ID" -> "1pyvdb5ilfnz9"], 
   DatabaseReference[
    Association[
    "Backend" -> "postgresql", "Username" -> "postgres", "Password" -> "6675",
      "Host" -> "localhost", "Port" -> 5432, "Name" -> "citytransport", 
     "Options" -> Association[]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8791345658645163`*^9, 3.879134585224597*^9}, 
   3.879134729129797*^9, {3.8791347925139894`*^9, 3.87913479425006*^9}, {
   3.879134834434919*^9, 3.879134843837872*^9}, {3.8791350975658035`*^9, 
   3.87913511336314*^9}, {3.879135184704279*^9, 3.879135187178881*^9}, 
   3.8791352202226973`*^9, {3.8791366929189873`*^9, 3.879136694650677*^9}, {
   3.8792242496706305`*^9, 3.8792242528285446`*^9}},
 CellLabel->"Out[58]=",ExpressionUUID->"7f9c63d5-298c-4137-a98c-8199dbbf6e5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"entity", "=", 
  RowBox[{"EntityStore", "[", "bdObject", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "\:0441\:043e\:0437\:0434\:0430\:0435\:0442", " ", 
    "\:0445\:0440\:0430\:043d\:0438\:043b\:0438\:0449\:0435", " ", 
    "\:0441\:0443\:0449\:043d\:043e\:0441\:0442\:0435\:0439", " ", 
    "\:0438\:0437", " ", "\:0441\:0445\:0435\:043c\:044b", " ", 
    "\:0432\:043d\:0435\:0448\:043d\:0435\:0439", " ", 
    "\:0431\:0430\:0437\:044b", " ", 
    RowBox[{"\:0434\:0430\:043d\:043d\:044b\:0445", "."}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8791350717528286`*^9, 3.8791350792659693`*^9}, {
  3.8791613249528103`*^9, 
  3.879161327326473*^9}},ExpressionUUID->"4467a6a4-d3aa-4316-bdd3-\
0cfc1e3f0b29"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["EntityStore",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                10.869016023673117`, {0., 10.869016023673117`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[0.984, 0.969, 0.91], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17., 10.}, {
                6., 10.}, {4.343, 10.}, {3., 11.343}, {3., 13.}, {3., 20.}, {
                3., 21.657}, {4.343, 23.}, {6., 23.}, {17., 23.}, {18.657, 
                23.}, {20., 21.657}, {20., 20.}, {20., 13.}, {20., 11.343}, {
                18.657, 10.}, {17., 10.}}}]}, {
               FaceForm[{
                 RGBColor[0.996, 0.506, 0.004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 
                 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{6., 22.5}, {4.622, 22.5}, {3.5, 21.379}, {3.5, 
                 20.}, {3.5, 13.}, {3.5, 11.620999999999999`}, {4.622, 
                 10.5}, {6., 10.5}, {17., 10.5}, {18.379, 10.5}, {19.5, 
                 11.620999999999999`}, {19.5, 13.}, {19.5, 20.}, {19.5, 
                 21.379}, {18.379, 22.5}, {17., 22.5}}, {{17., 9.5}, {6., 
                 9.5}, {4.07, 9.5}, {2.5, 11.07}, {2.5, 13.}, {2.5, 20.}, {
                 2.5, 21.93}, {4.07, 23.5}, {6., 23.5}, {17., 23.5}, {18.93, 
                 23.5}, {20.5, 21.93}, {20.5, 20.}, {20.5, 13.}, {20.5, 
                 11.07}, {18.93, 9.5}, {17., 9.5}}}]}, {
               FaceForm[{
                 RGBColor[0.012, 0.612, 0.996], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5, 12.5}, {14.5, 12.5}, {
                14.5, 14.5}, {12.5, 14.5}}, {{8.5, 14.5}, {10.5, 14.5}, {10.5,
                 12.5}, {8.5, 12.5}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAFdBwitD6EbDLDzGwwdUNRj8E2gfE0cfCM0
9UZo5hsRoE3Q1MPMl0LjC+HgG6Gph/FVobQ+qnvR+XD/qqLxpdDUK2Lno6vH
MM8ITT063wRNvYkDAOvQJ0o=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{18., 12.}, {15.791, 12.}, {14., 
                11.104}, {14., 10.}, {14., 4.}, {14., 2.896000000000001}, {
                15.791, 2.}, {18., 2.}, {20.209, 2.}, {22., 
                2.896000000000001}, {22., 4.}, {22., 10.}, {22., 11.104}, {
                20.209, 12.}, {18., 12.}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}}}, {{{18., 5.5}, {15.997, 5.5}, {14.5, 
                 6.292}, {14.5, 7.}, {14.5, 8.411}, {15.312, 7.853}, {16.547, 
                 7.5}, {18., 7.5}, {19.453, 7.5}, {20.688, 7.853}, {21.5, 
                 8.411}, {21.5, 7.}, {21.5, 6.292}, {20.003, 5.5}, {18., 
                 5.5}}, {{21.5, 4.}, {21.5, 3.292}, {20.003, 2.5}, {18., 
                 2.5}, {15.997, 2.5}, {14.5, 3.292}, {14.5, 4.}, {14.5, 
                 5.411}, {15.312, 4.853}, {16.547, 4.5}, {18., 4.5}, {19.453, 
                 4.5}, {20.688, 4.853}, {21.5, 5.411}}, {{18., 11.5}, {20.003,
                  11.5}, {21.5, 10.708}, {21.5, 10.}, {21.5, 9.292}, {20.003, 
                 8.5}, {18., 8.5}, {15.997, 8.5}, {14.5, 9.292}, {14.5, 
                 10.}, {14.5, 10.708}, {15.997, 11.5}, {18., 11.5}}, {{18., 
                 12.5}, {15.435, 12.5}, {13.5, 11.425}, {13.5, 10.}, {13.5, 
                 4.}, {13.5, 2.575}, {15.435, 1.5}, {18., 1.5}, {20.565, 
                 1.5}, {22.5, 2.575}, {22.5, 4.}, {22.5, 10.}, {22.5, 
                 11.425}, {20.565, 12.5}, {18., 12.5}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {25., 25.}, 
             PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"RelationalDatabase: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"PostgreSQL\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"PostgreSQL\""}, {"", 
                    PaneBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["RelationalDatabase", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04], {
                    FaceForm[{
                    RGBColor[0.651, 0.651, 0.651], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 
                    3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {
                    5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 
                    21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5,
                     21.}}, {{20.5, 22.5}, {5.5, 22.5}, {4.947999999999999, 
                    22.5}, {4.5, 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 
                    2.947}, {4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 
                    2.5}, {21.052, 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 
                    21.5}, {21.5, 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.8670000000000001, 0.067, 0.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                    "]]}, {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {
                    20.5, 3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {
                    5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 
                    21.276}, {5.724, 21.5}, {6., 21.5}, {20., 21.5}, {20.276, 
                    21.5}, {20.5, 21.276}, {20.5, 21.}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {
                    8., 17.015}, {8., 15.8}, {8., 9.2}, {8., 
                    7.984999999999999}, {10.239, 7.}, {13., 7.}, {15.761, 
                    7.}, {18., 7.984999999999999}, {18., 9.2}, {18., 15.8}, {
                    18., 17.015}, {15.761, 18.}, {13., 18.}}}]}, {
                    FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 
                    10.8633}, {8.6, 11.833300000000001`}, {8.6, 
                    12.500300000000001`}, {8.6, 14.1133}, {9.586, 13.4603}, {
                    11.151, 13.0463}, {13., 13.0463}, {14.849, 13.0463}, {
                    16.414, 13.4603}, {17.4, 14.1133}, {17.4, 
                    12.500300000000001`}, {17.4, 11.833300000000001`}, {
                    15.686, 10.8633}, {13., 10.8633}}, {{17.4, 9.2273}, {17.4,
                     8.560300000000002}, {15.686, 7.5913}, {13., 7.5913}, {
                    10.314, 7.5913}, {8.6, 8.560300000000002}, {8.6, 
                    9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                    9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                    9.772300000000001}, {16.414, 10.1873}, {17.4, 
                    10.8413}}, {{13., 17.4093}, {15.686, 17.4093}, {17.4, 
                    16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                    15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                    14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {
                    8.6, 16.439300000000003`}, {10.314, 17.4093}, {13., 
                    17.4093}}, {{13., 18.5003}, {9.864, 18.5003}, {7.5, 
                    17.3273}, {7.5, 15.772300000000001`}, {7.5, 9.2273}, {7.5,
                     7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                    6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                    7.673300000000001}, {18.5, 9.2273}, {18.5, 
                    15.772300000000001`}, {18.5, 17.3273}, {16.136, 
                    18.5003}, {13., 18.5003}}}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 25.}, {0., 25.}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["6", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PostgreSQL\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04], {
                    FaceForm[{
                    RGBColor[0.651, 0.651, 0.651], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 
                    3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {
                    5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 
                    21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5,
                     21.}}, {{20.5, 22.5}, {5.5, 22.5}, {4.947999999999999, 
                    22.5}, {4.5, 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 
                    2.947}, {4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 
                    2.5}, {21.052, 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 
                    21.5}, {21.5, 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.8670000000000001, 0.067, 0.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                    "]]}, {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {
                    20.5, 3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {
                    5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 
                    21.276}, {5.724, 21.5}, {6., 21.5}, {20., 21.5}, {20.276, 
                    21.5}, {20.5, 21.276}, {20.5, 21.}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {
                    8., 17.015}, {8., 15.8}, {8., 9.2}, {8., 
                    7.984999999999999}, {10.239, 7.}, {13., 7.}, {15.761, 
                    7.}, {18., 7.984999999999999}, {18., 9.2}, {18., 15.8}, {
                    18., 17.015}, {15.761, 18.}, {13., 18.}}}]}, {
                    FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 
                    10.8633}, {8.6, 11.833300000000001`}, {8.6, 
                    12.500300000000001`}, {8.6, 14.1133}, {9.586, 13.4603}, {
                    11.151, 13.0463}, {13., 13.0463}, {14.849, 13.0463}, {
                    16.414, 13.4603}, {17.4, 14.1133}, {17.4, 
                    12.500300000000001`}, {17.4, 11.833300000000001`}, {
                    15.686, 10.8633}, {13., 10.8633}}, {{17.4, 9.2273}, {17.4,
                     8.560300000000002}, {15.686, 7.5913}, {13., 7.5913}, {
                    10.314, 7.5913}, {8.6, 8.560300000000002}, {8.6, 
                    9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                    9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                    9.772300000000001}, {16.414, 10.1873}, {17.4, 
                    10.8413}}, {{13., 17.4093}, {15.686, 17.4093}, {17.4, 
                    16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                    15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                    14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {
                    8.6, 16.439300000000003`}, {10.314, 17.4093}, {13., 
                    17.4093}}, {{13., 18.5003}, {9.864, 18.5003}, {7.5, 
                    17.3273}, {7.5, 15.772300000000001`}, {7.5, 9.2273}, {7.5,
                     7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                    6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                    7.673300000000001}, {18.5, 9.2273}, {18.5, 
                    15.772300000000001`}, {18.5, 17.3273}, {16.136, 
                    18.5003}, {13., 18.5003}}}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 25.}, {0., 25.}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["6", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PostgreSQL\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tables: \"", "SummaryItemAnnotation"], 
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"router\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"router\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_r\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_r\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_r\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"startmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {"Columns" -> {\
{0.2}}, "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"router", 
                    Column[{
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"dataintro\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"dataintro\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_d\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_d\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_d\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"countproezd\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"countproezd\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"countproezd\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"datareg\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"dataintro", 
                    Column[{
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tranname\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tranname\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_tr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_tr\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_tr\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"name\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"number\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"tranname", 
                    Column[{
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"indexes\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"indexes\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"data_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"data_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"data_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"route_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"route_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"route_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"work_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"work_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"work_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tran_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tran_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"tran_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"indexes", 
                    Column[{
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"worktime\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"worktime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_w\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_w\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_w\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"starttime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endtime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"worktime", 
                    Column[{
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"transport\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"transport\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_t\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_t\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_t\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"name\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"number\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"count\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"count\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"count\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"starttime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endtime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"datareg\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"startmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"transport", 
                    Column[{
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Rows" -> {{Top}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    RelationalDatabase[
                    Association[
                    "Tables" -> Association[
                    "router" -> Association[
                    "PrimaryKey" -> Association[
                    "ConstraintName" -> None, "Columns" -> {}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association["id_r" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "startmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "dataintro" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_d"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_d" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], 
                    "countproezd" -> Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "tranname" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_tr"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_tr" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "number" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "indexes" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "data_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "route_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "work_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "tran_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"]], "Schema" -> 
                    "public"], "worktime" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_w"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_w" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "starttime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endtime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "transport" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_t"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_t" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "number" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "count" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "starttime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endtime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "datareg" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "startmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"]], "ID" -> 
                    "1pyvdb5ilfnz9"], 
                    DatabaseReference[
                    Association[
                    "Backend" -> "postgresql", "Username" -> "postgres", 
                    "Password" -> "6675", "Host" -> "localhost", "Port" -> 
                    5432, "Name" -> "citytransport", "Options" -> 
                    Association[]]]], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"PostgreSQL", 
                    RelationalDatabase[
                    Association[
                    "Tables" -> 
                    Association[
                    "router" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association["ConstraintName" -> None, "Columns" -> {}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_r" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "startmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "dataintro" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_d"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_d" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "countproezd" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "tranname" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_tr"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_tr" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "indexes" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "data_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "route_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "work_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "tran_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"]], "Schema" -> "public"], 
                    "worktime" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_w"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_w" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "starttime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "transport" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_t"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_t" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "count" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "starttime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "startmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"]], "ID" -> "1pyvdb5ilfnz9"], 
                    DatabaseReference[
                    Association[
                    "Backend" -> "postgresql", "Username" -> "postgres", 
                    "Password" -> "6675", "Host" -> "localhost", "Port" -> 
                    5432, "Name" -> "citytransport", "Options" -> 
                    Association[]]]]}, False]], DynamicModuleValues :> {}], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {9.78211430170387, {0., 9.78211430170387}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.04], {
               FaceForm[{
                 RGBColor[0.984, 0.969, 0.91], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{17., 10.}, {
                6., 10.}, {4.343, 10.}, {3., 11.343}, {3., 13.}, {3., 20.}, {
                3., 21.657}, {4.343, 23.}, {6., 23.}, {17., 23.}, {18.657, 
                23.}, {20., 21.657}, {20., 20.}, {20., 13.}, {20., 11.343}, {
                18.657, 10.}, {17., 10.}}}]}, {
               FaceForm[{
                 RGBColor[0.996, 0.506, 0.004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 
                 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{6., 22.5}, {4.622, 22.5}, {3.5, 21.379}, {3.5, 
                 20.}, {3.5, 13.}, {3.5, 11.620999999999999`}, {4.622, 
                 10.5}, {6., 10.5}, {17., 10.5}, {18.379, 10.5}, {19.5, 
                 11.620999999999999`}, {19.5, 13.}, {19.5, 20.}, {19.5, 
                 21.379}, {18.379, 22.5}, {17., 22.5}}, {{17., 9.5}, {6., 
                 9.5}, {4.07, 9.5}, {2.5, 11.07}, {2.5, 13.}, {2.5, 20.}, {
                 2.5, 21.93}, {4.07, 23.5}, {6., 23.5}, {17., 23.5}, {18.93, 
                 23.5}, {20.5, 21.93}, {20.5, 20.}, {20.5, 13.}, {20.5, 
                 11.07}, {18.93, 9.5}, {17., 9.5}}}]}, {
               FaceForm[{
                 RGBColor[0.012, 0.612, 0.996], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5, 12.5}, {14.5, 12.5}, {
                14.5, 14.5}, {12.5, 14.5}}, {{8.5, 14.5}, {10.5, 14.5}, {10.5,
                 12.5}, {8.5, 12.5}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAFdBwitD6EbDLDzGwwdUNRj8E2gfE0cfCM0
9UZo5hsRoE3Q1MPMl0LjC+HgG6Gph/FVobQ+qnvR+XD/qqLxpdDUK2Lno6vH
MM8ITT063wRNvYkDAOvQJ0o=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}}}, {{{18., 12.}, {15.791, 12.}, {14., 
                11.104}, {14., 10.}, {14., 4.}, {14., 2.896000000000001}, {
                15.791, 2.}, {18., 2.}, {20.209, 2.}, {22., 
                2.896000000000001}, {22., 4.}, {22., 10.}, {22., 11.104}, {
                20.209, 12.}, {18., 12.}}}]}, {
               FaceForm[{
                 RGBColor[0.537, 0.537, 0.537], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 
                 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}}}, {{{18., 5.5}, {15.997, 5.5}, {14.5, 
                 6.292}, {14.5, 7.}, {14.5, 8.411}, {15.312, 7.853}, {16.547, 
                 7.5}, {18., 7.5}, {19.453, 7.5}, {20.688, 7.853}, {21.5, 
                 8.411}, {21.5, 7.}, {21.5, 6.292}, {20.003, 5.5}, {18., 
                 5.5}}, {{21.5, 4.}, {21.5, 3.292}, {20.003, 2.5}, {18., 
                 2.5}, {15.997, 2.5}, {14.5, 3.292}, {14.5, 4.}, {14.5, 
                 5.411}, {15.312, 4.853}, {16.547, 4.5}, {18., 4.5}, {19.453, 
                 4.5}, {20.688, 4.853}, {21.5, 5.411}}, {{18., 11.5}, {20.003,
                  11.5}, {21.5, 10.708}, {21.5, 10.}, {21.5, 9.292}, {20.003, 
                 8.5}, {18., 8.5}, {15.997, 8.5}, {14.5, 9.292}, {14.5, 
                 10.}, {14.5, 10.708}, {15.997, 11.5}, {18., 11.5}}, {{18., 
                 12.5}, {15.435, 12.5}, {13.5, 11.425}, {13.5, 10.}, {13.5, 
                 4.}, {13.5, 2.575}, {15.435, 1.5}, {18., 1.5}, {20.565, 
                 1.5}, {22.5, 2.575}, {22.5, 4.}, {22.5, 10.}, {22.5, 
                 11.425}, {20.565, 12.5}, {18., 12.5}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {25., 25.}, 
             PlotRange -> {{0., 25.}, {0., 25.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Type count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"RelationalDatabase: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"PostgreSQL\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"PostgreSQL\""}, {"", 
                    PaneBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["RelationalDatabase", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04], {
                    FaceForm[{
                    RGBColor[0.651, 0.651, 0.651], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 
                    3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {
                    5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 
                    21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5,
                     21.}}, {{20.5, 22.5}, {5.5, 22.5}, {4.947999999999999, 
                    22.5}, {4.5, 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 
                    2.947}, {4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 
                    2.5}, {21.052, 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 
                    21.5}, {21.5, 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.8670000000000001, 0.067, 0.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                    "]]}, {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {
                    20.5, 3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {
                    5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 
                    21.276}, {5.724, 21.5}, {6., 21.5}, {20., 21.5}, {20.276, 
                    21.5}, {20.5, 21.276}, {20.5, 21.}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {
                    8., 17.015}, {8., 15.8}, {8., 9.2}, {8., 
                    7.984999999999999}, {10.239, 7.}, {13., 7.}, {15.761, 
                    7.}, {18., 7.984999999999999}, {18., 9.2}, {18., 15.8}, {
                    18., 17.015}, {15.761, 18.}, {13., 18.}}}]}, {
                    FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 
                    10.8633}, {8.6, 11.833300000000001`}, {8.6, 
                    12.500300000000001`}, {8.6, 14.1133}, {9.586, 13.4603}, {
                    11.151, 13.0463}, {13., 13.0463}, {14.849, 13.0463}, {
                    16.414, 13.4603}, {17.4, 14.1133}, {17.4, 
                    12.500300000000001`}, {17.4, 11.833300000000001`}, {
                    15.686, 10.8633}, {13., 10.8633}}, {{17.4, 9.2273}, {17.4,
                     8.560300000000002}, {15.686, 7.5913}, {13., 7.5913}, {
                    10.314, 7.5913}, {8.6, 8.560300000000002}, {8.6, 
                    9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                    9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                    9.772300000000001}, {16.414, 10.1873}, {17.4, 
                    10.8413}}, {{13., 17.4093}, {15.686, 17.4093}, {17.4, 
                    16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                    15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                    14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {
                    8.6, 16.439300000000003`}, {10.314, 17.4093}, {13., 
                    17.4093}}, {{13., 18.5003}, {9.864, 18.5003}, {7.5, 
                    17.3273}, {7.5, 15.772300000000001`}, {7.5, 9.2273}, {7.5,
                     7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                    6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                    7.673300000000001}, {18.5, 9.2273}, {18.5, 
                    15.772300000000001`}, {18.5, 17.3273}, {16.136, 
                    18.5003}, {13., 18.5003}}}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 25.}, {0., 25.}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["6", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PostgreSQL\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04], {
                    FaceForm[{
                    RGBColor[0.651, 0.651, 0.651], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{20.5, 4.}, {20.5, 3.724}, {20.276, 
                    3.5}, {20., 3.5}, {6., 3.5}, {5.724, 3.5}, {5.5, 3.724}, {
                    5.5, 4.}, {5.5, 21.}, {5.5, 21.276}, {5.724, 21.5}, {6., 
                    21.5}, {20., 21.5}, {20.276, 21.5}, {20.5, 21.276}, {20.5,
                     21.}}, {{20.5, 22.5}, {5.5, 22.5}, {4.947999999999999, 
                    22.5}, {4.5, 22.053}, {4.5, 21.5}, {4.5, 3.5}, {4.5, 
                    2.947}, {4.947999999999999, 2.5}, {5.5, 2.5}, {20.5, 
                    2.5}, {21.052, 2.5}, {21.5, 2.947}, {21.5, 3.5}, {21.5, 
                    21.5}, {21.5, 22.053}, {21.052, 22.5}, {20.5, 22.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.8670000000000001, 0.067, 0.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, CompressedData["
1:eJxtj69Lg1EYhT80CZ84xjSM68VN5tjGfjnFYPksJkUwiRYRrQoGs2Ay2AUR
m1YRGVjEYBCrf4DJ7L/g2N05l/egMC7Pju/Zc0oHJ9tH40mSTAw+U4PPWII/
lw2f8+XwJjny9XH+4u1zUvI0az7d/j6sRw5v5K/Ng9zOy5LcL0k/2JGfP85e
74qzknv2ge3vefrYe+S6D9wTn574IsfeyOGNHPwW5X5R+sGObH2Re/bZvT0y
fOw9ct0H7opPV3yRY2/k8EYOfh2570g/2JGtL3LPPru3S4aPvUeu+0aczFuf
ARtf5mm2d7j6vXVVlr2R72/e5x5PS3Jfkn6wIxtf5p59dm+ZDB97D1/dB66K
T1V8kWPvguyNHPwqcl+RfrAjW1/knn127wIZPvYevroP3BCfhvgix9667I0c
/GpyX5N+sCNbX+SefXZvnQwfew9f3Qdui09bfJGn2e6wvyV7Iwe/ptw3pR/s
yNYXuWef3dsiw8few1f3gWfEZ0Z8kaej3mnZWyBvrFyu7f/k5T4v/WBHtr7I
Pfvs3gIZPvYevrrPy/foL8p9Uf4PnCPbfchT9oFtT5r1R79j7+GVE46e1s/z
7f/7vcv+AMXQVQk=
                    "]]}, {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{20.5, 4.}, {
                    20.5, 3.724}, {20.276, 3.5}, {20., 3.5}, {6., 3.5}, {
                    5.724, 3.5}, {5.5, 3.724}, {5.5, 4.}, {5.5, 21.}, {5.5, 
                    21.276}, {5.724, 21.5}, {6., 21.5}, {20., 21.5}, {20.276, 
                    21.5}, {20.5, 21.276}, {20.5, 21.}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 18.}, {10.239, 18.}, {
                    8., 17.015}, {8., 15.8}, {8., 9.2}, {8., 
                    7.984999999999999}, {10.239, 7.}, {13., 7.}, {15.761, 
                    7.}, {18., 7.984999999999999}, {18., 9.2}, {18., 15.8}, {
                    18., 17.015}, {15.761, 18.}, {13., 18.}}}]}, {
                    FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}}}, {{{13., 10.8633}, {10.314, 
                    10.8633}, {8.6, 11.833300000000001`}, {8.6, 
                    12.500300000000001`}, {8.6, 14.1133}, {9.586, 13.4603}, {
                    11.151, 13.0463}, {13., 13.0463}, {14.849, 13.0463}, {
                    16.414, 13.4603}, {17.4, 14.1133}, {17.4, 
                    12.500300000000001`}, {17.4, 11.833300000000001`}, {
                    15.686, 10.8633}, {13., 10.8633}}, {{17.4, 9.2273}, {17.4,
                     8.560300000000002}, {15.686, 7.5913}, {13., 7.5913}, {
                    10.314, 7.5913}, {8.6, 8.560300000000002}, {8.6, 
                    9.2273}, {8.6, 10.8413}, {9.586, 10.1873}, {11.151, 
                    9.772300000000001}, {13., 9.772300000000001}, {14.849, 
                    9.772300000000001}, {16.414, 10.1873}, {17.4, 
                    10.8413}}, {{13., 17.4093}, {15.686, 17.4093}, {17.4, 
                    16.439300000000003`}, {17.4, 15.772300000000001`}, {17.4, 
                    15.1053}, {15.686, 14.1363}, {13., 14.1363}, {10.314, 
                    14.1363}, {8.6, 15.1053}, {8.6, 15.772300000000001`}, {
                    8.6, 16.439300000000003`}, {10.314, 17.4093}, {13., 
                    17.4093}}, {{13., 18.5003}, {9.864, 18.5003}, {7.5, 
                    17.3273}, {7.5, 15.772300000000001`}, {7.5, 9.2273}, {7.5,
                     7.673300000000001}, {9.864, 6.500300000000001}, {13., 
                    6.500300000000001}, {16.136, 6.500300000000001}, {18.5, 
                    7.673300000000001}, {18.5, 9.2273}, {18.5, 
                    15.772300000000001`}, {18.5, 17.3273}, {16.136, 
                    18.5003}, {13., 18.5003}}}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 25.}, {0., 25.}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Table count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["6", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Backend: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PostgreSQL\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox["\"Tables: \"", "SummaryItemAnnotation"], 
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"router\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"router\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_r\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_r\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_r\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"startmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {"Columns" -> {\
{0.2}}, "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"router", 
                    Column[{
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_r"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"dataintro\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"dataintro\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_d\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_d\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_d\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"countproezd\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"countproezd\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"countproezd\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"datareg\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"dataintro", 
                    Column[{
                    OpenerView[{"id_d", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_d"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "countproezd"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tranname\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tranname\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_tr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_tr\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_tr\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"name\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"number\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"tranname", 
                    Column[{
                    OpenerView[{"id_tr", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_tr"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"indexes\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"indexes\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"data_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"data_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"data_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"route_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"route_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"route_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"work_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"work_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"work_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tran_id\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"tran_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"tran_id\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"indexes", 
                    Column[{
                    OpenerView[{"id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "data_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "route_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "work_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "tran_id"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"worktime\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"worktime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_w\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_w\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_w\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"starttime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endtime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"worktime", 
                    Column[{
                    OpenerView[{"id_w", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_w"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"transport\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"transport\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_t\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"id_t\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"INTEGER\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"id_t\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"name\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"number\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"count\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"count\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"count\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"starttime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endtime\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"datareg\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"startmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"NativeTypeString:\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\"VARCHAR(255)\""}, {
                    StyleBox["\"Default:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "None"}, {
                    StyleBox["\"Indexed:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "False"}, {
                    StyleBox["\"Name:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "\"endmar\""}, {
                    StyleBox["\"Nullable:\"", 
                    GrayLevel[0.5], StripOnInput -> False], "True"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"transport", 
                    Column[{
                    OpenerView[{"id_t", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "INTEGER"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "id_t"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], False}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "name"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "number"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "count"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "starttime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endtime"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "datareg"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "startmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["NativeTypeString:", 
                    GrayLevel[0.5]], "VARCHAR(255)"}, {
                    Style["Default:", 
                    GrayLevel[0.5]], None}, {
                    Style["Indexed:", 
                    GrayLevel[0.5]], False}, {
                    Style["Name:", 
                    GrayLevel[0.5]], "endmar"}, {
                    Style["Nullable:", 
                    GrayLevel[0.5]], True}}, Alignment -> Left]}]}]}, False]],
                     DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Rows" -> {{Top}}}, 
                    AutoDelete -> False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    RelationalDatabase[
                    Association[
                    "Tables" -> Association[
                    "router" -> Association[
                    "PrimaryKey" -> Association[
                    "ConstraintName" -> None, "Columns" -> {}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association["id_r" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "startmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "dataintro" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_d"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_d" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], 
                    "countproezd" -> Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "tranname" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_tr"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_tr" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "number" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "indexes" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "data_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "route_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "work_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "tran_id" -> 
                    Association["Nullable" -> True, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"]], "Schema" -> 
                    "public"], "worktime" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_w"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_w" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "starttime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endtime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"], "transport" -> 
                    Association["PrimaryKey" -> 
                    Association["ConstraintName" -> None, 
                    "Columns" -> {"id_t"}], "ForeignKeys" -> {}, 
                    "UniquenessConstraints" -> {}, "Indexes" -> {}, "Columns" -> 
                    Association["id_t" -> 
                    Association["Nullable" -> False, "BackendType" -> 
                    "Integer", "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "number" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "count" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "starttime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endtime" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "datareg" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "startmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"], "endmar" -> 
                    Association["Nullable" -> True, 
                    "BackendType" -> {"String", 255}, "NativeTypeString" -> 
                    "VARCHAR(255)"]], "Schema" -> "public"]], "ID" -> 
                    "1pyvdb5ilfnz9"], 
                    DatabaseReference[
                    Association[
                    "Backend" -> "postgresql", "Username" -> "postgres", 
                    "Password" -> "6675", "Host" -> "localhost", "Port" -> 
                    5432, "Name" -> "citytransport", "Options" -> 
                    Association[]]]], Editable -> False, SelectWithContents -> 
                    True, Selectable -> False], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"PostgreSQL", 
                    RelationalDatabase[
                    Association[
                    "Tables" -> 
                    Association[
                    "router" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association["ConstraintName" -> None, "Columns" -> {}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_r" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "startmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "dataintro" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_d"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_d" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "countproezd" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "tranname" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_tr"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_tr" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "indexes" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "data_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "route_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "work_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "tran_id" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"]], "Schema" -> "public"], 
                    "worktime" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_w"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_w" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "starttime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"], "transport" -> 
                    Association[
                    "PrimaryKey" -> 
                    Association[
                    "ConstraintName" -> None, "Columns" -> {"id_t"}], 
                    "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, 
                    "Indexes" -> {}, "Columns" -> 
                    Association[
                    "id_t" -> Association[
                    "Nullable" -> False, "BackendType" -> "Integer", 
                    "NativeTypeString" -> "INTEGER"], "name" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "count" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "starttime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "startmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
                    Association[
                    "Nullable" -> True, "BackendType" -> {"String", 255}, 
                    "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> 
                    "public"]], "ID" -> "1pyvdb5ilfnz9"], 
                    DatabaseReference[
                    Association[
                    "Backend" -> "postgresql", "Username" -> "postgres", 
                    "Password" -> "6675", "Host" -> "localhost", "Port" -> 
                    5432, "Name" -> "citytransport", "Options" -> 
                    Association[]]]]}, False]], DynamicModuleValues :> {}], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    TagBox["\"Types: \"", "SummaryItemAnnotation"], 
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"router\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"router\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_r\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"id_r\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"router\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_r\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_r"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"router\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"startmar\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "startmar"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"router\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endmar\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endmar"}}, Alignment -> Left]}, False]],
                     DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"router", 
                    Column[{
                    OpenerView[{"id_r", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_r"}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "startmar"}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "router"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endmar"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"dataintro\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"dataintro\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_d\"", StripOnInput -> False, FontWeight -> Bold]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_d\"", StripOnInput -> False, FontWeight -> Bold]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"dataintro\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_d\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Style["id_d", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_d"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"countproezd\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"countproezd\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"dataintro\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"countproezd\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "countproezd"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"dataintro\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"datareg\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "datareg"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"dataintro", 
                    Column[{
                    OpenerView[{
                    Style["id_d", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_d"}}, Alignment -> Left]}], 
                    OpenerView[{"countproezd", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "countproezd"}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "dataintro"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "datareg"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tranname\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tranname\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_tr\"", StripOnInput -> False, FontWeight -> Bold]}},
                     AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_tr\"", StripOnInput -> False, FontWeight -> 
                    Bold]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"tranname\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_tr\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Style["id_tr", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_tr"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"tranname\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"name\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "name"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"tranname\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"number\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "number"}}, Alignment -> Left]}, False]],
                     DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"tranname", 
                    Column[{
                    OpenerView[{
                    Style["id_tr", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_tr"}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "name"}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "tranname"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "number"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"indexes\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"indexes\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id\"", StripOnInput -> False, FontWeight -> Bold]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id\"", StripOnInput -> False, FontWeight -> Bold]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"indexes\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], "\"id\""}}, 
                    AutoDelete -> False, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Style["id", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"data_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"data_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"indexes\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"data_id\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "data_id"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"route_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"route_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"indexes\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"route_id\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "route_id"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"work_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"work_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"indexes\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"work_id\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "work_id"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tran_id\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"tran_id\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"indexes\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"tran_id\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "tran_id"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"indexes", 
                    Column[{
                    OpenerView[{
                    Style["id", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id"}}, Alignment -> Left]}], 
                    OpenerView[{"data_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "data_id"}}, Alignment -> Left]}], 
                    OpenerView[{"route_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "route_id"}}, Alignment -> Left]}], 
                    OpenerView[{"work_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "work_id"}}, Alignment -> Left]}], 
                    OpenerView[{"tran_id", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "indexes"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "tran_id"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"worktime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"worktime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_w\"", StripOnInput -> False, FontWeight -> Bold]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_w\"", StripOnInput -> False, FontWeight -> Bold]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"worktime\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_w\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Style["id_w", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_w"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"worktime\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"starttime\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "starttime"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"worktime\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endtime\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endtime"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}}, DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"worktime", 
                    Column[{
                    OpenerView[{
                    Style["id_w", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_w"}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "starttime"}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "worktime"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endtime"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"transport\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"transport\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_t\"", StripOnInput -> False, FontWeight -> Bold]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], 
                    StyleBox[
                    "\"id_t\"", StripOnInput -> False, FontWeight -> Bold]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"id_t\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{
                    Style["id_t", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_t"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"name\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"name\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "name"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"number\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"number\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "number"}}, Alignment -> Left]}, False]],
                     DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"count\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"count\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"count\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "count"}}, Alignment -> Left]}, False]], 
                    DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"starttime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"starttime\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "starttime"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endtime\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endtime\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endtime"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"datareg\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"datareg\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "datareg"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"startmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"startmar\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "startmar"}}, Alignment -> Left]}, 
                    False]], DynamicModuleValues :> Automatic], 
                    Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, 
                    AutoAction -> False, ContinuousAction -> False, Enabled -> 
                    Automatic], "\"endmar\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PropertySourceType:\"", StripOnInput -> False, 
                    LineColor -> GrayLevel[0.5], FrontFaceColor -> 
                    GrayLevel[0.5], BackFaceColor -> GrayLevel[0.5], 
                    GraphicsColor -> GrayLevel[0.5], FontColor -> 
                    GrayLevel[0.5]], "\"Column\""}, {
                    StyleBox[
                    "\"ColumnPrefix:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"transport\""}, {
                    StyleBox[
                    "\"ColumnName:\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.5], FrontFaceColor -> GrayLevel[0.5], 
                    BackFaceColor -> GrayLevel[0.5], GraphicsColor -> 
                    GrayLevel[0.5], FontColor -> GrayLevel[0.5]], 
                    "\"endmar\""}}, AutoDelete -> False, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Grid"], ImageMargins -> 0]}}, 
                    AutoDelete -> False, BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endmar"}}, Alignment -> Left]}, False]],
                     DynamicModuleValues :> Automatic], Setting[#, {0}]& ]}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, AutoDelete -> False, 
                    BaselinePosition -> {1, 1}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> "OpenerView", ImageMargins -> 0, 
                    ImageSize -> Automatic], Deployed -> False, StripOnInput -> 
                    False], 
                    OpenerView[{"transport", 
                    Column[{
                    OpenerView[{
                    Style["id_t", Bold], 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "id_t"}}, Alignment -> Left]}], 
                    OpenerView[{"name", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "name"}}, Alignment -> Left]}], 
                    OpenerView[{"number", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "number"}}, Alignment -> Left]}], 
                    OpenerView[{"count", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "count"}}, Alignment -> Left]}], 
                    OpenerView[{"starttime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "starttime"}}, Alignment -> Left]}], 
                    OpenerView[{"endtime", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endtime"}}, Alignment -> Left]}], 
                    OpenerView[{"datareg", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "datareg"}}, Alignment -> Left]}], 
                    OpenerView[{"startmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "startmar"}}, Alignment -> Left]}], 
                    OpenerView[{"endmar", 
                    Grid[{{
                    Style["PropertySourceType:", 
                    GrayLevel[0.5]], "Column"}, {
                    Style["ColumnPrefix:", 
                    GrayLevel[0.5]], "transport"}, {
                    Style["ColumnName:", 
                    GrayLevel[0.5]], "endmar"}}, Alignment -> Left]}]}]}, 
                    False]], DynamicModuleValues :> {}], Setting[#, {0}]& ]}},
                     DefaultBaseStyle -> "Column", 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, AutoDelete -> False, 
                  GridBoxAlignment -> {"Rows" -> {{Top}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  EntityStore[
   Association[
   "Types" -> Association[
     "router" -> Association[
       "EntityTypeExtractor" -> "router", "CanonicalNameProperties" -> {}, 
        "Properties" -> 
        Association[
         "id_r" -> Association[
           "ColumnPrefix" -> "router", "ColumnName" -> "id_r"], "startmar" -> 
          Association["ColumnPrefix" -> "router", "ColumnName" -> "startmar"],
           "endmar" -> 
          Association["ColumnPrefix" -> "router", "ColumnName" -> "endmar"]]],
       "dataintro" -> 
      Association[
       "EntityTypeExtractor" -> "dataintro", 
        "CanonicalNameProperties" -> {"id_d"}, "Properties" -> 
        Association[
         "id_d" -> Association[
           "ColumnPrefix" -> "dataintro", "ColumnName" -> "id_d"], 
          "countproezd" -> 
          Association[
           "ColumnPrefix" -> "dataintro", "ColumnName" -> "countproezd"], 
          "datareg" -> 
          Association[
           "ColumnPrefix" -> "dataintro", "ColumnName" -> "datareg"]]], 
      "tranname" -> 
      Association[
       "EntityTypeExtractor" -> "tranname", 
        "CanonicalNameProperties" -> {"id_tr"}, "Properties" -> 
        Association[
         "id_tr" -> Association[
           "ColumnPrefix" -> "tranname", "ColumnName" -> "id_tr"], "name" -> 
          Association["ColumnPrefix" -> "tranname", "ColumnName" -> "name"], 
          "number" -> 
          Association[
           "ColumnPrefix" -> "tranname", "ColumnName" -> "number"]]], 
      "indexes" -> 
      Association[
       "EntityTypeExtractor" -> "indexes", 
        "CanonicalNameProperties" -> {"id"}, "Properties" -> 
        Association[
         "id" -> Association[
           "ColumnPrefix" -> "indexes", "ColumnName" -> "id"], "data_id" -> 
          Association["ColumnPrefix" -> "indexes", "ColumnName" -> "data_id"],
           "route_id" -> 
          Association[
           "ColumnPrefix" -> "indexes", "ColumnName" -> "route_id"], 
          "work_id" -> 
          Association["ColumnPrefix" -> "indexes", "ColumnName" -> "work_id"],
           "tran_id" -> 
          Association[
           "ColumnPrefix" -> "indexes", "ColumnName" -> "tran_id"]]], 
      "worktime" -> 
      Association[
       "EntityTypeExtractor" -> "worktime", 
        "CanonicalNameProperties" -> {"id_w"}, "Properties" -> 
        Association[
         "id_w" -> Association[
           "ColumnPrefix" -> "worktime", "ColumnName" -> "id_w"], "starttime" -> 
          Association[
           "ColumnPrefix" -> "worktime", "ColumnName" -> "starttime"], 
          "endtime" -> 
          Association[
           "ColumnPrefix" -> "worktime", "ColumnName" -> "endtime"]]], 
      "transport" -> 
      Association[
       "EntityTypeExtractor" -> "transport", 
        "CanonicalNameProperties" -> {"id_t"}, "Properties" -> 
        Association[
         "id_t" -> Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "id_t"], "name" -> 
          Association["ColumnPrefix" -> "transport", "ColumnName" -> "name"], 
          "number" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "number"], "count" -> 
          Association["ColumnPrefix" -> "transport", "ColumnName" -> "count"],
           "starttime" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "starttime"], 
          "endtime" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "endtime"], 
          "datareg" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "datareg"], 
          "startmar" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "startmar"], 
          "endmar" -> 
          Association[
           "ColumnPrefix" -> "transport", "ColumnName" -> "endmar"]]]]], 
   RelationalDatabase[
    Association[
    "Tables" -> Association[
      "router" -> Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id_r" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "startmar" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
       "dataintro" -> 
       Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {"id_d"}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id_d" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "countproezd" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
       "tranname" -> 
       Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {"id_tr"}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id_tr" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "name" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
       "indexes" -> 
       Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {"id"}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "data_id" -> 
           Association[
            "Nullable" -> True, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "route_id" -> 
           Association[
            "Nullable" -> True, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "work_id" -> 
           Association[
            "Nullable" -> True, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "tran_id" -> 
           Association[
            "Nullable" -> True, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"]], "Schema" -> "public"], 
       "worktime" -> 
       Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {"id_w"}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id_w" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "starttime" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"], 
       "transport" -> 
       Association[
        "PrimaryKey" -> 
         Association["ConstraintName" -> None, "Columns" -> {"id_t"}], 
         "ForeignKeys" -> {}, "UniquenessConstraints" -> {}, "Indexes" -> {}, 
         "Columns" -> 
         Association[
          "id_t" -> Association[
            "Nullable" -> False, "BackendType" -> "Integer", 
             "NativeTypeString" -> "INTEGER"], "name" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "number" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "count" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "starttime" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "endtime" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "datareg" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "startmar" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"], "endmar" -> 
           Association[
            "Nullable" -> True, "BackendType" -> {"String", 255}, 
             "NativeTypeString" -> "VARCHAR(255)"]], "Schema" -> "public"]], 
     "ID" -> "1pyvdb5ilfnz9"], 
    DatabaseReference[
     Association[
     "Backend" -> "postgresql", "Username" -> "postgres", "Password" -> 
      "6675", "Host" -> "localhost", "Port" -> 5432, "Name" -> 
      "citytransport", "Options" -> Association[]]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.879135081422509*^9, 3.879135116711135*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"87e50e9c-c33e-40dc-b425-1cf67a4a5fa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"EntityRegister", "[", "entity", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "\:0440\:0435\:0433\:0438\:0441\:0442\:0440\:0438\:0440\:0443\:0435\:0442\
", " ", "\:0441\:0443\:0449\:043d\:043e\:0441\:0442\:0438", " ", "\:0432", 
     " ", "\:0445\:0440\:0430\:043d\:0438\:043b\:0438\:0449\:0435", " ", 
     "\:0441\:0443\:0449\:043d\:043e\:0441\:0442\:0435\:0439"}], ",", 
    RowBox[{
    "\:0447\:0442\:043e\:0431\:044b", " ", "\:043a", " ", 
     "\:043d\:0438\:043c", " ", "\:043c\:043e\:0436\:043d\:043e", " ", 
     "\:0431\:044b\:043b\:043e", " ", 
     "\:043f\:043e\:043b\:0443\:0447\:0438\:0442\:044c", " ", 
     "\:043f\:0440\:044f\:043c\:043e\:0439", " ", 
     "\:0434\:043e\:0441\:0442\:0443\:043f", " ", "\:0441", " ", 
     "\:043f\:043e\:043c\:043e\:0449\:044c\:044e", " ", 
     RowBox[{"Entity", "."}]}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8791351374566183`*^9, 3.879135139154955*^9}, 
   3.8791613505981073`*^9, {3.879161473613489*^9, 
   3.8791614795733085`*^9}},ExpressionUUID->"cdfbfb23-ddd3-4ff8-b92c-\
6e9b07b6fc86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"router\"\>", ",", "\<\"dataintro\"\>", ",", "\<\"tranname\"\>",
    ",", "\<\"indexes\"\>", ",", "\<\"worktime\"\>", 
   ",", "\<\"transport\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8791351396218114`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"31610e66-0b46-440a-b7ce-d453e1e57b75"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"EntityValue", "[", " ", "\[IndentingNewLine]", "\t", 
  RowBox[{"\"\<tranname\>\"", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"{", 
    RowBox[{"\"\<id_tr\>\"", ",", "\"\<name\>\"", ",", "\"\<number\>\""}], 
    "}"}], ",", "\[IndentingNewLine]", "\t", "\"\<Dataset\>\""}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "\:0434\:0430\:0435\:0442", " ", "\:0441\:043f\:0438\:0441\:043e\:043a", 
    " ", "\:0437\:043d\:0430\:0447\:0435\:043d\:0438\:0439", " ", 
    "\:0443\:043a\:0430\:0437\:0430\:043d\:043d\:043e\:0433\:043e", " ", 
    "\:0441\:0432\:043e\:0439\:0441\:0442\:0432\:0430", " ", 
    "\:0434\:043b\:044f", " ", "\:043a\:0430\:0436\:0434\:043e\:0433\:043e", 
    " ", "\:0438\:0437", " ", 
    RowBox[{
     RowBox[{"Subscript", "[", 
      RowBox[{"entity", ",", "i"}], "]"}], "."}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.879135189153552*^9, 3.8791352336863375`*^9}, {
  3.8791615896349273`*^9, 
  3.8791615915730247`*^9}},ExpressionUUID->"2d208638-7acc-4864-a4de-\
3d4bbe5a9289"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      Entity["tranname", 1] -> 
       Association[
        "id_tr" -> 1, "name" -> "\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
         "number" -> "12"], Entity["tranname", 2] -> 
       Association[
        "id_tr" -> 2, "name" -> "\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
         "number" -> "25"], Entity["tranname", 4] -> 
       Association[
        "id_tr" -> 4, "name" -> 
         "\:0442\:0440\:043e\:043b\:043b\:0435\:0439\:0431\:0443\:0441", 
         "number" -> "6"]], "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "id_tr"} -> 
        1, {All, "name"} -> 1, {All, "number"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[90], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[
            Association[
            "id_tr" -> TypeSystem`PackageScope`AtomShape[34], "name" -> 
             TypeSystem`PackageScope`AtomShape[112.00000000000001`], "number" -> 
             TypeSystem`PackageScope`AtomShape[33.6]]], 
           DirectedInfinity[1], 3, {All}]]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        Entity["tranname"]], 
       TypeSystem`Struct[{"id_tr", "name", "number"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 3], "Meta" -> Association[], "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{
          Key[
           Entity["tranname", 4]], "id_tr"} -> 1, {
          Key[
           Entity["tranname", 4]], "name"} -> 1, {
          Key[
           Entity["tranname", 4]], "number"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`RowShape[
         Association[
         "id_tr" -> TypeSystem`PackageScope`AtomShape[34], "name" -> 
          TypeSystem`PackageScope`AtomShape[112.00000000000001`], "number" -> 
          TypeSystem`PackageScope`AtomShape[33.6]]], 
        DirectedInfinity[1], 3, {}]], "Type" -> 
     TypeSystem`Struct[{"id_tr", "name", "number"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String]}], "Path" -> {
       Key[
        Entity["tranname", 4]]}, "DisplayedRowCount" -> DirectedInfinity[1], 
     "DisplayedColumnCount" -> 3, "DataRowCount" -> 3, "DataColumnCount" -> 3,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {
     Key[
      Entity["tranname", 4]]}, TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
    1, TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id_tr", 
                  Style[
                  "id_tr", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["tranname", 4]], "id_tr"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], "id_tr"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["tranname", 4]], "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], "name"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["number", 
                  Style[
                  "number", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["tranname", 4]], "number"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], "number"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], 
                 Key["id_tr"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\:0442\:0440\:043e\:043b\:043b\:0435\:0439\:0431\:0443\:0441", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["6", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["tranname", 4]], 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{213., {41.9206298828125, 47.0793701171875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{213., {41.9206298828125, 47.0793701171875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8791352071632137`*^9, 3.8791352361335955`*^9}},
 CellLabel->"Out[65]=",ExpressionUUID->"ade5a4e4-8a73-4553-a7ff-c448ee77fc9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"conn", ",", "\"\<SELECT * FROM transport\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.879135338497321*^9, 3.879135343178484*^9}, 
   3.879161745223583*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"512416ef-32e7-4b0f-b021-9927074aeb06"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "id_t" -> 15, "name" -> "\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
        "number" -> "12", "count" -> "0.75", "starttime" -> "9:30", "endtime" -> 
        "18:45", "datareg" -> "12.05.2022", "startmar" -> 
        "\:042e\:0436\:043d\:044b\:0439", "endmar" -> 
        "\:0413\:0430\:0437\:043e\:0430\:043f\:043f\:0430\:0440\:0430\:0442"], 
       Association[
       "id_t" -> 16, "name" -> "\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
        "number" -> "25", "count" -> "0.70", "starttime" -> "5:15", "endtime" -> 
        "16:56", "datareg" -> "12.12.2021", "startmar" -> 
        "\:041e\:0431\:043b \:0431\:043e\:043b\:044c\:043d\:0438\:0446\:0430",
         "endmar" -> "\:0426\:0423\:041c"], 
       Association[
       "id_t" -> 17, "name" -> 
        "\:0442\:0440\:043e\:043b\:043b\:0435\:0439\:0431\:0443\:0441", 
        "number" -> "5", "count" -> "0.75", "starttime" -> "14:30", "endtime" -> 
        "01:22", "datareg" -> "04.11.2020", "startmar" -> 
        "\:0426\:0423\:041c", "endmar" -> 
        "\:0426\:0432\:0435\:0442\:043e\:0442\:0440\:043e\:043d"]}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "id_t"} -> 1, {All, "name"} -> 1, {All, "number"} -> 
        1, {All, "count"} -> 1, {All, "starttime"} -> 1, {All, "endtime"} -> 
        1, {All, "datareg"} -> 1, {All, "startmar"} -> 1, {All, "endmar"} -> 
        1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "id_t" -> TypeSystem`PackageScope`AtomShape[34], "name" -> 
            TypeSystem`PackageScope`AtomShape[112.00000000000001`], "number" -> 
            TypeSystem`PackageScope`AtomShape[33.6], "count" -> 
            TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
            "starttime" -> 
            TypeSystem`PackageScope`AtomShape[56.00000000000001], "endtime" -> 
            TypeSystem`PackageScope`AtomShape[56.00000000000001], "datareg" -> 
            TypeSystem`PackageScope`AtomShape[112.00000000000001`], 
            "startmar" -> TypeSystem`PackageScope`AtomShape[134.4], "endmar" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`]]], 
          DirectedInfinity[1], 9, {All}]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "id_t", "name", "number", "count", "starttime", "endtime", "datareg", 
         "startmar", "endmar"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 3], "Meta" -> Association[], "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "id_t"} -> 1, {All, "name"} -> 1, {All, "number"} -> 
        1, {All, "count"} -> 1, {All, "starttime"} -> 1, {All, "endtime"} -> 
        1, {All, "datareg"} -> 1, {All, "startmar"} -> 1, {All, "endmar"} -> 
        1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "id_t" -> TypeSystem`PackageScope`AtomShape[34], "name" -> 
            TypeSystem`PackageScope`AtomShape[112.00000000000001`], "number" -> 
            TypeSystem`PackageScope`AtomShape[33.6], "count" -> 
            TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
            "starttime" -> 
            TypeSystem`PackageScope`AtomShape[56.00000000000001], "endtime" -> 
            TypeSystem`PackageScope`AtomShape[56.00000000000001], "datareg" -> 
            TypeSystem`PackageScope`AtomShape[112.00000000000001`], 
            "startmar" -> TypeSystem`PackageScope`AtomShape[134.4], "endmar" -> 
            TypeSystem`PackageScope`AtomShape[123.20000000000002`]]], 
          DirectedInfinity[1], 9, {All}]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "id_t", "name", "number", "count", "starttime", "endtime", "datareg", 
         "startmar", "endmar"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 3], "Path" -> {}, "DisplayedRowCount" -> 
     3, "DisplayedColumnCount" -> 9, "DataRowCount" -> 3, "DataColumnCount" -> 
     9, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id_t", 
                  Style[
                  "id_t", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "id_t"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "id_t"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["number", 
                  Style[
                  "number", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "number"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "number"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["count", 
                  Style[
                  "count", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "count"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "count"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["starttime", 
                  Style[
                  "starttime", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "starttime"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "starttime"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["endtime", 
                  Style[
                  "endtime", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "endtime"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "endtime"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["datareg", 
                  Style[
                  "datareg", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "datareg"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "datareg"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["startmar", 
                  Style[
                  "startmar", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "startmar"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "startmar"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["endmar", 
                  Style[
                  "endmar", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "endmar"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "endmar"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["15"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["id_t"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["12", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0.75", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["count"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["9:30", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["starttime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["18:45", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["endtime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["12.05.2022", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["datareg"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\:042e\:0436\:043d\:044b\:0439", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["startmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\:0413\:0430\:0437\:043e\:0430\:043f\:043f\:0430\:0440\:0430\
\:0442", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["endmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["16"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["id_t"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\:0430\:0432\:0442\:043e\:0431\:0443\:0441", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["25", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0.70", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["count"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["5:15", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["starttime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["16:56", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["endtime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["12.12.2021", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["datareg"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\:041e\:0431\:043b \:0431\:043e\:043b\:044c\:043d\:0438\:0446\
\:0430", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["startmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\:0426\:0423\:041c", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["endmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["17"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["id_t"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\:0442\:0440\:043e\:043b\:043b\:0435\:0439\:0431\:0443\:0441", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["5", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0.75", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["count"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["14:30", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["starttime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01:22", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["endtime"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["04.11.2020", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["datareg"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\:0426\:0423\:041c", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["startmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\:0426\:0432\:0435\:0442\:043e\:0442\:0440\:043e\:043d", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["endmar"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{613., {56.9206298828125, 62.0793701171875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{613., {56.9206298828125, 62.0793701171875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8791353450356574`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"3e71f617-1d8e-4c1e-8963-b7c6d8c43cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DatabaseDisconnect", "[", "conn", "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"516e3391-79ed-40d9-8d5f-ec8ee2fd972b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Database disconnection was successful.\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"DatabaseSuccess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Database disconnection was successful.\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"DatabaseSuccess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success["DatabaseSuccess", 
   Association[
   "MessageTemplate" :> MessageName[DatabaseReference, "disc"], 
    "MessageParameters" :> {}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8791353639047947`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"b977245d-f2f6-44ce-bb97-072d8f3dcbcb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Wolfram", " ", "alpha"}]], "Input",
 CellChangeTimes->{{3.8791367043146334`*^9, 
  3.8791367099804106`*^9}},ExpressionUUID->"0f4000a9-bf3d-4427-844f-\
a308d0023775"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"WolframAlpha", "[", 
   RowBox[{"\"\<size of the sun\>\"", ",", " ", "\"\<ShortAnswer\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8791367134167147`*^9, 3.879136760631151*^9}, {
  3.8791367940050917`*^9, 3.879136794489704*^9}, {3.879136839375204*^9, 
  3.879136866515761*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"b7cf4906-4e28-4828-addf-1df00e8bba7f"],

Cell[BoxData["\<\"695700 kilometers\"\>"], "Output",
 CellChangeTimes->{{3.8791367457488804`*^9, 3.8791367640176697`*^9}, 
   3.879136797923191*^9, 3.8791368685801077`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"fb8ff56a-8291-497a-8a54-951ee8c6d656"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\:041f\:043e\:043b\:043d\:044b\:0439", " ", 
  "\:0440\:0435\:0437\:0443\:043b\:044c\:0442\:0430\:0442", " ", 
  "\:0437\:0430\:043f\:0440\:043e\:0441\:0430"}]], "Input",
 CellChangeTimes->{{3.8791380712215295`*^9, 
  3.879138085077645*^9}},ExpressionUUID->"d560712e-69e7-477e-90d8-\
89885f69ecaf"],

Cell[CellGroupData[{

Cell["size of the sun ", "WolframAlphaLong",
 CellChangeTimes->{{3.8791377960961385`*^9, 3.8791377974571395`*^9}, {
  3.879137848074342*^9, 3.8791378764883103`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"39bd07d7-a8c6-413a-a8d0-4ecf22be649f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "size of the sun", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Star\", \"Sun\"][EntityProperty[\"Star\", \"Radius\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"Sun\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {StarData, "Sun"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"average radius\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"StarData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"HYGCatalog"}], "\n    ", 
         XMLElement["datasource", {}, {"MonitoringStellarOrbits"}], "\n    ", 
         XMLElement["datasource", {}, {"R136StarCluster"}], "\n    ", 
         XMLElement["datasource", {}, {"StarsAndTheirSpectra"}], "\n    ", 
         XMLElement["datasource", {}, {"StellarClassificationTable"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["695700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "695700", "SRString" -> "695700"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                  Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "Result__Show non-metric"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Unit conversions", "scanner" -> "Unit", "id" -> 
     "UnitConversion", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox["432300", 
                   $CellContext`TagBoxWrapper[
                   "StringBoxes" -> "432300", "SRString" -> "432300"]], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"miles\"", {
                   FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
              SyntaxForm -> Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, ZeroWidthTimes -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox[
                   RowBox[{"6.957", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                   $CellContext`TagBoxWrapper[
                   "StringBoxes" -> RowBox[{"6.957", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "6.957 times 10 to the 8"], SyntaxForm -> CenterDot], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"meters\"", {
                   FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
              SyntaxForm -> Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, ZeroWidthTimes -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Corresponding main-sequence star properties", 
     "scanner" -> "UnitInformation", "id" -> 
     "StellarRadiusProperties:QuantityData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"StellarClassificationTable"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"color\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 GraphicsBox[{
                   EdgeForm[
                    GrayLevel[0.7]], 
                   RGBColor[1., 0.9607843137254902, 0.9254901960784314], 
                   RectangleBox[{0, 0}]}, 
                  BaselinePosition -> (Center -> Center), ImageSize -> 20]}, {
                 TagBox[
                  PaneBox[
                  "\"temperature class\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{"\"G\"", "2"}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"effective temperature\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5700", "SRString" -> "5700"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"K\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"absolute magnitude\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"+", 
                    TagBox["4.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.7", "SRString" -> "4.7"]]}]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"bolometric\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                  "\"mass\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    SubscriptBox[
                    StyleBox["\"M\"", Italic, StripOnInput -> False], 
                    "\"\[Sun]\""], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"luminosity\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.98", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.98", "SRString" -> "0.98"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    SubscriptBox[
                    StyleBox["\"L\"", Italic, StripOnInput -> False], 
                    "\"\[Sun]\""], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"B-V color index\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["0.6600000000000000311`2.", Identity]}, {
                 TagBox[
                  PaneBox[
                  "\"lifetime\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["9.8", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "9.8", "SRString" -> "9.8"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"billion\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"end state\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 "\"carbon\[Hyphen]oxygen white dwarf\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show examples", "input" -> 
         "StellarRadiusProperties:QuantityData__Show examples"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "4"}, {
           XMLElement["unit", {"short" -> "K", "long" -> "kelvins"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "L_\[Sun]", "long" -> "solar luminosities"}, {}], 
           XMLElement[
           "unit", {"short" -> "M_\[Sun]", "long" -> "solar masses"}, {}], 
           XMLElement[
           "unit", {"short" -> "yr", "long" -> "years"}, {}]}]}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Sizes", "scanner" -> "Data", "id" -> "Sizes:StarData", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"StarData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"HYGCatalog"}], "\n    ", 
         XMLElement["datasource", {}, {"MonitoringStellarOrbits"}], "\n    ", 
         XMLElement["datasource", {}, {"R136StarCluster"}], "\n    ", 
         XMLElement["datasource", {}, {"StarsAndTheirSpectra"}], "\n    ", 
         XMLElement["datasource", {}, {"StellarClassificationTable"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Star\", \"Sun\"], \
{EntityProperty[\"Star\", \"Radius\"], EntityProperty[\"Star\", \
\"EquatorialRadius\"], EntityProperty[\"Star\", \"PolarRadius\"], \
EntityProperty[\"Star\", \"Diameter\"], EntityProperty[\"Star\", \
\"EquatorialDiameter\"], EntityProperty[\"Star\", \"PolarDiameter\"], \
EntityProperty[\"Star\", \"AngularDiameterFromEarth\"]}, \
\"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"average radius\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["695700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "695700", "SRString" -> "695700"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[TildeTilde]", 
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["109.1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "109.1", "SRString" -> "109.1"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    StyleBox["\"a\"", Italic, StripOnInput -> False], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Earth equatorial radii\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"equatorial radius\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["695700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "695700", "SRString" -> "695700"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[TildeTilde]", 
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["109.1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "109.1", "SRString" -> "109.1"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    StyleBox["\"a\"", Italic, StripOnInput -> False], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Earth equatorial radii\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"polar radius\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["695700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "695700", "SRString" -> "695700"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[TildeTilde]", 
                   StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["109.1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "109.1", "SRString" -> "109.1"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    StyleBox["\"a\"", Italic, StripOnInput -> False], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Earth equatorial radii\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"average diameter\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.391", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "6"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.391", "\[Times]", 
                    SuperscriptBox["10", "6"]}], "SRString" -> 
                    "1.391 times 10 to the 6"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"equatorial diameter\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.391", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "6"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.391", "\[Times]", 
                    SuperscriptBox["10", "6"]}], "SRString" -> 
                    "1.391 times 10 to the 6"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"polar diameter\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.391", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "6"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.391", "\[Times]", 
                    SuperscriptBox["10", "6"]}], "SRString" -> 
                    "1.391 times 10 to the 6"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"equatorial circumference\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"4.371", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "6"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"4.371", "\[Times]", 
                    SuperscriptBox["10", "6"]}], "SRString" -> 
                    "4.371 times 10 to the 6"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"angular diameter\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["32.44", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "32.44", "SRString" -> "32.44"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"'\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"arcminutes\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "Sizes:StarData__Show non-metric"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "size", "template" -> 
        "Assuming average radius${separator}Use ${desc} or ${pulldown} \
instead", "count" -> "4", "pulldown" -> "true", "pulldownlabel" -> "more >>", 
        "pulldownlength" -> "2", "default" -> 
        "{\"DPClash\", \"StarP\", \"size\"} -> {\"Radius\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Radius", "desc" -> "average radius", "input" -> 
          "{\"DPClash\", \"StarP\", \"size\"} -> {\"Radius\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Diameter", "desc" -> "average diameter", "input" -> 
          "{\"DPClash\", \"StarP\", \"size\"} -> {\"Diameter\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Mass", "desc" -> "mass", "input" -> 
          "{\"DPClash\", \"StarP\", \"size\"} -> {\"Mass\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Volume", "desc" -> "volume", "input" -> 
          "{\"DPClash\", \"StarP\", \"size\"} -> {\"Volume\"}"}, {}]}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
StarDataSourceInformationNotes.html", "text" -> "Star data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Star", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.363", "parsetiming" -> "0.467", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP17511fhf6b30fadh86100002269ef03c6bdc8e2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa17611fhf6b30fadh8610000459fic4fa1a7if136430556393126808734", "version" -> 
    "2.6", "inputstring" -> "size of the sun"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 4, 13, 17, 59.4270163`9.526558754068972}, "Line" -> 
    76, "SessionID" -> 26971751672665615464}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "size of the sun"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{475.6, {436.91904296875003`, 441.68095703124993`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8791378794738936`*^9},ExpressionUUID->"4b6810dc-fda0-4f1e-9659-\
2fa6f6be5a41"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\:0418\:043d\:0442\:0435\:0440\:043f\:0440\:0435\:0442\:0430\:0446\
\:0438\:044f", " ", "\:0434\:0430\:043d\:043d\:044b\:0445"}]], "Input",
 CellChangeTimes->{{3.8791380966778297`*^9, 
  3.8791381020162387`*^9}},ExpressionUUID->"bcc39ab0-67eb-45c8-ba59-\
92da62aed7a7"],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{"\"Minsk\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"City\"", ",", 
       RowBox[{"{", 
         RowBox[{"\"Minsk\"", ",", "\"Minsk\"", ",", "\"Belarus\""}], "}"}]}],
      "]"}], "\"Entity[\\\"City\\\", {\\\"Minsk\\\", \\\"Minsk\\\", \
\\\"Belarus\\\"}]\"", "\"city\""},
  "Entity"]], "Input",
 CellChangeTimes->{
  3.879137917728157*^9, {3.8791379600257416`*^9, 3.8791380120529366`*^9}, {
   3.87922435986432*^9, 
   3.879224383277614*^9}},ExpressionUUID->"43486d10-5d50-402a-98f1-\
893e3da5d6e9"],

Cell[BoxData[
 TemplateBox[{"\"Minsk\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"City\"", ",", 
       RowBox[{"{", 
         RowBox[{"\"Minsk\"", ",", "\"Minsk\"", ",", "\"Belarus\""}], "}"}]}],
      "]"}], "\"Entity[\\\"City\\\", {\\\"Minsk\\\", \\\"Minsk\\\", \
\\\"Belarus\\\"}]\"", "\"city\""},
  "Entity"]], "Output",
 CellChangeTimes->{{3.879137995417615*^9, 3.879138013037156*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"df1e0342-0af0-4171-bf60-741593aee688"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"3", "*", "x"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", "==", "*)"}]}]], "Input",
 CellChangeTimes->{
  3.8791380164481635`*^9, {3.879138139787404*^9, 3.879138145301857*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b45842c0-6103-46a8-9086-a7c36ea2062b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1P831XccwPHry73vkm5fjM2V77F8OQ3Ll1F7vbNqMiokt5NymdREmlP5
0klp19C07kSJttZBkXYlpSm8P/mSa3Ek8qXb6OKaS/e+hdAltp3TD8/z/A8e
5mEx/vs1WSyW73/9/7VgMLKwQElYqYguLCAm5p1l2js1JXqzPGuPOcTcLne0
nnhLSf2WwuDjM4hxWuMbNjRKiXVvZdPrMcS4rhC+aO6iRKE7kN8jQwweePPX
5VJKjkQ688vrEOOf2lLyeQglSVYvmIhUxMS1CqMP1KjI5TzLzBYuYjo6low8
ClWSq31pMX6LOYwxE/OR66rXxOBpwHYbfTZz71A9e9nfI0SyI2DTEyttRpDh
ONZzRkG8bKyOWlpoMTOZJ9IIDBN3cfD11s80mXxur2GObIioz0boOdloMFe8
HWPb0+Xk7XRB9r5PWcyZqNB4m62DpM4ic11N9Dw5oXUzLlbZT9zYp8rtwudI
6OnW1Z1FMpKJXV03nlST7Gp5zpXIV0RwhS8fuTpDHvSt0b1l0Uuab5gs1sid
IpbLsefO36SEp3vbkVRMkju2aZH9A92EYzbUqrg5TvoaysxcXDrJgZ0pOUVF
Y0Run+1EKtoJv67viUmmkqxIKnZZq9FGeBvm/RqSFcTehdoXTjSTawfLZQ8r
5OSHTcqnlfGNJGyiLPinXBnR3ykW7f64lpglsXdzLKXkzlTDMsnqB4ST0LHk
Yl47KZTKzymEYlIVHmVbOvCY7PVbdVf6bRbRTbT9uSlbTCp1TjyvPXYBDERu
uMDhD3Du1zBJ5pdC0XfJnYIzjWA59vCde20l8CZ9PG75tcPW/J6WbfxaUB19
vO64UAqbfVdqvb3XCJOVvrVxEhmcD+k67XC/GUpSrwnC0+XQuM146Y6VbWA7
VaIXn6cApbl+0rPcdhi8Y1rtcVAJx47ahZ436AT+pVdpo6Ix6Hq53D9C0g3X
CjOqfS6OgyBh/T/IRwqL9kQr2QmTUGfneraO3QvPBMU3/IVTYL24arjA6xVU
LuXtnY6aAeOqQ5vZaTKwzzUfRj5qYKk1i2P7+4EVJ3xfEjAH037V+xqsBmFc
bcQtcpsH6boQIyuhHAoOpHYYWbLwkaDlKyxeDkHWxuYMQysNbJg1yNc2Hga9
mBLPOn1NLN7z+42JeAXUbvqzuoKnhYM2nPKSVI+AxuEQl11cbVy2L9rCfW4U
2OjZZbv32nhG5yutykAluHvF1nqzONi/zcPFOEcF8y9vDeuPc7COx5JHVb+q
wCtKIvKd4uBHBS++Cc5XwS+zA24pag52iE8IzROrYDXPKH1SE2Gu6f0MwwYV
eAel27TrIdwU5TSgP66CS237I0XOCONFNiKuDwWHxyavdRIQnvl+hif2o5AY
6J7leRLhUmljoW8QhbrBwPWJyQiblEY8zAijsEvrXIYiHeG5wIIhnQQKJ/Gs
vSQX4fv5phvQdQpND7qiU6oQPryUNl4vobDSe0K/mkHYOq7Gf0sZheAebs1k
PcJZ3nsPplRRoNObueEtCMe+yb2g1U7BwPmu2LMXYds9kSb53RQE9a27EvsR
ltV/UezZS6E4YHS+bAjhHTndNckKCutjLbabU4QXaRZtNacUftT4cpo/gTA5
FNfBTFJoFe2+KppG+PjzLSECNYVPzI59LZlF+INf8MEv/C81sXFA
       "]]},
     Annotation[#, "Charting`Private`Tag$11474#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-2.99999987755102, 2.99999987755102}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.879138024689756*^9, 3.879224416003645*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"ad768eaf-3690-4fa2-ab50-4061542139a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  NamespaceBox["WolframAlphaQueryParseResults",
   DynamicModuleBox[{Typeset`q$$ = "plot 3x", Typeset`newq$$ = "plot 3x", 
    Typeset`chosen$$ = "Plot[3*x, {x, -1, 1}]", Typeset`open$$ = False}, 
    PaneSelectorBox[{False->
     DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
      False}, 
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            InputFieldBox[Dynamic[Typeset`newq$$], String,
             Appearance->None,
             BaseStyle->{"CalculateInput"},
             ContinuousAction->True,
             Enabled->True,
             FieldSize->{{1, 40}, {1, 
                DirectedInfinity[1]}},
             TrapSelection->False], 
            ItemBox[
             ButtonBox[
              PaneSelectorBox[{True->
               TagBox[
                TooltipBox[
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "WABitmaps", "OrangeSquarePlus"],
                  ImageSizeCache->{9.9, {4., 5.9}}],
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                   StandardForm]]],
                Annotation[#, 
                 Dynamic[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                 "Tooltip"]& ], False->
               TagBox[
                TooltipBox[
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "WABitmaps", "GraySquarePlus"],
                  ImageSizeCache->{9.9, {4., 5.9}}],
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                   StandardForm]]],
                Annotation[#, 
                 Dynamic[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                 "Tooltip"]& ]}, Dynamic[Typeset`show$$],
               ImageSize->All],
              Appearance->None,
              ButtonFunction:>(Quiet[
                 WolframAlpha[]]; If[
                 Or[
                  CurrentValue["OptionKey"], 
                  CurrentValue["AltKey"]], SelectionMove[
                   ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                 NotebookWrite[
                   ButtonNotebook[], 
                   Cell[
                   Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["plot 3x", 
                   Defer[
                    Plot[3 $CellContext`x, {$CellContext`x, -1, 1}]], 
                   "Fast parse"]; Typeset`open$$ = False]),
              Evaluator->Automatic,
              Method->"Queued"],
             Alignment->{Right, Top},
             StripOnInput->False]},
           {
            PaneBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  RowBox[{"Plot", "[", 
                   RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                  StripOnInput->False,
                  NumberMarks->False], True->
                 StyleBox[
                  RowBox[{"Plot", "[", 
                   RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                  StripOnInput->False,
                  ShowSyntaxStyles->False,
                  NumberMarks->False,
                  FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                  CurrentValue["MouseOver"]],
                 BaseStyle->{ShowStringCharacters -> True},
                 FrameMargins->0,
                 ImageSize->Automatic],
                Alignment->Left,
                Appearance->None,
                BaseStyle->{},
                ButtonFunction:>(SelectionMove[
                   ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                   ButtonNotebook[], 
                   Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                   ButtonNotebook[], After, CellContents]),
                Evaluator->Automatic,
                ImageSize->Automatic,
                Method->"Preemptive"],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                 StandardForm]]],
              Annotation[#, 
               Dynamic[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
               "Tooltip"]& ],
             AppearanceElements->{},
             BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
             ImageSize->{Automatic, {1, 100}},
             Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          FrameStyle->GrayLevel[0.85],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxDividers->{
           "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Alignment->Top,
        Background->Dynamic[
          FEPrivate`If[
           FEPrivate`And[
            FEPrivate`SameQ[
             FEPrivate`Head[Typeset`newq$$], String], 
            FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
           RGBColor[1., 0.975, 0.95], 
           GrayLevel[1]]],
        BaselinePosition->Baseline,
        FrameStyle->GrayLevel[0.85],
        ImageSize->Automatic,
        RoundingRadius->5,
        StripOnInput->False],
       EventHandlerTag[{
        "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
         FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
         PassEventsDown -> Automatic, PassEventsUp -> True}]],
      DynamicModuleValues:>{}], True->
     TagBox[GridBox[{
        {
         DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
          False}, 
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                InputFieldBox[Dynamic[Typeset`newq$$], String,
                 Appearance->None,
                 BaseStyle->{"CalculateInput"},
                 ContinuousAction->True,
                 Enabled->True,
                 FieldSize->{{1, 40}, {1, 
                    DirectedInfinity[1]}},
                 TrapSelection->False], 
                ItemBox[
                 ButtonBox[
                  PaneSelectorBox[{True->
                   TagBox[
                    TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                   TagBox[
                    TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                   Typeset`show$$],
                   ImageSize->All],
                  Appearance->None,
                  ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["plot 3x", 
                    Defer[
                    Plot[3 $CellContext`x, {$CellContext`x, -1, 1}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                  Evaluator->Automatic,
                  Method->"Queued"],
                 Alignment->{Right, Top},
                 StripOnInput->False]},
               {
                PaneBox[
                 TagBox[
                  TooltipBox[
                   ButtonBox[
                    PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Alignment->Left,
                    Appearance->None,
                    BaseStyle->{},
                    ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"3", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                    Evaluator->Automatic,
                    ImageSize->Automatic,
                    Method->"Preemptive"],
                   DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                  Annotation[#, 
                   Dynamic[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]],
                    "Tooltip"]& ],
                 AppearanceElements->{},
                 BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                 ImageSize->{Automatic, {1, 100}},
                 Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              BaselinePosition->{1, 1},
              FrameStyle->GrayLevel[0.85],
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxDividers->{
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"],
            Alignment->Top,
            Background->Dynamic[
              FEPrivate`If[
               FEPrivate`And[
                FEPrivate`SameQ[
                 FEPrivate`Head[Typeset`newq$$], String], 
                FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
               RGBColor[1., 0.975, 0.95], 
               GrayLevel[1]]],
            BaselinePosition->Baseline,
            FrameStyle->GrayLevel[0.85],
            ImageSize->Automatic,
            RoundingRadius->5,
            StripOnInput->False],
           
           EventHandlerTag[{
            "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
             "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
             "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
             True}]],
          DynamicModuleValues:>{}]},
        {
         InterpretationBox[
          StyleBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEExpressions", "NecklaceAnimator"][20]],
           AnimatorBoxOptions->{ImageSize->20}],
          Animator[Appearance -> "Necklace", ImageSize -> 20],
          BaseStyle->{"Deploy"}]}
       },
       BaselinePosition->{1, 1},
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}, Dynamic[
      TrueQ[Typeset`open$$]],
     BaseStyle->{Deployed -> True},
     ImageSize->Automatic],
    DynamicModuleValues:>{}],
   BaseStyle->{Deployed -> True},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], 
  RowBox[{"(*", 
   RowBox[{"\:043e\:0434\:043d\:043e", " ", "="}], 
   "*)"}]}]], "WolframAlphaShortInput",
 CellChangeTimes->{{3.8791381329660225`*^9, 
  3.8791381360132866`*^9}},ExpressionUUID->"abd3dab1-29ba-4480-9a2a-\
65de20f3871a"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1P831XccwPHry73vkm5fjM2V77F8OQ3Ll1F7vbNqMiokt5NymdREmlP5
0klp19C07kSJttZBkXYlpSm8P/mSa3Ek8qXb6OKaS/e+hdAltp3TD8/z/A8e
5mEx/vs1WSyW73/9/7VgMLKwQElYqYguLCAm5p1l2js1JXqzPGuPOcTcLne0
nnhLSf2WwuDjM4hxWuMbNjRKiXVvZdPrMcS4rhC+aO6iRKE7kN8jQwweePPX
5VJKjkQ688vrEOOf2lLyeQglSVYvmIhUxMS1CqMP1KjI5TzLzBYuYjo6low8
ClWSq31pMX6LOYwxE/OR66rXxOBpwHYbfTZz71A9e9nfI0SyI2DTEyttRpDh
ONZzRkG8bKyOWlpoMTOZJ9IIDBN3cfD11s80mXxur2GObIioz0boOdloMFe8
HWPb0+Xk7XRB9r5PWcyZqNB4m62DpM4ic11N9Dw5oXUzLlbZT9zYp8rtwudI
6OnW1Z1FMpKJXV03nlST7Gp5zpXIV0RwhS8fuTpDHvSt0b1l0Uuab5gs1sid
IpbLsefO36SEp3vbkVRMkju2aZH9A92EYzbUqrg5TvoaysxcXDrJgZ0pOUVF
Y0Run+1EKtoJv67viUmmkqxIKnZZq9FGeBvm/RqSFcTehdoXTjSTawfLZQ8r
5OSHTcqnlfGNJGyiLPinXBnR3ykW7f64lpglsXdzLKXkzlTDMsnqB4ST0LHk
Yl47KZTKzymEYlIVHmVbOvCY7PVbdVf6bRbRTbT9uSlbTCp1TjyvPXYBDERu
uMDhD3Du1zBJ5pdC0XfJnYIzjWA59vCde20l8CZ9PG75tcPW/J6WbfxaUB19
vO64UAqbfVdqvb3XCJOVvrVxEhmcD+k67XC/GUpSrwnC0+XQuM146Y6VbWA7
VaIXn6cApbl+0rPcdhi8Y1rtcVAJx47ahZ436AT+pVdpo6Ix6Hq53D9C0g3X
CjOqfS6OgyBh/T/IRwqL9kQr2QmTUGfneraO3QvPBMU3/IVTYL24arjA6xVU
LuXtnY6aAeOqQ5vZaTKwzzUfRj5qYKk1i2P7+4EVJ3xfEjAH037V+xqsBmFc
bcQtcpsH6boQIyuhHAoOpHYYWbLwkaDlKyxeDkHWxuYMQysNbJg1yNc2Hga9
mBLPOn1NLN7z+42JeAXUbvqzuoKnhYM2nPKSVI+AxuEQl11cbVy2L9rCfW4U
2OjZZbv32nhG5yutykAluHvF1nqzONi/zcPFOEcF8y9vDeuPc7COx5JHVb+q
wCtKIvKd4uBHBS++Cc5XwS+zA24pag52iE8IzROrYDXPKH1SE2Gu6f0MwwYV
eAel27TrIdwU5TSgP66CS237I0XOCONFNiKuDwWHxyavdRIQnvl+hif2o5AY
6J7leRLhUmljoW8QhbrBwPWJyQiblEY8zAijsEvrXIYiHeG5wIIhnQQKJ/Gs
vSQX4fv5phvQdQpND7qiU6oQPryUNl4vobDSe0K/mkHYOq7Gf0sZheAebs1k
PcJZ3nsPplRRoNObueEtCMe+yb2g1U7BwPmu2LMXYds9kSb53RQE9a27EvsR
ltV/UezZS6E4YHS+bAjhHTndNckKCutjLbabU4QXaRZtNacUftT4cpo/gTA5
FNfBTFJoFe2+KppG+PjzLSECNYVPzI59LZlF+INf8MEv/C81sXFA
       "]]},
     Annotation[#, "Charting`Private`Tag$35438#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-2.99999987755102, 2.99999987755102}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8791381223980446`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"7757def8-29f8-4487-b8c7-0d8d8a92910b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["magenta hex", "WolframAlphaLong",
 CellChangeTimes->{{3.879138163534911*^9, 3.8791382446735377`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"8e8c5066-8f5f-4f50-aeaa-a1d88d906770"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "magenta hex", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Color\", {\"WolframLanguage\", \
\"Magenta\"}][EntityProperty[\"Color\", \"HexValue\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"magenta\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"hexadecimal\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"#FF00FF\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Color swatch", "scanner" -> "Data", "id" -> 
     "ColorSwatch:ColorData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[{
               EdgeForm[{
                 Thickness[Tiny], 
                 RGBColor[
                  NCache[
                   Rational[2, 3], 0.6666666666666666], 0, 
                  NCache[
                   Rational[2, 3], 0.6666666666666666]]}], 
               RGBColor[1, 0, 1], 
               RectangleBox[{0, 0}]}, ImageSize -> 35], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Nearest representations", "scanner" -> "Data", "id" -> 
     "ColorSchemaConversions:ColorData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Color\", {\"WolframLanguage\", \
\"Magenta\"}], {EntityProperty[\"Color\", \"RGBValue\"], \
EntityProperty[\"Color\", \"HexValue\"], EntityProperty[\"Color\", \
\"Value\"], EntityProperty[\"Color\", \"HSVValue\"], \
EntityProperty[\"Color\", \"HSLValue\"], EntityProperty[\"Color\", \
\"CMYKValue\"], EntityProperty[\"Color\", \"XYZValue\"], \
EntityProperty[\"Color\", \"CIE1976LabValue\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"24\[Hyphen]bit RGB\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"red\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "255", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"green\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "0", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"blue\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "255", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                  "\"fractions\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"red\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "1", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"green\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "0", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"blue\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "1", "\"\"", "\"\""}, "RowDefault"], 
                    LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                  "\"hexadecimal\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"#FF00FF\""}, {
                 TagBox[
                  PaneBox[
                  "\"Wolfram Language\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{
                   TagBox[
                    StyleBox[
                    "RGBColor", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], HoldForm], "[", 
                   RowBox[{"1", ",", "0", ",", "1"}], "]"}]}, {
                 TagBox[
                  PaneBox[
                  "\"HSV\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"hue\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["300", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "300", "SRString" -> "300"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"saturation\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "100", "SRString" -> "100"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"value\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "100", "SRString" -> "100"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                  "\"HSL\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"hue\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["300", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "300", "SRString" -> "300"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"saturation\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "100", "SRString" -> "100"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"lightness\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["50", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "50", "SRString" -> "50"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                  "\"CMYK\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"cyan\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"magenta\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["100", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "100", "SRString" -> "100"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"yellow\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"black\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                  "\"XYZ\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["X", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.5792", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.5792", "SRString" -> "0.5792"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["Y", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.2831", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.2831", "SRString" -> "0.2831"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox["Z", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.7281", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.7281", "SRString" -> "0.7281"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TemplateBox[{"\"CIE \"", "\" \"", 
                    
                    TemplateBox[{"L", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], 
                    TemplateBox[{"a", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], 
                    
                    TemplateBox[{"b", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox]}, "RowDefault"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    
                    TemplateBox[{"L", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["60.17", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "60.17", "SRString" -> "60.17"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    
                    TemplateBox[{"a", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["93.55", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "93.55", "SRString" -> "93.55"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    
                    TemplateBox[{"b", "*"}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["60.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "60.5", "SRString" -> "60.5"]]}]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"\"", 
                    "\"\""}, "RowDefault"], LineIndent -> 0]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ColorSchemaConversions:ColorData__More"}, {}]}], 
     XMLElement["definitions", {"count" -> "1"}, {
       XMLElement[
       "definition", {
        "word" -> "XYZ", "desc" -> "CIE 1931 XYZ color space"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Chromaticity diagram location", "scanner" -> "Data", 
     "id" -> "CIEChromaticityDiagram:ColorData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 GraphicsBox[{{
                    GraphicsComplexBox[CompressedData["
1:eJxlljFrVFEQRoNNOq3UKooQq/wDLULKdGojVgHB2ipdunQpY6U2KdNI/AMv
3GbBwgcX2YCCwvN5n17DbdKple7C+cJ8PliWw+zO5jDMN7nz9PmjZ1dWVla+
/nst3v25Nd9am2+92YzciW/sXFzfuZhZvRe/WN8+XN/+IL65/PyZ+PXLxfNJ
fHv5/S/ih6u7D1Z3B+s3is8WH18r1n8SP9mbPd6b/RC/Wv7eT3H8nbeb+Ebu
xPjGei/GF8YXxhfGF8Y39hvF+Mb+kxhfGF84+ibzTeabzDeZbzLfZL7JfJP5
JvNN5pvMN5lvMt9kvkm+fw5Ofh2cvJNv5E6Mb6z3YnxhfGF8YXxhfGO/UYxv
7D+J8YXxheN8s80323yzzTfbfLPNN9t8s80323yzzTfbfLPNN9t8s80323yz
fO8u2h7O5Ru5E+Mb670YXxhfGF8YXxjf2G8U4xv7T2J8YXxhfH8v5/1RvpE7
Mb6x3ovxhfGF8YXxhfGN/UYxvrH/JMYXxhfGt3+/eD7LN3InxjfWezG+ML4w
vjC+ML6x3yjGN/afxPjC+MJ+9+L+Dra/g+3vYPs72P4Otr+D7e9g+zv89x73
d7D9HWx/B9vfwfb38q7fP96/d7w/yjdyJ8Y31nsxvjC+ML4wvjB/V+w3ivGN
/ScxvjC+cMyrYnlVLK+K5VWxvCqWV8XyqlheFcurYnlVLK+K5VWxvCqWV8Xy
6vL/smvnR1fPj77LN3InxjfWezG+ML4wvjC+ML6x3yjGN/afxPjC+MIxn6vl
c7V8rpbP1fK5Wj5Xy+dq+Vwtn6vlc7V8rpbP1fK5Wj5Xy+cq328bp+PG6bl8
I3difGO9F+ML4wvjC+ML4xv7jWJ8Y/9JjC+MLxzvUbN71OweNbtHze5Rs3vU
7B41u0fN7lGze9TsHjW7R83uUbN71Owetc2/wT9s8Q==
                    "], {{{
                    EdgeForm[], 
                    Hue[0.67, 0.6, 0.6], 
                    GraphicsGroupBox[
                    TagBox[{
                    PolygonBox[CompressedData["
1:eJwBIQPe/CFib1JiAgAAAMQAAAAEAAAAAQIREAIDEhEDBBMSCwwbGgwNHBsF
BhUUBgcWFQQFFBMJChkYCgsaGQgJGBcNDh0cFhcmJRARIB8REiEgMjNCQRUW
JSQODx4dExQjIhITIiEXGCcmFBUkIwcIFxYYGSgnGRopKCAhMC8cHSwrHR4t
LBscKyofIC8uJSY1NCEiMTAjJDMyJCU0MyYnNjUoKTg3LzA/PikqOTgqKzo5
GhsqKSwtPDsrLDs6Li8+PTAxQD8xMkFAJyg3NjM0Q0IiIzIxNDVEQ1ZXZmU5
OklINjdGRTc4R0ZAQVBPODlIRz9AT046O0pJPT5NTD4/Tk07PEtKQUJRUElK
WVhDRFNSREVUU0VGVVRCQ1JRRkdWVUhJWFdHSFdWSktaWUxNXFtNTl1cT1Bf
XtDR4N9UVWRjUVJhYFJTYmFbXGtqU1RjYllaaWhVVmVkV1hnZlhZaGdcXWxr
XV5tbGRldHNfYG9uYGFwb1BRYF9eX25tYWJxcGJjcnFlZnV0Zmd2dWNkc3I1
NkVEZ2h3dmhpeHdqa3p5b3B/fmxtfHttbn18dXaFhG5vfn10dYSDcHGAf3Jz
goFzdIOCcXKBgHZ3hoV/gI+OeXqJiHp7iol7fIuKd3iHhnx9jIt+f46NfX6N
jICBkI+BgpGQgoOSkYOEk5KEhZSTiYqZmIqLmpmGh5aViImYl4uMm5qOj56d
j5CfnoyNnJuNjp2chYaVlJCRoJ+Sk6Khl5inppOUo6KUlaSjlZalpJiZqKeR
kqGgmZqpqJqbqqmbnKuqnJ2sq2tse3qdnq2sn6CvrqOks7KgobCvoaKxsKqr
urmio7Kxqaq5uKSltLOnqLe2qKm4t6usu7qsrby7s7TDwq6vvr2vsL++np+u
ra2uvbywscC/sbLBwLW2xcS2t8bFsrPCwaantrVOT15dt7jHxrm6yci9vs3M
vr/Ozbu8y8q8vczLv8DPzsLD0tHExdTTwMHQz8HC0dC6u8rJxcbV1MfI19bL
zNvayMnY18nK2djKy9rZzM3c28bH1tXNzt3czs/e3c/Q3964ucjH0dLh4IBH
XJA=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1786168#1"]& ]]}, {}, {}, {}, {}}, {{
                    Directive[
                    RGBColor[0.39598880819409377`, 0.24, 0.6]], 
                    
                    LineBox[{2, 1, 16, 31, 46, 61, 76, 91, 106, 121, 136, 151,
                     166, 181, 196, 211, 212, 213, 214, 215, 216, 217, 218, 
                    219, 220, 221, 222, 223, 224, 225, 210, 195, 180, 165, 
                    150, 135, 120, 105, 90, 75, 60, 45, 30, 15, 14, 13, 12, 
                    11, 10, 9, 8, 7, 6, 5, 4, 3, 2}, VertexColors -> None]}}},
                     VertexColors -> CompressedData["
1:eJyVmHk41FsfwBml19YwaBHZylgvKWkbJy65oW6bcu1bdYm02VNSXLrWJL3p
ComUy0iyXC0i+zIMxr4ziJkRb0mXe9/ned/mPO98r+c+7+955o/zOfNbzud8
z/csis5eR04S+Pj4Bv/9E+DDl+7Ked2xrW3oPyUO+sq/fdkfFX++GfDmHNd5
4/5KLs/2H8sPm6tAfP9zcdCTSXJWk8wA4BuXqPWyDmOAL8xTDLeXvAec9/01
6RUuz/TZgNc+NXqvKvgecL2Efc9snzEBdyKWiAWPjwAulBsQrO43BPjKh7qH
XxsOAM46Kye7zaYHcNqXoJgFiw5umToVzS9Q1Av+xy64V7oitxvwSkKdWoB8
J+BzezeUmZTg/rKKC3kw+l0/itLLi8kopXH5cVNb2prYMeTzRJJTuv8Fl+8L
Mjs7eWrqbz2Tm2SbPpBZgHd0Dequ650A3FFl1uyazxjgzgfmWq3uDQOu6/eO
/UxqEPDE31je+qHQE2v1y2pRIvShuXH4dGd4K7c8XlfgTHCH/acfM/EwrRG+
Tz2t8cwjScgDBAr03LRwf5fbERZdFfrQq9q2RnFSH5eTUw0IR+vGUMU5Jy+i
EO5H92c6Hqn60+hzaHHG6Zx2nudzUEAiTTnpeh0acEjXspqbAu8X9u9WlIge
B9xfLmr9WYlRwEvslfhT5WC7jYYMUlpm+wAPS9F+ErIAfZqt9JxKXmoFvM9l
2tSPr4lbVj3iZcFXCL+jXvaswviPkM94NPEZiEJeeIdQdO4+Hod7jrwlz6X0
IM3kuPYyEuZl5sImXlJMVGe7SCtzxfG04/oHNaedLGREDBU1vsbbfg76NeSu
6lJdL1rR/s0l0m2cH3Skbs97HGtHBO/zj1WIOD8YNJrc3O3YiBzFdb7M++D3
fKKcsPzcnYfoynulhJ1hHvipvvoqQR6OYzV5Pvq9GJhfmbN3HpcNNgKuQCqg
FN8o5JaLf2AH/TIH48DvDzHbhCnIw1bQfSWHIQ89LKzxiIG59gn7mZh7Xcgm
skg7vQbzHcP5Tp/PMZHh9+4D0kWYH7X1JsYHs9FvJtsmPFN5n89Bq+MX/azH
htGTnqTYxAWcH85oa7gt6g+gQ0pPGXGHcf9L3T0qb+3bhc6fNL5SGo/Hn0j8
3L1/KLehzae0bmUn4LxKe7FrIK6gCWUENvu+2YfH0zt2qUORcDnK7w9P9CmB
Ps3JAlYkYizgvNcZpXMF1UZwHPYdcpU5dh3yefcr3ZI0yL1XdxkOaE5z+Vaa
SkZINgOR8jujnR9gvsuWPMaZYKLMBNmsgzq8eZaDwvc8aCHSp5G5ba1hcDeu
b9cp990nNI50fBgbBaVxP3ibuTonS4+gYGTdGUzBcatxy9SKIzqIpgbEOJwI
nAfEDSUerBDvRY+qnTIW9Rhc7ipKCVK734G2kVRv/BiGfaZZL5hne7Xy+OOg
j9eiHfooNMBNdChX8oWrgG/q4gvrnlI4f38tH649rp9OZQN+c/8X/ipByN06
43tU97IQ65vrqRrmeL2i/yrjQNCxabTKm04ayMRx1xpxYc8r/SkkPn2jyrcW
98cFOeb8I8YkjnfqELmi/D3aUf+mKrQC36+Tp+gS7MlE6oGzmRGZOA/wF397
YJPeCDI+ejZNOKiDy08wvHolUgaRivEqCzUD7HP0kN/DW/19oD3Km3y2Ry91
AZ6pYDfk5s4AnL0975bXZ/oycc1BWyIE99l0wPneYEFixkMScm3Hj1ptOnAd
xnKo3/9WdRKxlVivFMn53HZsemOsIcEZR3sso7tjqDj/3tJ52LXWh4k83JRL
rK2x11PShNmNKdjnPYurvZWmbBROs15R24TvX/v0qWVV4CT6ECHWE2DdxeWO
QrPOVwSYqDRsV7w8vYHLZU7whT8xHwHfTcy+QxEUHQK84E3ijuoNcH06pbbx
Y+LbHsAnj9XUeCd0Luu5Ur7yu6H6CXgffXOhdO844Ff5mQKd1UzAAydCrrSH
wvVxUgkh65cVo6g8J3s4SxXH3fOb8YVHNYfRpqrBpnd38Dw2nXs5gkgbQLSd
Q6LKN3Ccpw46+9iuw/PUu8/+zz3tp5GIZ5T6+k3YZ0ih0WWdJNieS6fmdB+9
gN9nUxF4PtYW+o+USY7Js4f+6crB/pMp0H+rCkXLTpF3XOB6mhWjVIkAvSHL
BM6qiVHAS44mFAo+hN9FW3Lw9VccBtx9Dc013GIQiStUrfm5EntqGYmMseD0
oh969pc+N8bxe1zgZPzdQAZq63Q6UD2C41zkvsPkZqcqFN0y6F7RsXy+K16S
VnlOhOPQ+NfzUuc+wbiZ091Mtb0M/VNFxtsL3GA7HytVLImnQP9mga/p20UG
l/VMVHwQIeQIn6d9rTLHVAZ6q1nddV0wifd5HNR4wT0+O6Ef8D8O3rQKXuhC
W25H1Wy5iucfO5vhtsKIVpTN53FawBDPYx/Ni0xahV+imy517lU5cH2TuUos
lmw9vaxnzQPZu2w8WYA/rbYM99rwF/tO1/eM+wHQf16+n0LaQehfhBhN3XUJ
+mI7tWyRbOP1j+t/f0ioJTVDb013c9C/jsHxsXYNIymL1Au41ffb/RKDOwDP
r/AyYRJakEapW9PQbjrwE3lNc2b6Etz/KO2U4VAr4H4uMHQx3HY33Gev0bf0
CjVdPs7H1zYkXdGYBnx0dps9y3ES8DP7B9Ip66D/mX+OfqpVg/6FmpMt2i/z
+sf1h6nBP4UEwvm2ramzreA9nG9nSS1y3nbtgOc6dS0OXW2C8fLfa71RkNEp
SgPwsLj70NDG1H7AG+zz7GUl4b6IZTZKjHeB+2yPqdy1hgbLx7m6S20eSwuu
k141k6cm9GCeecM2yslugHk+wvLnjzl/MT+5p55e9Bfh9Y/rpW83ZlGEeOdJ
DuIIyRur+cP1Y6bdOePh/XXL+lyOmzFDdzWolAEPjVvH5dti4HmMXGzP2ehI
eA5xRCxOS+AtPB/as5P9Mt0HxvnFqRr66yF4LvK1/NqKSHVYgnGOtvEP/n4R
5hlJ5Ysh1sehf80b8pFLYbz+cT1xi0sRKm8B910WFaPGbuVdd/+9z/+X+21O
CyenwfOD5G6buN1keA5B8u9Kp5vBfCJSXPpacQjGOcPmnY69+vJxbmciIs//
CsZ57oaLuTOroX+5PqGo8naYZ1IuUcgZszjP/AmStk/W
                    "]], {}}, {
                    GrayLevel[1], 
                    
                    PolygonBox[{{-1, -1}, {2, -1}, {2, 2}, {-1, 
                    2}, {-1, -1}, {0.17556023175572394`, 
                    0.005293837011448581}, {0.17536359983998115`, 
                    0.0052756835086245945`}, {0.1751832266012616, 
                    0.005258496695871006}, {0.17501613456134835`, 
                    0.005241761371297277}, {0.17485934624202448`, 
                    0.0052249623330128635`}, {0.17471437050588853`, 
                    0.0052163258794187175`}, {0.1745686949050439, 
                    0.005196758206671449}, {0.17438655342162454`, 
                    0.005118554549985008}, {0.1741952098896991, 
                    0.005010211750772774}, {0.174076658262699, 
                    0.004958307077092231}, {0.1740319916403864, 
                    0.004969697904826961}, {0.17397805595937796`, 
                    0.004970995982340718}, {0.1738828384979183, 
                    0.004938548694005485}, {0.17377499442337, 
                    0.004916451373271851}, {0.17366187093994412`, 
                    0.004924337941529843}, {0.17354925119098794`, 
                    0.004918081234377825}, {0.1734486993895146, 
                    0.00485908475496034}, {0.17333937108826114`, 
                    0.0047978877665547405`}, {0.17320523972156368`, 
                    0.004777308086019989}, {0.17304684766317197`, 
                    0.00477439049264027}, {0.17285397285329213`, 
                    0.004781308166369025}, {0.17263866621817262`, 
                    0.004794854359209058}, {0.172422288975678, 
                    0.004798191913592145}, {0.17218989201904114`, 
                    0.004814961802891915}, {0.17192576940040152`, 
                    0.0048764409814174145`}, {0.17160799184654643`, 
                    0.005002736369540446}, {0.17119682786308751`, 
                    0.0052171085166790344`}, {0.17068304004872895`, 
                    0.0055306515237927515`}, {0.17010081918061948`, 
                    0.00593472421689477}, {0.16945646115957932`, 
                    0.00643183330154858}, {0.16870349387244327`, 
                    0.007039618137338212}, {0.16781244062254633`, 
                    0.0077705757635202774`}, {0.16680771951269083`, 
                    0.008635354723008295}, {0.16571159830926377`, 
                    0.009649611775946724}, {0.16446842472034728`, 
                    0.010805265069488198`}, {0.16304535985452714`, 
                    0.012079786021384634`}, {0.16140730253026808`, 
                    0.013527119145756683`}, {0.1595032707835204, 
                    0.015194596641146224`}, {0.1573367841947519, 
                    0.017092933641790545`}, {0.15491507641595717`, 
                    0.019202854009223724`}, {0.15222038871706767`, 
                    0.021604634825459216`}, {0.14922625578990492`, 
                    0.024376548255645374`}, {0.14592217167251953`, 
                    0.02763548063723386}, {0.14235309321074113`, 
                    0.031421725349965055`}, {0.13845603390311093`, 
                    0.03599689856485891}, {0.13398682160551256`, 
                    0.04199140479943818}, {0.12880278921251914`, 
                    0.049864667435636056`}, {0.12294935746728373`, 
                    0.059876037156560105`}, {0.11641258374966156`, 
                    0.07232999394622402}, {0.10910279780366018`, 
                    0.08794688639714918}, {0.10094787984638058`, 
                    0.10733595324555739`}, {0.09190235575853702, 
                    0.1310304911413033}, {0.08167262427194437, 
                    0.15966036581555584`}, {0.07082155434608398, 
                    0.19358768351714645`}, {0.059817416957095595`, 
                    0.2335985680996362}, {0.048851369406004534`, 
                    0.27927416674104816`}, {0.03797071645875126, 
                    0.33083590189447737`}, {0.027690510611921567`, 
                    0.38679976162910523`}, {0.018669888762176158`, 
                    0.44532119245236657`}, {0.011395738571790347`, 
                    0.5046749878340863}, {0.006320691593521946, 
                    0.5628236008715106}, {0.0038610834905612426`, 
                    0.6181624727884985}, {0.0043831868952121, 
                    0.669726304100396}, {0.008220758402066552, 
                    0.7162948349158103}, {0.015377506940553749`, 
                    0.7564530641698093}, {0.026045353124646443`, 
                    0.7887586566525424}, {0.03947841456673645, 
                    0.8128086626298999}, {0.05529065855542668, 
                    0.8270334974207783}, {0.07275942793154874, 
                    0.833566714456559}, {0.09111773885318163, 
                    0.8331658706070437}, {0.1100821266945993, 
                    0.827814693322161}, {0.12925202281557857`, 
                    0.8196942165161936}, {0.14831319807154394`, 
                    0.809610085059285}, {0.16676071977899662`, 
                    0.7987285025281501}, {0.18463800929019178`, 
                    0.7872526041667259}, {0.20216210130103304`, 
                    0.7750775111100823}, {0.21942612394280397`, 
                    0.7622613087118403}, {0.23652647927799422`, 
                    0.7488150767131858}, {0.2535320038434578, 
                    0.7347860975047882}, {0.270445807373137, 
                    0.7202634536743228}, {0.2872950362902006, 
                    0.7053192150787574}, {0.304108662964538, 
                    0.6900067121662545}, {0.3209194884693519, 
                    0.674386687233604}, {0.33772095745463904`, 
                    0.658508139814946}, {0.3545253946371649, 
                    0.6424243263849768}, {0.37131640832892465`, 
                    0.6261854218697829}, {0.3880925479761988, 
                    0.6098478530853221}, {0.40482782572907294`, 
                    0.5934493060638648}, {0.421505178172087, 
                    0.5770285686473562}, {0.4380919152213715, 
                    0.5606306420948011}, {0.45455822194656975`, 
                    0.5442967791090849}, {0.47086552683183763`, 
                    0.5280791043098605}, {0.48697231906181726`, 
                    0.5120325430631746}, {0.5028371368677546, 
                    0.49621291105484616`}, {0.5184197634646172, 
                    0.4806807067266449}, {0.5336747842055273, 
                    0.46549218358877364`}, {0.5485452412186969, 
                    0.45069659351502667`}, {0.5629773585037835, 
                    0.4363457853199396}, {0.5769019536565851, 
                    0.42248595694695035`}, {0.5902667589336371, 
                    0.4091449118347121}, {0.6029327855757162, 
                    0.3964966335729774}, {0.6146726165974282, 
                    0.38479956475462057`}, {0.6256800327846108, 
                    0.37384125441861654`}, {0.6361219372576182, 
                    0.36344418550327773`}, {0.6458681359177542, 
                    0.3537462949955304}, {0.6547627048542051, 
                    0.34491844622940315`}, {0.6628584600799188, 
                    0.33689234214928726`}, {0.6702316207319516, 
                    0.3295645797072063}, {0.6769190187406181, 
                    0.3228998584173931}, {0.6829419614901258, 
                    0.3168889330927986}, {0.6883461584437284, 
                    0.311493064762896}, {0.6932005616270809, 
                    0.30665484041154656`}, {0.6975633767640905, 
                    0.30232089566421777`}, {0.7014872591587333, 
                    0.29842479534850047`}, {0.7050269267617462, 
                    0.2949046931597014}, {0.7082512222035675, 
                    0.2916948730181046}, {0.7112410674905182, 
                    0.28871383433473913`}, {0.7139761081705562, 
                    0.2859842711575483}, {0.7164637478609328, 
                    0.28350037586136473`}, {0.7187167593249135, 
                    0.28125061157720627`}, {0.7207547027301163, 
                    0.2792172735672014}, {0.722569721388469, 
                    0.2774082902394775}, {0.7241368297435044, 
                    0.27585045341214154`}, {0.7254930940127818, 
                    0.27450378547165555`}, {0.7266949625626657, 
                    0.27330619557043784`}, {0.7277603240606225, 
                    0.27224045873932134`}, {0.7286948950132419, 
                    0.2713051049867581}, {0.7295047982564321, 
                    0.2704952017435679}, {0.7301776766397369, 
                    0.269822323360263}, {0.7307192678881747, 
                    0.26928073211182535`}, {0.7311888977627051, 
                    0.2688111022372949}, {0.7316287025328848, 
                    0.26837129746711524`}, {0.7320247435006082, 
                    0.2679752564993918}, {0.732376149352635, 
                    0.26762385064736505`}, {0.7327051542604087, 
                    0.2672948457395912}, {0.7330388382846801, 
                    0.26696116171532}, {0.7333630813818561, 
                    0.266636918618144}, {0.7336829648123552, 
                    0.26631703518764493`}, {0.7339713327741839, 
                    0.2660286672258161}, {0.7341850648375982, 
                    0.26581493516240184`}, {0.7343375767131999, 
                    0.2656624232868001}, {0.734456905848058, 
                    0.265543094151942}, {0.7345507388706178, 
                    0.26544926112938216`}, {0.734620713363792, 
                    0.265379286636208}, {0.7346694785861829, 
                    0.2653305214138171}, {0.7346938888911683, 
                    0.2653061111088318}, {0.7346953465406071, 
                    0.26530465345939297`}, {0.7346921261616721, 
                    0.26530787383832777`}, {0.7346991164284454, 
                    0.26530088357155457`}, {0.7346856553828995, 
                    0.2653143446171004}, {0.7346099153920321, 
                    0.26539008460796787`}, {0.7345499018795552, 
                    0.26545009812044484`}, {0.7346004599906061, 
                    0.2653995400093939}, {0.7346766671161696, 
                    0.2653233328838303}, {0.7346990610632237, 
                    0.2653009389367762}, {0.7346934810949736, 
                    0.26530651890502643`}, {0.7346899827941388, 
                    0.26531001720586117`}, {0.7346899591162742, 
                    0.26531004088372573`}, {0.7346899587513279, 
                    0.265310041248672}, {0.734689979448047, 
                    0.26531002055195285`}, {0.7346899970449323, 
                    0.2653100029550676}, {0.7346900038402209, 
                    0.2653099961597791}, {0.7346900052677908, 
                    0.26530999473220923`}, {0.7346900023320355, 
                    0.2653099976679646}, {0.734690000880342, 
                    0.2653099991196582}, {0.734690006235616, 
                    0.2653099937643841}, {0.7346900107878785, 
                    0.2653099892121215}, {0.7346900101258405, 
                    0.2653099898741596}, {0.7346900028459842, 
                    0.2653099971540159}, {0.7346899820899148, 
                    0.2653100179100853}, {0.7346899572281275, 
                    0.26531004277187265`}, {0.7346899326769708, 
                    0.2653100673230292}, {0.7346899190526232, 
                    0.2653100809473769}, {0.7346899412375943, 
                    0.2653100587624056}, {0.7346899821666248, 
                    0.2653100178333752}, {0.7346900001958658, 
                    0.26530999980413417`}, {0.7346899924207384, 
                    0.26531000757926154`}, {0.7346899843024212, 
                    0.26531001569757884`}, {0.734689983454365, 
                    0.265310016545635}, {0.7346899845298409, 
                    0.26531001547015914`}, {0.7346899865757621, 
                    0.2653100134242378}, {0.7346899831410453, 
                    0.2653100168589546}, {0.734689967020282, 
                    0.265310032979718}, {0.7346899540024436, 
                    0.2653100459975564}, {0.734689961026772, 
                    0.2653100389732281}, {0.7346899732507743, 
                    0.26531002674922577`}, {0.7346899813168498, 
                    0.26531001868315024`}, {0.7346899870040634, 
                    0.2653100129959366}, {0.7346899894594975, 
                    0.26531001054050246`}, {0.7346899904175132, 
                    0.26531000958248674`}, {0.7346899924350723, 
                    0.2653100075649276}, {0.7346899958253966, 
                    0.26531000417460326`}, {0.7346900017758548, 
                    0.26530999822414525`}, {0.7346900080492961, 
                    0.265309991950704}, {0.7346900062647306, 
                    0.2653099937352694}, {0.7346899943092736, 
                    0.2653100056907265}, {0.7346899821325252, 
                    0.26531001786747477`}, {0.7346899749411026, 
                    0.26531002505889756`}, {0.7346899691617546, 
                    0.26531003083824545`}, {0.7346899640304887, 
                    0.26531003596951136`}, {0.734689958783312, 
                    0.26531004121668794`}, {0.17556023175572394`, 
                    0.005293837011448581}}]}, {{
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.17556023175572394`, 0.005293837011448581}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["360", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{-4, 0}, {0.17556023175572394`, 
                    0.005293837011448581}], {Right, Center}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.10959432361561004`, 0.08684251118309425}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["475", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{-4, 0}, {0.10959432361561004`, 
                    0.08684251118309425}], {Right, Center}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.008168028004667443, 0.5384230705117519}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["500", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    Offset[{-4, 0}, {0.008168028004667443, 
                    0.5384230705117519}], {Right, Center}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.11416071960667964`, 0.8262069597811889}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["525", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{2, 2}, {0.11416071960667964`, 
                    0.8262069597811889}], {Left, Bottom}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.3016037993957512, 0.6923077623715742}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["550", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{2, 2}, {0.3016037993957512, 
                    0.6923077623715742}], {Left, Bottom}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.47877479115758365`, 0.5202023072114564}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["575", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{2, 2}, {0.47877479115758365`, 
                    0.5202023072114564}], {Left, Bottom}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.6270365997638725, 0.3724911452184179}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["600", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{2, 2}, {0.6270365997638725, 
                    0.3724911452184179}], {Left, Bottom}]}, {
                    GrayLevel[1], 
                    EdgeForm[
                    Opacity[0.5]], 
                    DiskBox[{0.7346900232582808, 0.26530997674171924`}, 
                    Offset[{2, 2}]], 
                    InsetBox[
                    FormBox[
                    StyleBox["700", 
                    GrayLevel[0], StripOnInput -> False], TraditionalForm], 
                    
                    Offset[{2, 2}, {0.7346900232582808, 
                    0.26530997674171924`}], {Left, Bottom}]}}}, {Epilog -> {{
                    GrayLevel[1], 
                    PointSize[0.035], 
                    TagBox[
                    TooltipBox[
                    PointBox[{0.36416100853089484`, 0.1780210098816521}], 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "0.36416100853089484`", "\", \"", "0.1780210098816521`"}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]], Annotation[#, 
                    $CellContext`GrayComment[
                    Row[{0.36416100853089484`, ", ", 0.1780210098816521}]], 
                    "Tooltip"]& ], 
                    RGBColor[1, 0, 1], 
                    PointSize[0.03], 
                    TagBox[
                    TooltipBox[
                    PointBox[{0.36416100853089484`, 0.1780210098816521}], 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "0.36416100853089484`", "\", \"", "0.1780210098816521`"}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]], Annotation[#, 
                    $CellContext`GrayComment[
                    Row[{0.36416100853089484`, ", ", 0.1780210098816521}]], 
                    "Tooltip"]& ]}}, Frame -> False, Axes -> False, 
                   PlotRange -> {{0, 0.8}, {0, 0.9}}, 
                   ImagePadding -> {{30, 20}, {5, 0}}, ImageSize -> 220., 
                   DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> False, ImagePadding -> 
                   All, DisplayFunction -> Identity, Axes -> {True, True}, 
                   AxesLabel -> {None, None}, 
                   AxesOrigin -> {Automatic, Automatic}, AxesStyle -> 
                   Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                   DisplayFunction :> Identity, Frame -> True, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    AbsoluteThickness[0.2]], 
                   FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                   Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None, "TransparentPolygonMesh" -> 
                    True, "AxesInFront" -> True}, 
                   PlotRange -> {{0., 0.8}, {0., 0.9}}, PlotRangePadding -> {
                    Scaled[0.02], 
                    Scaled[0.02]}, Ticks -> {Automatic, Automatic}}]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "x", "\", \"", "y", "\" values from \"", "xyY", 
                    "\" representation projected on to CIE 1931 xy \
chromaticity diagram\""}, "RowDefault"], "\[NoBreak]", "\")\""}], 
                    TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Nearest named HTML colors", "scanner" -> "Data", "id" -> 
     "NearestNamedHTML:ColorData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"HTML name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"hexadecimal\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    GridBox[{{"\"24\[Hyphen]bit RGB\""}, {
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    "\"red\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"green\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    StyleBox[
                    "\"blue\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], LinebreakAdjustments -> {1, 10, 0, 0, 100}, 
                    LineIndent -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0.6666666666666667, 0, 0.6666666666666667]}], 
                    RGBColor[1., 0, 1.], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"fuchsia\"", 
                 "\"#FF00FF\"", 
                 StyleBox[
                  RowBox[{"255", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "0", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "255"}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0.38692810457516336`, 0, 0.5516339869281046]}], 
                    RGBColor[0.580392156862745, 0, 0.8274509803921568], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"dark violet\"", 
                 "\"#9400D3\"", 
                 StyleBox[
                  RowBox[{"148", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "0", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], "211"}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "NearestNamedHTML:ColorData__More"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Nearest Pantone colors", "scanner" -> "Data", "id" -> 
     "NearestPMS:ColorData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0.6666666666666667, 0., 0.6666666666666667]}], 
                    CMYKColor[0., 1., 0., 0.], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"Pro. Mag. EC\"", "\" \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Euro coated\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ColorData, {"Pro. Mag. EC"}}]], Identity]}, {
                    TagBox[
                    PaneBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0.6666666666666667, 0., 0.6666666666666667]}], 
                    CMYKColor[0., 1., 0., 0.], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"Pro. Mag. UP\"", "\" \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"uncoated\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ColorData, {"Pro. Mag. UP"}}]], Identity]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, {Left}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"screen approximations\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "NearestPMS:ColorData__More"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Nearest brand colors", "scanner" -> "Data", "id" -> 
     "NearestNamedBrand:ColorData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[
                    NCache[
                    Rational[412, 765], 0.538562091503268], 
                    NCache[
                    Rational[50, 153], 0.32679738562091504`], 
                    NCache[
                    Rational[116, 255], 0.4549019607843137]]}], 
                    RGBColor[
                    NCache[
                    Rational[206, 255], 0.807843137254902], 
                    NCache[
                    Rational[25, 51], 0.49019607843137253`], 
                    NCache[
                    Rational[58, 85], 0.6823529411764706]], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{"\"Benjamin Moore 2077-40\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"spring azalea\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    GraphicsBox[{
                    EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[
                    NCache[
                    Rational[80, 153], 0.5228758169934641], 
                    NCache[
                    Rational[50, 153], 0.32679738562091504`], 
                    NCache[
                    Rational[4, 9], 0.4444444444444444]]}], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[25, 51], 0.49019607843137253`], 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                    RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{"\"Benjamin Moore 2076-40\"", "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"raspberry mousse\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "NearestNamedBrand:ColorData__More"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Related colors", "scanner" -> "Data", "id" -> 
     "RelatedColors:ColorData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Complementary colors"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]]}], 
                   RGBColor[1, 0, 1], 
                   RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                TagBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 0]}], 
                   RGBColor[0, 1, 0], 
                   RectangleBox[{0, 0}]}, ImageSize -> 20], Identity]}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,numberdata"}]}], 
     XMLElement["subpod", {"title" -> "Color triad"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]]}], 
                   RGBColor[1, 0, 1], 
                   RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                TagBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0.6666666666666664, 0.6666666666666667, 0.]}], 
                   RGBColor[0.9999999999999996, 1., 0.], 
                   RectangleBox[{0, 0}]}, ImageSize -> 20], Identity], 
                TagBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[Tiny], 
                    RGBColor[0., 0.6666666666666667, 0.6666666666666667]}], 
                   RGBColor[0., 1., 1.], 
                   RectangleBox[{0, 0}]}, ImageSize -> 20], Identity]}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "RelatedColors:ColorData__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Details", "input" -> 
         "RelatedColors:ColorData__Details"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "magenta", "template" -> 
        "Assuming magenta${separator}Use ${desc} instead", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"ColorE\", \"magenta\"} -> {{\"WolframLanguage\", \
\"Magenta\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "{WolframLanguage, Magenta}", "desc" -> "magenta", "input" -> 
          "{\"DPClash\", \"ColorE\", \"magenta\"} -> {{\"WolframLanguage\", \
\"Magenta\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{HTML, Magenta}", "desc" -> "HTML magenta", "input" -> 
          "{\"DPClash\", \"ColorE\", \"magenta\"} -> {{\"HTML\", \
\"Magenta\"}}"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "9", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "2.3970000000000002", "parsetiming" -> "0.134", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP178423e180d14a8e636i00004e7ie13f73a97ee5", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa178523e180d14a8e636i000062ebfe0f4ddabdec4307842769377011871", "version" -> 
    "2.6", "inputstring" -> "magenta hex"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 4, 13, 24, 9.0307501`8.70829878920713}, "Line" -> 90,
     "SessionID" -> 26971751672665615464}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "magenta hex"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{475.6, {634.91904296875, 639.6809570312499}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.879138249125592*^9},ExpressionUUID->"e70255da-1547-43d3-8bb9-\
52f964f0bf09"]
}, Open  ]],

Cell[CellGroupData[{

Cell["red heart", "WolframAlphaLong",
 CellChangeTimes->{{3.8791382823393307`*^9, 3.8791383185595875`*^9}, {
  3.8791384096807985`*^9, 3.879138429406938*^9}, {3.8791385377605677`*^9, 
  3.8791385779636483`*^9}, {3.879138693454465*^9, 3.8791387164546013`*^9}, {
  3.8791388175865197`*^9, 3.879138878004965*^9}, {3.879138916555418*^9, 
  3.879138918570938*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"7d88ab07-692f-4166-b192-1e30a18f5836"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "red heart", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    InputAssumptions -> {"{\"C\", \"red\"} -> {\"Color\"}"}, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "MInput", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot3D[Evaluate[N[Entity[\"Surface\", \
\"HeartSurface\"][\"CartesianEquation\"][1][x, y, z]]], {x, -1.65, 1.65}, {y, \
-1.65, 1.65}, {z, -1.1, 1.65}, ContourStyle -> Red, Axes -> None, Boxed -> \
False, BoxRatios -> Automatic, Mesh -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              StyleBox[
               TagBox[
                GridBox[{{
                   FormBox[
                    FormBox[
                    TagBox[
                    TagBox["\"Taubin's heart surface\"", 
                    Global`TagBoxWrapper[
                    "Entity" -> {"Surface", "HeartSurface"}]], Identity], 
                    TraditionalForm], TraditionalForm]}, {
                   FormBox[
                    TemplateBox[{
                    StyleBox[
                    FormBox[
                    StyleBox[
                    "\"plot style\"", ShowStringCharacters -> False, 
                    StripOnInput -> False], TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    FormBox["\"red\"", TraditionalForm]}, "RowDefault"], 
                    TraditionalForm]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                 False, GridBoxBackground -> {"Columns" -> {{None}}}, 
                 GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                 GrayLevel[0.84], BaselinePosition -> Automatic, 
                 AllowScriptLevelChange -> False], "Grid"], 
               LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
               False], TraditionalForm], TraditionalForm], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "MInput", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"Surface"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "ContourPlot3D[Evaluate[N[Entity[\"Surface\", \
\"HeartSurface\"][\"CartesianEquation\"][1][x, y, z]]], {x, -1.65, 1.65}, {y, \
-1.65, 1.65}, {z, -1.1, 1.65}, ContourStyle -> Red, Axes -> None, Boxed -> \
False, BoxRatios -> Automatic, Mesh -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             FormBox[
              Graphics3DBox[{
                GraphicsComplex3DBox[CompressedData["
1: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
AEXLqfMrxD6Jcxb1oYBTu4SVbp+c8e9iOLVjpP1Mvn9+RYzgi/gIyW6M/0U7
6TwHTtuJ/kT+CuB4N6Tv4BfPRx1p7CjX14Z+BT59l0f7ge/fVCfV9nKpwOm7
Od0PbQaf+jnuQBEbEpl/z2pVBaPv++AD/z1x3JCC7bKfEn1/gR2J7pN0vKie
QP090J8UF3oC8esQ5zjxAwGf+p+I+Ub8VWj9OzpPkL+LvlcirxGdbwX9lFPV
3r4X/QBc0zp3Y15MlNADaR09/C/q5QGHfNRrpn5HqLNM/Y5E/UerNTN6+sp+
VvAfpvX74KdE20PPL+DwT6btFP7GmReubh6UrHK/o/oq9n+qh6D9Os0Gfgg7
I/sHwi5N6x7CXkH7Hzj2AeF/Jfm30P1E+CWGx9bsUFPG4SdG9xnw6X6idWXD
IvuL9xmtR4B7BK0LAPzyuWF9B9vJdQH+dc/VeetRp2hCAKPvhriX0fcRyKd5
3YW/E3lXAp++J9Lz9PA8taNmiUWCT+3zQq8gflbiPYv6WcEPh7x7Cv9V8u7Z
dl/UoIGd5PsIxgv6NrUr0nsZva9Ruy6tW0rfGakdEjjeVTHfUqyNr2R+zmJU
nxfxgESfB071edwTqT0EONXzIYfaVRA3RO3ntA4R9bOi+hvGhZ53llMDTmhc
y2fUHkX9LkaOGbV3/rJKgdsZHxp7WVu2R0EfwHzAvAJO30mB03dDvDvQdyK0
32zVqTudz8rvRNBXqZ1T2EPIeyVw+r4p/CTJeyj49L3SLHCjW0L/dyr9Ruub
Y3zRb651l5+b/l7GrXt4bkzYUKzy/jJxnmKl45EycY/AuqN2fjou0Y6OhvVr
+DI6jmhPULfywEovuT3432+bFoyJOiDzI7pV6jk3iFfx2wS/tU3Q2akPP4l5
S3Hw0c55u3ourM76KPjAh4Xp3S96I48v5CTnFrTI8/jIujeuMrtjla/i16c+
f4qH2/UclXcE+q702jhzw4iR5QLHOwvkiPZL+VKofoU6zhgvWvc5aH1p8oi1
RazfcrXX69NkHOd+1y86CXNnVwoc65Hi2JcG2Bg3CnGX5eB/1xyw3/Fl0EfR
P+AHG9hExD2tFDj4ydqjr/9+I+uHiIPo8MRhpMNtmY92vlI65/Dusny0E3nP
0B7cU5APGf2M+wX0B/AT1i/4NnxTGqd2noTJKeYtW8s4xgXyIQf2IsiPGKLr
fqpJrHj/xf0Xee1E/JGEi3NN4sftVy+5Nr5I/C/yLEH+z+v2IxqlKQUf7QEf
uEn3hQ5PHHIFLu7Fu9ILv+Zm8/mexmxMSI7Aaf9Azpova76saq8U7YQ9k/4v
9hmsI9oerDv6vVhH+F/IufTk2LDyCBmHXQXrgvqZwz5G24//7fnJecv3HDke
BPMK+crARz+IPEUSvuGGe5n3xb/6VOuq13Nfyf7JmLeabHR5X5dKTuct8qzS
fZLmS6HxLODjnkXzKWGfFPoq2QfAp/vkjoL86iczKjld1/guuq7pdwl/PCm/
BN3fqJ8J9n+Rz42cL8gHS88X2v/Y/4FrNBwXbhYnnyMdj0Ydz10kfxf2hyax
y+ppdvnI6b7htWXK5RkDZJz6wyPeH3oI1q/InyytXzr/sb4QZ4H5iXkFfs8O
+xraP04VOOoLg0/XF/C5KW3ce4yT9yWsC7ovwW8E8rHe0U7gWBfiXVWat3Q9
Yp/Efgsc/yveAd1SzuimpKjYmZFHHfPEpUp7mUtWjoo/Fc3HjrpdwH/GrB1y
ulm84NP80kJfleYD2inyZhCcjjvyzWLcsS7Ap+t08sTfvwLnvxP4u/Oaa06Z
VjL6vxTH/8YrqmbcLpTtKuh/2HXpd0H/of0s/BIlPuqU4Zyl7Qef9if0B/pd
Io6G7PPUzw37MHA67nU1PNv9KM5RuYeCT/d/4HT/hz5G7avwd6LnPuQgjgk4
voues6e7WC4c8TiP0XNh+QXNJC3PHEbPTapnOvULiTWpq+RUn8T6XZnn3LaK
fWBUb6FxEPM9r/aqVZwqcKqHUD0Z55Sirc3ugZmhjNpvhR5L7PPA6fmuV777
Yu1j4YzqLTRuBfb/tEqPXKPSGEb1H6qfQz+herjjkzHBZVHZnMYjwJ5M9fAW
Huah9v2LeN09xrGlYUpG9SLwqV8KcOr3Qu0e8G9xrK04ds1dxul40f0ZON3n
qT6GdWSV49HhZWU4o+cLXXc4X9BO6r8BPj0XqN0D44V8qvT+Qt+7cU8BTu8p
VK/GvUnoY+T+8jwm/9up9zmMnkd0H8C5A5yea2rLpiyJ3P6B0fNow86omatu
pTF6/mrt0Tzy8V0s2xtUcWhjfDaz+3bxac2Dz3ineK+ikQ8KeYXVpBTHqxms
9r1Wmr1MU9kdvx3ebFE+D3S9UrMsUsm8miwpntIghm3Y1qy/zYYkFrd01eYO
iVmsbs/RnRr65LLcpi6aQ0fkCft2xJYBTy1axAp7KeyQWl4vrHwLnnKvNoeW
rNoZzSy6RUzz6pXFLjr/OmBfnM+qC5cVLDXIFf4q+nxx0KquKey3bpW15q8c
jncT15Kvj9/1jWBWo8yMP8z25+aTPNUsAzP5/rieeZ/1C0TeA8SVe02uqdO6
UQgL0vPULNr391yezjaNZUqmv9Vz/Ta9p3z73b6DEh8XclPvNzxrTwa/rn+x
+Zp5Sax6oPuPnWNz+e8/zjn+pZk8adWK6jvP4lj3jXln8+JKmWFuw3o18mK5
66JHhVXxL9lfBbdg649cHvKjIuDD40xmeO2yz4Y/SSzWeqJJ145/+zNYXT1l
j5Infa7M1u4bwrpej9AZbJrPnY8tG1zwSsm1WMSGfr3fs/nulzssPafkv3fd
ubTYVsnd//QfOKxDIFdsP3epYwHnVcr1wZrHM3jIE703kVbF7OfYtsY2lVl8
7zfzK3HDM7htjHqjDb/9uJlXaN9svTResE7nfKMVmVzj567WpoVBvEujr7zL
2Wx28VNets4gJXfsvnOks+9TblWwedvQqos8K9tkd+Tgv3ynjfbBXgVssO4h
V/2vCSznd+fx1u2zmF7dNu51XUO5Yt7gunMzk/jP6emeY27ksNqfP/3sooxh
ES53R80LjmVxo+rW1IrJ/ttPL0x0yp9xLYtD2YlH87nZz6XTTuT+7YcWGY8W
rktgnde1HTQlpJRr81XdFjaKY5u1DdR+F79kNq3OXjOz+NvPSc/ff9sTypSL
EzRv3X/K06bNm3Y9qIBX9FqfvqdZIte67FztFuPLR/ycOuNbRQnb+/Np7KiX
Sdyx3bjyoPwwNjHwWmDzOWWsatrFtrNy4vj8F0OLFk0KYiVzvO81PfWeq5kc
KfX6lsP0bo+/5PIziTndn6nvefrvenvcs97QXlm8y4MezT6V5LOp9lFv+IRM
kUcrZbtNr9YblcxyutWj8qhiVjH47BJLryhu5fxn6ocIb777V87NX0b53Gl+
1OhHQUqmrLfhzFD99+zH3F+TY9vmcn3bR++0gjL5ZK1bm0uzItn17IOJu49n
czO9tLuJg5XctLzlEreYp9yx6ZjqgdN8uUYP56sjaqSwhvGP1BbdLhN5gZDP
B3WHDS8EOHb+L1nUR7B/fZ09N8hhOp8V53waPuMm3bUmjGuYwMfkbDx8KfLv
/mbivb6OVyx3OvjDP+ivflahWB3eJ+cZT09tXLf+NSXrO+hJgscJJT/c+Gih
e+tAbrc4eseqpq94+wynul71Y/laDU2z9Q8q2OndQzoqlytZw439so46KHng
mtWzohcE8mMhH4d9LSrhgU2OJCbyJK4/7NNi/7Qw1uP5o3c1dpfy6C2z7rpN
C+U6x6dWrW/pyjcnXciocSmR9zzZtZ+yKpN5eSceGj04jI94vP9r17M5rOqT
z7Vp4anc0XZL2o0pQdx63ZnRA75lsaRNh1sfHZrBTZSr/Qur/fiEXE23mE5l
XOE09NDupq+Zxp2oycPN3fnYN1Grdk4q4xV8wJeVwz2Yhtr0gvs7X/AvmltC
47qVMcP7XYpHTXrFDVMGdNeZ7873e5wZssagmGvczj46ulMMi76fP+XkDU/e
om9/d8fXsdygUd74Fol/++1Dnn4922fcdfbcmf3s3bhyUyFbkRvEPWP6l3fq
XsmSt3UYNLRNKa9oaDJg4uRk1vPx2nydy9HMqnmgpZmaB5+8dvEG/8UR/FI3
NrJZnUo29b/T/yV9K+ft5916afTgPTftndm9zZNwpky1fO0c4sqjz906NeuC
K9+z4/qCmdMq2YbDplZeM8t4ToGx4/CyOB6SPkYjfmgQCwr8oQjYWcb0ra4N
b3HiAne1s/zSZLsHtzWo2z+mZyrTfFlt6Jb/dz8sDwrS9XjHXRdE2xf/8OHR
274dal2YzI38nHY7OJcxm93dMzufzOH69c7ezHufyhVb3my8PSeIq/+Oju7/
PI951em/rJtDMju2pNGQ30v8uavO1IGfVniKfO/1F8+8XXC7kFkFVUU0v/5M
5HMY+/F+gcHvEqZe6vzb71UBQx5a5Fd8ssrgSttaucy0y7Xw5j5/99X6Tu1D
O0ewmPpNa4x5XMgcN25NqHM+g8U9N4+6vzCVRf++0S8zwJU5VhsW1jK4yzqt
b6uxZWYle9Iozu2CZj4rMTo696u1kh3bnbzl5eIQFr7TN8V7aAXvabo0XpEf
zF27dP4YNfM1e23x4bT69jJuVTjaffvii1yni/fILo4efG7Vu+j/luWz9j2e
WjmG/5XTweN2cK0YVh5hNE+raxl31A9v0HLvKx69ftP6sYfd+Ygv0Q1HHv27
vzzY8Nw8O5VZZRzsadcziDfUHTfJ4oySVU9qeqvzBSUbbF5eol0ZwO9fH+l8
6+86VjRa1vJRMyXT2Tbm6Pp8d65otuzt7FlbubLZyaiNS3x40rpNffdml3IF
uxd2+7YN8+o95KmNfij7rDb2e7hTBVtZ41VNt91/9X6yj7W4fWvUup1x7LT+
/QZbLLJ5d4PshBEtcti0fi7TT0aX8lHWYbaF5bHc7onvkHz3l8wkzMK776M8
rmhTa5Xf3WRWMHZRUM11/lz5J6BRvVuuXL/pHB/+8w6bvjl1sOn0Shbtozsn
pM5zHn3GWjfd+g0rdrh7IGREJdM/OGrY065u7HRV21YLVmdy5ybWW3aeKWBm
V527+JYEMtSLmVrfzXh63wJmZ6Szpd4LN4ZzzanGlMZvlhazmvPUbM5+VDL7
JybDl5j81Qv9dwR7Gn1gE/vuW9jjdy47rPnEY79DJp/ftktIypB4pv5i/6vW
vnlsu9G+qTVtkrlTox8Fjaz8ed8HSa9P/clgH+175v8alc3TPN9ruBzOZMo2
tg1dWgcw32fvBreqmcV2/moccTgsnym6H3354J0n79l+eHjYByVzsvijkXOp
kB3zt6jSO5jDrbz/82hQlMqUAe9fnh8UxLU6TA04W/2M13fNbRNyIY2ZNzxY
6FRVwmJcUr8ln8pn/lt3hI7K+rsu6h39nLYpgYVlhTVclpvLUrQa1xnvmckL
nvWcGXM6hdm9brSg/Rg3Ft3EtHeTyRnMVyuqcNHsYtb2/KYpS/aVscHOj0sS
lsczv3tumq6uf+8TkSM9G9ncZcrc2gsGxmSy68sMRp+/nc/U784vfhhcwAwc
rUz6N0nkfm4L1zwN9uVKryOfNqzxYnpnjmU8upjNLA9Mret0JZv11h3t8Wf+
3++OyvFZEqBkGt+bJ3lNeM9C2/S8WBpazI8tGrna9W0U1992c2Nelje3LnnX
cMbQXJa2a0avCWWZrPaSLdftCmLZ7/0xG/tMyGXjs0srO//KZNEz5528cyiZ
TdUd1u1olzLm2vj0yltpr5hdU7taPca6861t3tc5PLmMRVtZt9+2x4PpXHzV
1I694C9bpewt0Pt7T++uDB0QG8yjozTuf9j8mjnPuDFR510W9x7W73broCxu
NWPms6XT05ni++9vtqYbuFXdal2dCB/Wfu+NWVfSSnlNb59otz3FzGzY/gwr
HskMjF01+670445jbetdffie1b506kpYeg7XaO5u3zcyhbU42LJpacxfvaDe
Ip2QSzlcyzuttrF/PIs2PHc9vrsHr2jf/OF2pwjWqFfLh89qVTIr9aNrIgye
cf0VPh/cuiUw68/XHroHl7P288tKR1Zk8MDEDk53x2RzQ58H+6ceymT6SeYv
2cRX/O69/p139ohls1oHjnO+W8GW1Lz3I/5xAVeWJp/tZZLIrIb+3L6pny9X
xFf9Ce62kxmWKIOHzfLhBuYTrrbLKuVaJ3b3e1vtxTxOfdf8YJ/N9y/QnBHp
lM0M+h16F5QZz3LUddMNMnJYoLKZs+GMWFZw2mHeYhbFNGc10ctulMv05yq7
V7dNZrYzA2Y+W5zBBi+e0aBxzWw23uPoHfcO2ez5jucfez3PYoPH63Z85ZnF
ngzv53Cxo1LU/0Xch7LhriH9XN5x/ZpZU947x3PXKzl7yor+6vm/B3+zC/+7
Ps8tumw2IJHVPbr/z592Wbx+ZaVyqVEot+g8d2PHtlGifrHftvYXrz9IYQX5
HSc4vH7Px6+dvrTrmyweeNJ27Pjd4Vzr8ZGpf7q/YPNNO00aaRvDdpkVJhkc
rmB7T9R9OSMzht9uesNth1E2n79hRcmeBf58zunjObXtozm9d5yo7WJ4fUw5
Q90uce94aLzrbkQpG9zl/s0tNeKY3fuRfo0ae7PnZ5r0HjKhlJmarX3xeFky
V3RMznq2Nob17xpXZ8uVUqYf1+VSx4YpXDu95peQzDQ2/GF6xttJFUyt2vV3
zZIYVrDg0n9RMxJY94OhRwb9Lmd9vTMHrbvxnlcokhWOr8PZooPdH7T0yON+
q4xm3LBN5vUrplpqnPTnnx6ae0fsqWCKdi7jtceGsZBT3oEny4PZzbNOS9oe
qGA9zf7MtjMJYwWLe9V6bRbCFjr7jI/ols8+WreZPsjy7z5TcKXvA90QlhCl
PWno6nxhBzDU3f7i6YD3bOL1bh+0d1XwYxoznbJKw5hT99BuwfvlvLWoG4J8
qim5tXNqHShletMeXN83JpQrrYzvvP39lCv0z3l6197KKjKm9/7+2ofZHdjG
9VJLuX1n78zUNXkM94uVOv2HpK74q//cPWNRqmHH9LOOzzoyIIK7DF669vPl
CjZ/VdXEGV38uF3DgSZlNzJYVVAz/967iplVUfzchfWsmL5PSle/ch9uXHn2
ZLRbBeuedHhKslsh03xQ4jNpRwaPGDjGpNAkiRntDuUstpSFTDZ88EA9jmk8
3N12TaE3s24QuSTqqJJH2NZdHnJRyVaaXhry4EuAqHcGfyqNoBmxi4PcOc5H
k03fn3xo93c+jHi5dHdLH6bYURUzxCKQD7Z6vKthvSzW9tNJ6/uR+UyDqX11
XfGOaQYvbdS2cTZfqeFt+HhnBD+WXHHcseKvHhnx4GOkYTbvaelz59vfe6yH
2/xdZzuUsvrm1x8uHpPMct5stCw9E83s2pl1zCqJ596HvC4MSMrhFsFN9xbM
/bvfp8xRHi52ZRpad3Y+3ejKcf46ZtUwPVT0VOTpiphddaSVUz6L0R89Nv9J
Mau/yCC+9880Vj1ja+UUt3R27Ords+M8wtmxldvZ+A6prNmj4O4RmuXMVNfW
xOZyKAup2NHz9ucUZh0fZTChfjkLXHNmVJpdEpvfK/Fh3RWRbNF/dp9W239k
Hf/rPn/anb/6WdCPeeHtEljpyZN3Fo2tZKPmH++0t3Yq01pbXdGwaw5TzLGP
yND8wBSvG/RpnHeD2daNOXM0KIdNdmqUbNcrnR2eHnRfxzyVba91q0n2vBym
2bpfvW0bYth8DYVug8/vWHVGj2OzXuawYxnrPY42/9t+H51XfguCmd+npMc3
T19lRzYcih5w8COzq2u1ez4LZ6Z5C+ptTwplI7d0fjG4zUf2utWvb/Xr/9Xb
Rh2M8WysZL7jZmy3cilmyw9/rOPmn8d6zn+hrdlPyXrH7L63fFweK2pb6X3W
9e85a9zCaXhoPBuv3uaZ5+J8lpxadCw/vIJprlvjpfSPYBVJWjNGH4lhRp1m
pXgXlDOr/0PYmcdT/XyPXxQiQgtatFGKdmlvkCylEoqkoqJkbZckSUVIilJK
2rOEdvvY933fLve61072SNvP5/G5M/P+jt/78fn3+ZjHvOY1yzlnzjkzA5cU
lfNngLvvhdR0OF3gchrn1b2pvSBA+PXEJYKjcre6ccZqp3rgWn/MGJ7vAFJT
Fvo1eNaBumqLAvE9peD63mz9o3E9QLc12SptSx4Qq/Tb6ddVBK46lkjLVPeA
pKgDwiLj7wOxJT0iPz4kApeQPE+PIj88fzKC/5pI7/kGToau++Vzqx0wly/g
9ftYA3ruTsrsgDHgpFlzq4NfO0iyfC5inlkD7KO0lO/oxIFAWZE/r6N6gMsu
ReND+TeBy7kiQ83V0fh+b+QvRX7C4UCvTKvhIpi1CgZMGtW7smdt/dcGMaB7
RIJLlEYO1HJ91TDXoQYEWfU3GEc3wrdic9S8dUf17cXOtnFWn8A5Ho+83SEd
sEh8H0s5LQee2F7w8eO4XDC8n8+swKAVfgrVvhttUwXvRAY7yCkWwJh1P0yr
/PtAT4sXfDG6b3TfnC5+hVEDc5JyY9zFuoHDyO4/jZNyYdSqlznJ3tkw02aH
pv+MPrDpwoUGaFMPVVpOW+3RqYD+ByqfvdjbC8KLJIqLi6pgUs6I4oS2WigR
MvXHdJduEH2e2eTt1g5XbB2esDy2BqzIsX7ZGBID7n8Oe78mpmd0P6B6wV8v
D2R1BDB1m4qA97ywl7PvkHjfnYPr2p/YxIEDbuysgfZ2yCN486ZehC+YzuJL
tdce7a/OwqPRqpmQp8t95zvzBxDF+4q0VLqlf/XA1m87gXlGBlCaKXBEib8I
PPjzO00nsgfyzDu1e85ZD8DDuSOxRiAabGgJeOkT+g06nWgLKyssByYCNuUO
pi1gnkiTQtPbDqhrO686nZcB5FVnbMiLrgevgxZPP3a6A9ulsulHNu7dXwqe
dQynRjd2Q7HmskrhqRkgNPSQhUhLF3CZZx5a11sD6fXr8Ke2vP5QLVTXul/k
sZ8DVohdVVCyKwFnfVXOWd2pha2T0u7dj6gFUytl++HFapiy/oKvVuqoPm5q
2r/OtgaoGKlbPE0sgO5zX610Dq+BdanVsw7ycECRX0Cmn2EcqLuaEKz5tAb6
RY2XTvnxn3Pss6bUB8UAKfWyTdY87dB9n8h1xlAWuGPVsO6JWz4ssz16omKA
A4PvXpQ9rlwIKpQ1zx+4WQXLPtfu9s7pgVpf4zJ1GHlAN8G+QfVOCfCRzeSz
kOiFDtvkpv2cWQhM0+pvnncbtRtfNq9eGWEHw7vf9338ygYu5c+NGowK4cDE
1uDNk4rhpNX7TwR1skBO+9U5S0NLoKBgxeIbolnQr9Pl9GRtNvhUUlRpNpgH
W3v2hm48WA8/5R3x3bu7Ht76OE9NOakErvstpfYxIhlae5hCY54KeEla6/gE
+2ZoXxy2wDY9ERadTAq95psI052ebYm70AED5ih8NJ3QDuW/KOpkfMyCc9Uq
JWT986HJp8Ia1v4yqCuh82VNMhOm8V46s8eqfMx9dPi88IKmwIdOtXBWwmx3
az0OlDrxXi/+YxFwu80jrJtUAzedvOq7Y4AN5478No9aEQOOvYy8NEW7GQo+
zRx5IlkCk54eXb7LrxQKRns2PLPohS5ZF0RmtYTBdYo2i1K25ZP5efnMxMDB
axDNz9LrfM68+h3wredO/SkKdTCt98/GuOlFIHrp7ZLzt9thp49mt/DzGthj
570p83gMUHnStPdafA+U8l+jJj0tD54Q0N6tU1MEVjjwBAZ2/ucdJTP+Ys3b
cFmNYctKnSLofuvsagPbHDi+cCDr9+Ea2LyvWycoqRHK75bje1mfA3UTUpzX
jsoVeZ2wEF3jVjyOXldEXduURsdnu4VdYgQDvm/cMr3hbTM0fS946xE/E8pL
OcSG9TeDsmmN0aum18Kg4yeXbJzDGR3vZSaKaxnATctKWupvPdSR07RT6K2H
C+dcdzLv7ARSf7bsUALfoEuRpFeYSSK8pPZ17pl7o/aZ/vuapytq4arbU1ed
UuRAxcXzmt8M1YLtbhbiK2+0wKqaiJPQtwweX7BSverpqF5RlZzpndsEefo7
ff9qpMBXi6tXDY7rB8Eq3wJN7aqhWNa9zWoqHNh6OWHVVlsGcDlqmyZllgHr
tNffOpTGgSf2/vQK2l4PHIPKrddPGR0v50dl73IKoNIuXbeZrEagW6uuNyTU
C4MTNCOeuhdA6yE+2ZXVNcBonsmf+7pZcNPr3+0BW9nQT8s0wkExH2aJmPis
aUqBN1bmPitoZUH3ZatqDhpVwh+1w2uLvTrguoOHpocH1cG3exb2xTY04vdo
0PlHlcY63VuXakCZtcem82U98M4H1gfvsEw4Pf1G8tWGNiBX+fle/P0uGB4V
k63rVAozBpQrJFd2gkNhbWtXDH+D4UlZR2eCCpj3RuHvVPcmcHxLv+jxab3g
rfrM7LovBbBqa8GGzU2NIHTynl2ldztAj7aHhHhAHUza7jjdqbER6I8z8Nwz
qRc42PcHrbYtgHm1+p/XcGqApJzNhn2lPSBg/ef8nOpMqMYwTWGUt4GFd7sN
n/V1AfvnevMfO0bDV5fFwvtZPUBZ42CNrWIX0E0JC+BjlcFoSxdF48cdYEOH
rJPnr28gfsHE+lVrKqD9k5DPyl5N4E6AbPANhVzAo3GxwMQvG4pYm97ZNrMP
WLNsBIxcqgCt10z3loc02mcDWq9hO2deza2DhQ8gsnNWTNtaPrsjF3ilBSjG
C9fC03cko4sWdIPTMfV1KgMtIFz+g1PHjBL4tLom59CCXvCHr8Bk8dcOMFfm
/aZYZh10z69KyL9WA3LO2q30KW4CAdIPHq4xSIHSSyOD/Xj6gcxwqbrSOxYQ
m7JD9S1fBfS9OtH4skYv4HG1S3afexJMPbAn7k4GG/REh1tODiiAx8Y7yt6N
KAMGlt41ysNM8LpTZG6FahnsLHpz6mFEDUiymmw0c5iN9anb4sv7y/xrgW6z
tJfps1G7L+6sW5pbNVROkxHR7W4HKuu9FXIm+4KCQYF9S1WLoJ+dD29RXA0Q
vMI58OUPG9st6D4ZZJ+g+2eMG5Ycu9/HwXaXM/+9sy8eVcHv1yZfzRzfDt7O
un1xEicL8Pi3HJp+Nh9KiU3SHzFLAqZd7Twv734CxULC05e9GtWXA/EbpJ2z
gRh/v/Czh7nAUyjb9dLZVpjU4Ns/N+wzmLvXbvx2dgPYOE7EZZkzEzKXSX7/
UBAMTBf+fOB4tw4krYvsqQxgQ5eXm1YNc+KBjJzAs03LmNAoe+n8BMcGGKxz
d76BeQ4IN2rYvuNoDTytL93wZ3S/i+0EeNO+W/YRzgsSXGmVucm5CtJ2+H+2
X42je565xz1fG/TVgO9Vr2I5/N2AR7Sxb0tHFYw+WQG8R2rBh7S04xLnRu3U
rQb+ypwQEOX54VJ3dSr0kQ7Z6WLVCaNrlC0EN2WD6M6mroxruZCv1Xqdqmsr
dJhZt9g0KgPSdntAymDYr6YWKKaZVVB4owEsiRyZsaWjCTwu1dvYFVwNdb7o
8FzYzAEuTcXifeoM8P2J3kfLeSy4IjrS2ay6AeS5808c9OkAWWvnzNVdlAuz
YOTfzbnZIPLs0PwyyT7AyZt0sMGtHtaJredZZFYBwo6rPy/W7QXLN/MNRyX2
gHUHvihrjcuDUX3q8T6NRQDNH5eCWeJiz7wgmj/C9Y+kfh3vBcx7C4usLofB
4YFJ23MP5BO7N3TZ1JpdrhDZvecPWwzFTWwHWk7vVAafZkFkb9yIOeA3fn8H
MHFw2O0gWwcH2K/dNs8qwnZ1sNPpDvvAGhi1bunhossxQDnxZbbv9UbwkjUj
p2qoDhaIPqmcBbsA51ieh5tcLcibf87SbzYH9ojWrLVSYoBb2cldUwTbgG5f
lcXRxQz4WmLNUwX5VmCUZXNfV70AaC3wcZX/yoFvvQ6c9FcatVvgRgXZFcGA
lv9KzwPDekEtMNWecypnCQeqzz8nZDk6/i7Z075b3bsH0mI77m5YWA1FvX5m
m+z/BtxOF1p3eI7qJQf5zHRdDlxhNuHC5S9FYAunHdrubAZSvILnPouUQIdP
x1OEvErhadnLfqtL2SBPxhQ47q4ZtU857m/LCnBeBDovcEw11PpUdDnkMS0X
5q/YDe7sTx1ISmHj8n6M9tpnhTXgpJxX0cu+0XVSv3Po08YYoGPEXwks68GJ
GG/vWK16aJx88cfH2BLYM8VFtW9DCThf9vBz56wmfC4V8Z03t7124W3C758i
Lruh9/7UVg5+fxbxVy+O+BsuacL5SDRH73cgflJgaWtvDAe/V4v4BeHpHt1P
Ofi9WsQddXR7bR9y8LuxNEf3uq8TG3JL1a8FK/p2qY/ENY7hSjWWh8frk/ed
EUf+mSDryC0DSUmYp200il1awMLnc1X41x7brtwIthg0POktZuL6EUfnKY7u
5+vINoiBPEn/zRODn/usCq2boJDP18vi+gEAcafFva6n/JpwPyCu4KN17OHh
JtwPdHnU/7rLJX6pqqeAzhHFh2s3kvKIT/+reGiuWBPuN8RXX5ka7JtJ+g31
J3oP2kj2t8sMVdJ+XrUBg6XbSD2II38jqgfVrxt4RPiGC5k/NKfbf7H1y4y+
R2QeIo7+F80fuh4031B7Xp7fdpcRMfa7q6bOu96zm/Qz4mhcvizSniWy6OuY
fv63+lF7aI7af4zrD6lOPKX/1Jq8a4w4mifL/I2X3g5LxTz9kmq8zETyvjPi
QyXiRRe/MMfU7xPH3zVBpQH/F+Lb9Y6dfmVdj+cD4v4e3g/W7yXvNSMepNFy
pXxCHR5HxNE7yzsW9XGED9/D464bLnQ527UJ6Fh33hvWKsP9MGnuRD+r0CZA
99uddZMsFh1owucBEY+/bnru3rkm/B4iGhf0Xk+Gt/99zf/Y21zO3v8u++I9
Ns6/ReuuUW4a34FDjbjfEEfruvyV9faspR8wX/Ng/rXvH8m72Ig7L0yJubaX
NWae9/DFyV/oJfd+IK4SdFRz98Im/P4akhu5NrrSn1XYY/qZ4cd3NSekBssf
xNF+s6hBSfT1DIjlT8hdlnR6CBuPL5Zj3HX6uypkMObsJ8z3Fe9otTZjj/mv
jZ9NVK0l2Xg+Iy5j3Vvyu7ERz2fEe40sUzSyyDvXiNublg1lizbi9uDyagUS
QfcayfvdXF4VebD/6BQ2Hl+a0/oC3XOIzoshjt51sndcoiCh1ASKkrPF+eak
QJav4yyX+034nCbil06IeXy93oTfc0EczdsNP0ullvxKGlMe37tF1Y/6x6G6
ZLKsai187CrxdkoseY8VcTRva09IpTFPMQGz/WXIiOKovvn9nrdoKRvPf8RF
xgW+yP9H/yD+b/3DlDpjNvKQzH+6PJqfdP1ofq5gHMjTky+Bk3YufNAkR/6X
5uh/Ea+/fPCroxTpZ8Q5f4tvXhQm/Yz4bfangOdsDnnHhMtPiEqmR2/j4PdT
EH80NW7TjFGO1gviRf3M8e/Hc/C7LYifqr129+NbDn73BI2X2c43dtKOTfi7
iAtuPcFrGUnqpzmqn+aonTSn9bVhUuWlmp3P4ZKdemLB87qx3ED5peK1LZX8
03own3vWO3dLfAjUqkxZ79H+DXN0TlB4bVO87HAX1ssShY+Oc6SInERcmBpH
xNE8hBnMJbdzGnE70TtraH0hjt4zResLcfSuIppvqH42d9zRfEbyeZMds9Zj
OQfbS4i/OH+3XCOHjeNfiH/Zx5hY4MzB8hBxJN82Oe5KyHpByv+bvkDres/l
0DtvOooxNw+9/G2j5th20nIb8X+T88pJuwTFk0k7sf7inldF/4s4an8Ddx+N
uFqvQbj7fM6Yfhi27B/P+/+RP+i/+GeZxWwVLcGc/i/E6f5BnP4vxOl+oNc1
Ps/O5fQ8RBzNtyTufEOcllfou6h8Ole/I07rd9Q/O/YdWaHqSeYt4pJVApcP
TiZ6AX2X1iOI/5seoetBnP4uve7ofQ2DkpP0eqH3U96UnESclm+I0/IT6X30
/qBJOJ+prj+xH1JOpa47q0feS0X8UaCEhvtX8n4x4nPn21zbzCDvRyN9jc7d
Txs5+i6s4yvmzdqtMn755L3mcBdLbbfabnz/T0fAp9X3/94BiN/Ydb3QoZe8
m4bGkZbbiNPylub0/gjZn7R9jjgaF5qjcaE5ag9t95rnfvYq2h2G+b+1h1Py
ye2vT9MYfUHrI5rT+ym6PM3pfdxDSp8iXkjpU1QPbUchTttRtLzdybWj6HpQ
/yP7Fs0fi6bMsMUF6Zi3blAZcrVgAnp/JFoSLlsjzQT0PkgmX04l73ADoPc7
y1xUe3Ztqwf0fge9W523+9umHXoX8fxE78H1ABseR6eDmCN9HT7/T6gxwxHb
5x5OS9qtwpmAtodvRuU4C5uSd2wRN3l+xUJjD3lHFa2vkq9S4md7yPuwqH4h
NsvQkqcO0PuvmoFFMlUfyPvgiKNzFvNfrL3xgCeR+Cu4cvVPlk7c8avRWD78
klJI7pUm75YiHrNcsutPZ+OY9l8Sz1t9e5i8u4q42xrbS1JpjWP64cjzxAw9
H/L+KeLbHvztmWrcOGYcI7R5EkL2MXA/oPLCB8pDkoXIe7iII/nWPnLDwenh
Z0D7H2h9XT3wdFvykiaI9BrtV6H3ocgPoDXzhFbkuAo8n//yxHa+20HK034D
Z+9dDh5BxA5pPzV8IcGuCSL9iOYVsutoeYjsQDQPUXv06x6fmeBI6kEc3fdI
22/G+mYDF5oaIW2/LSznV/WzZENanzaFBy376EPqQTxymfqlwilsXA+WA1Ft
mR0PxtaD7BybDSObC+UJp8cFcXpckFxyrXLd185L+hlxp32iNzomk36g/VSw
7fDnD/OJXaod3HxlnC9ppztvxJuZuzvAL4P1r6ZYVmP/AOLrb9190rmmCu9n
EefxDjO6J1gJDfji9K/03cdcdvvXW6KMCry/Rnz23ET1EcVyvN9HHN3L0SO4
IW/CigjMH91znv9hXSmk9ebDan9pP9VCvI9GvEot4JqPTRF8++Ptn5+H0zHf
NaNqY1N4Om4/nm+9Ew9KvkqFEYuSRGcse4O5Tqv/sr9asbj9iKPzUD5rRc7v
3RuN+TFdiz1O03PH9BvyV1Tw6v4K8iXtPLloru/T2cXYb4DKZ2rqbRyfWQHo
fttdJ3lzeHY5oPsN3ad3pjFujdyZd5gn2j3bss64dIy9gd7NfBWowqv0k/zv
MZb4fnV2OqD7B507s/2h7Xf0QjRuT3KAvNWO5VWAng/oPVnrDWFTVLY8wesL
6ZFbogskXcrIPi5pn0RALP9zgPaDqJ4uB/5vd49Uj7ErkL1E7/uQPA/5nu19
+v0XXD/9jjzi9PvseH/HrYfdMhQqqJ+POf3OO1qns3meCZs4kvoRfyX1kiGp
QOqn/XWP5O5oLN2fheW5k9C1u6W/G7EcQPylYeUzIMWGtN/sj3P6cesUNr7v
iPZ3fRXxv6X3i4nHMWHbfnX70yVYTyH+XShhTuG6YqynEOfrzeq4eqh0zH75
tZW/2p5FRO4hju7FRXKSbj+SV9g/xv+ot1ySPUb+VyvBwh/7cwG9jm7N1eVs
2l+D9SbiSL9fATvd3oWl4nrQO7PNXplOVr3pZB5y9cgh7r1etD9h8/Dm45Pf
E85j63Ba9JU1XGpzM2HPrH9wrv1zzk/Mwti9G383cujuQ2nhwjH+NDq+gDgd
X0CcjlMgjvTpQ64fHnHab4/3xVQcAXE6jkCXp9tPxxfo8vR+nPZXIE77PRBf
OuuEaHQe8XsgjubzoQ1HNa7nZWO/Fh1Hozntl6Pjd4jvouJ3iMtR8TvE6bgb
4nTcjea0X86KiushTq8jxOl1hzitx1G/0fYJ9t9S9gnitJ1D9z+yW3TMK28r
lXTjd6KP/1KfMPXjE4g4WhetJwVWeE0JhrTcptcXqifR4s+8327/WF8185TF
Vp8AaN0hP+0rSh7SnPYbX6bkKuK0/KE5PZ9pOxNx2n5DnLbfEKftZHpdv6ix
Kp39hfiLaLsOcdoORH71v5ReQByNYyxXL6B6EE/i2odoHHdq2Ei2LCH2DOL4
norSJMtikWgw3tJ0x9GYZvgr+OcebTESF0P8/gqDI6nvSRwHcWQXXfCYqKp0
GEL5lplduds6oLV7a3VuZQVeR4gj+3D+3+ocV50oiP4Lxa0+cePRiMc7hFyN
ZJF4NBpfFE9Uirj6YdXfGMwBFadG9ayk4uOIK1PxcdTOS8CgU/wCsVdRv0n2
VerP0yX2HuLIXv29O2fApDIN8yQ5W91pdsS+RfXz7/2/9jniWyn7HHFkn59O
jpg7++c9zGX1FXemDBD7HH2XfVcrwrSd2MmIIzvZmGsnIy42/l7/rqVJY+pB
epaWD0sGvynY/YrE44vr5+pfnfk1z2urTHE70TxRVi1ZeiY8Ga/TPiqOhjib
im8i/l3mSarvP+J0iE89IbiK5zeJ69HrxfJH7iW3wI+YR3RsY4+PInFGxA2p
eCLieVR8k153aTfWHXdMjcHrwsAxaFPUCRKnRnx6Uuf++NMkTo34w0PH9LbO
IHFwxFE8Op8bj0Y8rrQr+oUFiWsjjtaFmsRc/peBqbieWiouj/pt+bSID0NJ
JC6MuKmcnvI3IxIXRhyt07oJlTddr7/H5V+/F3+7enLjmP8dpuL4iK+g/FeI
I//VVZuTB5dJ++L/CrDwdHl9gvhPEHe6e2JqpDzxIyEuRvnTEJ9H+dMQH/pQ
2jjJnvjlEEd+vJ7jljFtq9OxfR5IxUNpf5RJiNFhWSMmnv8D1D4IcWT3MvoL
ta88IOPSQvmZEUftWcr1S+M4LOX3Rhz5kbTbGo8osiHmgZQ/HPH5lD8c9QOD
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
99gUvj0kvp+4YGDg/fdcSMf9ve/fzt9rVA5B/Kzn9ud7MO8LXn742+UyuLfW
RMfrM+HM/NtzY9OKYXnXWtHT9mT+f1h3WmGlMQMeOf7Bw8C2msxbvTIrSSsG
PMmVw4jHy4h1bNdmQKbI9qFSryrMS9p3nHRexIAmn1jH9MMqyTql9h2oPX67
Bf3ErmZA0x6ti4t8yX9d5dobI7creU2aCc+bnaivcT4ZBmvOPuNeTvIBHn3c
a5o9rRJqD755099A8gcs3vFVXW6vhgtkdazmmpD5o+DxWkw8pQxupfIWflfH
jN8uVwVF2koFzv0jDyFSPnZde38pFFFrnSmXR8rf7zr2dM7tEvhIJlgj8R95
DkNU3AF9l45ToPJ0XAOVp+MgKN736YfIabVyNjgdNOvKL3YGPp94u9uu/cko
n7Wz90esWCbOw0zh5i3wtv733nJUPmFPZs/mGjZwexOqlyqWhbm522nPtXls
kLQ3+fWlLZmY2y6Pm+exkQ02PC7SnppN8rGFLDLtLT6xwX4qT1uQy+lzyrRf
C5UfH359p1kiOdeAyudk/NzrIEg4na+SJHLiziKjEszNbNq6vgqReCVad0N/
nNQUnrPAwy2gJDuUvN9ayHOgxrqRCWzzTKcv31lB3guj4mh0/szkG8Fvzq+q
xVzgkV1D7T0S96TzjnhfFr66Nr8Bl9+Z4V7sPK12TP3qBovW7OOwwbidO3ly
lsaSPEbKz4nqf8YfIZSbXQOUVnnPOThQjOvR7jfb4SfKAF9eWRmcWV1JzunX
fWyf/7wW6HL9vYgbllnPc/vBBhrqd8saRZPwd4NkxP6sHWED8OSqgeppwi8I
a2XJDbNBqJPOzOc6kOThLAke7Bxgg9X7xl1WXZSIedKyTXc7h9gguOS23gZp
Up7XbcH8lmY2KGvWuP75XeyYPKjGX28CT47uk+i8qQSunxZx+3yYv217Ppj6
9MycoHGkvFYh37Uw81Jwokr98xSBYszfTTx2dai5BHg+mZ8/eKMY0nn+TzZs
7HVZ0YTnIeIeB0Ntk86xcfkZSQ8NXbeU47g2Kn/nUtndBduKAH2OG/3X4+9P
j8VFNmMesFTMqKj1yZh60P++7c9acjKiA3M+bjyXTyde2+ow4XW8z9e5vIoF
B7Z87zYS6cDtRN/d/Xj7AZViUh7x0sI6X7+rbeT9BS7X5ZZH3ISb163Izeum
8+LOb1nmEHSp9X9+189/YMBcNxe8F1aaoGBJvivEPa9xP+49R2KE9MMB45GA
bPFC8DQmZPG5R6R+u8Q9IwldBWBliMndtr/tuLycY8brGs88IDZwVjJkadv/
HC+DGzsqxMsLwaWXSgXK5q14XaD2Hz+xTM/ZkY05+l8/r73i07Y14X5A88Qk
I/vpk1YmpPMJGWlN2wccWOS9YCruj+9TMt1i+m0DA8wUUWptfMjCXPHAjOay
vQzwbOAa3ykPwn+9t9rQuIsJLmY+mzeVzcD/i/Jsi18XV7q6k/NZs0Tv+ute
ZQJf6twWH1cOP6XOl83nnodV4bYTn/vmcrr9K3rUYkLPkHNkqPwmbv8EUuur
w0aVEbRxVL4+ffu1YSJZXzLc+tWp+r9WaMdGGzOhA/d/cT5eQGXORKd6uOes
ufqlKCZ5L5J7Pr0oW/fIGyb530DelB2lKSz4hPpfL0lHt31WzDH3QqBz63Q/
PObWQ+uvY7PXGbRPIhy/T8Sth+43a+Z+z+YL5L4L+h6Ag3y1U25pkH5D/PL2
Xcv9brP/Z/kTp+9UKh+ugVvUziQKe7D/Z3sEi1p8naxr4RutaMMdSY143m6j
4gh0HjUvFdfYW8j34ElDLpBLiWHr7yZ+IbS+tqtN1D5gSriJnGhu4rxacHx4
VvsZU5Ln4HeR8SM8tBY8NipWCZ1B7GpHKm5C7y9qufEm9L+7bCQMLDTLIS0H
UuR3+gjsKhpz/0bSUcOlPfsfY47vN+DWL27eflm7hchJ9N3JXE6fg3g83aL9
lHsb5iNLX5ZHBGXCEfEd2V7TiRy7se61lpVMFPRz+yEiNYPU38U9v6lAnbv5
t+9KmCnKyy3JhTf3yHW1nibysJ2bJ7/PbY/ALDHSnp96FmKfSwpg+M+RYI+Q
1v/Zb1EtpTnKEYXwxCffGb52pHyh1Nb+638LIC2feZSeNUQ75kEBpxebK1aR
c81+v0P5jPdxgID6qbmzKogf75H4hW/r3Thgnlc8/zwpwqt8gt0cHnDAT81y
ScYd4t+rE8k+IFfIARu/fPgoUUv8eI+8dT6J13LA9voweNaW8NYLtSfCRvex
xx+90P4Ry8D+zJ8zhGY0KZO8azqO/GHnVrNbuwgXovIzET/srdG75WcDeB0d
vNv/BYlHiD1sUd6U0QDoeMeVhJfLNRYxgWmExKXcmYTnvedr1zJhAtH5e3qj
9pD3PgKdFFqauthAdNDzV9184l81C8hyG8fHATsP6cppqxH/ak7b4NvHDzmj
+54CYXs2iVPw9MhLtEkwgWbSgh5pQRKPyJv1dOOyNQxAxy/OTWmUSXJighPi
b42Td5I4xS6f92/D1FmgZPuqohN+5P6Za0V/dwt8Z4Bkkf0rPlSR+1QHPHie
lAkwgTIVv6DzY/H9e1Q+Lb7Xuu1z1rtDTJB0wcLowB/yXaSXj3Lz2+m8R5QP
T+c3ovMCdP4hOl+AytN56fi8LZXHjso3PTU5EC1QDVqX++earyd5LILSfOZJ
L6vBk08vjKJOE/5duP97jlUZePP9QManBJJX5pT1JT1EsBSg/DEcvyhrqpv8
rRKk2ARd0W4l/+W5kJE/qX7U7pilo61T3zvG/yDJjZ+i/fs3yd2bTvHVQY0V
rMhndQXkPbjgtCi2Uh0sKSxwUZctwlzs1xK/Ccp10JUb98Tvgvn48juvrIM7
+J8OeIoSrm2j8OHDkjqo8HLLtDfMQsxD/Ybvv5hXBxM3AlXll4RzJvz4pDu9
DuqVApv044V4H/HTxNJhwUADlLKrivdfT+6T8egwEPWVZ8AJVwa3aL0m+d51
oYFSXzvqoNybez6zkom/6M7ChcUSQ3XQQXupqE8hKV+zZW7q5TUsiPK6Ufl7
HULBmboMSOeT/1gaef/3Lib87n12QcmzDlz+6cKvYcdWj5a3OvY68HEX5lEd
EhHhqQzotOnOhNmTST3rb+T9jpvOgWsPxJcsNCXnFAzd7yl6SnLg93vdTYa6
hD9vrUycI82BhRojT34pEs6rwJYPkyVxSXyfGBU/RTx/YppOnEUDPP/tqnP0
BXJ/y9vujBUeRfVwjmz4upyjreQ8QmJtZNr9epgkdMtQNJzw2uZDnw/3NkAF
bj45vo93wbmJk0fb+TW36GFvCDlHYKvcE9xuxIFhZSKb51uS8wJPnTu75hpz
oF/wvJP3TAkXeaPJUjk32j/ZbR/3nCbnBZY8yJ6f7M+B7kErf7/JIOcFwr99
NDYI50CjcEvIVCTnL5S59xLkc+8lQHrqeQn/jYVMNuS4MB+BNMK3dO8e3LmA
Ax1+ubUfLyTnO7wX1AzwlnLguKHsz0ObSf3ofD19vqNI27WytIcDJQ6/rh3I
J/cV7JxS2H1DfnR8jQteLP9Ti7nLL7tf30f54IwAz/Aewl8pJa6cu5gDXwxr
3WQ2Ec4fcnDFqlFuHKEc4lc7tvySP23CvgWEN1H5GKj9U7l2HZ2vLvS1YJ3U
jho4HLZcx6mU5KvP455vpfPV6fK0v8uSm2+A3+mL57OriibxLFQPHedC7T9A
5RXQfrZAbh4C4spU/g/tf57EzffA939SeTi0X5rBzVNC9bTs8ek8a8iBwXse
FQbuKwI0T+Pm2yBe9KJi3Cw9Dhy2XXs534fIt+ea5oonNTnw/7F13vFYf2Hj
TwNpaEhEy0gJIbt0NJSVNIRoSGmI0iKyioqISIVCRmRUlE1H9t57r9u4b+M2
GrSentdzn3O+v0+/f9+v63V9zufM67rOdc55p6JibHa1AvOHAXE7l+7qg+bs
qsrTR8ox96Dkz6Dx2LfC4mm8STV8UOT23Px7DY6HmOoBP2O1Wqi4ivPmqf0k
TlJXUjnrTW0NrKs2OT72uhrbw5dtZT2//vVvqXEz457Td/ZLd8MvJ9b8mDdZ
h9tRljW+pljvuaN2HDp8LX4yvxeyTZ3ITXUn7yfyhL8ZLvrLU6oF3wsZEL7u
trMX+19eMz/ueHgniU9qnZb4nLy9F3puyEra3kbiiq9Z/ceI0k8sw9u4NXp6
oVNYf2dndBruh1ZF+rrnElqhCFtrrNPjKix//PHt4kjQBvOXX11lmtuE+erW
DP5Rjy44zco3O9Qdo3/YgQYKrksmA8FWWCCsl5cVnQt7ys5quV4nHJ2rfWFV
6W59swUoe3X90ZjugVe0k29Nx7+Dqhr3Bp5/a8YcvWchlzdwoHxjI+a8MmlG
Y6ZZ8MJcOxHft3WYI/2GG2bdW3GYyKP3Sk5sE9px4P0QLg96J8Jx86HzShsI
R+9TXPTcV7hek4456lf3koOviooMgIpwe8uPu7ug4K+F3WsKcoH+H+k6k4WE
o/cyarmVkp7dJxy9x4HqDfGD3Z+nqxxegyX+8V0PZhGOypP+0Nf7W8kgLo9a
pbfhm+1WcMmaBTFblAhH72Us2r3/rrzZAOaoPumn7sUVW9MB85XZY96Eeti+
R4/n4JG3cEw6VE5sN+H4XRvgv0pSdxCXB82TnuxXJ1YNk/9C760g/ei7ngs/
Bh/ZkAXY1OAikUeduF3wOymjMV0DFwlH/5tsWvm77UEX5iU7s6RE7NJAoIfR
CvtAwlG73HeJ54i+1k/akdXuqL0Qj26x6dIN+wjn8qfkrshrx3qasv9UvjO7
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
w4QPp498Nm+kyLjTifJrvFROC0Wuo/8DZLuAiA==
                 "], {{{
                    EdgeForm[], 
                    Directive[
                    Specularity[
                    GrayLevel[1], 3], Lighting -> "Neutral", 
                    RGBColor[1, 0, 0]], 
                    GraphicsGroup3DBox[
                    TagBox[{
                    Polygon3DBox[CompressedData["
1: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
Dny26hJwf53vuOqsZB918Fvi3Zhl/Ossf+tuiNbR74GPgO56wq1M2l9+av9X
hrO5K4p8L0T3UudXOO0/SF86x+coOk8ZWOQ7zp2kS0D9uwR8iuZv0j3T/RBo
xgD31fnut86Pvi+1/5ZSyyYZdd9gk86m+X6ywnf6joPnJZWmE/0POksg/ADp
79X6DrvOgHQfQfeldW/6G2jKCfMmfPLVluHTMsdntSeRnwvIz+XIcrr0svB/
GP/FuCPADwZmwK85+FE5vjenPUDtBb4eylT6/83h0wQ+j9X5HDg71/RvBBrR
qqx1b0zlrfs7Sqfu7DTAvyf0a9KMC56rOYr010nXY0n7y69nGEc0hqhPz6d+
7imxLmg7ZLgKGeZJ77TYe+O6F7kinKPpPO0m3WmM+j7mpVoPwP+JpO/j/HfW
VuOzeOlCLyvxWdVD8FpFO1oU8mRxyBOlT+ksL/hPxSQCq/9wrSu17p8Q9qzW
xe0vP9G9KT1I/D+Ke93/IvnwCXCO6gz/x0rHE3x/jvdk2pOuYdqLr/N4o3Hn
FunFw+wP6XJEfX9TewvSu/ko8NfatpvODulT+xHuNPCZ4H3BuxEmPdd2BPrg
/xH+PWvdD6gP0J6HcEGd2euuu+62N4DmbOjXQH8dfDbiYsQzEv/nifce0vKh
6iLuNfDBwGS+dYoO1tjG9+v4j9X4lu8ztcYZxgW1bztZ8zSd1cNzGunZJL0R
YFuNH9AdC/y42Ps0J1U6rMKJl/Tbx6pv0b5vscdJ6eer/7wz27r074X9Yd33
1P1OnTPtTLfudn/t3xHmXNL4Vcz64Vobah15daHpu2T4XOq9Ys9TtX6ZX+x5
y94S18f7iSurxPqd0vO8RXu22hPTHaF658l92aZ7A/8x8P5d61ndq8Xvl2LT
SL9Lefca8vwb7ghch/uVcaGS+jAA+nHSL4HvJ4R5P8t3CYYHPa4RIY0nhPO0
LdDsDftd//WVOb4rexG8TtWd6TrfPzgp17Y2FO964HbpsdAGLs7y3YQTkfUt
8QX+Dq9TkfnSCst/J/KcVun7EZqrZEpnAJkPZNyvh/948Frq84kpx1MW4lK8
gq/iZtR6T//EaueD6o7y60qtW7NsX2IFfKZLj7LOe3eSrb90e0hne1xb3EPw
aao1HLSz6q2TeojO2TT/U3+etJ6AzvulnyOdYemVSg/5uXrr3Z4Lj5j2HrWn
DazEHZ9u/CtofofnXPhchvtE5+nA89WH4ZqmW39SOpDSwTyS9AzC7yjgPYTt
RNhGyFMt/QD1r8S3Cf9TVf/x3wzeHbw7+EatoaTfCp/vwLuAfy0dMc3jCTsQ
+Ar+aZXWTz4j7CNpP0m49Ka/JC1v1nvNrHXu66qT0t8n7Dqti/OsxzKwwmtR
3d0+JmG9j1RYi+hO4tfSMdEeNTSX6b6p9l+yvJ68EL4nIsP7db4TcYBssACP
q7HOywbi7F9jmwMa6ycHXeVJwHd0JoEMbwPfJr4YfPrAp1ON7xl8Xmtc+j3/
3WUI+qMfF3o+OZx0DaVevcZ3Q/LkrULzFf/7k3bC71W+6aw9bt3v44JOT4cw
B5FeonS2lvD/AZ2zqI/HXQzeB9dGOmHa66P8roHPcO3b6j4v+NXg/4PnsdBU
QrNGuod8vwvfk4GrcLPJk97ka3qB7zJPlv4g4d4A3q4xIdCI9j2+i7VugvZl
+P+ktQhp/anK/fwWaM5W+cG/D/AP/g2utH2YrxQf4W9N+VxDtk4G4/8N/q/i
fxv+2+BTkub1oPauxxPvWGS7jvR0oft8rsr4augn6H5SmOsmNb8gzD7iXZ50
2pTGrknfw1iMzI/gKsLcQ3OQnvy7A7wTcL36BHicQJwfgjcA71xnWo0RV+WZ
j3hMTfc6ResVrVWWJD2XWRv6UvWj6itF35byOQyaO/nXkfJpCM9D6OPe4//I
uOUZDbxdfRD/GsHnI2hXhLQoTcsD/hSwvsLl01/3BUp9l+UgtU/+rYXm1JBe
yai4a/n3nO4dlPhOinQyGmm/gTiO5F8X4hyT8rnjXfQDu6E5PNf3g0bXeh7x
ArKdFPJTdWeH1mvwfjLu+qm9WdXRXbW2y7BPbR/Z4tInJ46x0res8hmE5tXR
sJe7Gz7jta8Hnxm4KugfV/1AtkNJXwNku15rOvCqOt+RqSbsTuAfxDVSExjg
/fBqzVj5CfF+Dc/e8FwMn78JO7bS+pOyn6C7ZRdXe60tewhNE17Tam27FDgt
av7PqM3gLs61/uX7qv9836C1Scp6pbKJtBU5rtLdokqv47+Bz5/Sgy7x3UDd
9ylBnptzPX8SLqj76rrrU5pluyHdyKM60j5HdS7g8nstbpsNK+IOq3DipbCV
WQ6vMlqj+oNcv5HeCyqtM7wLvDf4xXWed81l/nAKtB+SlkczvLczP24bHbLV
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
9l/Vd+I8r9Y2RfqnnOfHhfMXjQsaEzZSdfYlbCNuf8L7mh9qbaE6RvlNyvV9
8yPh+bfWocByxonb823jpiX8/6c1rHT5tbYl3lYp286QDQ2tWWQfuD9peRI8
V2t7/POAxbKvAZ+Y9ijKbDs6vcy2lMZofFQ6dZ+QNpyotf0G9fn7kXlWzPaU
Zsd8j1z9XH7Ucznp8mk+95fGWa1rtH8S+CueMtko1DpC69Sk9dykG18EPhT/
AuC98O0qvb4i2wqTrTHZETtKZ9rq23U3GbrP8W9KWWRV++57RtLf8r8m6TOT
S3UfKM39g8621C/ITpFsSo9X3kAzQXsnuA/zfJYt/Yz5urtNemeWOa4hhJtD
HWhS532U+eAt6rw38xT4D+TV88h7QMo25Drn+P5zJ9I7gvScnDKN7JcfBf1i
ZLkoz7abd1JXmqT5bl1f3IU51u99Oeo2KrtJBVGPKbrH/Z3mdrhvs32mc5D8
Cz2fUz85Nmm7K7JjInssB+subI7PfmQzTbbRpH9Yz/ft8Ejq7i7fhbJV08B6
eTpb1FnpZNJ3LDzvAj6nuUe459mDNGUT9nTg57oPDe0kaDbV+Mxaen0vIFOG
7pQDz6jz/EVzgBOgu0u2MUrsr/qic96T8L9SdV9nCpo/4n9OzPuPWh9oDqH5
8LfI8WC55c/E1eGqymzjUXbpJweaSUHmZZmWW/n2Pe5z3K4yn7PuK7G9lcFh
vT8vxKv4fy/zPs+2Mtu/UrtT+2tLPn0Ws12d1bqHUWT7hJmUzUPI8k7UNsdk
60U6BmdCO1f1ocj38b+nrG/U/Rh47UGGBeRfqc4y+R5B3egfzi51hqm7+z+k
ef2zM2V7VbJzv7rQ6Vbe/hr89V823B4h3U9rDNU9+TLba9oVaER7mvZ/NG4C
22nNmOXzKdV/6cmrDajeq/7Pki0t0nJNmm0PtqqzraSJ2pOP2Xb0Ydo7Js5P
8z1+F2tclC1I4m3N/w46T9c6sMz0sjmttwVkV1X2TpuVuH4eVuIzO+X5OUmv
K8VTvI/A7c/1PO0M/t0FzZlJ35/RPZojCTsD2XpQNiuJ9/CY7fn/GrVN/qHw
f037LXm2zyabesIFBxJ+UMJ9rO76PRf2SLVXegn+e3N9H/B5vieAr4zatqTG
w3mF5jMAHlfj3svzXS3ZW5G/eOvfA9Dv1j1r3avTvUG1f3h2rPIaTLby+lI2
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
susNldcDvcJJH0ZnAXrH4y7iKEz3+4wllO+vtIsy4KCk81B5+R1x/JprvSi9
taW9uEa49sTXW+eIxFVe63LLIv6B+L0O3YCY81xzAb0bcWnwHxTzP+HyE0/x
OzjNZ4jaCzojZie8F3B+qfc5t5LfU2XfQGfJDSyD8lZr2SEx3xEeDLw25r5t
aMz3GqVH11RrCZ2bw2NsvctGYfsAH8a/Ep434X9Z4CN+7ZPm0SnoRKguqQ7q
rUnNqZ4oct2Sf3W580FvWibD3Wvplkh/4EvtuWvNVub3jpulu/2Pz/ecrSlp
SwPmamzKtv/kHP/7LZzl/XdGUuZ1Z+cy7/Ndgv+f9GP7izz31ztsq5FnSJ73
028tMy4/8VQ84tuo0nbB/rOxUGVbhLJJm8BdGXNapNegM3GdeX8T9jY3lft9
H731ozd/9paa5w6t/ak3DXKtC7G5xP76P1htONd6AzWy30r8Q2o8L32bNF2Y
bhvJepNI77oPrPX7QUNSts+m/aPOwG0J72Vqz1M2EWU349247cRrXaz18eKU
dbn30Ge8gQyxXOv3yga8dCpkL/39sJbR3XztrcqmuMbvbxJeB8mm1vpAI9r7
Cv3+Uirq/Py3yO/ejSzzWH0BsKHSm+N9YL2PKVtkes9Ba58/srz+UXqVVtWb
XPK4Y47fFtwr+2Pg12tviXSeqzP0Wu8taz11U5nPpkWvtw6VD+O0/6/zphLL
IFneCzLrDr5sbX2sNWat33rQ21A/VbtPV98+SWNRhd9sf4O0nEaZfpzvc7FJ
geb+mGXW+zLv4m6I+d73jRp/tKegPRbgTcF/fMz/hMuvW+Ap3rJlpfff9Q68
7vfLX+dubcvdt6iPUZ9zOt8PUL69kh5TdJ+6o3TiSe9S4loasz6e9PKeI13f
4j874fM0+eu/2pja2tMV1pNWG9RdPL3/rXfA9a5HRuiH26k+ay2T772+cUF+
pfVz/N/O990i2SuR3ZLnC50nWkspX1Sf9U5jne6z11q3SXc3xVN7hIdWWSdf
dVJ1U28arqWtPZzw2KYxTu/nSp9LMtwVsy7SSM1Xo85f5fNQYFf438P/rvC5
sMzrIOmY1WsPLt9zvxrCrMzxWyby15njNdIrCzQNgJ2Rb3TM7+3qXr72FqS3
dn8o9/tCuavM1T4bldsWlvTQuv5/GoGfk7bPI37/+uIwFz0/bns+OdTDO4HD
Vf7k2ylai6V8znFJrf3l9zrrkZuqPUbJtuTlVT532Uicl1XZRofeGpPtyc+h
+Uz6OnU+xxiUsr639MnvQobZpOsF8HnAdtoj0z6h9hLgc1zc75Sdm2+bvdIH
lm7brdojgMf5+X6rcX6O38b5GvwAYAPcN+B1wGG1TtdJ0uEt8jy2bZHpRH9g
kf+JRvd8fwt393SHT+nVPnZtnnFB5Ytw5cFq3C0x62dNiNnGh2x96O3mIuI9
H96lKesVj8+2vtEdpHOBdDJq/WayzrD01pfslOpu0Eu0o2jU76Q8JLuM+Peu
8jtlOqNYq/2AIueJdKSVL1oL7Mn3nUS916y9Vp2LPUu/nJPnc5x6yqs83XZB
Py31XrHOe3QXVzoYf4X0Kk1K80fSqwbeJ7uteX7vQm8r6D6k7kWmSn3/UWuH
neVe/2rtOynDd210f6UwajlVbpJVb4Z30blApt9QjWsNkm1cUHbx9L7EAu2L
ZvvdIel3dMnyu6uyORcr8lu00t+S7YV9+O3H/Yu7nj5iLvH0R+ZRFT4/HQm8
rM5vp/2ttbD26qL2Xydb51l+L7hvoctWbxrJTuQHYY8oWed5YyvCFhRZB1K6
f01q3K98or2WctPo3tDl0HeA/79Jv5Ujm6KyLao3VrpKf5F4z4N2UY7f4xTe
mfw4MdNzCdmUiAR/+YlOb8VLh1267MNJ4wbSeK30ByqsfyzbBrL/+t/dMPCG
5V5fHFJuG7CaT15fbTvVCise4tk93XxPJ+xywg6p8Nv0su38BHXv5IRleICw
cWR/FlmKdd9F6cY/Bp4b9ZnOwVrzapwj3p46e+d7eY7bV1XUNjtld79vvstf
78zp7aMFGe77lF7lh/JC9U117VNcL3j9AM/TgC9V267qL/V+I6m17kAl/V6e
3uPT++P9imzfXTadnij0fY7pshFKWcrwo9721Vvtuh90YpFtfGUV2Gaa3uCQ
TQK906V358+HZxPC3pRw25ftlHHBduXectsE1nq+hPwr134ZcVWU2PaaeB5S
4TsIyuMe0muvtT2qCukdaT2d7fMbvbGyUmWrPW3i+h4Z5suGVo33XdZp/sW/
V3P9HqJsMOgtuMbS0yaeTul+d/4+6Ffk2G5qVoXffdbdofahXz2lyPeh1Sdk
4vaX2+64bK135V9Bnt87PrnI/zsW2ca6bK3r/dNnwhmN3vZqG3TzpKM3oco2
uLT/Izuj2tv5p9jvKN6sNp5hu/WydyE94dXE+ZvswmW5vaut34DrVGd7D9em
fDakewG6S/VYoe+b6G5IRrjvrHvPei9Fb8HoTVzpF/0Q8n9MsAWqvUXtMYpe
Nkn0BvLt5OFq4K3F1ll7TffNq3wf/p8wl2iGXJfHbONFOpw1Jc5r5bnKVDYo
ZBdOb6LKBksXaN4vtE2wJeA/lVr3fnqe7VqOzHd9UzlpXaO7QVrbdKZcmxDX
u7r3T14/hn8e+bxH+rI5tjkmO4CyAah3LMVH+pnStb2/2LaPPi61DRm9YSmb
frobW0Za+sFbdv50B/SCKts5G4LX0Ihx2arWt2xFN5FtHFxrwr9R7vuq5wdb
3HoTU+/OXAltswLbc5Aeh+h0z176byOKfE9J95X0NpD0bbS3s0t61mF/W/vc
kl950FnxVdheQaLC/vJT2k6s9Zy0C+mYhAy3al4MzQukv1J9NrI1lD5rge2A
iE8GeFXgo7xRXtcGf9k8uajc7xQcoDlsiW0kiL4u8BG/0fkuO72lulN1IpTj
hBLj//kV2NaZ3v57v952RmT/RDrjmrtqzqc3ofQG9DDgS0nH+UG9baUoLsWp
Oq/6PjLbbyLJppPG9ZT2o4BJ4EUlfitc9wum0q5Xg3fQ3ojuXIEngFvzPP7p
/pTuuEgn/7lc++telf5pLa+9E+3vl5V7/V4K7J/wHqn2XUWjtb72WZ4M9+6P
KfLesvaVB+PaFHmPvT1puCTftt9ll1C4oPpxvQciW9Ky4yf9aelRXwxsJDu5
xbbpdHloX1rvD9Z+Jfm5ucp6ZtI3a1VknuKnOJQWpU/p0dmZztFkW2lAvtd/
eh9Kb0SWErZ31DaENa9YVuq3xPSm2I5sp1lpl55b1zqffb+R9Lil8auB7BEl
be9zg3R1dP6V4XclxUs8de9oYI1t+16cMH1egfno/cOPcq3vODTpu0vvAG/U
/Fh2ZXRPUHOIAvvrvrxsdsh2x7vBX/9H1dpWiGxG6f3Gi7SXUGh59GaTZJJu
ZCX+R2oeW2I9yaXItqjKdhV1zii76Fm5HldkX13ziNuALYv8FmIJPB6OW/4p
cdu2FD4p7ramMyadNd0Wt72L8Vp3xy3nzLjtncru7iNa8+tukdINPJk07Unz
G4p31HgOcDZ5tQRek6vcfifEzf+WcH6h+qVzlNVJz8NfA74acPm9EnD56f1y
zROOqDCd/DXHF83d8BuZ8htkY0njz/wblQr2T2sdV2m2z0umh7QoTTMCLr9H
QrqmAZfW2c6r6oP2EmUvYlqlbdWvl03FDO9xSXf+EfwPkT4hYc+p8DtKn/L/
UO3rlfseh+74XJzv9iX95gsSblP9gLfUe70ne2vi/36G45ih/Qbdf6r0O9K6
U6m8Fo3mcqKbFMpO5bmI9A7WHgZ8+tbZtut1+CU0PwR/uMq2OHTHSXZtb65x
fsr2foNwp0nrzcOLbB9MdsKmBP6ye6t3WqUXeQntbEfU/c32qO1QyB5Fc+At
hbZ1XQ2PXzWGUxdOlo5+wvcl50knus53EvS+ZJeE7/bpTp90u3QGpXcktwf+
v0TdZ8rGstYG8SK3Nb1nOheZX0SuEypst1PnqOeS1knwa5Tr91X1ZpfGvdtL
3Y7UptWW/pReL2k/ucZ4ifoP6knrSr9Hpfd3bg9h9b7DmbKLJZ1mxSW9IPWV
hD1bawzoz+d/56CHJn002XmUvUe9yaq3XPUOUGnIE+XHKcqXcCars9mZxNVc
7xdIdxde/4pnhd/VPD3L70rqzUq90am3OvUG7LGaN+psvthhxWNvlff576/x
20qqe6qDW5M+lzkV2f8P8Ny4dw==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJxMnWN4plnTdpNO0og66Dh3kp7pUY9t27ZtT49t27atHtu2bdv81ppzP8f7
/ajjqtrWtVW1q8ZutP1K2w2rqqpaqb2qqpbvXHyPGVlV9UBTVdWRXVVV0+I2
HTAjMAPwGfAN8D3wMXBdd1XVCL7NwPXgx/M9ANgfOBKYiNtkfAcbqqr2rZA2
+KEljGGvxZ/sqnrw3xv/26GXgJ4SuA38LqAFfDRwE/i3w6uqvgK+AP4AZiTe
XvgdBcwOPldD0jXvWcFPrq6qOgE4HjgbWK2zqmprvlsCw1qrqmYjzOGE3QQY
Dz5nQ8poGqZ1c2PyNK+J4IvhvjiwKEBSVXdTphX5rgDcA34T3/OAc4ALgFXJ
Zylgd2ACcAlwIXAKcBJQIY8Bwo0DBsB7+fYBY4GhUm/rT3dUNUr3JA3jNoK/
Q54L4T498C54Fwnsht92wDjwlUnza/y+siwNKdv5wLmljO8DHwGvA68C2xJm
f+LuZxrgj5DmmrivATwB/i6FOQn8ROA98GdwOw38VOBZ8OGU6TDi7kDc4yrp
29Gl7IPALg3pD/tlR/Bawh8IfgBQ15M8zfsQYPuCW559gb1LX5r+oaVPDy7u
ewEHlTRN+0RgJ/A3KeMs5Dsz8A74Hbhdi9/1wF3g7TT2ARTyDhr4b8q7Au4r
VacNdwXWJ95mwObABOAI3BYGjgQOL3lbtn1KGXYANrcclh+o6cl4c9x9SoeO
6kl9bOdjye8WGuY3xtbHwK2N+Q9Glrbqb0g77Ffysa627yEFH9GTfrF/VgdW
A+6nD7bguyvwQHf+P8fWVOV/Oru021nAmdUZB2cBp5Tx0FaVMe7YpkhVT3Xn
f/C/OJjyLtCQMX4bsDD4nd0Jb7wbutOutu81wHVAQ0/azLaqB5+SMfkrCf8C
TAV+Je6XA5cBN5R/0n9zW9sO/F37DXgEeAyoEOci4l5IW71USXoPQf8MTA7+
Z3f+Of+1YT0Zh4eVcePYq25N/9hPta1pZ8dmQ1X+Q8t9ZSnLjaVclm8RYAHg
8e7MX8eUtlmPiONx38Q5Bfzt7vxP/ldvgX/NmHsL/HL/s5a0kW3VR9h9KP+3
LZlPnVe/a0k6prcB8Kx5AE9XBX+mzLs/AF+W+XcSYFJgJ2BnYGPSnYO4szt2
wX8lv0nAxwK/dad9VgZfEfjLviPMk8R73HmtIfO08/XWwLQNCbdy+Sf8N97D
fXlgOeeDUq+3Sn2dP24kTZq1ik/Vzd3J07znA37uzhzlXDUe+BD8e2Am/GYE
fgD/lDa4y3nVNmnJmHRsnlzm09kIt2D5B2cFHua/vYEF6BPwR8BfJo17CPc5
cW+lc3/pTnjj/QT+O7A8+HLAH+BTNuQf99+eDvwV3B6qShqmtQhuD4M/Ciza
kLp0A5OVOl3JmPuQ/M+iU/8gv1u70ycbAveB/0M5piHchsC/4JMR/gfG6jb8
YN8NZc1x7dkImBp8Lb5rlznHcunnmjBUwjQxXx3KBLEg63QnjssR50/c/7Bf
GtIHzuWvAa9UZd12/V7A/7WUybJN49zK+FuiIWPMsbVkQ+b2l51HqjLHO07b
ylzQBf4+8f8Cr6pO/9l3swAzlz78B7c1+G4MVPek/R4pY8XxNVVD5iznqinA
P+jO+HMcHl7JGu964Rx4bVlbtwK2rMoaezweJ4zMHuVoYD7iXYP7xcA8JS/n
i/dKnhdTjuOAY4GLgBdJ81bcFyLsoZXUy7muA6gDHurOfsJ9xQH4z1/WTOc8
5z7DuvYvU+LMZDvy3RuYoSFrpPWzngcRf96GrLemYVp/u55Wp41sK/8T/xf3
XjVVWR+Ors6a6NpoeUx7T+Dh7vTB8FLW7rJ36S9jxLHi3uLiUtdTyhpxcFkb
m8Hv6M7+xTn7zpK25d+35HFLd+YTx7Bj2T2de7s9Sv6vd+d/d16bOJg1xrVm
evcNlfzz1ulA4DGQ1WmwPcl7D9cuKvqe/xR+45yXCf8o9CHQB5Xw1qVSlT2Q
dXIem6P8v7OWecj5aBtgK2CJ6uyvnPNXqc5+5AziXQS8AD45+awDvm4Zb891
pz/sl0PI6Crwq6sS5/RS7u7SF7bJZVWZ414t/5NrsmuGa4V7t6NAzgZ/n/a4
bTD7hpVK2dyDWb+D8Z+ZsAdW0pYjSh37S9sfXPI1vx+7U1/n8aMINIaf73s6
/CegHfzN7qzXrtvPg4+nkd7F7zoWsZcryefgkq5jc99Sl+rSv+4TnF/WKv/g
5GXOca5xLhxkXtme/2o7YAj8cQ4HdwIPAY8Cf5HfjvjtAPwN3kuYzcDPZu49
uCtu+h0P/QflOZHvZZTvSuAk8LGE37z4H9CVjt4Aej3gn96A+OH4/078H6BP
JN8TgO/BpyD+3vifif9BxN+b71H4nQLsAz5lKc/R4IfgX0P671H5cbi3DrEe
kcaG+B+J/2+kfxrfvWmgg+mU08G/5vsbsCRhfh2RMlv2CdAng/eRThv4auD7
kf6hTSnv/PzAhxXc+qxf3CYh/K7gp+J3IOH/Jf91oc+F/pP86yjfHtC7A8PB
RwB7gc9IvPah1Mm6nQrsC74SUIf/KCaAFcCvbgut+7ZdcdNvJLCiayP+I/Af
CdwEfgfQSL2GQd8Jfos0eD0wEXxm8l2N9trIeR18386sGws4x4FfQ/k/H5E1
z7XvHWB+2m8kYZso793Qy5Lv1pTlF+gbSXM2wu5Lea4Db2MO+IW0D7DdCbM/
3w9cS5yjwFtIZ1XKsh/4XvhfQ5zh0NXAlW1x138BYC/w7YHpwOehDNuC/+iZ
B3ph4PPe5GnetsH1bQlj2PmA7cDPA44F3xP/88F/sIzQ19HeP/rvAdOPjJt+
M+I+EzALMDOwEOXu4zsVcIx7av6hceCTA2eBn92QOIY9B3xuwvQPS5z/xe0B
pi5pmPaswJfVyeNRynQW+W8MHAH+HXP4AONxEuAH8Deo46T4/UnZGmjvDtp3
buLNBXQWfAFg/uI2SJxOvh3AUMG7ga7/uZHvIN8xwDj3zcxvi4AvLN2TsveW
Mlv2M6jTlMOyZm3j2ash/oY7xb0k39mA2YEpgPUINx3faYF1rT/j/TzKfw7Q
D/4b9ZjfdR34HfxT6ncUdT3aMxL4BGAlxtPC+I2ivpc35fy2P3AF+ET8pgaf
BbgF/DP7k/7/kvlxV8bT7LhPBRyI3wHALsT5grJMSf9OAP+Z8PPgvzP47oR/
n/zGEf9F4v/E//oh9Lz472pY6LehZ4L+xHFKeS7CvZXwXcDF4O/i3wjeBLwH
/kRT+tY+fgx8WHvGpmO0Bvxq5zvq+ivp1ZNeFW6v43cmZa0Gf6Ep+X8G/aJp
taVO1uUr8G+AbsL3AN+Cfw3018VNv8tbUz7LeSj1W9B/hrjfAws15Rzgfmys
Y8GxSJ6rV2dOcG64kfJ9SdgvgOvAp6LPzvLfoK+HMVamhj4T+nhgPPiXpLkG
+a0FfGb6xOmgvE9Qln9YL7ckzW8I+zmwhXN3e/61GQizOfhu7ZnPbneOdG0C
vvKs4BkRfBryuGVkyjAl+A64fV2dMIZ9jHweJP4YwjwO/hDQDL4qZdmB+j8I
/S/zdDVhHgC/x/8I/E/c7vN/J81fCHuya9VY0qP89+K/hv8i/f873/cIuy/5
/wG+B3nW16XMlv2+3uT3tPkMJp7x77NNwJ/E/y3Pem6y6e/9ifMo4R8GTmO+
HdmXtWdX3Cv4b833N8L/6P/Wnja1bVcCPgdfGbcrR6aPXiHNdaCHU7YRwLrg
/5o/cV91Q8BmZFbSf5zw9wDTg88MPIvfc84/fVmTXJv+Il4t/fsF3zXr0qf2
7T/A/dVJ07TtE/vmV/c/9h1tdArj+WRgJPj0lGMOYHZgauBAwuwzPGeIgxxr
QBf5reO8TJu/x3d68poMeB98Sfwvxv8t8OPwXwP6euhrXJPbk4d5PQk9Anzt
9qxvtoFt8RJ1mIFxvQzwIvhVZT17pSmbuueB+wh/LzADdX8I/z78e4CHwe+n
TUeX8bM9+d+C27PkdwlwE/jJ+Fco66L4b4n/z/6XwC/AH8BthPmb70WE+5Px
cCPhpmD8HEj5bgK/GdgNfA/gFvBbCf/08ORhXhNxu5H4i1H+28BnbUv7rwK+
HfkdT5hb8d+TsfMb4+XituT3L3AZ+J3usYxP+G9on2utE2nP594HupU6Xw99
OdDWl/ZxrnFOcm662n2X6zNwGfgiTdkvuW9aAPw6xwRN+S9wfVNA3DPrDeCX
OL9D/+1ZBXw6+uQQ/K7F73DK/zx59DgfUr8XetMmto1tYtu83pa+tE/fAH+N
MNvT3jcAr4JXcB9wLQH6yph2bH9P3Br69j3iDEFvBr0L+b1CnO2I+w7utbTX
09CPQh8MPOVZnXCPuqcnzo/gj+B2LG1xDHB/b8aEY0M3/T4inbGE3ZSwE0j/
4M6sR65LB4Bvift46CmBrcBfck+GXyf4ToRf23UHehFgZfBXnY8IuzV1fg38
tkLfaR+D30Ceb1PW58FrKP8/HCr2oe2uYT7+gf58vbSJbfEc+GS09zbgP1On
ydvTxra1cYx7Tlv60r3veeBjWPPvJuzdpHcu6Z3akP2C+4bTyl5nsrK2u+dp
opyjgQFgCJgEGFcTd2nvWw93LwN0gC9D+j8S7xNgDfA1gckI1wysAv4P7nXg
tcC/w5KGaVeAQeAe10PclwDu9V8izpLgdzkOKe+S3pFDP0xZL4JeC3py4s3L
Ongv/9/a0NNBT+v8AD477p3gY5ynwLstM9ADdBU3/U4jzTnBT2NMjYeeyvmV
+CP5jirzreN0Jdwa+c5G2HvIbxa+pxO3HrdZwZfC/wfon4BlwVfuSfs1lfr3
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
jzzH8fgtSXmnJ59/Se9vYAbwhfE/bFTmCOcK50jnyhWB5sHU2brf6hsU11zg
pRHhic0IvrL/J9+pKdsM1H9Mf+bf/WmPbalPB/TdwzOGHEt3lPuAt/lf/6TN
TyXud5T1J+AU8JM9L9TETT/36O7V5bl5PjyMMk9D/Kk9g4Dv3Z+71K+dE/oj
g/WfLJZ30135Sn8DdDTn/mQEZWkAej3btGcv4J7glPaAeDd+ZxJ/8b7cz3pP
O3IgaZiWb6iUt5mtPfLb8o6Ux1nVNyHEP5H/tJb22NT7OeMDm4Fv4vuvurjp
dz7hfib8j8CNpLVBX97rz1Xuu7fx/t5/Fdi6L2W27PXDc1+8RV/60jtt77aV
N9uYvpkJv0bib96X8aWMh7IeM+PeNSIyaTN6Fyw/ryp5rg++ALAI5VsOWBh8
Xs/3+O0GzAe+HHV9amTkDeSjL9GX/Zj7sqGh3F/rbzjvq5fG/6OR4ZHJK/N+
8gPvcoBzwZdUHgd8iLCjKO+hfYk/UO4bb27PWd4z/U3gR+O/LGNjOeBI8KOA
lWrjpt+2fXmzbpvZdo4Lx4d34l8BV3ruGhH+jnyeheRfj4ys0wjye2UgbXs7
6S3Slzpb99mAuc2rL+mY3srgz/J9HnjONnHfittnfN+zDcAna04Y/caBryAP
d2TqbN0NY9ix+NWT95e9uY99xfWO9tyuL+/vrdO2pa/9f/8pff5aX/h78vlW
dL5THoby7wS98lC+0lsAO44JiG8IbAf+JvE3GJ47HO9ylsLtzpGZ45b27DEm
Z3/vuz7zzXJz3vYc7htM8MkquVf0LnEM4/3xvrzN807hCfuyL+/Rzvc8puyC
Z7JRuV96rdw3bcBYO4n0nu8LiB8HvAC+xpi8C/us3LetBn388OyZV/FuZUze
kBlm9TF5I+tb2RU9NwzlK32R/SHPsNxPvk96r3flDY9veb6B/gD62+ak5Xu0
r5vjrr/v3T8HX530b4Ke3P+Q/jqlvCeTpyhv0f/ff9k9oXvDS+jHS8AfY067
tD38q1fB3/A9ZnPC/lz2o8Y5sDfn1SsJO/lQ5GGdT9zzufdbF3ijKv+s/678
P9vir5rwA9fsS37mO+lQ+I/yF7d2D+L9/5jUxTdpm3u+VgaA9vgOv2nA18Zt
9RG52/uoK3GMu1Vd+JVfFn7dId4F4b+Wc87IyMgoK/Mj/qeNiIzH9+15Z6k8
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
VtxdI4+ozXnNc9tTtTmP7cN3PtK6u5LvPiXc/I0Zd46/64HrgCXVY+D+qqzH
5zCfvwH+MnA2+A2kdxP4sbU5/5m39xGW6Yry37o23+JeoKzZl5e1fq7G9JX/
8hOlz1zj7y1rtXsH5wplU5QX+W/OqM16u25VzsR+1Q/vncT/7iak/af8tzyn
ngScUJvz6pWkuSPfLWtz3r0P+KA2dbJuizembu7t3A/qrr/7Efd+d5Z/ckH8
7qnk/Oz/+XTxsw2PKG29QGP6zH56Bli4MXcGzmfOa3f1BMQXwe/eStr9eeBa
4JqSz9Pl33cs2DePlTDXl3K5X/qhlO/ZMjaOLnm+XOr2eqmTe78vgM9rsy9x
bVGeZfWarDHuTTzPGObL0semYbvcV4nbFyWdbwpu+Ak1/5em389qs+d5p/Td
m2UM6WfYY6sSZpKu6DZ9gLX0atbX43pyPvec/tRgzjSebeYATvRsw3nkKeWZ
tC3ielzkX++Bvgh6j0r8LlcWaSxjl/+xXXkb4CPw9/uzhrl2faD8EXncTvyF
iXOI8vud0V97tTyNzoQxrGmY1iDlfRq/+5SDJ49HWmJLYlHgYWVflb/Cf1ni
fuh7gZboRz0VeBL8OdLYvyb36c+DX66dE/xuVgYGfLj378rngZ9M+u/Kn1TW
wbIof8X3cfyfBJZSNwn1PZKwVxJ2Cer7FeGfHhmexZfgH3Wkfk8R5irtMxDn
7hHRWVoRL/zEIfDnSH8c30tHhkc/0Jk7E+9OziL+3gOxHyD/+mToPZSv7ou9
gdOVRx6I/QHtC5wIfYby/Xx7id/jeFA2vz/8BHXmPt6fdE3fMIY9uDc8kpnJ
+zXKM32pr3U8pTttZtuZxgvgU9sG4DsB04B3AI/IuyL8CdqmaIlsuLZGDgef
Cv8lR+UOYTz4HX2hJwV/nvzaO/PezPc/xxH/0JbodFQG/TDw25X/43s4fguP
Df3YiOge2Y36jyH+PfJKCXM0YeZuT3zTOak79bJ+8n5mAb+qJXe93sderT2u
/uDe0T7rXoT/4FnWhefcc4Af430X68d44HjwY4Fph8dNP9dx1/Nhyqg4FwGn
1OV++jB1xJDnXOCTAxv71o32nkf9zvg9xVg6Sf0p0IsXN8+AnkU9k65RzovS
a5bzoOcbz7OeYT1bXkkZh+qiE0ndSMvhNhx8BLBsY/RZqXtr+bI/PIrvOPKa
u+h7+aE/srCewT2Le2byrGwe5mWZLfsAsFFnzqXflPnI/D2DPwy+dF3O5t7n
nwR+JPjjlXylbRPb5tDG3N97x384+Cv9mWu8p3zVsvRn/bmSvjmA/r2mJfw1
eWDXgV/fkrE9N3AD+Gv9ude8BfzAgaRhWrrp94ZzTlV0nr8O/mJ/0jPd/Qey
X+5zHwB9kHepneE9y4OepzM6KdUzqY4udXV5v+Hexz3QgeBv9YRfskfZv8o/
sf2XK3s6eSbyTvYq+zd1SqpbUp2T6p50z/hJ2Zu6H3TMOHZsI9vq856MH8fR
a74/740+J/U6PVPJm0/fft5U1rRpgS+o+7vAiuBHU68PqiIjcgx4RbnWUeEp
z90ZnXnquVM3nvrQ/NYX/Xe+V1efnnsL9xjq5tNGgXoJ1U+oTsONGnLWVY/h
SQ3RKaeuNfXlqWPN+4SWootPfY2e37TH5Ztq31arz0/daOrCPLmSr7Q609RX
d3hD9GOq8+/QhugUVLeguiXVN6jOQnUbrlZ0EKqjUF2F6mZUP6I6/tQVqH5N
df+po1K9kOqHVOekOpnVG+mbAnU1q3NTWnf1NVoGy7JFVXTpWUfrahvYFtbL
+tlGtpU6ANUFqM7eExtyvvfs6hl29YbY1NGOjDZktCXjG/L1yp5q8uLvHss9
lzaRtHG1eVXsW2n7ahLvSatin29sQ2walev8/2wd+X5U2UTDGFb7dsY3He1X
vdgSWX7vhJ5pSTvZXv/TbTkZsGBVbCRqc0h7laZvPtqb1N4R0/B/the1T+k7
et/Tr1wVe4lHD+RudTXwDQdTRsuqTcGhhsQbm2XsP3tAltmyt1bFdpZu//lV
xXaQIO6TJm39aS+tvfDmtAd3H//zLTWxKbQO+XW0xT6gdgJX7IrOVe2EqFNL
3VrqHFR3oPbq1EWojkF1OaqzSN2DjivH11PV0ac4qjVvkfZuiP5S+bEPQe/Z
EP2l6gBUF6C6D9V3qLv+j5U4uutvnv/pO+yJbT9tNWrvUX2L6lNUL+YJlbjr
r65DbTse3xLbZK97n94Se3n+z/7Xuw/ETb+PgGNbEse46kvUZuKzuP0O/gfw
XEts+mnrSvte2vrT/qN2r3TTTxuQ2srUTT9tZkrrfnwlNgK1Fbg19DHQf5Pm
tPKnHcvKO3dGt9wg8FdL9Cs8UxV9supWtU1t22+ro7vSOzLnD+cR7Tf9C71O
dXSjHV2JTlr1A6knaJqu6LRVt61vxs4s/7M6XGcrb5DUSat+DPVkTNsVGyvq
bnQMOBaMr55c9eWqA3bzhtie0j7WZmU8qHty6nKH5h3Tl1WZs5y7vKPrLPdR
/tveb3WWuzvvy7ZoiB0r0zTtDRpi9867Le0Lfut7serYRtS+nzolLZ/l1L6l
7Wr7av90q4bEmazcj2nj6lDqN3Nt7uC9i3eOd65XZ6V3QK7BrsXKFHn3Prn7
idrw9OTt+V/6f8oDmawxIC5PY1xj7je9/x9f7vs3oD83gN7Q80Br+BXyFqYo
/Cz5r/JC5YnO7FrfmvXHdWgB4s/kHWxtzoDyOOVpnlDOiPI6PR9K6y7/83Ti
v1Ib3XYLdeVM90Q5s3rWE8Q9s3uWNk/zNg/z8sz2fDmzeZbzvHx1OQt63vN8
eG05zxnW+90nytnR86Xhri7nQcPKU5bXbB2tqzxMeZlTgS9I+c4h/sbQ00Hf
VokObvVOq39a3dzqB1d3t/rS1R2ujvOthmVP4d5C+Zq5PZuAX1pJHOOqz1od
7crRKE+jza5rG8KzlHepTvzrnVt7kp7pqt9cneDqBlcX+TmFn2xbn1ob3voT
DdEVr874xxuKTv6S1gzKrxH/zprI3Ch745lcXs1L5UwqP972sF3kn6vDW96e
+v7V7a2+d3Wpq1Nd3fHmYV7qvH+sITrsH6uKXhT112sDQFsAygIpL/Qk38+G
pYyW1XpYH9vQtvS+xv3mvOU+xTsN7zq88/Cuo6s2+tUfc00G7y5uTZ6JwA/3
ztX9oWf7SvSwG76rhG3n/7yhnrHk25PBxNPPtBqBMY3BTV8bD+oUU7eYc5K2
Utrw6wAagHqgszFu9SVP4zeDtxiuMf/ybLWR3x0s527P33OWPbF7XXmQ85Q9
7z6t0e2k3if534Mlrvs7eXKH9qTMlvWwnpRRexTNpeyjaqMPXx67vHblYEfW
xn14KVNjqa/hLbPt1VrqYhvJl5c/b9v9T8ZFnru8+B28l6uJTJuybd95JgYf
4b9YiTzBhzVx0++w1qI/0nNQV/rQvpTHJO9Jfqu8137wW9X31pP+tt/lb/3H
56oNv2mexsh8eH7xHKM8ybjW8Pvl+8/TFXm/28j7F/8t/I+Ari1j46ZK8jE/
eb7qelXG4b//vTayD7s4v9VEZn1Ca+IZv66MH+9T1J+kHqWbK+mDxtKujrdh
nvtqItMgz1aZA2UPlPFSJ/oTPTnPea57djA2CLRFoE0BbQtog+A/uwANsR/w
JvGX970j8LZnjN7Qur+J/9J8P/ZsxZ7vdfDXGoOrU/QN90i90d+hHo+3Klmz
XbvVITuKvdR7pjMqZ5AP7EPgS/xewe0V8E71YUJvTV+/pzyPZzrfx1VHB/Rl
9sPwuOl3PnAh+MXDY5NYvcbqN75AAB/RFls6VwDDwRcHNqF86/tGtDNhDGsa
pmW+5q/OYXUdt/UmP/N9jvpca72g3wauAb8eeAf8veGxAbk24TdQf5a2wCj/
U42xP/22MvLgLzXm7GsbvN8Y+Tnl1TZ2rWE8be16An0NsJX9SXpHKN8L/qy6
NVrT/vbDwl2RkVJWSpk2ZdueaI3+nx3AF8f/Dfr3AegdoR+qZP71HlH+t7xz
5bvuBt/de/7+1Mm6WSfr9oxlHhUbuu7JzmuMrPE5yjCDz075ZqW+j5gu6T/K
dw7oVu8EwafV3hD4Y+CrUp7nGqOr0TSf9V/Af3Loh8FXwf8Jvi+MSpvZdsYz
vmmatnbgvJt4Wfl08KcbY6vaOE82Zhw7nv9bM8EnoXxf+z7QdCnfbdZneHSi
qBvF+UZZn4NqImunDJ2yc8rQKVunjOzGRaZF2dnlWyP/+klD5HPUQ6ZsivIh
HzfkHOF5wjRMS5lPZWmUz1Hm0zDrFZmSjxoiH2P65qP8rjLAyg16p6RssPIq
E8qdrrIqytNqT0Z50Bm7YkNdWyDaHtE+iDZBpHXXXpAyPOZvOZQvlX8nf075
VeVVlaFxvXXdVV5G/p32ONU9eVUpj7LJx9REBliZGe9+JxR5GvcZ7jdmAF4F
n5/0ZqqJbOpMpPcWX5WUuwa7FrfR3z96v0Dbr4D/uN7sb93nvkh+2/L/vSCf
CegibF9vaN0/4H+aoje2WCc2xt5qI/Se0N2E/XAw/Wx/+4/6r06N/5/gI9WB
CD5AuBbwDu/82gLi9xJ25a6ka/rafL25MTwT7+jlIchLUd5YW0jaRFL+cJOe
nE88p9w3GHs/1td6K69rfO/NvT9XNsI+t++ViVJmW3kC7+6VpVLeSLkj5Y9W
Lv2tu/7e8St7pZyw8sLKQCoLOeR97vDYoNUW7eXuoxzv9XlP6xrkmuIa7lqu
fiLvp37nfzkR/FjPt6Mid+PbkE/UYeNdaNFnfVxbwqrDSttqNw/k7Zo6tdSt
tXlX7I5ps0rbVRvS/1fWRIfxPtDb90a32uG+gyO9K3rzduTMYq/7D9aHuTxv
En6dtug/7iK9bstAm67dFj/DrCtO+T5uzPyq/m7LaXnb1X/cGZ6lvMuviLOD
c31bdOGoE2dn375Q3j8b46af+rfVf7AB+HeD0QH+G/6/N0Y3+OUD0det3u73
yXvVtugDVwewuoDV8f0LfnuPiO7vKwfytuoT8t9dXVO90aeoXsWfB6Mj+l3n
whHRHb1vW/SHq8P7MG2gAYcMj83NOtteGbfhsYE7si02iH8Gf2x4bBPPg39L
TeIY1zX2isa8i3DtdQ27EvqqsrZN3pv4pvM+5Wnk+zj0E75ZVvd/JfH/W6uV
V9PeG2Wtl9/QFv0K6ltYBdhP+4yk1w3ea50JP31v/i//s4+hl+N7I+33s3f6
4Buro6opOnQPhl66LbrQDWPYA9oSVvq71ujonrQp+nPV3b26POvGxNmR+kzb
m/JZzo8GM2d4V3NrY+YM9Ruq609ZCuUnXq1kXXJ9uoC+2tV12rWINtwR/wlt
kdHUTb/t2jKWfOO4TVv2fMqxKs/qXtA3I74d2bI170V8c+HbC/WHbt4a+Tr3
rzsUeVNl6tynuV9TFlX5bGX3lcFTJlWZE2VMvBt3v6YMnfaOzh8W2TrflPiO
ZLvWvEcxX/NXvnuL1tzJe273/O5d/WmEX4Z//6giH+gZf8CzbW3O/r4B8C2A
Mv3K9iufsAv4hLrI8p83EF1C/c6JPTkjKOOqDiPPDofg9nVNZH2Vh1UG2Pto
bR4pG7w2cHRN9uTuzZUpdl/v/l7ZWmX+3qxKmSzbsaQ3A/ghhX+ojImyJK5Z
rl33er/tWaIu8iXKxyjnoryLtlXPAT6tzR7JvdL9lczbzt/yik9rja57wxi2
SX3/w7OGuJbUtOVtsDK8ygb7XvbS0vc/2t5tsWWmTbMt2qJPV1r3H/Bftys6
9M/3TWxbZHyUU1NeTdkfebCeez3/3kN5zhqIbKMy2Mpie0eibKQyYd6dOA4c
D8oayTtxDDuWrbN1l0ejjJKySe7xDWNYZd2843eNdR1zPXPt9Y2HuqO0oeTb
D2XglE1TRk3ZOO9YlNNUXtO7F2USlU30DkZaGbWautzpWD7jGFeZOWXvxpHH
OOo+HpgUvJf2e2541nDXct30Uwf5ZG2xafpnU+7vtHU6bCx7J8pd3Rz7GdoQ
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
SFnv1rxhN23zqGnPHOlcOQb6W/cQbcF9x/FZW/IwL3WeqvvUM6NnR9M07cO6
YvdP+3/joV8m/Cr1kQGdpy864dQNp84wdYetT5gF6yPjuV57bNxpR0x7Ytq+
m7wv/obroz5r813AuYfwa7THDrq6DnRbF/oWZUDro3PvRvDr3EPW5u2277+X
UIdEY2QYlWX0zYJvk7wj8K5gFdK4ZmTSX6s98mu+L/Bthe8p1sRt/vroWJik
NfYH6tVd1R77jdpXfI/yv98U+4uthPmJuixOnG2gT/CNQFPsu20KvUt7bD0u
751Fe+ps3ZdQn75jqT24+3l1i5iP+TWW+ltGy2qZLJt5mrdnaM/S2pe0Ptar
ZyjvK3zr4VsU31v4hsK3FL4teGUwMnnK6imzp6ze08Q/1Ttk8HfwH+n9LGWp
hX7X+06+q6r7BfizNSC+tm8gWuO/OvjK6j8D/wqYDHx2719a8/7hD/L6GPz1
wbyZ+BO6ZnjeUvzRk/O85/o38f+3J7Kgv/nfQT9ZiZyk8pI/9KSclvc0YMvO
vJHxrcymRT5QfQubEnazurzhf6Y1OgB8+++eyXaxfXwT49sd5RN936IOCHU9
bNmevvu2Jm+mddNPnRLqmvCOybsmdXKra8I3KL5FeaQ1+hvUueC7Et+XqItB
d/3VCfFQ+R/3rYuMpO3/U0/OS56b3iD+1u1lLKn/Sdsc7dG1P7N7CsdCe+wB
Tcr4n8T9Vmd0GHrGv649Nm/UneedgbZwFuuLbvPNiLNxX2wcLNQcnTTqplGf
oLY91Fdzq/9Xe3TeqOvmws7ozFF3jmGkL+iMDh3DGNazs3ZLtV+qbdS11QdY
eMNTMB4PaI/tzX2p47LgA63Rhbiy/5hjnf57Vflu8EHCn9ke/ffaqDq9/f90
VmrP9czO6JS8r9yvavv1xPb47Vr07+wKTPCuAbfdwU/2vrsp9uD2aQ+IqxNe
3fB7tJewlG9YW+yj1jbnDtq76Kvx/42wG6rTvz02itRh6B2MNoW8j7G9bfdJ
KP/S6v8h/Aigrj1Q676iPX4P9oafK1+3m/DHd8ausbaPT/AtgDoBmc92cp3D
f9r22CfVxtv04E+S312ErddeW2/umG0LbbbNif+s7Rkr6uBUF+cK7bGhbB7m
5Vlc/cHqZF4UfL72vKue3T2uczVwqPth6IXVh9QeW0jTlzvOi11DRsZNP/W3
qcvK+xx1WZ5Ne0/bHP3y27bF/vo87hXqoqPDO2bvmrVZpf6/e3vTXrbNZNR3
kfbk/QBD8ktl2LtiJ1V7qf4Pfynz2pS1p43wa/QlramK/sGNK7EtMKA+70pk
nJVzV8Zd2Wfl+S+FvqS8jVCHnHri1FWg/oVPhvJu3ffrH7H/eBX6NN+wAq8M
RSfe2R3RIaeuvOOgjx2KXUN1SYsv0BEbh7qpk1o91Or7U1/hZJ6JO6LHemN1
w+G/UEfcjgZ/CZiiM+8LFvM+ZDC6qTekLa8aSBksi28TXgY/bzB67a4jzKzg
1w5G7r+TNO4k/WcJ0+U7fOp7HX5ra3OzK2539SeMYXXTb6HB6KVv1O5Ef95o
+C7D9xm+3fCNxEyd0d/n24k7+/KmwbcMLxSYBP+lRsXP9uvrzPuW9ZV3Iv3e
rtyxedd2Iv5LqBNcvfrgJwOfEP467wjsO+hdO6Ij7ybSOx161Y7oLFZ3sfTS
0EsBpw0l/Lrg6wBXDUXn/dod0amobsVXBzKvbIfb1PL3hoI739xC+tdA7wE9
gzrYKnFTR9/lQwl76lB0g6sjXN1+p0B/SnlfYQxu0R8d2VPhv/bI6M4+2Pbz
HYx3LqSzmmd277k7Ev54/BfriD5BdY+fWOqjzmZ1Nx8JPVdH9F2qP9M7Fe9W
KrgNgp81GF3jY6DnVJe1/d0RHcbqMj7APXBHdKKqG/VAz4DOA5TnDM8Dg9FV
3EGYuQh/02De9vjuZxnwjz1zgP/F//g+7jfgdinfP9VX2B8ZOGXh/qdbRhlG
ZRnVPaBuF2WQlEXybZb6CZQxVNbQ92q+X7u3yBz6dsy3ab4h9+2Abzd8W+6b
D99++BbZ9/LKXCp7uXxtdIv4ZtQ9jXGMe1eRifO9n+/55E/Ja/A9tO+NlZlT
dk79Cb5NdP8g78G3yb6XVeZCnvw3rAeT9kaGRlmaO+RB9ob/4ZtQ34JuPBj+
3P34T8L/MDP+r0Df0Rgevrx8ef7y6P8o/G75lfI275IfCv0d5d+mM/IFyhO8
VAkv8GP8K715E+HbCPcs7u3uHQwPdQr5Sz3h4S8OvXhNePsPk15tV2yzXIrf
XdCrd8e2xZ2ej4FHnCsYT7Phf5//C36DZb58Zij//o7qn3O/Bn2J5zLgvaGA
uG/f3h2K/8KdsQGzCfHfdv6Dnh94ayj0jJ3RIaouUcvzEPnPSP6nqP/bO3jK
+wJu5/TnjOq5c5lydr1Aniz4jR0pr2fWlzpiU8az7OW47Yj/Dt2xz/AQ/nf5
7+N/Hv5PQv8D/Qf/5xX9OUPvDv1mfc7Wj0P/3hGbNaerb3Modi60d3Em9K3O
+eq29IzaHx2oE6EvK/WxPJ6ltXXzgG07FLsY2sfQlsZNrg2dsckww2DO0997
DiWNfYh/Hf77dGQPND1+XwxF75v6304ZiA672WmfdVqj2+5Hy1fu7Ly7+dw9
QmtkSy8m7JnAdMpF4naSvIRK5MDdd504EH6mcoaHt+Y+6wfvdDpjc2Bv0vsS
emf8rvd9C/5/D4Ufo85dde/KD1QuWb6kbzX/wX+j9pxvVqD8/1RiR7bfMdoT
m1fevXoHqy0s75sf6Yy93Vnw+5T4wwm7h29ECP+be0bHE+U5nvL8OpQ7SfcI
7hV+cU4vd5R3KysD3dMem/Panv/J9umMDmJ1Ef8B/VdbztCepX18cVpndDLP
2Jf/r6Y1MlmTEf5b6M07c+bw7OH84hnS9+++Va8j/j3tsTGorUHtSdeNCQ9G
Xoz2p+RNyaM6qy/8LPWYq9d41XI+Ps07h/boUlcH6RWdsWGtblJtOmsn9Of2
2HrWxrV3fNqg0va1/AhtOjXTfjMORIf04mPC05K35X3yXZ2xQacu6k7oOdVh
DP1iX3Qaf9gVuwzqOq7B/7j26HRfvPAzl2vPfn3Fwej0Ua+V+q3U9SNPSd7S
aqNiW3duwjzB+N2yO/ONNu+eJf0Zx8QWnvym2yjPg+zPphiITan7OmN/WVtT
8qu0i6d9PPlb2qzVDqI6TOX3aVN3ZtJablRs7f4nU9gYm2jaRpvL+3N1y+J/
Pv2zofcRrk/ksU4lOkB8l/FP0Q3ievgp6X0C7O/9yVB046ojV1vA40mvszs2
gx8tdGNHeB7yPuR5yPvQ5om2T2aE/rgzOoFXHYzO//c6o8NXWwDLkOc0pPe+
e6JKdOBu2JE3sOrGlZ/wubrJ6c/5BlKejfHfCLjQuRe4oD060se73kP/OiY2
BbQtcBn0Dh2x9XPpUPYp6hLWTb+zyn5pFeDMoegcVhexOonVRXwO9Fod0dE+
5WB0BLt/0saxuoPPL+2zvveYQwFx9fmeOxSdv+rxVZ+vuoC1AaGdsoljYhtC
GxU7U/6JI8NP6R8bu2/yWOS1aAPnY+LfNSq2cXzD1IP/rJ1527Qo/gPyCLSf
5PtE29//w/1WJXO+c/9vbbmvmhX/34j7N+lvMBAd196zyutT97VrimvLrWOi
6/hI98DkvyJuFw7mTfYF8ps681Zbfu+c4Odpbwm/o+RXtaSMltU3uUe15U2u
b3PHyR/rjg0NbWkMQde4VjaHn6NNjZ3HxAbg8BL+I+gPgUnBZwfW6Y7NNW2v
acPrXfx+HRl+00zQm1LeW7U1MRCbS7sS/uExscWkzSbtTml/yvVnIctD+bfV
5tBAbJj8i/+DY2LbxDfNl7XkTOTZ6H9vVqfn//q5J290fZfrnYx3MzUD4ZXf
5XrVF5tJo4m7YE30h/rP+e/d0pH10jepvk1duipvUafpy/vz5oa8R/V85lvU
JuhdK9lTuLfwff07+E+o5M2yZzj933QNBj+KMvxBf5/q+3rolpbsJ94h/qK+
M4c+lLRno/5rdCeMYQ/qzx23ewz3GvPgvx34PPhvVonNNu26ad9NW27bDOSt
vm/a9X9+IPcG2pK7TH5lmf/Wco80GB67vHZtVV0EPdNgdJB7RvOspo7xH+i7
70dH/7Yg/vPo6OZ2/K5E2BryXAt6buiR9Ncc0FsNZE/l3mo+4M2hvNdf3He6
xDlsIDZ+tfX7B+39QXds7Gpr9xfo97rzBtK3kBtB39ed9Xe1zrz98j2bb858
e7Y86+Hv3XnT5dsu9TOpG8k3kL6FZDmsurY7bxCVIXZ5v6E7byJ94zgOemJ3
bBZr13ci9IvQk8rDl2cCfvBAbBBqi3AC/g90x0ayMsqHQD/aHR0Avtmvb8j7
fd/zizuGnujP+/XGhrxp9nz/VH/eLZ/dnfliv4Gc9Q2zi7zl/rxxNoxhtdGs
jeEjye+J7thUVmZYfXtPdUd/Q0tD3lOrH0qbzNpm3hv/h7pjw1BbhNok1Lbh
HGPDR/mPn1KJDcFZW6JTXduCEwcjQ/Y28V/vjg3myZR7b4ltZt+MTuGdVUve
kqozSr1TvrHzrd2tnh+h7yb+y74d5J/rZn3uAk7wbgj/seCHev/jeccxCK2M
r7K+98gDh66vif7g2wejN+v2qujWOp40mvHvAybvyRvym/G/qSVvy7XZtgt4
17DYctPG2ab+Oy2xTyaIb94S22ULDEbHhLolvH9wPjoEfLQ2hmiPpweis8A7
C+8udhmILQBtAmgfZYI8rpbYV1Ff+g6k2UH71HtH0J/5V90IexLmtv6U0bLe
2JK39beQ5oqEvZL6vUC43Yl/e0vmEOcS7Yk+7FoP3NsXm1IHULYDRxd7VJXg
B42OrarFlY8aHf0+0toQ0s6Q+lC0LbSU/+Do2M9auBKbQydCn1BsES09ELlq
5aultYF00uiEMax7BPcK/iP+K/L05O097vzg3sYxMTo63FeoxIaZtjK1mam9
ohWg94U+Cnq5St7039oSnVi+9fef899zjXOtc450rlTHifPtEdCP/b+izjv+
6unx45/V5372vZ/PHZ+7Pvdzk5kVySglUUqI7IxEMjKSkcqIzIzwRRF+sufX
SrJFhDJLaZGZhoQkGf1ez17H4/vHedxz3ue8z/u8x32/z3gN3qe6XqO1/w95
a46gNbIsb70RNMrRJp/SGr6RSh9EaHV/6FvF/xvmb/he7aiyz3N+/NeVblF6
RNTXB8/E42L2NMRL8Rql34r5P8fxlivMjLkNtOXbonVb0G9ZqvRfRa/Z3Yj/
l+r7Q2G84mepvn+y9kDGC3lr8OtZc4LgBh2k56mv0usZr7AepfLrlV7IfLTy
e4CxyRrjDqYdbVC0NuGMgN9B8475iQV8E5TurfJ7Z+2ZjSfz1qrvq6w1sdF5
R3cOrexP4dsof6DCJ4xPlH9zvf06/lb6b57Pemvwx5mvLxgnCk7i/FbPfz6s
/EuVX863VuFufJaV3gi+TeU76/80jnWwVo/fDlX6E7yhVbZKdW6l9Fjln6f8
EpX/THk/qP2PZz2eu0337wuuJ+O7vL2UaTNthyMAV2BDmbW+4WjA1UAvHG1w
OBhwMS4ut/Y4HDC4YMxp35Qx5xHuI5p5aOehUQAH/xg4zRlzOOFyzlO6Z8ac
ELghT+v6JTLmdMKJRGfv97Q1INCCmK90MuPxCpqjcHnhy8ERg2PznurbK2PN
BDju76n8thlrHKB1kFJ+a8Ycdjjr05TfBP+A94HS3yvdnDFnDu4cnPtLMubA
wIVBnx5teziccDnRd0cLHs4b3Df4jnAv6+FL6vpfo+t/Qavx1X9zPcqtZXp/
i3UTvtT16ZP5nybE3zp+JvM/jYpDlP9q2poSaDCUocmg/P8qvaHWHFa4rO+3
WLNlJ/Xf1oXxNePjXPBPBy/XSf3Xs5rt3z5c265Dy0ZhRt5zzMw1o4eD9g9z
RMwVbR7zXDtlKAtP/628A3F4+W/mHYiDkZyetx8PXiJlauNr9F1arVGDNk3v
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
aPcf32wvlVGlvl4LMtb+G1Rn/yg0gdB/RMNjddHj0+4xc7y/StpzCu+paSoz
i/nPVmsFXoBeWcaexXgXz1f6c+X/rW1tK60R8hPPs/Jvw98l+J30bbYe4S8q
v7TR8zJ9wnwKOgVDUvY1Rl+EOuCed415zLxE7Vmg0FHpXRQizZ6P+qbKczg/
J609MjvidwjvklVJzzUx58Tc14Vpa8/gUY9XPXNOM/j/VHkuCs1ktJPXsR7B
epHyd415zYHj/ZB0Hu9X+nHLk95GnL7dGWlzW+C4LEpaA+mKOntCoI2EhhHP
N8852ipoh+ApB6YNbBv+KPBr4BvhP3MaY1qlZyp9d9aeRngbpYK+If4z8Hem
R+zfAkcH7hoctrWq/0L6DUpnWXNV/DSV76R4SfD/+anFfdVu2jRV7btIZfrU
uw9LXxaPXDy2/qi0d+64RnuCwh+ER4i/BV6gYPLB5uM3gbcnnqB4g+Lph7cf
mjkri/ZbwWsPjzy88vAfwavwr+DPgfYOXn97VViDB313+Frwk/o02Q8Fr/JU
0H/lvcL7hTbRtkkZ+5nia4rfJh6ceHEerW2DUtbmwTsUzxA0euBAcv25D3Aj
0wVjxMGGj9X17q1vdNtm90Hpi8fR0Cq1ZyJ8y2fhhOpZWILfStZ+OWjJNzGf
p/jTvJPbuMxTeI/AYVV8nvIfzPr98YTaP7bMXp/wI/H0HFdm78uBcCzRGlI4
NmM/+zj9vLTna+GPddO9Wq76nszaowcde9pAW/DQQZccfXK8deCDHVVvzeyZ
Sj8Bpy3i/eG34vlTVPl8xF5AeDqh24t+L15PbCMPD7tY4IvtWe9zejhrDyl8
o9Bwp/9yUxjP8f+j7aTHhzEhY8PHaKPqWxra/2bW2jfVat/0rL+lfO/hWKLr
x7w98/foZfGNnZF1WTQj0Y78q9XjLp5pnm3m9Jnbv77KXHr4db2U9xXjyaw1
cm9T+clN1s6F37ZDvT3t4PvRVvozjHlvCGM2xm7cA87n5jB/zvg3mXLet6H/
QxnGs6xt3Fjl9w/3gHsRidi/bKfQl/n33NAAQIvwnWrzNfFAwwsNzTS009BI
QyttRaW9wtDoR6t/hsLWWfvj4eV3p0Jr1u8btNPwaMObDc3ajaxBVVrLtqRo
XWT0kd9X+j7WZJXuoLA75dEPZz42Yr4kHlONaMlU2nvqczQT2lgzfbbSH2Qd
X8z7PWN9dLC+qXrrcfF92Fn77o4+LvnadojiYxSiXBuFo9FCxf9K8V/U/if1
f7gWz1ilyxUGKm+wQiRrTet91J5DI9a6nqsQq7G/2bus5Wb97G7SoFb8BZ3f
gyp/H5rtWWvCoQ2XYg0APmOrfS7wu+D84bOjtRdpY29E/DbQrkezvlPW/hy7
ca0UHixYzw7fSPwj8bbjmnPt38H/LutrxrX7PdwvPPDwtULTDm27PbRtiN4t
+wT+6l5ZeyPi+Yn3J3x6fBLZ1j1rD49dmsxRBj8Nvx5PxT7a/7ysPUHQ2afN
tH1Gxlhq7unSrNtM26mDurpkfe54fnRW/GOF1xVv1fO7QPEeWXt7/lJpPbDF
qv9XvgNK/5Ox7g98ZzjSaBRN4T+p/dGkfi7rsTbfXTRs0Mlr0v3bLm7OPtx9
xuGUIY81RdbwWMtrrbaOAttYb2SOgrJrVOf+aGEEfYS6nLW3W/DIUnumMceo
w29RYr2VBuXvVOM1+s0y7hfTP6bPT9+/hf5azH1gdJXg96AN8Aj48Jw1IdC7
YYzBWKOL9p0c8z7s+39hPoQ5j3/rpj9+dxhXoCcwj++t2rCZ6rtE206Kuf11
cWviJGPW30UrB00e5l6+b7JWz49Za73jAYoXKJhgsMHbVRsvW1e0Djxl3i4Y
wweWD0ww2GD0y/9Q/shm672xbUzgY/1bFk1+cH/sMyht7u5kxrxxay4xn8Lc
CVpMrDGw1jC12vMq4IjBE6OneGQIzOszv08e6ySsl2yu+samrI/2VLXXQCbk
vWbC2slVEesk9dIxerGWoH2eVdmByi+yTqD9D094Dom5JPRIV6asGdxP7cyF
7wH7sG9R57uf6iqgyaZr07XKehepojV9J8A3yHn+cETMmr1o9ybps8St/4v2
MJqPaD8eEvjTd6j8RNZyqqx3jwYcWnCdVD6h8nEd9yz6tsyrN7sO6uoU9B6S
OXu3XRb0LNAv3j1uXgFagWi2MLeIhhZaLn/q+Pej71fj99djyh9ebe7d3sov
1TUoSVnjqqHZa66bhftTljJfv1rv09u0bXTBfDK4Zj1U31Y5z/NeH/C+dyU8
v8raMn1s+tpRrlGV/0P8l/CAOlzXP1ttvdop6U2U/E2eqc+mrQkPpw7OCFrx
HINj4fmK/gcaSWglqeqS59LWT8qofbwynmIOJuf/Ch6+eAmjp5RTfmOof2p6
0ycMal7J82nrK7Uqv11IP62g12lJWaivmTlCNe72cL/RCEUrlGeiJWeN+Bua
zQFEOx4Nl3kxr5mg7cKaDGsz9AnpG8ZVfifVtzPzzdp/s2avAbP2+3CTNSvQ
rkDDf/OcMflg8+GswUdDP4zxUU+dX0nW/Cn677xzeffekrGvN/7eNyveXXUc
rrr200X7KGPPvatDvxntSspQFo/q/4T+Y/dye7rSv4RT8hbPV5W5Jvir1Ta4
zr1z9jd7WcffQvvX5tw/pq/fPdSHBjRa0Pvhp6P49QrFCmtw877F428s4+gK
e/89goYIbVd4LBM0zNXWdIO1zfEwHKny68vtbYgnwvVxa0CiBYk+Cr7a+Gvj
nY2ews9Kf8N8FN/vrONn6XqdlLW+A77V+wc9g/MVLlP88vA93FnHfyplzy68
uy7M2V8djOaInDUi0Io4UeG4rPUh8PfEHxMvbPy/7tS+l6p8vMUeU3hkdY/Y
e+pMhQsi5p+dkbV+BB7J+yk9NGv9CPxFKUPZExSGRuwxjdf03WrDGP6Lemh/
SVtDAi2JIQrHZ+0vdneDy9yTc53UfWHE/m34w+KZkqqwd/k52jZGeZcoDMva
YxUfVDQq0Kq4gmtabs91vNfxzMM772P4dzlrtqPjjp47Wu54XuJrib8lXpho
RDD/hcdFl5w9+PDiQy/x4Jw1j9E+Pl9hcsZ6yPi2499+r9IdVaaf9q2FP5Wx
Zh7aee9WWQ/sZG3rpGPtiv9mxpirvo32zAWLhX8g3n79VcfuOWOo8MwZWm5s
FZp7aO9RB3Xhn9xb8Z91vL4ZaxahXYRnM97N/3r2HlNuL9+t4RhWeU0abT74
tHBfD9HxdmXuHnyhyvZQGKT4RG2bqPwJhJzHoIxF0fy/W/ktRWvwv6j6ts9Z
gwwtMjw38d5E0wttL/DY+AF+qPMZ3+gxLWNb9J0bGY/jtxn0c5rR4q+wlzyB
eG3wBx6nUFZhD3qeh4cUbiQv+FPyH+a/PEDns3/O+tS7qL5zwv91Ing3xQ+u
8PEe5D+v+Nnh/vH/Pk3xoQoPZ+z/+Fe97+nOOXuewJ28Nm4vlHzRepfTwvmj
gY0W9iSFxzPWw95Nx79d6SczfifybuwR+pf9svZ+64a/rOIn5syNv0vHm5/z
mIKxxQ94amSsOY32NJ5zeM9dqfCj4nPLrc+OntVnde7T7pO1Ry6+umhQo0X9
s/6D2+i/2KHUetTprL3QRpS6P4+GAdqZeDTC18QfeEG5j3FV1h53O+r90Dbi
4x+o0D/i/jl6WGO1z7k17t9embP/Y0HPzhdV9o/Eg/TYZnOq8Sa9Lmsv2891
jMsz9iDG45ZjcuwddX2fbfaaCtjZ7YrWSYADcJPqa1KZabo+n+MBq3ilQh/F
z1Joq3gt56f4xQoNWXuM4FncK+hbplXHY6w/q75x6OEW7KuOv/q2Sl+Qdd8t
WhPGa0X7aOGnhf7Mudxvle2p/PYqf23OdcFRvSZn/1a8Ji4N40H0xvGlZ0zL
2JY20tZzw/i3wJgUr5Qw3sVvE+9OrukVOedPVN79QS+cc+bc40Fv6vKc8QZg
AvAXRUMPLb3ZVfbfxJ8TfkRttfWM8ZSGlw4/Ha/pSxRuVLx9mfV/Ls7Ye5h7
dL3SR/FNYu0jYn2c71UfvJSNuicP5PzN4NuBXhF6a39q/13beJ/Ds+YcPKPn
cV3cXIQRWXtRc4251ugdfavrs0TbDsu6Tup+jjVYtH5Yf2uwxyZem/2zLju0
1HrS6L0trvP88P5ZeyLixY1mEtpJeGzitXkZeK6c+S1wF+DowNWB41Kb8Dby
8Mg+XvsPbLJ3NpyfRMJ8ILhABOJwZOAOrWq1jyP/6QO0byPji5R1YNB6xn/1
Cfi4VdZnoM9C3wX9N/xXl+sc1qE9rf0nZd2HoC9xlo5xkfJH5hw/An52xpp1
aNf9yporz0bWcTA8zIfcqfBmxPOpE7LWR2rU8aeF9A18Q8Ez6ZoUVd+2Or/3
4uaEww2/hT6c8vuCodC742alp0Sst41eN3OCzA2eA75FbbssZ6/tj1TH4oLT
5BW0beesPdsvbLImFdpUzO+ixfSo8m/PWn+qvt5tGp81XxS+Fp5qeK+BGQM7
dh+Yh6Q1gNEC/iN4WaH5gbYHGh9DiuYXnFRtzRG0SE4rWgsEDZhTWT/S8d5P
ed0SLWP4jHBv4ePCrcQ/oTltTvKueftJbqn4Y6pvF+3bUemk0r3BY+WsfwKf
AU0StEm65v1/BIO4p+IRhQdV93odb7eC/TbPDnxHsIRomNyUsIYK+5crXFZq
z0q8K9FcQmcJTR20ddBUQXeFY3J+bfJu22Tt06D7+ZfafojiD2vb+pwxlAP1
X+jfxtjKnZWOqe53dQ0GMfDQtrasnyvs1GI+Cx52aCqjrcw28top7Kz4ZawX
Kv4Va+p5+6XAo4ZPfWnefNjJSt/HWrfiTXlrx3DNufbUQV2bK3RscSCOZyfX
Fw7N7ym3gbbAyQYTCRYSrjaaLJMS9jRFq2VgwVhGMI1X5e2RAi+HOqhratFa
xbxv4N6WZuzPtU7X7//0LJ2k/LXN1mhBq2Va0TgTsCAvFK03ltfz+UZYvwA/
AoYQ7ODggvu49HX5xvKt7QRerMaaBGgTtAHvrrxLFCroy4CXV/xQMH+s09Of
gVsBxi9jfbRhtd62KQ+MMOud/L8zroO6xpRav47/KP/VA0qt58v5naj4Eaxf
pv08HKb44eF48G+j4DmS5uN+o23t9RhsV2L/D/juKxO+5lx79IJPrrVG3ca0
MYOsi26MGUsYof+nvKtLrefGMTk2ein4FzOYHqD4sWH/Y7XPl1Fzpnl+WD9l
7ZNrwrW5TumTGP8q/VPaHN2ifkdHzd3tmTe2jv8Y377VjNHhrpRab5LzYcC8
XD9fpo2JxEeYdV2wktRJ3ezDvmtZH1N8d4Vf09ZD3l/H/63EerxoAoNHBBMJ
NhIMIFqxtAFs4Hpt21d5PUutV4mGMlrKE7X/R4ovV0iwNqvwQ9qBOBhOsJ9z
FaaobJcS6/P+ptC91HVSN/eIe9UYN5cajOgvOp81Jd4fz17wdEeE8d0FReOw
wGPBHV6dMdYZTPKWeXP84c3PCvgXOJdw/66vMRezW9FcVzivz+bM/4L7tBDM
s/bfjvFX0pww0vhVz2BtQfmvwr1mPifpMpT9U+nt663BixZv96K5jHAg4S6e
o/yJ1fa4HKH4/tr2Ysqe2Hhjw0E7PWl+Gty0FwK/9jqlpyr+psJ4xTeU2y9m
eN5tpU7qnpZz2Q5hPP+G0u822B97sxbzxeDLwaeDS4Y/L1hyMOUfqewB2tY/
YT27j5VewveN97XCQsUPVP6CgGFBy+4LbRuecBnK/qn6jgAXl/D+7MO+Zyv8
XXAgPkzhH8W35f2nuu6us//BMap/XMIaUWhFLVD4DXyNQnuVPZb5qYQ1vdD2
wo8DPSuwW0cp75uctfwO1PMwL2eNPnTz0M87rGg+KvxlOHFw46iTumkDbYED
CXcRDuMdih8Xvlenqr7SVmvGoeOGdtchRWseooO4T8JaiOjdoJHINvLQLER7
av+EtQzhAMIFRMMLLuGNumd1er5rWPPKOxCvVTiuxfjxesUbFI5XekDB+kZ4
sODF8mzRnE8wXmC9KENZ6qTuZN58hRdZD9b1vS9r7BLbmpVXVJivtnyk0KL4
nqyfgHVV6Mr3K2PsNxjwW+lr6Pj36lrdD98ub/z/AVHvw74vFz2XzJof3B04
pkclzUeFexqDz5jwMTk2mhtg8JlHRosDjBZYLTgG7fLmMOIdgcfE5KI5kYOT
1mCGK/mW7uE2qqs930il+6jMzorPgnPeag453Gv41nDL7yqahw8fH3+qCUVz
SeGU3l70PeJe9U1YrxJOLzxUMHJg5TgGx9pW4eeCA/HtFH4p+Bw5VzircFfP
zvu/DOcUfww4rPAzbwn5XQvmSFTip0R/qNWadGjR4YcysGjdNvTbji9anw+9
tzMCXhBOPuf/frO5+nDy4c7DoYer/y7rmf4sbZrrRe99J73vj1b6nbTzL1f8
ihLr028DHkT3dlaJ9fbRcEbLGT2Pv7LmR2Y1vtyu2VxLOJrgboqN5j/uwPdP
+w+Gz6f49gpHKD5QoUPGetbX6P14XJX1ndFLfrjW+7AvHEx0eZKBmwm/sqXR
uBy4nNGifazxsMbLmvWibUqMsQdrzzeabzVtpK0va9v+JfZreCntOWvmrg9Q
eEXxtipTKPM5c+7oZ4+rN+fmj6z1lR+o9TlwLmhwo8XN+kEJa1fadpjyDi+z
/jL6xlep/J/6nqUz1jO+Wek4eKKM9ZlvrQ3HzFjjGK3jv0J59JCvU361tuUy
1pxAZwO9DbQo2EbeR6Wef9vUh1J8Ct9Y5qPyxtr3aWP9dvSfR8AbVH5jxveI
e9USuKvcI+4V/3H+64yRGCtlg340+7AvGAqwFFHmpBSfWmo9aTwjuoDPqbKX
BH02+m570+dM21OO/xoaGLS/je5jh5j9H+DQoCkL/mZx0nwaOHRw6fqrvjkJ
c7rgdtWp7F6sl+TsXbxY9c/Kmq8C9hlNZXyr4KDBGYMrBjeNfdgXTiTcSDhn
5FMOfllFzl7ZcEzLc65j24B3pO7lzGdVGZ+If8ZKhUEV9jRekbVGD1o9o6rt
wbKuxZwq9mFfPFgYz8EJwpsFDhL9dzhDU8Ex6z3+D1wxNLSa7H1ymMr3q7IH
Cp4ef4byeH2MDXwj6mAsAKcGbg18C7Tyz2bOQXX8yrlr39GKD4iZf8g6Ex5Z
4HTScf9/Pk+am8094d7g8UBb4THh/QC/aeeYudt4E6Hvjr80/vD4U+EhgpfI
F0l7j4C/Auv1JvjguPHseH/gbwYGngC2HBw6eXgs4e3GmiJri5W805iv0/5t
cj4XOHwvVfucwJyBPduryuNi9OLvAT+ldHXO95x7DwZtqeIXpX0NOHfW2uBw
weXCD7oB7FjRPtg8U2U5ewjxX0Pj5ci8NV7+y7pilbVfdtHzfYr+G6fjYZtx
n5u+9wqFLxRfrPCV4otL7IeBX8nm+v/1CPnTWs0bmqT0orT7zPSd71D4MG3P
jnGKjwnvZzgq8EwWlpi7Mk7t2T1pjRq0aj7RtnuUd6/Cx2l7aLyq+OsK81ib
zVtbAo2JQXlzXOA4gbeE+wK/5WE9O48oHNBivPTShHmCaP/gdwI+kz47fXc8
RMYrfrXCe2mXoSw4cbSD8KR4THkTwvnMT9v7dEZoD34t24GPVHp62n6ieybN
sTk+b7+XXuAvlf+a8jto2xVq/xvMRyi+l44xIGoOYLcWbyOP+/Ne1n4rHbX/
VaF9HZV/FH3/qMvDAYALwJiVsSuaOnCG4AqhtYN/yjba/wTtPytt/5Q9lL5e
6Q/SbhNt61divfqBfMOT9kSl/XjG6PJt+ubw7cED5nzFTwnniz/MjqrvQqXf
StuzBu8apiZYG31bYZSHdJvWQkmPVHx0if1Z8DjB6wQOP1x+9MbPVX13MGbL
OBDnHc27Gj8PeFPwp/q0mF8OljUP3521FW27MWrPD/LBzy5X3avh6GfM4YdX
D78ebv9hCvWKbw6eNWOMG1i368vsD9Bb4XnFz1HoFMo3lFsTgP1Zw2Et55dQ
P2Uoe3TwS0CTAJ/yK8L5wenCa4RvGlwvOF9wrNBPwpukT97nxviYuaijtM/3
2neZwpEZezrg7YDGANoDaCJ0VP13llkrgTkk5pIY0zO255pwbdBMQDthP8ZQ
KvtFmf0LuivMUny2wt4Z+z88X+sylD0mb/4jHNqeOZeh7OfB/2EfhU/K3Geg
73Bz0dotmzxTi/bQxUu3J3yTVvs9vF7rY3LsbgrvKv5+8H/AT+LVWm8j7z6l
n631PeBe4C8xDX6O0l2Vfk7hpQq3kbayjbznFPZUvIvCg4rfrbB7xv4Nb2v/
OUrvm/E149rdFfLp09G3G6TQOeM1NtbapldaH585cObCmSNmrniozvH5hP2D
8CubUulnlWf2uUrzQ1Y2e3y4OOcwLIwfF+U8f3WP4o/oGP8ofUurNZTRTt6Y
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
Z34YXkjoh/xQsGf8sxFr7KC18/90DbNp
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
42oP+5j+RTJeIkAv+TzibE71dXLNNtOPntRbHWc2Uv7RVexzgbqXlMukOR3b
b9T6L86ej7n8nwMSkfkUeozb4uGpQQ30bElZwyTL63yrOQB9Bsm/pnmHPs2j
TzmRu1X3AjylvbV6lsALvfNBNLq8oP4zMNBte5FVYDVYAX4CDSifx/W5oCBj
7pbWKtTNrntL2c+gLH3bhi0qMSYOhNqatQ9lA+DrKD+F8r/QZzVlOfjtCF9n
kA4kQw+XT4Y65aC/Br2VO4m8ivzfR/neUCtblWhz9Vn6fwL0ibN4fU34FGbx
8LAxuZb+LnbyU5Wnqpydn50+rQTLwS9giPL9uEdnkH8aPHabz3ehE4uuyT2v
Em/lun4KvKONeNqtotwZ+rVQfh49q/ShF3w/a46MtTyi7tD50ljulGILaeQ/
he8DaMb7OT3lQyn/WvEVyo7y/ynyBiMjT7LlI+2hbJL8kP4mrys6R/D/D8o3
a5wmWjy5l+K23O8gUJI2W7ktZlcDrIOvhua/ZMuzyBFrceoqitXSlwa6R6CP
4gzQVeOt72WYN0uBStCbsfsrxuJr8BZs0ruUOSsX7R3E5g8Yc5Wpm6wcokjL
Z1W+4CTtaSk7HGm5iX3QvWCilfmih0+s5RAql/AF6ER78/wsp3UFOr9UPJC2
guE7g21qwXOb9pqga2PQENyBrspvJVAdVANVwD70CWKcLqRvi8GsJPPXvYkx
37h85LnQ5ZP2Os67+yLwCbT7dirCfF07Qiz3rbfbcsV0f3Wfc6PL12ksT/io
v62ztG7qn2B5XInKYYqxNU2Q3mHIfgXegjDoRW7LIVYMW7HsEsgKVRwo3OIQ
ikdoz6R4t2Laet/IJ6McgBb05xByDnrZs1WIdlxaq0F31PwAPKDbwneE/8eA
p3xt2gvRjieyFvjYvkE2LY/MDLGWu9PI38ZkKfQrCb5STDXW8iOU66c8gVBo
vyjzGfVT/h//f8deD7jHfaGXKI6h2EOKxVqzqQ3uxzXGyRWwT7nWtHGK3yzS
DXiDk3p+U+wZmC7/DujmtrzDJ8rJDLFnQrl5TeMtT7VuuK2tW0HvDTD5V8F5
sAd6rKetq7S+KgbG8L+q4gbo+i3t1AWZky23VrG4ePrRjGvvkFcWnc942vti
vNZf6JwdGXlAblAElATZsM01xlQ/5e+h33RkZcLe1ZhnanjbmiFzoM3FT7gn
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
m1HLhf/53LV1V47dPPh+U056KsvB0/nGvNR5rneWcn61f6DcgwpFKC8K5kTb
twGUb7wGXEHoLzF2NkZnZLbDe1d5Sty31ZpfnPdkPp1pjDYfRi3lf2sMoMzP
EXbOMIXracFMrqdJsffZAmeeXAJOx9o43UObh7SHB/2h03NNaW3qY0aQRf/R
pxq6VAeB6PNvlMmV/HRgHTp1pX/Z4M3qjF+N4xwu2088QreHoAL6dY2w8TeZ
9oaAnOoT+qXofI7LZOQFaQLsnEhW2vwvtflMNObSBth1yc4N0gXYONXZ7r4g
k3IUkZde/jD0zqb4IPUyQBeCvzAoAgqCL8Er+brAG/krwEuQnrE1l+f+dzAb
pIPOjR7P0KOAk5+nPD09ixvRK22o5eIprqf3VWn5WcE/zC8h2sMmWP7EOXR5
hR3yQGcLs7lQc2ISKAxdNsX2QC81/8L/jBsxXbE2+liKstgwi2WdpX4Nfzsj
pbz5aMbGW3grRtqe6RrlWXWuivbLgbJgMVgCssE/CHl/8/+uh60TltPG4wDb
eysOojV1Z3Q5oL0VepTArvHMX4WT7BsHByk/AoIVq4DvEzKLUr4O3li3fSdh
m74NAT448Q+tW7q4LObVSUsC6EKJVkffVvgMXyHk54mxs7vF0aUoKIM+IdQ/
Ac9Z7XUVt6aN/PDdh68ZPC1A1TDbs3syZsqgywbkJsrXFGY+avmq84Hi0JHg
FX1/CV7oHQD9L7//gafgGXjkvB+KgS9AGTBCZ2zhXeZp/sSXzr41d5KdU9J5
pTHg3wQ737Mf2+7THCRfveKUoKPOhaP7S+7RJfmowWct/kLsnNR96Fzw+UEf
iLa19T+UNYy0vPYXPGu34L+GjDOU/6IcXZ69b7UPoF578FWoxZN7OGcjq4Jb
8P9LvWkah2pTOU7U6R9pPpRvnX2J9ic63/UY/hy63/xPpzgdWM6z9T11d4KD
wfYOLqr3CPQ2MFpn0pR7BraCPaCq4/NXzsCuBONVnTLyHyvurzKdeXe+vXMO
nAYXwU4Pu3YGnAf/Kj6DHpl1psPf2rpK+TVwHdwAVzTmldcDSoEX6FRMz2aC
5UPPBVuj7cxy1WRb15/n+nLlP9LXZMZMffkttI+WzeHZxvWt4CyIDLBYaXXl
9zrnXJWPPJG60Ymmu/qgb6okKnaH3OLKpQ6wdccT5JdGdgFn/5vXGZOvdQbR
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
0u3/AM6SYwI=
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt1nlwVtUZx/GTxSQNgSQIGnZQw0yHsUhSClhEpaKORZFYKjKiAwVsXbDi
goFo2VzAIlDEUYotSxMSoSyVVgYEoWJQq9AqAgEaIEQTog2LCAhE+jnz5o/v
3Pc+5zm/53eec+69b7fRjxaNTw4hPIM0TOwSwqzLQ5h9WQjzM0L4Ay7rEMKN
3UJY2CaER34QwgfGpuWFsFLuN51D6CV+K/a1CqEK+Z1CGC8nOT2EJJwnvCEr
hCK6M8zZ7Lra+E9o1V4awjVdQ+jWMYSbskMYhJ3Gqujlyq3KCWEAX9ehD/pj
r1gOvX8mGceplBBOIFvsC34qeChHOz6W8r4MHcQXibUR+6P7s+oWqJvR7DGg
BTKRhmo1CoV7x57gURwQu5bPtm31BON4HYsbaPbDAL+vx8f8b+E/T+6talXp
4T4sUHOhtU+2rkLXqhbWzPcg3BLJDSFFn+fKa8VrS+wy72YaR5FMOwnv0X+R
fhKdbPvQI67XnDSetmaG8JnxAcYOuj+E6/geL68/7cPqVOMAanAEh1BOP51m
BtbTexudrKkHT187IA2o5Hc7RtAfjkl+l6DSHuxDpty39HSqmsXW/ix28TtC
7wcaK1SnD/rhNvxcbJX8At7elfcVzWJzr+b9r+LXiG8SbxB/ujm+muYqrMck
6yrGb/nspZ+f8nKBz5cxBzfR72rOFeZ2wyRanWnOoP0wzZPO5XEcwzpn504a
T8if7jrT+DN6PxnperO7fQgTnIvT7iv0epGcErlP4UW/X5I/w1iTnPVy2+v1
G3r5lDP+YawlZ57cTF7z9HYbL/8T/x1fPeNe6dF/6SaZ85bxv6Gj3M7GHpc7
AQPd32DdN2Kbtc27JIRXsADzUSl2rboPWmMvfdlL+3P0j89pTuLZ6Yt1GKhX
3XkarBe/iDV5H+Z6F87xMlatq83piVR5G+nMUjdH/jT3r7Y0Hs+09a6Uv4r3
c+7L41k3dg/+1Vpd+3wSc/R4PkbxORL/Nuc+c67Sg3x0x818LhXrbu1X4iCt
BiwRa2GsQA964YKai/nsbK3PWvP39JNS7ZU9L8EUseHyL9LcyXcnaxipJ1t4
HxGfmfgMui9Bk/EK6+onfqm8x/hu4LtSvK9YBe2VKEUZFuNPuJf2d3p4Fv9w
vwnj1P0p7XRnqbb5+arDBPHJOOP3cbQynpaViE/Rk7twN6ZjKorTEv4Drft5
7MZXkt9b47k156KawfyttN7DQ2JT5b8pZzlf6c5cS7zs3H5lTr7x1fqSKzfD
vLX2tl2HxLt9A45Z83xzL8qtkXvO/pzBWZzHYbEmPdqr741YpD8PyH9EzZ3G
KuV8iCdoP4kdYqflp8YzgDk8DbaHO+35vs4Jb6m4zR7/hU6afWzBT7497CHv
BbFS81L4XEtrNO178YF3zDasEcs19nvz52EuZuMI7WrPXr419c5I7ONEWo/F
Zxpr/a6h/2R8vvzuab218Z2r3xfpJ7seda0W+9z52oUdvA905n6G/8R3unkv
2I/pmIaZuFzOJfzs4bkq9tL9F2of4KWOVjbdLLxG+++oFzuLW8QGoAjDcEbs
QXNf08PX8ZDYb9AkXq6f553JLPWL1LwdpWKb1Vih1krcofZgvCM2xHqH0Ooi
/125u9Eof5Q1P2cdtfp9GtnWVaBvJ41/61idwgk0xqvYWHPuUPd2rJB7nq8S
+vudywo5u+P3OObLXa9mGsrbJN6fC+M7wpyMLon38JU0rkKJWFfzn+Nls7zj
9qMO9TiGMebX03ub7noswSuoy0n8r3iHhy3o4iymol3rxPttqOeiCE1yr2/+
nxD3fY0erDCv0Jk7bP8znbdx8TsS3128/IiXWuPD5ObSOqTn1diPOuSI/Ti+
m3hfhiPm1GAqjWq9201zL/bgM8yN3wvnYSOPGfY7E0k0jtD4ob2s8SweRH38
4+WZLBA7zmu92y8RnPELLt+KPa3GFDV78/i+mvud64liY2jdY11j6M62jpmY
bF8KjJ3Sv29wEt8bbxRPc62wlhUYhAW8DTF/FZ/n9exT9XahQc3ttEfbmxPG
W6n5etRr/n4Nll8udh9S4n8L3N8xse/L5ZVhqD6Xuo6hMci8X6n1gB78Gg9j
nfV+J3+csT7OyJ70xLtlGZ+L8TyvxfajvbG28XkSyxJbyvcS7MQnaCk2NO49
/TqMpDEKd4qdaOe9L6dMve3qNeLP9moDPmqd+DbFb9Td2E5/o/gnYtvwPnbg
I/Hl9uhNlKEcb6A0OfH+X9f8bdiIc3rY13ry4nu7baI3sUfDUag/efQmNb/f
U9ITZzj+H47fi/gt+DIlUWsNHuf1l/r8dfyPgEYcRW/aZd6RyzHLul7CJnyM
/wN5Fruc
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2136808#1"]& ]]}, {}, {}, {}, {}}, \
{{}, {}, {
                    GrayLevel[0.2], 
                    Line3DBox[CompressedData["
1:eJwl0stLVVEYhvHPC0GYFjjwkkfJJk3EcRf6C5JAIUTzUnDUE5EQBVmWnowS
J+bYBmmeix5wZIMa1by0UZdpYs01C8vb79Dg4Xm/b6299lpr71PXh9tvlURE
ATUVEbUYTUTUcQMSaMQjvSZuQbIqYhAD6Ed1Y0Qv52si+vgapvQ+noj4gEJt
xCVebIq4LbfJ7VhS31HfRYf6Hhf0RviKepybuR7dcsbYVa5TD3EKWb1WdQuS
6gHvDfmyfHDcftT7XFIZ0WV/SfNDPjimjz3sohrvne2lc77jReSRwwu9LGew
gFn1WPFO8AT/rFfuPbu8h5zzZ5HBAl5hHglz5njcMyn0YspaZ+yrR161hzV8
wnf9be409pvX1X941PMPsKJ/n0dw1DuPoEdv0PlK5W65jCeMP8Zb9Ruk5fPu
5hzOYs3drOKm/rLxIU5bY0lOyTfw2fgXXDD/K3/DjLX/2tNzTps7zTvqSX6K
ZzhtvxeNvdZvlred8VfxDn2fMXeR4SxyyBf/D/z03AZ+oNScTfO3UI+H1jlZ
8f8/PQTBWmVf
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0s1LVGEUB+BjVOR3O104YxatcuWmRbrKWrQyZ1xFpWPQTteFUbQQXWii
FqZpYmk0OlE64y4zrBQCqaj8F6KMoD/AfIYWD79zzr33ve/9aMj0tveURMRz
jpVHNHCcEzRXRuwmIs7IFnaORuRqI/L1Ed/Vb5jTr8tXZgvqZ7zW9ycj1uQT
/VPmadR3y2ucUl93zgHZpr/InDVK9Cn1QVnKEbqclzbL2MMVrtJJF3/tL2ev
WRZZYsHss9yhqcZe5TcOWesw1WSsWSmrqKCM8uL+zGerIh4zwzR1ZvflOGOM
MlURse0+kzL0/+xljzQ97tnrWVLqS+QcT1pjSW44tiiz1Ju9kB/NBuUA96g1
XzcbVg8xwlv9LbkqC9xWn/dOztHKn+qIC/K33OUXl61z1uyn+gefOK3/Isc9
6w3HR+VDswl5U/+g+P6tneZO8Zu616pnKJBnhWUSnjtJn2umXPOIaWZ4Wfwf
WGaFPHedV5Dv2GBA/15+YJNB/Zb8Stq3StFBG532cbLm//+5DzmqZCo=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0jss3lEYx/HHLQaXMpG4VUJsXSxWhr54W4OE0hq0A42h9t5iad6oLiII
SSsGl1cF6aDSRYhRoiISl7BKFyRdNennjeGb7++c85xznvPPv/bVcOebrIgY
Q11BRD3aiyKGyiLaOIkEbqoiWvm4JGK1PGKXU9URaXlH/lETsSz/kr/yN8zh
kfEADyJH7uR++/49iOiQ5+27k/OtdRm/dsdfdw3yWz185A94jzW9rWPB+m8+
wAUucY4l82d8ikZ7Tzhtro9fZHJhxKHxd15BbnHElLoczkYW8vS2767HuFbb
ws3YsPZJr3vql+U0Hqpd531zn3kM23KZ+S/yOHYzb+At/okRuc07W5HArbcn
+Zr/YM4dLcZX8iGa5CN+58xJ32gCM5jGbAbrG/Z0ObcbpepW9buEO/0vcMq9
i1zhzZXYNF/H9ej2XV7a36DmmdyD5xhV085J9OIJniJVdf+f/AcTOFMN
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl011MzWEcB/DHrYNCp2M20UypvFzQqaQ6SIwoZsOGhtlsVrnhgrJO58y4
8TJbClGOzcbmwiZR4YKGCzdu3Hm58nInm3RhPmcuPvv+fr/nOc/5/59OhYfa
d7ZNCyF8oCgSQjElpBaEUC7XUEVaXym/8oXP3DP7JD/yIDeEZIGZnJwZwh+m
+GEtHgvhu7xv/zd51byXPga5zYmFIZy1L6O+ww3S+utyyJkpZw/L+lkhDJhX
y7XUkaDfrEbWspWMfptspGyGffpSuYyEerncQTP1+ibZ5btSdOiTspvZPt+r
z5NR5jCXW2Yb5DhFnu2lzKfP/IXPjfGM55w3++vdR9XTifCKcZLu44q1bllm
X0q+NX/NG3qcOd/51+R2a02cs79BbqKejQyaPZJDPKZfPyxHeMJTRrlpPibz
vG+Uh/qYzGciJ4TfTNI4L4QDvndKXe7ej6pXydUcsxaXFVRz19+u1axKHSWj
36uPqUtYwkF9sTzinMWygEW0mBfKSu9XQTx7x56lxl3kyFxOZ3+T+lOyg1J1
p/zpfib4xT5ndDprt9zDfo77rsPyjHlL9hnYxUl9m7UG9ebsPn2rfkv298U6
2s0Ssjb7vtbq5HrS6gFrI+r3vOOSZ7lMj7u8KC+wki79Crk08v9/6x98DXGg

                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0s1LVGEYhvGntVmtbKxMrJCwD9SiImpREmWRC6FFRhGDBpkoalJUaAlm
pW2iD0MatVwEzhBkYUEUWOKy7F+oVn1pVBBu/B1aXFz3e5/nPec9Z6Yk3VLb
vCginqMsL2IDuooiNnIvenDb+ipfw/tlER8wg494hZGUudURVXIT7+Jm3W7e
h0N4XBzRqquW9+Oc3GL2iNwlp/kk6nECR1GHi65dwjH5Aq/kVcmMXMTHuZjX
YT1KUYa0PsWjnlsnFyRn453c6Lk7uBwVyVpfyaf180sjhu05rPsn/8UfzOEX
fmPF4ohx36SQU3jjuwxZv+ZnGMdTPNS947eYxBQe6W7xDVxHH+7o+vkmBpdE
3EehswzwPRzQVyfPwEDy2yyPyMgv8iMmsBlf9Ws47dparudG77FJnnKPabTL
5/VtfBfdcruZJrlDbuCzfIqzPIYz9uW4hjvNjsoH5T3IyHv5pW83gT772sx0
6vvlHn7A886W4WEM4Zuzb3ctq/8u/8BPjLlHFpe9e46fYFY/h5zZT/wZX7AV
3botXIlyXLGuSO6NbXn//88LKtBocQ==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0rtPk1EcBuCfs0HrJamJUdOEuBrHVulF/wAugxjdjKutTRQmmdpKugMD
TVRggBIviA6KsFGkJA5tdVB0EjZGRhIf4vDkfc/lOz3fl6YelEaKJyKizo2T
ETfJkjkV0Xc5Ii2X+yKWWKTJZ44uRXySayTsG7RviMaFiAnj+UTES14xxwue
mZ+13jsdcU//LrPGu/I39839kQPmfsmf/KVgvC/3yOl5Kn5rLRnxhapeY12v
XInYkM+NLzqvITeNU/qKvsp7PvKBlrWaZ9LeI8OB98rKH8TxHWWPLh3GGePQ
vqfyCd98rxZbXHPegrWv+jZtdthl0XxHXrenK3sUPf+IEo8pu8u49bJ+zjc7
z0P3uOudz+oJRvU7nNFn5DRT1I2bctUZ2/oObd44a9KZY+Zf6yu84y0j7jDM
Veu3ZM0dC/I2eXIMUDXfn/z/H/kHgcVVgg==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0ktvjVEUBuBVHRY1Y4JIMCFtlXNpGaApqh1J1D1oURXRdqB62ggDJgTp
uYlq0XbAwB9wSUT8AQO0VNTQJW4DlRh5vhg8eddae+9zvv2ds6KjZ9eZioh4
xuGqiCMcZXhpxFmZY4B+8mbn5MP5Efd5qX8gN1RHpEiTIUsdNfxdrF8WUav+
tSCiUv1Tlsz/yN8MLo8o6ufUrxZGvOYN00wlvbUr9ry3fkM9I6fkx2SP/CDX
+NxZWbkkomzvPNnkO7dSob7kzHl7L8tGe7eYh/lmOWiWS57HfYbUFxjSD8g5
s5y8Z99d7tDm/Fpnx9Sj3GaEW2zyPjby1LlG2UAdj/S1ch3rqU/eG4/N0zJF
hif6rNzDAfbzwmyf3EvJd5QpUiDPMK2eqc36Tlp47kyTO7Sq3zLNO2bNP8l2
a5/lF77Sr+/13jrd9RjNdJulZJoMJ/Sn7cmqe9S7Za/soz15b/KavCivJ+/U
3oL6h/o738jrV8uVrEp+E3smzFr8djvYzri+WVa70zZ5iINM+u/VWBtxhwn1
GKP02Xd8keeji5Ocopuy9ZsJZ4qyRIEOrpp1Vv3/3/8D5Y5sGg==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0ktL1FEYB+C3RVpMWpjpSJRpF8dqFwmBGhkRlFm6aFnQGGR5KWiqhTCN
oxZRGLVr1QUXbtoV9RWE8oIfwFqE46Ubtq7nT4uH33lfznv+5zDTcGWoZ3BD
REzxeFfE1VRE1daI7VSzgyO7I2plDWnqaNFrkI3sZR/7Oap/QDaR4eOWiA90
10a8k+9Z8J3X8iWveEOZuU2VEeVspIzN/DH3rD5ij7PqmdWb1ZuWGTMz1p/5
pG5Wz8l59Rzz1jVpb6CarPkT9vQmb1CneeHsi+oK6+OynWP2/DXfZv3b3X6x
6M4/ZR/XGKCfTvuyzhi1LjJCIXmv2Qu0OatLnqOTVvVZeYbznFYX5QgF8txn
gBv0c50O+y479xKlioglVlhmlUn3yLtHjzd3c8r+W+ZustPbhuRJvUGZS34f
vRX7Snznq/kn5tesf7DEF71vyVqWWGZdPWH2KYVtfhtZlA8Y57n6rXMeWo+R
55HesLzDbXfIJfv17sqc+p5s9oYm+sxmfSdjfYiDHKY39f//+Q/mNFrl
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j9I1HEYx/HnJofS9BJ08CwXp3YHHaWlReyPlSDhkHEHBhYXJZ6HOHTB
mUFDQeTolEoF7S1Gf5YuR/Ui7g6OM4NuuCl8HQ1v3s/z+X2f3/f5wW9o9u7k
fCIiCrh9KmIOd1BKRbw7HTHRF/GeP2BPts07eIMtvMV3+WvewI2uiJuYxqbZ
KU4ORlznpj51JmIQI7KW/ou8cC7im/qr+geX2rTn+iN60I1bZvr4pbMX1R3q
F+pR9T/nx7jp/p92OebfOMKUZw1OI4PPnq9xEet4ihx25Uu8jEtm8vxJdo2v
4jI+6if5Svuezogy1p095AMkfNM+P0HL2QLv4pU9B+ybteMC7mHc2fs8LK/7
1gZ+edcF+R91DWV9hStcRQ1/9UUza8h3RzzjFS5g2z3P9avqXDtTL3LWOx/y
IzyWLfED2ZDdzqNu1wHuRVWd5LOYcV/av5BBMfX//zgB415XaA==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0ktLVWEUxvEVdJHOVSoq6xhOAzG1SUV50mPqRKtxgR6LhLxUR+gTNElR
B4WZEx0k+CG6N9aZoB4Ny8BpTS3wt2nw51nPs9a79t4vu6E8dnf0UES8w1Qh
YiQVMYoxTPNP6Die4hlmZBW6lI5oykRcQjNa0IrHFyIeno64nPicHlrwSr4v
38pGXKyPqNJNrMnW6QYmzGwkHjt8lU7KNukKv4rDZyKu2vdP9lrvL73CH5Uf
waysky/hBD9Ayyh6Zg+tkXXTa3wXzduZQRazdtXIc+pzqMNZvPCtJXz07R20
HZ24iQ+yIm3DDbznr9N7uI/jzh+zM0XTmPHMHn6aTqHfTDe68MnZdu9wS51z
f3nUYk9eoAN63/Wq/Db9Y9+u7Dct6RfxiB9xB23qIXUH/an/A1v8drIDu8l9
u4tJ9OUjevHV7ITeZ/rcjpfqL+pvqJi7beYOys6e9A2DdNnMA3qKr6fnUcCC
f6RRb867Lqrn8Tb5h5yvJJgfp1m70/hlLkPfmJnDcOr//3gAnn5WOQ==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0E0uQ1EYxvG3RGhvMbxNGm4vVWrQNKEDYmILRjUwMZUwYmID1mAVJRKN
j8QA0Wi3oWML8PETg3/+z33ek3PuOfnhyd5xISK66CURVyiVI3bSiITLaKC/
ENHiXX2Ta8hwo895dS5iZjZiGmNdlT/5gI9wb760GHHLfdzhzV513YP8iIHv
iyziVL6Wz7hdMZuP2OAnTnXn1lyaV+Rn3Qs65q/ctd+A37EvD3mEFWvrKOly
zlCUa3//hWU0kOiavIZ1TLnbtzfZct4X99xpUjeBbd2PLuQCPuRN3Zg7POIh
2un/2/4CeDYroA==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0ckqxXEYBuBPyZB5wUEhSexEknIXxo0iKxuzcmxZWJh3rgInmWVcGG4A
K+M1mBceWTy97+/7/sMZqgdG2ofTImKat5yIdz74pDUR8SXXKyK+5Q+leREJ
+u3KZDnFDFZF9JmV6ONygl59Sd7JRZl0za1+zysvrJo/y+zciCxS3pUp28wz
ZD55FLFrVyfrucqPuObGdXWVERf6OWeccsIxtXbjcoxRRigxG5IzPs+G+4f1
Hfapsbs0m7NLOm/pkzIlZ802/76b8xT9pd5TENEkj2WXexv1I/2QZv1M9vw9
U7Y4X8hu53N5xQ3bNNh1mO/oe+yyT6fZgXzkgV7nJ/nMC4uFEQskzZfkMius
Ms+a56b7vTYq/v/fX/McS5o=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0LsuRFEUh/E1tDNHSWFG5gUk4/IMLgmJYcJQmagNjcuIZ/AghAQ1Ia4d
FVGoXBoRonENvxPFl2+t/157nZNdrNXLs5mImMJQNmIYA60Ry3ycj2jwoH6F
l7CIfv0C1zCNI3Pz3Cef4zomcxETeHE2zlXc4BK/sgtOChG9SUQPdlsitlGW
7fAWRtSb3NkWscHr+LK76jszHRGf6lVZ0XmDC9zOr84TLrn/rM6pv31jzZ0n
/Y86I2tKd5tp5ne7PnDn3+75lh/4EW/ocidrtsTd2JPtY9S+A74yf8inOENF
fp6+TfqOGNOf8HX+/53/AAYsOMk=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0rlO1FEUB+BDiQxLByGBCYkmrGp8ADuIMQETkBdAdhCQkNjYwMAMDFDA
sAhYaoeFj8FWoCwBNFGhoScaOr4JxZfzu+fc3Ln3n6npGm0fKYiILM3lEd2J
iB6elEQ85imNfEhGfDJvkjtLI17TwfPqiERFRLtcqD6giHrrf/b/p05u4FbO
OadRbmKzOCKlN6G3Kq+QY5kv7vCZV+ar6n6VuZpjmXXWONBvs+ejvME3Tjjm
3Ow0v4c9dvPncMUvs0v1JxfyRb7Hu7KIr+6T9oYxeYRR3jLurTP6pe7+TC5T
p6y37Z9Uh+wZZlpOsWBep9YyLy9SL2fVOTI8sn7hrLT8UJ5WZ5jlpf57tUq/
Re6Te+lhgH4qzbb8/oBvNsiNt/zwju+cyYfqEX/4zV+S9l2bVatL1vMs0Oo7
7unPymkyzJFlR/9N4v4/cgdjBFFe
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0TlLnFEYhuFXcE1cSGUwJONSimiR3s5KHZ0mGjewMIU6gWggwcFfIKJV
BB1BTdxA0DYqCIKNqJ1/QkSJuAYSL7G4uZ/3PN8531bV/zmVzomIDJrKIz4V
R6RxVBJxjBNMWD/kXAwkIrrNefIs15ZGlL2O6CuLeJDvkdQN6Vp4kNP2NMut
GDanuA3t2HWvbZy+jfjNKf0O72EfczjRZfnW2Te4xpnrJp17Jxe790sU4QUa
3kUUcj5ykYd6awX8ni/t/W9fmP/xlHPOrdXp/pov5Fe6K57W/eE35grUeNcM
V/IYZ/UJ+Zv8HdXyOLc5a4PrzGucNK/zJrYwg1rdvP0/5AUsYgktrv3Jv7CM
VvMKr6IXHehEo/WP3IVu9OADSp+e0fc68N2+8AhG8RUD6E88/+tHIZFFcA==

                    "], VertexColors -> None]}, {
                    GrayLevel[0.2], 
                    Line3DBox[CompressedData["
1:eJwl0j9I1VEYxvHXEoRA08y/JTcddAg0rPxT2qRz4Fhb1FUXS4egwRZdtKmm
Gw3V1WhxM6WtBLWGFp0sKDWNa4O3wIb8g/m5NHx5nvc573nPOff+am/d7RnI
i4gJrBRHfMarUxFp7CfkdBKvUVcRMVUZsXku4np5REKdVv8oi7hWGzHEr/Jr
2MAJ653yQfk9/DVjFw/ke2Yc8CdLI0r0FqJUT4P+Iv7wtEz9yTnv+UH9h/bN
8UOyHnu/Il/+jc6URLxBt55pOosl91+k81jAR3xAFsecUe+sZbOKnJOn/mf2
sHnBH0cnruKRrIN+13uFjqvbaHvurbIL5pw3o0xdjgqM6KmRNVqrVp/B2dyZ
uTeiz1lJ9OKdGZvufZO/gYz3FNh/X7bFbyOLX/iNUXm13+0h3ddXxT8x+zFS
eIodMzucM8630jaM8S3yVnyx75msy/3ac+/CbetNsmbZHT6JXkzq7aP9eI4X
mJG9pGlMoNn+FdlFegkpcy7TKnfM+qbe+i/W6SrWkMEWZuU/6R/U690p/v8d
HgELIWPD
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0TtMk1EUAOBDGByRorQbMBgSrGGjGwO4QRjERRQNUFZccCcspaSVMrRF
wEQHGqKTq7uzcfKBrQUFGSCiCUhiYvgShi/ndc+9f/L3TD++M9cSEQt8uRqx
Q4Ov1Ml3RCxxpSdiOxmx1RlRY4zbvExFvGDgesSuOi3PyJvXIj6oV+0+pUiB
qjtKYqv7VsQ3HLRH/OSQMhVGnfvcFbEv32OX7/ygwUezuviNJiPOz3rvk35W
nGGa9+pX5q/JequiV3J2Rl6W/+92Tj7FPE/YMi8mfDcFzt2xZn9Ivyo+Z5Nh
9bH9Dfkz1plgQP+e+JBJ3tnP6D2Q3yfHoHpJTHmvzR2dYpKafsF39ctvkSZh
3ifmzG6Kj8wX7R7p58Vl7uodqHudOfPf/nLOP956/4/4m1+ccMq4nX07N5KX
//4Ce1RVnQ==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0rtLlXEYwPGnLYfsHG9510MOKbUH2lChaB6tFNRSBxsqGhQXl64n6Az9
BSniaILZFuGYGfUPFJgoeKkhj6ijEdTnpeHL9/fcfu/zvryZOxN94yciYg7b
qYgdNJ2JeNcQcbMiog8/5H7iGMvyv3mkJOI2bmEYo1jAY/0PzD/iJ5iX+2Pm
FU/jhtxZ9aXKiKzzTmNEDy+Kd8sjNtGWiRgXbzgX6d3ibUzIFZdGnEIKD9WK
zaeTWP100lcWcVLfFk+pfeS/+lZ4FUN26MeR2nXuQRaDeibt0e3ci+fI4TAd
8d3+B7yHX7ir7x4Okt3N3Xfely/gCOv6l/gN3uKKewpyl/kqiswVeA+Vdv5q
/rx3rrZ3mbgUJWj3Xh24oFYvrlWv42/6q7hG/MwdTzFmj2vchQHnTn7t2fNY
QF7upblm953DC3GGc9zIDZh2X424GrWYEa/Z9aK5L+qf0epcp1aPdnvN6mmT
u4QP6itoTr47f0KL8yrn7ZBLvpF/571vsc+7qf//3D81H10L
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j1IFHAYx/FHUloaUsvc7MIhiByjqcjkHAqUWnPJlxDyrPBlE0JCoaE0
mzz1psKW1AbToa3OsrSCAu1cFCxNiBRziMDP0fDl9/L8+f+fe0lcb7+SKoiI
DDYPR/xETWlENS7iAsqOR1TR/mMR98siLmFVV0vHyyOSNJmIeML/PRpxyLnz
coe8I3fTrPNd9PWRiDv8GzqPd8gizOZoEe00X3Tnklwun3LXCn+Q/0a7zTfp
uJ3S3mor8U5FxE2aQjtuYaM4YhZJZz6az/ALWMQHvMcXfa7I3PlPOODur/Sq
u//xg/Yo9P6UnOF/oN5nemz2nV/HEL9GL+tP27GK9ulyumWclCv1zXZes0u9
2St9k9yIOnlVP+bdEdzg0zSDVn6IPsBDDGAQj/Jzs2l7jdKX9Kk7n/Gf+Vz+
9/PmH90entuhWh6lw9jVnZO36Qvv39WdkbfkHn5C94vv5Sf53/w9PuPeMZzQ
pelwHrNEPtMOe+36TjtpF277jlN4q2uizWjBNWfP2rWBZiv+//f2AS9ra4Q=

                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0jtPE2AYxfFHTExA7QVKWzH2MkHiZVC8TJowCIZC0ESMkECi6dRaNzUh
wYKt/QQSHPkGLt7CYhz5FOoC6QQDJhgVf4bhn3Oe9znvedum5UdP7zWORcQq
7mcjfqcievsjvhUjauY+/i1dy0W8GpDDurmnHDHNT2EFTWcNmavyo7iB6+jq
uUb/6B2x/0sPMZSOuGDeKUWc5RN4qOO8syR/BjnksanjkvMiX8I5XDQXaMvb
bXTwGgV9Le89tm/TDpbxAj/1PKfPvLNg/4Ce0LHtzuz/78Qfx665bp6R6ZfP
YADf3U/TFLIYxF2ZHH0i/8M+yZ/EKZxGAht4g329Vfkl2c+ZiI/4Zd4yf+Lr
9u9pjX6glbzfF+8GIw5kqjrm5Pe8s8gv4KXPu4wmRjCMrvvz8rf5y/K36E2M
YRJf3a/QO5jAFZlx+qV49B/4B8UQQO8=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0jtI1mEUx/HzmhfSMl+vDWI6S3hbVLxFtqgohEo4umlgu4KCUt7mlkTx
MkhrpYMYFUYQlkNBUErNDi2VRknp58Xhy++c3znP+T/n4V8xeO/2SCIilhDJ
iATS8e1axCn9j38YLo7oLon4yv8lH5If0WP8xAH/B23Nj2hGE1rQhncFEbt4
jz2sm/OWVpZHzNF5rBaax1+hyyiriNiiJ7wu2okOTOhNqD3kj4vHMIq7VyOy
eJ+LIr4gUzzMa9T7Sb6JHvmzVOy7G/TEDr28l+ID99zHH7VJ/qjzD+h9XDQ/
Gzfs14ZXdu2gNahGFa7j0Nkq5wacqZQ3ohkv9Del3tX8DPxGtt5juoC/6o/o
Ni67b4Y9N8x4Y1a6+ALS8EH9I3L0vFYL3ql7PdX7BDu8XvU+3BH300E6RRv0
1WNWXuouRSjGNm+Ft+b8c/Fj8SJdwrS3yeMnkY8StRneTd+fN3MOBbzC1Fvx
9+x0Sd8V5OKWeju+26+W1uBQXE3rUm+RPP/nzgAcaFjY
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0k1IVGEUh/GjFmIFqZkZQmkaOQNCLVq5GRAiEVtUkhtjrGVgSWA0q4K2
WswERiEGFiVpXxAG5SoiIunDUEsICQShIGwV2qJ+FxcP/+c9597znrlM/amz
R3uLIuIRSisiUjsiuqojNvHN+Lc9YrouIlcTUa5XrHeJr6m/VV+Vd52/81a9
EZ6R35wPyCHneV7Ld6IGs5UR55NZ6pP8GRbwFcfc2YFXuyOOyIOeOyE7cRxp
76fQhAZ8MmMGe/hpu4zyrLwtu+W47Jd9uM/H0MtvbIu4iRzfb8cJ9Yv8pzlZ
5wd8DBl+Tz5EGz+Ea7xFDsjrKGDBrHG7fpFzaDZvVubtnDUzo1fgdzCKD35r
eOa9fI0+/TfyQpV90YNFtZPyh1zGGd7srpS7F83cxxt4Y5K4Yt6u5Hsn38Ks
HrSqX1UfRIYfRp63J99Adspb8o/Zv5FLvgNW+Cr+Yg0v7DyJ55jHL8+02ekl
n0KJ31qMjWjHXv1he2y1z2e5wT1L5jTW+1+pLfPLnilTr3TeItN61XxK75ze
u+Q95znnGdTplzh/5E/d+QSPK9b/t/8B+mxnHA==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0k9IlFEUhvEzaWEFgaUmUThff61mEdmqzYAQhZtKIloUySyDUqIg00Wb
dkq5cchAQawkKRGiVWQLiaAiwqnRCAkCoUAKinDRVL+PFg/Pe8797r3nMpMU
OtsvZCJiCqtrI/ZsjKjhSczVRZTxBpeyESsaI97K7zCNim879Z/I9dZ2JxFr
6yNq5Rq+Zm3R2hr1Nmuf5ZX6qzC+IeK2/dt90yZXI4PAB3eXmiLm0xnQ5rtn
PI2nqDjnN5bRa/9P/oFvWEKP3i8e4hPuKqZ38AAf5jz65VbuWB/x3V0FTsyZ
6G3FdetZ9VxDxE71Ajerc/I5Zy+a6QvOyAvcwd24iufO6tKb4df46/xXfMfs
N5G3NpC+0Vtz7pnlMib057nojkH04aA7b/AhPoIH8t30DfI430cP9qsfOuuK
/NWsLepbzsrqFfm8/j25iy9jQj7NI3yWR7nAs5zY34Qd6dtR0tvFOezFKbOf
xDEcMPNRPo4Z72xPfzNvLeMRHiNj/0XfleQt9m/GJrzXHzTnPvmjnOdhdSt/
Uo/Jy2Z6IXfL65yRsdYrV/Rf6v/har2qhv//339rMGn+
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0s1LVVEUhvElTYI+6Gp+4C3skoUGoQOzJEOKoklByuUWmCIG0sBykI1M
DHUWGRHhxH8gjDIjLiIl2iAiItNJ0CBBEJEQaqCYg/odGjw879pn77X32edk
OntabhdExDh2pyL2oLIoInUo4jCnMVAacYDXiiNWsYIHZRFFJRGP+CF2ykM8
tj/io/zbmk49fvEH9VPjHepRfox2+Qnf5BfcxRN8i+9zH7JyP+d4kIcxhCOF
zoZKZPWv4mqsVkQc40m8xARe4TU29eg2d8BZ7urRiztIZyI2jHfLzeY08aL6
NKc8+yo3yCXyd7lersM3+a1el+UraMEl67PJebHDnvfc5Rnz+nnBnRXIs+b8
te6Lut19zfNntMoznn2Sb8hz8qLcJec5r57inHpanpNn8R5XfZsRvcuN5+Rr
aMV1tKHe/u/czQmuQ23yTnwKJ1HjvLWoSu4WZ5NvzxlU4Jz6KF/k43yBD3Ij
p7mJC3kv9qFB/dw7TtqnJvmuPK5edpZpeY3z/AY/5Sle5y1sY8nd9Rr7wdvY
pccffuas50v//6f/ANB3YJ8=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j1I1XEUxvGTQSYW3Fv3apBm1ynIIQilAg2joYLAbCgQBwVfyxoCbdVe
CETNlyEcaiiU8qUXWyobKqOico12dcmQbKggqc/F4ctzznN+5/xe/v9M48Xa
CxsiYhqJZEQS57dHnEM7hgsj/u2OOCzuFfcXRHxPRyzjG4Z2RAwizc9Ft7g6
EzGailix/hXvrP4zWJZf57/h3aD1vJu0nc7QJ3iKKTTxJukEarZFnMIe3m29
D53lDn1ES/mnzc3QXVgsiSihZdiLYuzEAr+IPscLdOiZpBMoMveSWcXO/Yd/
354PMI4xVGI/Euqf1efxzP4n9FXxv8pPio+Ij2JEbYB33MxjaPAmOfKNaBSv
qX/wdgfNa5V/Ec/pn6U18lqUq/227jHvLd7hb/Yt1SrUlpx7k55FOsxvsU8z
Bu3RRFvRhsu+50d376Kd6EM/BjDPH6EN+qv1XRVfwSf+NXpX/z1scad8HLDf
VlqANFI4xCukVTSXbkYe3ptXzqvAlPkz8gWz9slfiqd5v+Svs/8IVsU/8BMt
7lTHa6YJ63vEpdl/EUMY1XuLl0qu/7P/AUblZKE=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0jFIFFAcx/G/g0MOhnemFmaeqTdlU0hmIAQiCIbmIYYRSCAh6tJtogWC
DRURETnoYouliUsccoNQQ4EIitDSkgUiUg2JgkT0ORq+fH/v/3/3v/feXWpw
rGe0KCLmkCiLSKIxGdGAs/hTG3G/MqJG3jsVsYtHVRHlFRFP+QlOyFNczLPl
EWdSEb99Zkaukn/KL+SXeIbbZj7nu7zMQ7zCo/yAx5GRJ3gSlxMRLbiC/XMR
F3nMd2XMvSA3oRG7eml+iyW8xqE5w/YtyPNmvUK1Mx2pjcg9+m28bd3KCb0t
uUX+wl36zfIlXMfnQo270al3o3DWwp3cP/TW1G7Jf51v01ttoNnMAbV1+Q6/
t2dbHpJznLNe5T7rvPxB/oiMN39s5mm1Xvkm+lHnN8q7a4rPox6t9t3jLNL2
L9n3Bouod7461OKaXpo7uInbuYavcjW3cZJPogyfzC11/h1zVuQS+at8gLz1
Puf4HX7Iq/yLj/Hdm2eti83ckb8hoT7tbR5ivPL/f+4fqf9ZAQ==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j9I1HEYx/HHCIu20tNLEM+hnBUhSBMlUluKXETBQWmR8NQT9bTJf0Sl
i7U4CUHQlhYkIZpEagTh5OIqCBYamsmNvcThzfvzPN/n++e4X3lXb0s6LyLm
cONqxE38vRZxjCOc4HIqYp+HiyN+8UYiYkXvAz9IRnzkz+pH8rJ80dy6ulv9
Q93Oq+o2big0UxRRUB7RJDdi2/w9vosdOWGtWa7Elvq+vVVyTn7Lj9Xv+Llz
JvQqCiJK9YY4i2GM4IK35mG3LCLJLWbT9lyXS5DCnrWSS+4x/xBJ5zTp95k7
tNYo/+EBdavcbn1d/oZn3vCV2/QOnD2l7pS/6437rfn8mrf0iuWkmSJ+pVfj
rkL92/xCf0a/Xp6VM5xGD3rRh37MW/vnDVl+480d/OTsP/K+fl5TVzpz0Vmn
5hf4y9keeZXfq6us59Sb6lvykt4n5Hv7FVTrTarHkJNH+YQHOeOOhFxr/x3U
YQPTvpmX+OkdIzyKp8igxj0D/Dt1/n39B8huWm4=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j1I1VEYx/HHwbplErfr+1KO3kLSWybcrWxwEhSnmtS20rLVQBCha6lL
IBJUuNni4hCSL0sNWtCSCL5UQ28EZRFcMws/F4cvv+f3e55z/ucc/rVdfe29
RRHxBHXJiDTOoB5ZtJziyyJOI406LFdGHK+NeFYRUcNXIWuumj6VvU9FbKFe
9o5Oy46Yn7Fuky8yNyvL6L+QHdPbk//Df7ySreCLepZ+ph/xCV+xjbsnIvIn
I3r0c+pJ2iQ/jwzO4QKm5MX2X1D/KI/4jhLZ7Sr7qH/iF0b4HCr0ynHU+V47
37DsovUlfCkeOvu2frXsJZ/jr5gbofdwH6O4Khuj41gyV2n+m3U3+T704hb6
0WE23GHPe//FLvLYwaY7/qEJ/TbrD9HDOOs+KesaaCOW8Vu/W/bIno8x57tv
ZM3q5+oyZ1jlW/lB8xOykD2Q3eEHcMN9173HdbpBs/qJwhtijX+La3rN8nl1
h3qBLmLXfnO+3ykbUn8onNWepbIEvVz4n9Bgr0s0g3n3a0we/Hv7IBJeFQ==

                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0k9oz3Ecx/G3yy52+W34cbIfTXHAsIODo34zf/c72ObA/BSizEXIfpuW
ZkohRWk/+f0yWztMMSsnbLX8fkvNuPiTKCsSOYxykccvh2ev1/v1/nzev/fn
2y+V7cycWBART3AgEdGBqeURB2muJqILp5dEnKMdyYgz/Fn0qZN1EenaiJS8
KRUxsjRim14zmlAnT8uH5UPYKvvgzq/FEafUU/w8/xs96hrnE+jmq81diJy6
lr5wt7TIb5lXpf+W73b/tXyZOole9Yz6vd43fEG1vN6dr/yIOauc2UGvOHfZ
7Gv0KvbIMmjBrLe/8g1e0hlMYgLPMCsv0Wmk3S/T575FCX/1ynQao+Zc8luN
3rYJG9GvbqDrsQ4bMCBroRnM2aPBrp/pWnvvlu3ELlx37o18ReU96tXok62h
9bJ3ellv/GinT2jjW9GO2/Y5KrtB/9jxMH+Tn8Akit5QwB3k9YpmPbJ/gT6k
YxjHY9zVr7LjU36UH3am3w4XK/ug2S7bcYuf19vCD/Bjds3Trsr3kOXofVkP
/e7cDzTKz1f65vfSn7IL9IFz7bQVe9GGvGwfPY5jGFQX7FTEEFaqB+k9HPGu
zXbdb95JvuwbdNIsDiX+/+//AWfcdGI=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0s9LlFEUxvHjpl8kZo0lCM0oLSSpCFe1kAaybJurSJyUFo5pAyloRfgH
GNGiEQoyQmsRtrckzZ1IiaK2mdSVUBAtlGij1eelxZfnOefcc+49L29tZ+Hq
7bKImEBXZUQec+mIbvrucMQk7mE7E5E7FnGXP3U04jRW5YrVEWf4Et9En4uz
dEM8xv+uihikF2ojyvWH2n1xBT/vzI76A/FyKmIBfXKf6SeUyS84v8JPI23G
jr4pPqVWLz6g/xC/lw7p3VTbL65T2+DX0e3Nbfq27JXnu7DnSMRXO36RK9EV
LKPFudUkj7/OHTRzl/7Bllk/MSj3g/7CU77V3SP0Cn1ML9EmPOSz9CKa0WfG
TVxL3qLWb7eMfDoh+Y7enPKuKpwUr6k3qOXds6nnG9r4NZpL3oFZ8wriXXvM
8B8wjY94YYdRjKmPmzVj7hTeY5+73sqX+KI7hnHOnY+S99LLmOBfYRxZ8ZKz
i2jUe1b83cwBtSdyafs8M6/Ij+BOsi968FqtQPvxhr9OR2k7fUk7aMasRf44
PYF2M3KokbtBe+1x3vweeqvy/7/6D9Mhaeo=
                    "], VertexColors -> None]}, {
                    GrayLevel[0.2], 
                    Line3DBox[CompressedData["
1:eJwl1FtMzmEcwPGnlkzMuCs5lBEyUnSnCxsxhxsMm7jIcMd1ioq5aJrzHIsx
c9xoM6Mc1ggTHad1QBIhpmJrXAifdy6+fX+n5/e87///ruTc7Su3RYUQov25
ER9CwYQQrvNN3EO+vGRiCD3jQ+iVf8YnVE0K4SuX6H/hBtSjGbf09qo3ipvw
CnfU9tmTw9V27Upwn5l8LsAz9Z1cOs4cdouLUateyBVmi3hKYggpSEwKYSo3
2plt5qV8ETdxlXol+vQWyHPEbeJ2TJOvl5fbdcfO01zvXBmfQZ7eDuSjAMfV
6vRP8EncduYUP9SrxmT5Ix6w+zt+YKE7jvFac+uwHBfM9aqvEC/FMmzCJfXc
yD53bOXN2IJc5w94Thv193MpNogP8mEcwVFkmE3HbJTpp3EmluC8PJvnIwvl
8p/exS8Mot/5Q2pj9EYiDgfksTwcozHMTAyiEI2AdDMZmIt5yPRZZ3hn05GC
d77LNG7RS+UkJCMWnXp16jHiYRiBOKzybDo9xzfowJCdfyLvTJxqfibGmmuI
fF5Ox0e7MrjYzGuzhVyEOWpp6NE/p94a+azyRfiqtpizcVHvL9a4u9u5LuSJ
033HAs7gPnM1ZkbJH/M3eYfnUmNnOzfb18pteKFXhy5xi/pb7sQTs4N2rVZL
SQ4hgc9Gfi96A/iB52b63TEk/o0efMBT9ffc6kw3f0Q/Uu3LsmMW35dXoRIP
zN+N/K5wGVcjPbUrfC1yj/e+R17LT1AsruHHqIj//z/gH/XwrKE=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl00lIVlEYBuDTREZKq/r/BjVpsNBAKFo0ggrWtrQ0aNBaBE3QSgw3YWVm
VrvCVbUKmoxQ0cwcKoOKSCgzQ8xKhdSggSyonkuLh/ec73zn3HvPr2klR7Yc
nhRCmOBOPITy5BDqZDNNlJlXpoQwtCCEYUb4xAcGec8An/V+pFpvcaqehXrM
D8wP4SCHOEyS85L07DHezS520qu3wb43so93lOprc3Y7HXRy1P5N+vLo8YyK
eSGc4CSn+K5eJbc7c6b9hXKRviJ53/4WXpjn6uuWreYvZbP1e2Qb5zBqb4N5
PY3UzA3hqT3n5F3vcF7G1Gfrfa43blxFNWc4TSVtzEoLIV3POEX25bOVVuft
kMl6UhiM3t/Zf6P7Nd5n7YGea2p7jIvZz1nre511Qa4xz2IFtfoyZCY55HJV
bbPM47LxqHsdY5wz5l/lN36QoKdGbYacyjSmeMZqz8pSj3unGIvpNv/i25cY
Z5NDr1quvMRFEuj3/tPlFCbz1nf2RfepHnMvy+1pV2/jEQ/ppIO481P1Jnp+
or5l5sXmJbzmVXRn9FNgLZ8B4zIZc/4xOUeWyizfsYonzv2j1uTMx8ZfnNsV
vZ+eOnmHW9ymXC2ud6V9G/RttOenO5ngF2+t/ZYFerdRGP3dMaJ3wp7aaGy9
R1+X2rDxEGMstZ7OMpaTwXo961gbpWdlqjXoraeRFvUr0W/KTW7QrHZdPov4
DSvMn8onHDd+LLu4G/////0PNMSjqQ==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl00lszVEUx/HTfaUxLLS81rA0bFRLJJREwsbQhI0xtaUSooYFTSgriQix
kPAkFBt0YWiCamtmQfv6FC2qqLQIabHD58bim+/vnHve/U/3Ta7ZWl1bEBFt
uDo+4hruYF8mopXbUC+385niiNNoVmf5HG6iRd3EjTiLk6URm8oiXuKLegiD
+IXHZn/zJTPD/MrMCP/EI2s5fq7XxV/RiQ7U6D3D8MSIvPp1WlNf5ivIy33c
i5zcw/fsN2L+2yT3r/4hd+tVlkR8NlPBszEgl/NMfJBn8HRMQ958v16hPApF
KECv3l97PrUe6j9yj17Wcy1VL8F5eSp3mJnCZShFBjm99+YnyCUoTvvb44h+
IRdhDI6qR/NYjMMp9XxekL6FXMULsRhZ9SwuxyIcd/1Bz96ov169AWuxJn07
vXV8wkyr+1gmL8cF/RV8S28uz8E8HDM3ZK8m69+9x/16B/DEXANXpLMgV3I1
bssreRVWo129hTfjrlzLe/BQ3sU7cV+u4x3Ync6Iaz3Q63b2XiCPrnRG9Tr5
YDov/AnNeofd43bvcRsuyu/0D5l5w2/Rjz589Bwbzbek3+EGrmNv5v9/4B+b
KYe+
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl011ozXEcx/GfedxcOlvYZueQss3Fsl2MFRu2eZjRrGyzsZRk2qYobghX
JORhE6JMbmwuuaM2uTCyuMCIpBh1mkghxOuXi3efz/fx9//9z/+ktnU3dE0I
ITzFnZkh3MXR/BDe0cJZIaRwXlxAkzgxO4STOIX38gfoQfzMDaF0Tgjf6Q/8
Nv8LGXFG31gyhIl8g96NaMRr+aV0MT4VhFBO++yooEvw2Z4S8ThtNd8utxnj
et+YbeXbkJUXwnb1aTQTXXwnEvwlehEX0CTehBYcEzfTHXan8Ne+P3JJvgPH
+S3qW1Gnthb1nqVdXO/M9ahD2rOso1UY1VNJl2HYXUfUhuQe8A/xCCvF1ahB
rX019lXjiDOXY6pcFV2BSoyYeYx7+ofoIDpwQ7yT7sJNfi/dgyIzxciwp5Au
wEKMOuNlPEf+BX2OZzhj5jTO4rY9afc+xyfMTIrvBDP4bBSpvTK/j9+Pxvgb
iA/Zcxhl7luKW/p67ejBmvh+xdP1ZupdLd4Qd+m7Lr/bXDc6cVXch2u4r6eW
rkI/P4By/qMdLXyvdzxm5ze5nvg9yVXwafX5SKp9iN9o7MOgXJb6AN+PIJ5r
Zh5yxG89zxMzCf6L7/YrLqtdQZ7ebLXJ/JT4XsSLaFn85mPdPXPjffP//4f+
AZrYeog=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j1IVWEcx/G/Y4OEU2reW0qKhISGi6KhQrNwhSQhggjyOnhTcCpNHBoa
Sm8Emi8QalYWdYuWhLJBCnxZcm/0BQy3bk19Dg1ffi/P83+ecw6n+kYuM1gS
Ect4kIo4Lo9or4w4PBOxlNajTV6kOd0a/8u+T3T5dMR9XQbP+dLqiCprP+2d
0J2Q8/oVvETz2Yg9azVI2fdCd0n3nrbTNnzgX9NVvMJIlXXa5Lyr5gp8Lz+q
v4s76HbWRXf1WB+UN7GNLYzpLlu7bmbM2WXyKB2Xf3uHb/JJZ36nT/HRWTN0
GkMVnkXesHeYz2FVvk038AVHZr/q1vl5M3NYlz/LRXPv5GfuKdB7cpEvWv9D
WzzfrK7B83XqUnwHbdUv8I3JO/G3MIArun76xJ0Z52X5Of4mnaRTyKNU7qdZ
HHvXa7TE7AF/wVyDO/p0h/Ie9lHhrmZrf/mC+U77u5Ln53fsfcMvJP+F2Xma
ld/an7bWYqYVu/IP5DFjX71vcB6Pk28rr5k5J0/Jp5JeN8nX8fvOmZZr+Ue6
h+n//+M/RANq4w==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl08tvjGEUx/FTlwVtpkKMtgxqQxfYWbhsJC41qjNVTdwTC9cqjZmuJNgJ
lbgkbUloJTYuLXH9ByQui5q6LMRGRWyqESJCI/i8sfjm9zu/c573eZ6Z963d
daiprSwinuBXVcQYztdE/JgT8SkT8XNWxDr1Oz5LN2NUbwtdKBudGbF4dsQI
3To34jNt1zuML+Y+mtnJ78AkdaXn7TeXouXYw+9GBd9Du9GFTepmnORb6F7P
3YeUvSbU6vMtOKW/Tb9Bvp1+SPaRFWkB3+0/TOebLTPzRy/nHEPVESV8s2al
fBldjhWoT+6MNVib4Bn1Ceay6vXJfsiqN9BG5JDHCdlr+gZFazpwXPZKPYgX
KMiOyUr8EF7iOZ7iGY7qnXG2TpxGhbNPde7f1o1HuXqKmQ5aRJ1egeb0muV1
7ndNlpc1YSMaME82OTkz34gF5i7LWu15AFf4XvThsf4quhoD/G0s5Uesv8O/
9ZuW8DV5R+Rn+XN4r79IPUzTqNS/YP663pj9btD+5B2SD9AlehPNjfOf5vVT
snIM6k939zSq+BlII2P2qjW96MNFVMt6aDe6MM1cjewS38YfRCvaZTfd8xb6
cUT9iD7EXdzDfTxA2Pevb6Ez8/+7+AfoNXb0
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0j9IlHEYB/BHIwKRJofTs3vvGlyiq24QXIS4BjlF1KVoqqglsjtOsT+n
k8S5ObgKDU0icoM4qlPW0lYEdVvdUFNYIdxl9Dkavnz/PN/nfX+/lzd3rzz3
uCciXsBpKuIv9AxGvByKaA9HrCQRZ3MR1XTEQCZiEk/BIl2+ELGEK7ih+y4b
kacLsrt02L1M36Jbdn5DyrOuyc6Y3ZH/kvXSP/E6P0Jvm//ANWe4j4/ly/QD
79igZ8ynveeiWZ0v8UU+79nXdTLyG7Jxuog37c5CU2cGn7NT0flAv4e37vsG
jmBV/4le0+5T/Bm3dar6HXud7neRn+I/8Ex/ga/h17olvU96c7Lbsl36quy5
2U2+wV/h+8wTukZPuHuW/mh+id+i92Tf+W+wQ4/J1szOu2NiNwOjsrrsq06B
Tnfvqtuv8wq3+CwkMKT/yHnn4Qtdxid2H3bv5Ww52aGdA9iHkcz//+EfGidS
Ww==
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0k1sjFEUxvFTZToWFabRmjFTmpSNWJNQNsXehsROzSCSShPREomo727b
WIsUjWWn05KMsrKwUB9RFgh7ItMJjRDxu7H45znPc+49733v+/YcPX1wsCUi
atiQj5goReRpAd+KEVc3RlzGFXR0R6zRb+uJ2M2/5fvoHuzCVCHiq/59eg93
MYk/myK+y2etf8TP0Tn6W/6QnqXt9ndu9lzaRW/Lx3FCr8lPqFvoCrxQF2gm
nZWOWLNK/UGe4T/SLH3qOUN6n/h2/hm/pG5gXt2055e8rl6QvcJr/PXeS3pv
0tkwjPM4hxE8sL5hbhkX+cPWHsKofWPu7Saq/DV6HdPqG7RobQ4v+Q66PmFP
J7pwhz9l5g9nmvaMGmZlNVQxg53uJyNfbUY2fQvskO3FNvtyes+xjs9hbfpu
8jZ6xuwsLfHbaZHOm1nHoN5P/rF6mT6hW2gvltN96FfSGvWC+Vvlo9Y0ZZfo
BbpIV6YZ+u/V7zCl/uKMDflJfgDHcDx9W5TxWb+Scmcqo4IB7Eerf+0AzZqz
iH71Phxxjmq6W9Ttn6E1dOMWX8r//5//AfJfbZo=
                    "], VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0s9L03Ecx/F33SpolzrM5eZc4UWDKOmobBp4iGhQ5sHJJngo2Gi1fkFd
oh9CZQchqOggUuEhDDyoZ9GDf4EnRSQCT3UIIlg9vnR48nq/3u/X9/357MPy
tUa5fiAinqM7HVFAD9qdEZvZiOkOM+zzdbpLb9DryJpn+PlMxDf1k1zEkXxE
Wm9OL693tiviGP+OL/Dn+X6cVC/ofcUgP4Al9Wf6CR9x60REr523aRM3cRf3
cM451+xYlDstc1V9R/8+HmHI/KHeiNk6v4Et2UW+gnE8MA9ntv2W3+74l/6h
h/QO46C6JfdBbs2b7Jhvo5qoWY1+p2/oWww4Y1g255v3KPJ97lGUGVRfMHvs
DiV1GZf4i2azepfVZ2Sv+G7KrIYqevhJeoq+kHuJV/jpfhU6gR/J+2NGZpQf
w2v1nt4vFO1t2v/FnmWU+JXkLfVWEy/bUj+TfYrj6gZN0RQ9mvn/3/gHOQJP
MA==
                    "], VertexColors -> None], 
                    
                    Line3DBox[{6787, 8180, 7853, 8039, 6784, 7852, 8208, 8051,
                     6875, 8197, 7871, 6874, 8203, 7875, 6890, 6891, 8237, 
                    7902, 7056, 8236, 7024, 7025, 8456, 7027, 8062, 8454, 
                    7898, 7054, 8065, 7055, 7057, 7773, 7509, 7510, 7989, 
                    8095, 7986, 7771, 7507, 7295, 8372, 7053, 7901, 8499, 
                    7765, 7505, 8366, 7981, 8365, 7440, 8239, 8067, 8458, 
                    7906, 7060, 8240, 8068, 7061, 7703, 7441, 7907, 7442, 
                    8241, 7704, 6787}, VertexColors -> None], 
                    
                    Line3DBox[{6819, 8185, 8044, 7420, 8189, 7865, 7864, 6848,
                     8191, 7867, 6858, 8192, 6859, 6913, 6914, 8209, 6915, 
                    6916, 7881, 8444, 7425, 8057, 8447, 6937, 6934, 8055, 
                    7884, 8212, 7885, 8110, 7355, 8027, 7356, 8399, 8111, 
                    8000, 8108, 8513, 7338, 7163, 8474, 8081, 8290, 7164, 
                    8324, 7968, 8325, 7236, 8093, 8495, 6901, 6902, 8326, 
                    7969, 7752, 7495, 7932, 7724, 8272, 8019, 7125, 7124, 
                    8271, 8077, 7860, 7859, 8045, 7421, 6819}, VertexColors -> 
                    None], 
                    
                    Line3DBox[{7874, 6888, 7789, 8104, 8509, 7528, 7331, 7332,
                     7334, 8106, 8511, 7335, 8414, 7814, 7390, 8415, 8416, 
                    8417, 7524, 8386, 8387, 7326, 7783, 8388, 7327, 8389, 
                    8102, 7995, 7319, 7329, 8507, 7786, 7330, 8103, 7889, 
                    6960, 8058, 8448, 6961, 7113, 7114, 7115, 8075, 8469, 
                    7924, 8266, 7721, 7459, 8466, 8465, 7111, 8490, 8489, 
                    8488, 7487, 7745, 8318, 7954, 8309, 8087, 7202, 7221, 
                    6892, 8442, 7671, 7874}, VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0DsvQwEYxvG3sQuJ6bQuZ6gKCVMRqaZTxahJF5NIFGnDbHKZ1DdgEomE
sRb6BcRsklQ/gJkIm19j+Od53ue8l3NOun1YO8hERB0fScT3OIPhqYgvdW4y
YikXUZmIWKZZdSGNSPlR/gpz6kt6ZmZRnvDH/AlO8ZaN2KA1vPDPGDHT1rcu
m7H7E3l3x+TTtIBZ2S9+8IqMZ/Nmh/gFWsQev2rPPr12e0VPSd0YvC+/Y8+F
/EbWdWtLXpRvys/lT7JHtPk+fUcPffWRnjW9D2artEPv5Lcoq+/VZZT4ht6W
3bu0Ofie5P9//gFcOzFt
                    "], VertexColors -> None], 
                    
                    Line3DBox[{6895, 6896, 8307, 7951, 7198, 7199, 7952, 7200,
                     7197, 8308, 8086, 8480, 7118, 7723, 7119, 7121, 7122, 
                    7931, 7120, 8268, 7930, 8267, 6940, 6939, 7781, 7523, 
                    7522, 8384, 8024, 8385, 8025, 7325, 7323, 7324, 7321, 
                    7322, 8396, 8395, 7337, 8026, 8394, 7530, 7531, 7792, 
                    6895}, VertexColors -> None], 
                    
                    Line3DBox[{7926, 7927, 8074, 7116, 7117, 8467, 7460, 7925,
                     8099, 8382, 8100, 7994, 8505, 7521, 8503, 8101, 8383, 
                    7320, 8393, 8392, 8107, 8512, 7529, 8390, 7999, 7791, 
                    8391, 7790, 7194, 8306, 7195, 7196, 7950, 7738, 7482, 
                    7949, 8481, 7480, 8479, 8085, 8303, 8304, 7123, 8470, 
                    8076, 8270, 7464, 8269, 7926}, VertexColors -> None], 
                    Line3DBox[CompressedData["
1:eJwl0UsrBGAYxfFHuYWFaxHjNmPLygwpazEoO5H7jkiKD2CGYueWJZ+BLFw+
BpaEFfINXH6Txb9znvOe9+mtt2NhbWK1KCI2UNwW0ZOIyLRGlLVELLVHlMrK
UYZDJDoi0jq9aOGbUaqbokl0otvcRQft6eEb3Nuyq46eokm2bm6k/fb061XJ
N2Wpwl0kMSCvl6eQ5Yd1k3yOz2OEH8Me/6n/gVc7RmWX+DKP0zfZM7+r90Rf
zO806+wCQ966bve9/AGPmDXf0Fsc654grbdkx1zhze714c55mp5jUj6Fa9m+
fkY2rz8ty5mv5PnCO7CDWWfb9Exvhq/hl3Wq6QqtLexwt89ZhU6d+YhWotVb
vpsjSvgD/PI/WGz//8c/A947vw==
                    "], VertexColors -> None]}}}, 
                 VertexColors -> CompressedData["
1:eJzsvXk0ld/7Ny5FJcmUilKkRHNKKnWppFBRKVQkSRo0qjQpKiFN0iSVZGpC
opIGKWMyO2YOzjnO4JyDkKk89/uzPt7u9ay1n9/av999fvRdz7n/sNZrXfa9
772vfU372tdWsz+wfqe4mJjYKjUxsYHE30VHb5/wKRVCoU6aZehbPtxslJrS
soMOAaOlVRcXCSHE/aZgl6MAYgdmpEbm0QGXvj3BPUmYL4TD2bYXtUcKgTbS
e5fT0mokjttOZeJTc9UcIYj959cApZ8FRqcG1YBJoN/NZ7m9+J/BqfQ5rjVg
ue2XYzBBbzBOeyz/qxBaNVcNVo+uRuKodlDjgNsO7vfi0uN+L+q7qML7iq/6
W3+w+fBrvXsQ0c6nSvevvpOE4NXtkZVuWg25vw3PTCb4arR1QOzDCCGor1kv
WfiwGtpqyqKZhb38Zi7MHe4WWwu8trHCXwW9eOH1N4wRB/Bx343hJiuKe/Hn
Y8LY9TsZSBy3nZ7v7cH1l45TSZGqRa4jqvBB122UH9N7cal9gZszaSw4uNfI
ZnpNLz4z1qX5vEkdZMt8GECv7MWtpl5sCNvAQuKodkTdfqwC45pMWS8+YV7b
jvm6TJgeMzvMj4S7B9+qT9+KxiWam+3SSfM1/NLyQ2d9GXDvijJHtaIXD+c6
e7rnMLHlMFVyG7d9XHz85Xm+hxlC2G3ieNPmOQ+2Hbt/4/rMSnCb8XzWpGoh
6N2drT1hcz0EB4zJHTi8Cpsetz+JdZ+JRwgBXf88XBi3/p+nAvleUfcflx7V
f1wc9V4UfXnuhMIigm8lWV2JNUP4wPh0R/Y4twqJZ81Taigk5MP5cAsnjz31
MGT/8Ecpamh61PdSheOOM1V6CluvFUjMuUATQkTHtbPBvgJ4np1gX8dF61Nc
vUwV//fo0571FRigZRW0Dr2+frkZ7vlIzPtRg9eFVjJ8kIy++cy+sQoqnqWw
qgn5qRd40STsIB/mrZ/0uV2Xjs1vKJzrPPV9CTEO3hqhY5aH84E+WO7LTWt0
+7h8NSHtMCOEaN+xRG75zBg+iLdLbzlrRwe3+MCdy4nvyn7/PWXPDT4EThpz
5YMp/nfh9gfVDu68U9UOVfyGasdi82X38dxePjw8kp98KZADpTV3rG/wevG1
1aHHvYZwIUZji2IauxcvS97QtViPg8Rx7Qdcegt35oGR9b149NrlYioz0f1E
0a80Ppy7qK4Xjztzyt7zGxsGTkvJdyW1I7GuZfkYNQ7IpeW8O8nsxSUXO7TZ
LWUj8cTEne3pJLz4VVL0RSs0/aBKuV++jF7cq3JVdlNnHfZ7W5VfTrxFwlfH
n6ePMmZjzyMKX9n5sdmsthefPyybv+0R/jyi+n959J4meRI9a/5G6R/L0HYs
Cv9yb9iwAlI/77ruO9aUjKZH9We8Q9mD0yR6ca38FxHb62ChnrWaFWm+OphD
uy/U488XCkf1cyE3xHAfyY84fcTGxzaVhT2PP3Ldnr4k4f7GcxUvzeLAmSfx
nZKkdTHlor7f6Dg0/6DWFwpnh3ZN8ybJH1/JvY47EtDtoN4rarkqajsQZW/g
0uPqu5Y3Iyv28XvH0/hhebrDTfR84eKJMsq0OE4vvknjwKQXZwg+NI0T/0Sa
d+Xup7q5Gfj8oxpz7aQTqxc/d/+sWrYnG5tvUThV9jNKn1I1zjMuF70NLOnF
l+6GGN0MdJyEKhzXr6cq/oNL32NP9uAvp8+fG7ri/xB/WPZ0cVx5L365XcgM
fYUfx+AmVN1OJulB2aidQxpM0XEVXBzXb0WN25mNEuNVSPrxmfz1cU3X6sA+
e5HrVJI+mpEmYaCvjdZTFVvlpVqLenFayMpZaWsZMFO4/883kr9jeIGVxjlb
A2fHzX2xlxR/e7Wq0sSqswY5nqhxwKXHnRdc/sddR7jzjsv/MxZPLIsmxWm/
tvotlg2t/ddf7sHbi6+6pdag16O+mFdkBAkXH2s1jWdZC180fkMTKS5Xlrk7
VU8GPS9xyTNfq5P4JCjJVCgrx4DthibLhxNyMjMye2fxGi6UTX8k/8ylHMnP
uPSi5itUf3D7Kf644OFmgRB+2w3KHvmIA3eHquXr3inDxtVOfhocT5rfS7k/
1s5rQs87Lt+KfF8Js5+o+Ury8vdUJrVTUSdbyfuKbieg8dXMlaT18lRi5IO5
nmj6V3XjPtxqEsIaZvaZaZ/ZoLE3VevUqVI4dYV2I4PAD87aYWEQy4Yqr+yW
J86lEPLbtiO8UQgzFRbobWhgwyZm8M2v8Wj88zOPa1cI/IGzcHV6CxtcaQ+n
RyWKvh0UX8levmm3SigEFZ37ikJnDjheW7FbYIXmwxWbORtbmoVgl+z8+Dqh
JxS+aFiYl5dg41TJB1Q/Y0PkWDb+Asjh2NnSgQFJJ2f5isnS4GOMeWVxuAB0
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
iDu/fwtO1b4SbvtU1Wuiyk7Gbed/qrzqb/jfbregcFz+7G/9F/X3/u04VX69
qOMDVMUl+lucnKr9675qp7/VW+6rfZn+to+Pu/8l6v3K/ravJ2pc1Oew+lv+
AFX97Kv7HKnKD6Sqn6K+F4+qcwSi5rf+ls8g6nodfXUvJ1V821f3ClH1XVTd
syDqflJFT1V+FK5c+lvOa/e3+fq/4/D/D31f5YdTlTdO1ff2VX2G/6l82N/i
Xf0tjirq+Or/1H0KUed39bf8Mdz39rf4AC4uar9b1PR95cf1lZ/V384L9Lfz
Hf3NH++reE5/G7f+tn77ar33t/WFy4eijqcd3GtkM72mF58Z69J83qQOPLxf
J6qQcDHpOOttK+rAJNDv5rPcXvzP4FT6HNca+O5SlDyVhFeM2bFh6oYasNz2
yzE4RwgG47TH8r8KoVVz1WD16GrI0Xi0d2y+EFjBclPLDIRgW+qarWRTDefD
d6i7EvRNL5WlnmUKoYptaPY8rhoyN5oG+nF722+IWRev8YkDs75s9XTj9OKT
9JxnXnTmwFmd0ZrfeL24i9E+G9tRXJBLy3l3ktmLSy52aLNbyoZl955NNSXh
777aTnTTYcMPr8W+S1m9+FZG08eDp9jIcRtjkFOhU92LL7leIhMxoA5iNLYo
prF78bLkDV2L9TigEvz9QXAdiW9XSFtfrmHDpirlrDZSfzLvWT6d48gGC3fm
gZH1vXj02uViKjO5sEu8Y8470vcmr276SFfgwtZ2hn8WqX3e43dK9kI2nHhw
0F2KhIuV2jPGv0G3P5o3mPaF1osHhU4PTG2uBX3NmsCHJHzDxkhHN24t+G4M
N1lR3Is/HxPGrt/JAKcxP847kXCpPZNUdQ8ywLdmXfkY0vodtpRRtrG0Djlf
vLaxwl8FvXjh9TeMEQdqYXrM7DA/0rpwD75Vn76VCfccEzumkPBdr0atFixm
gpalllJgaS/OP6B8LF2RCeoCKUXvql78gkKcpeRFFmTLfBhAr+zFraZebAjb
wAJjvc7VHiW9eFf9+IyzSQw4eVHwdVl5L249V75t/nUmtCe4JwkJ/j+cbXtR
e6QQaCO9dzktrYaA0dKqi4uEEOJ+U7DLUQCxAzNSI/PosOjo7RM+RD8LddIs
Q9/y4Waj1JSWHXS4O+tKlnI6B949f1L3qbwcHvhX0v8Xa28ejeX3/Q8LIaQy
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
B92Yq244zPXq3uke1aROg82V6eNqYiRYuyHQtaEIB9XOPFeTbhoQdLIPxyB5
8RQ943WgGvb3LhQr10ZlMOnQTCadG7DrgLI9qpSuFjxsvlypEFRNhwWb6+3d
+O0g4hAHUIqHKrb71TNIHdMVb35TsL0dOkknHTuK8PC6l1TW9p4OLl6dJhe6
2mHg/gfWp2I8+Kw4ejDjKx0KBT3z6gU6YMDncAGuDA96bd8v/qDQ4YTd48ir
lh2w4K7v955GPKieiCpVReqbAfx4qsT7DsjUMs4bYeGBd3hDPf8UFU6SRyNP
GxFA/9dFVtBG7D4uLPy9Ufp2gVEKFN+2Pte5Eo/EmfaWp50t0JBwIXwAWfcm
Bu/uPXECLD5iOzyCrPvavv6b3xfRwGKN3+73BCLYJFw78TkTBw4y06UCVjR4
M+Oha+NIgpqeeMr+WhxM6x45KvebCvKLLdPW5BOh2aH+m8J9HEyWnNjlYkmD
I2M7DD4cIAGHMfWVXoODz//zQ4MyZf7+VdGtYH5p0U6yDPZ9+n8LF10ZrfSm
mAs62w5xE7WHQHD45aWusFYozGBUbpDlg1e3rKxoNwX6Fr3aEHECO194K+Mi
Yz35YLh/q6nWNiqspEQvy0ppgxPznuJOL+TDhX2Hvn0jUEBqdIO27tE2gE35
iWqLmbB9crtbrWI36J2LePnkJgHgbtrF5apMSBtnHY4074YdgvcLG+8RMOOt
gvKvN5G6HBiNyduafXAAntY0VM5dJ0FivHNLcREbkjZUfuSV90NZv4r4l00k
mHth9jZ1gg07dTaXe8sNwL3v94+Ze5DA6fL95puX2SBFVRAmh/UDufLVJe2l
JNg3EbVCPpINDlet3O5F9wOJ6PyxRIEEhoGum67cp0JCp3buq0ICdJoQM6UO
4sBptP7a5UQqPEztV3r9mADJiqyC+3bIfpwIwy87RIWrhz/JnJQmQGHv424B
HRyUW0itZvhQ4Gi9ZH5XSQuYkH/Puum2wMQxoc+BXyjgdDU7+ONbHMTsfGzd
lYH8v/qJy/5+FIjYfW2hdlULTAZ/m05fj/htbXLXoU8UiLHa+1Q0CwfDK5eV
Xk1pgR8rnvpGWVOh4/52UwE+HtasHd7ydhUOtpoQVjbZUuGTtZbq9jk87M8X
GizVwIHOvciqQ7uR+ClTec93BA9GGsl6fWrI89uGbnAQ/nPrQmbv8REWNNj+
UPGxwv6OFhYfoOl8O7cF4V26ksOM5hAW0N9bz1d8QQbK2QvhCxGeaWxIo94x
YwB+86pf062doKlZ4/wUqe+GN5N/v8unQddUVEpdB3Ye/1ucIWJpfQfhsUYb
ztt6cujAEBv19jiH6On2SaIIqWuexxZ+8LxMh8btMp8uDXaAx/CH02qdPIj9
0kQ6lIysQ0vo8k7TNtDJvyfBLuQAbqVlwOufA9D4/Kfg1S4SEHYVX/Jbjtjt
wAr5EwMUSJA6daT9JLY+PikSegE9PMj0KL2QnEqBkoFIfOrWNkw7q4PEKgJS
b6rVDe4x/sEEsU+Uz6Jz3bA2fofYd6QucLS5aS6gzITM0asPc0aw3+fFwpOE
cYtcEDnnKpx+uWxkgnlTVrrZkm7wMFgdtxXBj9zUiJQwZULVsTO255d1Q9L1
pPt4hA8XVqRFXolhQkh6xFHJkG54bPzrLBPh5/fn39O5XMoE4X3vH/e86YZ4
kpbYCOIPYT8UH1k4sID3eZP2jVAydHUUKm5F5JzsCKmeymGCQlMkszC9G3jx
bheM2Aj/p6mcOWDJgqmbsy/7TpPBKQJ/WxzhGzHqYdG9SFyxqw79IDDUBa9m
b98fRObVp+F4/5wlA+yMyLbGA9jfPftv8V5feW/DZ8h8zflV4zq1TPDBLak3
qu8GBfzmJZsRvPu58nONbqTekWrtdhjq/mu//VteOrpcYklgCReundG7xlg3
BJ8HnLgPr7ZC3Kdekow0E9Yv3CdwUbUbIjLypcm3CHC2mym0RIMJSquGYM6u
G1581Lub9oCAOd9IXzUD9Vk+xFlclN+dSINx2yFJ63ft/0896PKnHpT8Uw/+
bZ7SGTCQ5txlA1XRvsT/UT98+dUpVKqBxP/YIyTxjWxw5M1lyKzth8bE4Km7
TCKI6cWkaLayID7ikNIZzz7Aa8kNB7wkwhONT41bLNnws9bjQ7lpPzh8jWIx
RohgsF3K5oI3C3xGfm3yONkLyqzliWe8iPCwaW+uRhwb9iTnSh9L6Aexlwq/
21VIkFtIPjGuwoFeXMr8DZYDkHJljcqRcESfLTuHP5hQgUVcGBTThIclMc1O
LIR/Dt+WzpEZoYBlS7D8QxU8PMo5tzykowX0g9lM3WgqGPU/6IdIAiTkeGxw
24UDsVefhWtFqLDX/izt1D48rHZ8rpM83AJxU7U/6JeoUElfObMP4eWuQarn
Ws1xsMGsM5tynwJcY9hkifz70SZLkQ0nW0CwvNRA/DoynvxmtiaGAJee6JHv
7MbBkaSMie2iVPilysi8b4cH9XPuXzb8bIHd0c896TupkKjQseQaFw9nzD+o
7kfyxbqR9kGLTVQYM7NesaoOD8bFO6RLl+LgicPTKFc6wqMeVszqCeHhYulm
77hvLbD4zXmNEEQf3ymDvi3bcRApySrKc2+Bd+LhhXEIH14y/lZomEyADeeL
bAxP4GBN53OVa1epsLpN6BU7iAC3TzwL8LLCgSrrd01eCRU2JLsUSI8QQJB7
7IywJw54y5Vm30VQwbF24ZnOiwif95c7prsTB+rcN/0zCH8uOJ8pPDBIgPKt
B+NqEP6Mqz8S8PMVFQrnJZWxeAT4vKBmnHMKh7m/iktWdri6M6BM46bTqZBO
MEhIN7+ohNgvXoB1bA0D5upjimtoHfBArnSB8Tge9loZ7HONYECa420do+pO
mPsufezBegLYj0TIjo4wIH3Cv8m5vQsMNz04/gzRd1suZe72SgacdBxRzu7o
AP1LSarXkHxrnNKuRvjJAMG3/kJppC5giM+L4YUQIPHmu+ht3QyYtByHkw+7
IE40r5yOrL/4yWUOj5C6zCShf+wcUpeVLjqNm3cImy/9LS4gunk44BYPnsz6
RVgaUWBBUsLAqDiSp0YriPf/OTcdkfKJLByCRYo/X2TXtELbwI7Sjy+5kMso
cPykMQRyOQeC7C+3AjX72QMckt8b25QSzBBe/9LPakF/VieEXTPZoY3EQ1Yk
X+3wIBXWKrcFtbLb4PevlScWI3nZvsRYf6EoAxpM7Qa1kjpB3Xh7bxwipyhb
ajx3FVIHb9p9avXbTpj51ln19J/zq9DMlcuUGICTyDq7vLATdiTJB7xD6u6e
/aFlt5G62yNPkpCP1N2hmvncJiU2nAvuTuyT6If86pWGtV1E0Bl58/uwIBtm
J4JfqLb2QVRJ7GeLb9jffcrJILW9Q/JN6naPvTpK3bB+o/TGOYTHLvWPtPiu
woTca5HRtdu7wST3Fz4N4bExJm5XAjNZMDki48hi9sJnOReNKzeJMDkY744z
5UOlk02yggQV4p9dDfx8CTvOZ3V9ffoCOLDYximp4MwAGGnNvktKJkGtxMz+
xH0c8A2Pzh4PGwBZk1flbx6TYEZdM0RPngdB5PO3P+YOAfFGW8ftT62gcWAq
uuM3B44EerezDgyCsGPOk2VSrbDvGGf3ug0MELjuuNRHqBOebbgw/QnhiVue
cdznZmggr0qMuCzdBmOxtNqZzQivPLrdprKCBnd8ii+OhrSCeMLs4eeL8RDh
/ej4rlA6HKlJDpSwbIeOEpuCiBt4yOV8zlO4yICi2swyjYJOeKImF31AG9mv
p420C8IZQJrT/aZQ0QmudvM2R+v99+odE7UlUrs/sWB0eEjUwaAP3qhSGBHp
RDin67GtMokJIHjpdIMTGTKu79pO6SWA9YLwB0ecWbB2NhfHMOmFg4UF36OP
EjG/eybTILT3UBYb7iaajZe97Iexyss6FnokiNE/4vdiIwfslCm7444NwBGT
N74Gt0mYeq7ILl6mfZAKm8P7s94uJMCnzs+y9Vo4+Lg+InbWhorwLceNu2bw
wBmrjDFAeHvkab2WpXZUIDQda3SfR4BlGVFvb6zBQZ+tNln4JBUmYlsGq/UJ
YPh1gLvFEAd00WH+axcqrKM5nlylSIBmWYeavetwcEwoT6nOmQo4IQWlgWUE
aA2xVnuri4OkR53WKaep8Nkqk24JBJjMy33fsAmHyaOK9YM/9SI84XvkuKiZ
FQNc37xebjrYCQEPk2VHiXRImjvmbrmiA7o1a/wWfEbypHPDi92/6MASi9z/
xK8DdMvzRrnteJDg1Pm6fqfDdGg73Ve0A6zqbtgmluNhw4fvHW/a6WBt8v7a
CfUOeH/k4PTZWjxUdXTK+5XToc5imdW6oXaouGheIl6C5NuoBSs05zNgVdhZ
VmlyBxzWafjqNYCHUyJuJzOQuuzXvh7NAhkknw7v3XMIqcu069ScSsYpsHb9
pyMkLTwYvmYEHu1tgeFr1D31SF5zWpyZMI3ktecRmw5KInnW1uCJ+nM/Krx5
X6AkbEuAWtHMBfmmOOgsOKAVf5cKIW6jyUnPCJC9bq5BzwEHnpriegEfqLBd
0lR85TwiXDt4+NZbbxyM7bGUGQumQkbZq2dr3BB9DlZqjW7DwbmbV5Vf5iJ5
zUgw8RaRAHFeY5/LXXHg4yYQH4voT/qsZxOA6L9//8tl1oj+Lgu07J4h+r/z
vLH2HaJ/YVuysi2i/65iB+l/9E+THBL6R//34i0S/+j/toyds6aKAjaNK0UF
cnAQfl79xY37LbCvpz2X600B3S7FJshvgV7PorU9Wi3wP2lZjgKfFEdvhks2
w5ajxrnrK5shP8Bfcz6LjsgPrGzd3wFLBYQWKeLwYJd35JFCGQ2yt09xlM+1
gqbDlPMhKTyYXnhQ+kiTDr/0wh40hLXBiSZtHb+DeMATCjnBCTRYwKNKZoq1
wpj2i9S1IziY8rhcG5BCg1upSxruLm8Fs833Ax6N/7+8x6de/ijiBxWEVyfs
qYshQqD99eSW2ziYTj+6xP0zBQxndGTPPEf41mJxG7e0FjjzW6vk8nkK9L61
YA83IzzG42PSVcMWIB+bOJCyigLOAXqFC/c0w/Jyn4705mZYutjWlIe6x9w/
uOPr/Gge5Ga/vtmJwl8OFzlNh/FgzcpdtygonLreq0s/kgepPt67nqNwXbG7
6UPneJDvyxgrR+EOVnbuWUE82H1G/8cO1L1hYVbFROIGPuzSrshPR90zNg64
PMGn8mEn2/rU5O9/cZ7qhKX03D/fCw7sNkHJGWv5uYy1ng8Nr51Y4Sg5q001
3rYl8OFrqelkLUqOXa7z/hqkTjNQNtvhiLpvNd82TPPI5oG+R1BuNOp+9mp7
WcjvaR7oFRYveIt6brlvlHjqAT5mf4hh2MnX6L8v4MMq1zB0YMPTz0Eb16Hu
zbsuOTW6nmBDdOs3+Q8oXKAVtLg3sPH5Vz5/Qb/HQTt0+MXJFDYERetaRaHs
n+prnS3rwYPZ5jMny1B4g+lS98FAHnjWnbjvhsKb96anbD3CA5/f4ZId6L6I
7eNB3zbw4LxxeoQNCrfbaHfogAQPet+XJTWi78cL0m/ph/IgtEPAwQVlz+2X
T0U58XmwbMJKhoGyp9cencvh7nzwN1tUhb5/fyjFv/dSmQcUXO2q7Sj5Pyzu
XL9oz4MW5XlyZBR+JfPY2PtwHjQ59mq4odcxFlecOcyD7/EfN6OfG+W33ScO
eW5k2NkeAVTfSJh0PWNtOAcEh922xaL/7oN06Op1SzgweettuyrqvYy8xzsf
jXxhwVGfPQmFqP6QyjXzu5lkLvj03Vkfg/ITuem6lWJ22P1j0ft1n69E9a25
Lv/2LiiPDYLeFjWtqHVftrfx094kNoRmLE3bgXpfxgRPFKPs5MDmEqWte1B9
JpkXH61ZE4j994mul8V4oftqbGcedEXFcUEiR/jWeVRfXJ+GRrgSG7tv55bK
vfpvqPFa7LDoFGEuZn9X/S33hYGofrCxvN7bLUqDcDNjtUklkQ+CHww5nip8
oO2kIr8D/1cf1Ps/fVD/rb41LPxv++X+Vh+H89SV3Qgef//nx4lcLsjuW559
0rkfmGtIjzyR+eb142I0EbuXu1PojbV9oPr1PCUHGe/ZuWSH3msuCE5KHg4/
3g+f4vsJhQies5STv7KYC9blC50NjvUDL+Rjd2Q3H259TTLZG4X45fz0TJ8d
/bBEQsbJpIcPUvVxwf6aXFhZEmVBXtAPTmZ3jv3o5ENhahruajsXBs6RHFaH
IHbYUSmbhOBi1f1Cv1lc8Pj+WywsCrufbUlmUEMUqq+sXkiqsqmQDvvGHhh0
ovqQjdseVnx4htRJmU/f8FF9fRYC15xwO7D7+rRTPCp/ovaFx4y7TU0aEg9h
vUAzCi8t2nNJLJEN1YzJ7c9RuJD7hmc20Www3sT6P8y9eTTV3/c/XiEaKEmD
yjw0KckQxU5KoYGEJqKElCSSJilTJMkUkTlUMlTSIGQm0zVcMxd3vu69ylBJ
/J591uv9fj3X97fOH3etWp+P80drPdZp3/3cZ5+9H/s8z/OcoC+4uB0++C4g
/QALRN4e0PTB4U52k6UuG1lguPzFkuO4fW7qiasYmWzaf/fN/gc/16E1aP2L
CmrWRqt1cLh72elEa34aGEQ5mrJwz7XAOjBo1IIKHhs6JUJx9mG0Zt2wDaOD
y4Y5Aj9x+/ecmuSW2Smh4wkK53W/KAqfGdSv0IK7jymmQeL6agXKH9unOrzW
TqsY9z1mwYx40eZAMuTd2kquwuZXhbz013kBXLi+WSfgfiD6e/ZV4gOCZzE5
HRSjnl9KHFii1m8p95x3fZIP7hL9gTvf6fJ1S4sZ/jRItS4ys8KN761P10NL
hdH3okpOXJ+7EXcfVnEoPaE/Hh03KMcHpe7i+h/OaIosfzcADeR+4vJmnF/d
kUm4ODgA6SqU00dwuKunotSs8QEoF11HuIvzh2XsVEKmKdpPEnfk3erB4W8i
c4oCzjBheOumPEecH6paaSs+m2RA+ITpgy+4+93OvyvKM+ZQYf56rgcBd87D
vS6ZyjWPqHDe6EteGc5uFfM3G46uo8HJB7eknuPk19s8UVuwkPnX43byl8mx
YSIXzFUNLRQx/mqwttAmo5sECfsuvxPB4l5VgN8nxdkceFtRF/QykgS1l+d9
c8GeK0qDbujzGsu7VbZfgm+ivx9B4YwBLb8PmN2+zJx347vLEKw5MUfr5WpM
TrPyt7m4/b0/PIseyc4lg66DxYB+67+49BLRYh2/wT9mn5yb/D+ssHxxe+4R
k6G7bJgOe3RBbw8Jqs2PKQlRsHx0r0PgQjAL0lxf5p0Q6oUzXgU9Blic738d
72/KYEF+SUmZqFcvtEjxx23A6u4Jtt/5VAkWHJ4hKKPs2QPeu8sDWrC8cyg3
3OfBHDYI6bT5HGL1gVer0sdUzJ7jF5KOPno6BJfHdre8c+XdnqZ6hzdoYfp3
3ihxDghng/xB1+Vi+0iQZDxzJAWbv6WsRP/puUOgY3Rvd1FGL6hrWxKXYPqf
nM+whBEWHGyty0wL6gUv0riZFqZnPL++TjqWHztegsUUlh//E0+6/oknS/+J
Jyh78vpeJk7QtWAa43Urlvw6Y+FOh+7Z+dlpKzvh0Qkh13as/54t4lWBu+nQ
aBLKPzDYAdtaZ0eYY3xV3Sy7xaWWDhtCPyYYBnei34PPVVcvLuPCzn2bpPfl
UmD22qDYhU1EMAjcXl6F1UcmK6tyTNupcCP60fKQRejzAz1LrsYmY/iALqHl
2UE6VM1bpjP5pQNs5lcduPv7O1Cn9Hbla1QYf/f5R0BcG6wesPt1JJYLT8Nu
7ha5SYEtlx7HP89Hvz/6U/48EpAgEoPF8wuCjjXDpCHwcM5b2JHf98d43cpd
ZudoLVxIg00+3/o54LeiQOC7NDof/ec8jWUlBmXF7iyYO6/s3nFmDyyvSqpf
gMWB4n2ZfJ7hQ3BnipP0wrwPyg3P7LqE8Q35ldGudc9YEG0+zO7Y0Atj36oz
D2P45Mx7LW9yWFCsfCnVUqP3j/HeEWHqwRxMfs/WVM3oeBZY1G4ospXqhaBn
pTFeGK6UG/yqD6tPjpncM3Bc3wsyR3p3K9cx4M0HE6skajfknT3oq8CPvt/B
ezXjmiuJBar23rslvpPgIgXUui14X/9H4aj1bT/dgU8FmUy4zzxUYSTQB18D
h0dehDXDD6HnAY/nMuDp485Zx0W64ItChrzEnSawSneK+eHMhMXn/aa+nOuF
6InQTc+cmmH8e91NzfNMkCw9A3ece+G5ZVgGAcOFiqUDpP040NO05aitMhlW
zHm6yXA2EbZrunXt/8qGbvvFJ1SuDcLn1y9XZWW0woVaR1N6Ahva7eDIhqWD
ECL0VULBvfXPvW9Vfy+cUcSB2b6G953cyfCzl77o0ToijEfPefl7f/rxRXff
9BUMAilO2m7j51bYqn3ZIQx/795++W3H4pmg1fKpcyOOD3yrOUknaPDOP98u
HfT2w+HKzjItLQeYIC+hL96FwwXW3g9tcmSCOoMjK4mr919yI0T09nBgV9LK
fUtw9b5dktWua10cWOO9684+3DrP2xJF3c5EDmQcXbjEEdf/l5bTIasRDkTN
0f76Crc+0P/a47zBIS4oJgiL7cX9rpPZVYPn5hy4bfP2iCAOt7CuT4zR44CK
etbqhTj5q2W+ied0cOC9E9/LcVz/422et70COBBRpezph6uj6RPe/JkrOFBu
EGSgjut/O3K6f9YBDjTXLCtSxuG6N/NmN+7lQKHB74Uz3Pre/yyccWC+TOu9
Mzj8TX63lJ8YB7Y8avL0xOEHl9COkpZy4GD8xYYUHO+yOFXvNyTMhFEPqxem
OFz/VojL8BgD3noYnr6C42931SVpY+I0yMtSvDyN48mhK+8n9wbQ4BWVL9AP
VzdF8s2wrvxBg4JHN7PscHXWGZvKxX6KLJDWTFJ0w623rB2+XTPZx4S+LW82
deP8k3/tsjjaK+Z/z2/8D95z6oVzUwATeiXaa+twfD5z1lCn+X40z/dflBch
iDtPbF1EvFtuNQXWX8ge9MTZITYntuPUTCa82R2XXIbDG59ucrm9lAmfxMbM
ZuH48B47s9zzGVR4e8h+70/ceUoT9xpE2PZ0SM0W+LUWV/dF9hVAJ5b//1S9
JvdedZ81jjc6hKlkjAYPgrST7ZsFOJ5pInPJ028eGSQlQqU+4eovzZx3e5YE
kZH5YpZ07JpNuDolbe0abe+EAXh4PlqlEydndIX/ZscH6O/vULg91XHhB5xf
PXbZvoLiRoMVBd2snbj6QsrqgLiUKxWCOtWPx+H8k/yko3ydNLouu7DAMmsr
VjeFnCwpt9PmwksWJW7qcD/oTkqaeGLPOzNMwN/+AxsuB/+Qt7Anwbxlgi83
4M6xHFeBYmO1QVi9qMObi6u/MtdMpLXJDIIfSyt9ArceYnrmRM/v/SbcsJnr
MnHPZZLcfuuuCw1kzOyWl+LkG0VfXpx8YhBcclbGrsHdg5PhOGNF3x30PZih
qY77Dr8fgg2mLRWhMwbgzcMZc6r7W+C9ccHsie4hCK4dZUevxfjN/kr3nm8t
EJU7KbAA4+3bTnfOXy/DAvsguSNu3j2wW3bZ4C7Mb7ker9iZN1lgwP7wafP3
HmiN1XxqiPNnTYv9hsKb6TBtf+XdCZw/bDh+ddnyFwPwIZIQJYKb7/bX9s+w
FWaBIt/eo8dx8zduuMozLIQJ3W7fHCNx5znUjFSUCG9nI+/9aRJQNs7C9A8Z
PDMXZrCg96vLqfcWGL8yu1bujZPz+uj5ntnabOT9iSj7oHDjxStPts9gg0dk
wgkZiwHIXNVa9EGkFTxPKJQLG7BgWFZT9t02Ekyec7ztPNoM9q7Orc+5TNgm
v6CyNL0P9mY9Dzv6sRm2WS4wj0xlgm5EWNvNL71w2//Vsmv3mpFy1m50OLE8
hQmFbmJ3KexeKHR80HEnGH1fEvXrguLY6SFg7hYXTzo0AL38IaQvwq1gz3pw
bqUxFzLXvTr1fBUFaPOurPHxxfiGt5r/aaAD4bT2LDGZDpBbXVUROLsJAr74
ipgYU2G3pFaNyqkWWC+Tfu91ZSOYDHBT4m5R4UfjPZ8pags4iThPHWQ2gqJk
Tavu8BAoholU/dQbgNo8/zOK/K3AtFA+Vxc4BHHKC/zSyvuBKM5YSyxp+e+5
EA3/z7kQfXqv3zFTMPk7dGr1tVsh7eaipaozCNC1/7SDFG58Z52sGHy4ig1h
p05LW6uxoac0x/tpxADwFRVORmxshRq5jZee4/LLiVzamvPDTDjZw9dQgfND
sQsbSRkvsDzobE3xwPET1SHt+lBjJlRrPi9/jvvdjMoA70gDNvK8F43MvgMh
OL8VehKc7XeMAk/CJbu+4vD2WxukBjwpcNN4E6sZ9z3vjrRvVuadZPCKCVn/
/jUdHmnLVZJ0OiH4Uynd0rQJUrwdbXVxcT5kU96BZJ9BpJ77Pzny38DJf+9M
rR8tJsPUoPrNF7g8aDQpPyY/QYGZOjqHVXFySvpNuqXk2HDaqSjiA87fUr6r
kW6+ooCgBvkoE/dc0ktMHtt7UCA8o8ttDzZPu61cCveKs6CEz26uo2sP0C8Q
hIIwvMTt2Y+PgiyQCQyb1rLpgWUWzso9P5jwpHhX9K3iPqC7Uzd0ljbDme79
1WFY3rR5nD+zSxurjxZyGVOJPchzcfUCx06n4OJqcZzkJhuLQbjS5zHnPjZe
8kcvW9bI0MHealvL/Ncd8MW4MPUqxifnupnYetKpMPah9YKAUjsolsQRj/XT
4eEWqZ8azzrh5M9TrrXOTRDfNZO03IoO/q8Gbymfwf4/7eL0leVNQJIerlpz
lw4h5y+8nWzvgBt1JKF2jSbY77iivdaaCjmfa054hbVAQuqYqkxLIzg9EL58
Hedva73l5TbtY/73XFC9f84FffHPuaBHc9//PLaNDRlHXvsejx8A/mWOli/U
WiHkVBWfPT82DxwX2LgeHYAykmPu9MJWuFUnzt07wgXNzy8l9sXQoS2Hc+OG
cSeopBxrscet64am9IlvE6BAgEjy8kzcOMbKCURssaPA9hdbZjVgvI4qTDfa
Hs0Cx2dPxy2X9gLx5OlnHjg/KYovtxHTZINe3X0+WRx+7vCRWcck2ZAUpVZS
gNkn1ML3qm1nB1y8v/mjumYT8NF0DCRmU2E74c6RTR+agWPvdy4ithEsUoic
BSpUEFjopTVPpgWsL63oOfSmEeoUNKpHr1PhpLKae25XC8DXplXHaI2geX2d
wGrMr5yyvirOXMmCOElRftoVzK/OmVzPxvDC0Bdj09NYPbdvr7sTli/mR/Zu
bcfsnDFz00bnXDrIz7d4vMCpE7r1doyEY/2bH0eo5QqwwO+2oGCSVQ8Ih5wS
T8V4TkZA5VXVlRx44/j2wLMUEvJeGHrkbod+bN5FeQQtiOlkg+rYr90SV0lw
zejWDQHMP6d2PLyeuZALKz/NLb2v2w/7nzeWLcK9v3B8fcf12BEWpC7zvT6N
w4vq3jOuYfX6x8zNIYE4/1m84XwRnykT+hmTK0Zw9o9IXHLb6RgbPP0bjsvh
3j/uO1zGGcPq+4WT/RbbcDy2sbfZ68Q7KqyUPOhVijs30vBtyPKztQxYUHqq
pAvnPz8aNnnZKlFAv6PUPBPHA3/2b9zM70uGu2OLfFbi4pUUR8W28MogPDyy
o/Eq7ryyb0WrpeeSBpE8fI1/pVEbrr542/DSLF2UDjMfzlmSgXvPW1Fz+Oev
7CGIvqXvW4173pr60m3XOlige6j5ZCiOn6SVfDi4ZzPm186TZ55hdaHl8aE5
O9dQ4M5zcsKjICJMxq6RH9H6/V2n+5E2IQq8CffaGHaFCHuYZ/bX0rnAH7Pk
umQ5E1SLr3TUzeuBG58qn5k0cqGdKqNsUUQBj2OrxC50ECHo4SsTKWwcQ4fP
TN7UY0Coy6FdidJdIO1qzdmyBasLf9jR5zYOQka4zCa91lYorhVTy8LqQf6A
ccqHRTR42VwRFn68HZKsLc+6r6BDxJu6uJbqdvAyLg9I4BJgSmC6V/8DDTYc
Sx+3JLUBNdaSY/ySANcupUWcC6NBi6K4uvqNNvjuekx0RzQB0k/Qr82bpECa
yLBDZXIz1N8falsb2QgyB85I2bRQQaXHbS05uxWOvCfvWCpFAAHt51UXGqiw
6Ip1FCOlFXT5R+u/rCBAVDCVunOKBobXHIInb7dD9RL/ab4eAlhcdBAI30eF
+s9yClmOLTBy0PqFQnUjJCukptvuZYD8j8Ej0y+w5z83c63QyyYY2758SqCT
juW59nLH6E5If56hJnWmCbRCdez3Y/7Q2PlR1XY7ExKSblFiTnXDYKFWw+/9
CSt6mfKO82mQfVVV7P6hdhgUnLXyqw42XhGNtBxhCiyJNDkleZ0Ilctn3CnC
4qH/pdv7427RYcbaMVtP5c7/nm/ZG7T8zJt3dJh19fP9++6dsDdtT3MQlhc8
z36fkqJQoaTw5I4q2XaQ3DPSOEN/CDI3J89759IPFy99e/oysgUubnG+MPf3
/lKljvLNOnS46O0uXk3sADXZz7essujgGB/q5LKhEzYpfQo03NcE7rEboz3v
08FKfjTZdbADzE8KyD/UaoINJ48eCbHA4sbjENv76yhQu+fkmoa7RHic1Lnl
Vx7Gl1fvJxet6APFReK/wqOboXa2R+t4NQeOGvdsYnuTYZPQY7f1qkTY0Gzq
3dNLAW8JWdGRY81g2ixvFHq7EWJFilJomJ1XM/tvBj/qhK/CT0WzMTtHJB0d
ycL8R2ntwYFj/W1gFmW+ORTzH3tT2fdFGF+VSCIXUTG+Olm/XjoK46trmxfH
sgZYUGzqSV3xkwSbQ696XTjcAotlqMoixgyIljhysPJZF7y3vfp+Y24TfIPH
R2a0M4FZc0z7wPk+MLKKNdbPagZvp7RPbw4xwT5keUrixl5ISbXcfP9oMzBG
Larrp+lwR7RGWnq0E07cP7tB41YTENMPdV/ko0N++Ufp+/fbQS31+wlTEgE0
v4m1PcX85FG+Cf2KMhYH/c/lPTHuhjaTF10CH2lwqN5LN47cBp26s5qdXhFA
120B2baLBocLz5ft29AOzxZQR8orCCB/Rf2UiyEVnry0Ekq2bgGte6rLb1c0
gqhttQ5bgQrPtm74cUGoBZSoZtG92Y2waTdfyTdsfmVb2c4N8GqD9xfX1z3C
5hdfkJhbbAYVykx2nkrb1Qo21ocTfu9Pz3F6U3o5jAqi5wb76AtawVb9ndyi
scb/ngP5n7hUOvntaxNmr6tyq36+we0D8e8IvRV5ZgiW/Zq1jB/XP8R98kxI
EROixBK3vMflC0ml2jq9ICyPqOcVa+H2b3Q2GeYGdA7BfbEGWQVcvoiX03Pc
KcWGXtq8/ZW4+GnPSBtsbWcB2WqhtxNuP0zcpYb+OdVs+DCQ/O0tTr7ujanx
F1gdUm7tNFiFyyOnTETPTNUxQMjY1Ncey487VsgFzxhlwzyqcpVqEAnumXbW
qOLykfHa3KrIN1R4fZXg54GL/2nNB0RPj9HA9mTd2b04frv1k2Vf6UsyKB0Q
1q/H4S7G+lez2smgMCJy6TVu/WG4q9yAa0CFa5e/LrmI5bXVoiL92QVsyGeG
ERQdSNAm//ZnLC6vxa6jVercJEOnkksuHbfOQEwihVsEDYCqDWO0B7cuMSa+
Mt5sMw35nkLk2rz3YhivPse55XDEng3mdIUFbiokOCDL+N7Zx4W4WcuV7eKH
oJZEbfU91fffOn3snzr9wD91+qPsOnF/zG5aLz6d4782BI1rbuXkavTBoKzF
F0kMt8sZmrYIHQLVJQsevzHtgzsLtbLVMPlFKovDy4qHYOWH1Y6L7/chzytz
vUHsTsX4IXGpSNLOG2wIETrq8l2XBI/Zc7btxuTYxvB1cQqGgCP1yWFLUB/4
9hrXGmB6drgJvL2O6TmDUvZs/FsPTJp+i5bD6o6FD+YaKGzAeKtg4QRxPgnC
BNRVvmJ63h2UNX1uNwQyIqlLbST6IO9YuIIz1t8kJKRjGOOR5z9N1anxkWBA
TEvpxg8uiJvL/fhsSoMnkbfqr2di8WCN5uQopn/BPZ0J8cXYv19ZKu+298MS
v/HYb9g4MpY8EePM5YDmjPXx76JJsJwi78vFeMjudWc/X/TgQK/wKKG9mwQu
Eir8T7BxzORr13sFQ2Cvo3wvgNWL3J9jP2y+2xPTP/WpvkTfDWx+ZntGHNDu
gzMlLetsMfucO+6oGZY/BBkTY3Odffrg/LzY4xYuLLAGjkDLeRJkHeqOLRJp
gb4zrjf0h5jQmD7L0CuhD3SUhRw2YLy4YHYRWXTbEFw55NS136Efshxb5+1+
0AI1/+y39/hnv/2yf/bbR4nsu6m/hg1bpSsvbQwYABOhulTv1a2w4wXpg24i
B0IPGn432k+GuZfNdoQvJcKlFDrFFccnM27lrl9hxITvA105FBx/M+UShL1e
D0Jm6hNaKW79J5WtcvRozQAcrMz1uoKbd+RlxdfZRWR45uqfeh63DlZ1KY4v
wooGRxPFRkpwdVx+NiditJgGCbN/7YnEybcJVF77sWAAZo+9Us7Dzd/6FFtV
hd1UaMxSWrgGt75qfl/ioJE7HcixxL4fuLq1YP6dqpxyCkRVvX8oj1vH2z9R
6BNFHYC35Hys/YtfF/rdsDzUFIC1f/GGt/VYQ/dP7ErAGi5e2TzBGgVCW+9j
jQtKRYpY4wBzLgNr/f/dxx77zz52yX/2sfOKZ/SmY40L/T0krA3B91ffsNYH
wz+4vxss0P7daHAmxBFr7dA+3IY1Lpiv+N0YoD+8A2udyOeij9OwhqtbD6/B
Gptnu6Hsg5KPwnm1QyO7AWv/yjHLOYg1Js+/y6sclJ5/yh9Qv8vruKPkV1f9
/mPCCcPfrQ9CU+9jrRmC/+ePDke7j2CtA95r/m5NYPI/f1Q45PK7tQClhoy1
xj+GC/zPH1ZXH/vdBuC06O/WCnr/88eFN6J5WKPAVi9trBGR+vOK8/q7f9s+
qHFE6YnyN5R8VH8UjnpeVH+Unqj5hcJRfo6KA6jx+lPxE9WfVzmoOImyM684
Kj6j9OEV53UcUfZH4bzmL17loOzPa/xE9edVHxSOml8o+aj4xms+RfVH2Q01
Lig5vM4jlJ/z6oe8xlVe5fwpHGVnlH3+FK9A2flv+xWv84vXecprvkDFT17z
L2q8eJ3XvOIo+bzOF175MKo/Sh+UnXmtL3ity1A4Ko79KRyl55+yA6/9edX/
b9dZvOrPK2//2zhKHxTOK8/kNR7ymmf/t/A/NY4oObz+Lq/4n/IfXuvKP9X/
b8v523U9Sj6q/9+eL7w+79/mk3/7uVD9/9T6DArndR7x6p+84ig7/O38wqsc
Xu3J6/z6vxZ//vZ64J/yZ5T+qHnNq93+FJ//U3L+Nj/klf//X6sX/nYd8bfr
rz9Vp/Ba1/PqD3+7/vrbdRmv62+8rhv8qfUKlD6o+c6r/rzaH/Vcf3udgVf7
/O3+f8pPeF3v4vU96f+W3/5v2fNv8+c/xbf/VL38p+qRv72e8Kfk/Kk4/6f4
0p/iIbzifzvO/1/jRSh78pqPUPqg9vs9WjZfUqeNC6m3wjkO9hx4zVdTmdWE
Pk+AVzmWJ77ZJzdyYfuqtSvZpVwYV9ojKJvTj5T/p/Rx6rvktZ3AhcXtGp66
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
TSg8vP1zfsrKMuD/A4m2mRU=
                  "], VertexNormals -> CompressedData["
1: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
KcK20mrHCJSV3dXacqIYIlPKoulfkDm7k1co4zOBk8/pVcOfpwHrqdavwi35
cJMhSCaxkkChl+wCDZOJ8G7q1/Nsn2LIKbd6WJtD4GPffMqMdRhwHD5UdXai
ENY07qT7VpH86VcxlyXlBuzs0n+E/5TAppduO12SCTyk4rZV29ENL279xqHz
qgC8OMTSHjcSWCBO//hC4kdcDgqw2jxaCkofnh445ErqlZJ7dc5QDixyG1UK
rn+Hd2f0br5OILDHjJuDrzYbnMX+MHVzNQBSJXQ+ZNIw47RjLb9qBWxzEr5m
xF4Dd5jmqxRI3ZsovX9g4/t80Cjm3MUUUgcXWtkOmJfTkLd72Y6RQs5XVL2a
PFYJWgW+loYq5Hke3WXlUVEISzPhr87VPcaZ22ZXhKWy0WyZ1rt9iAAFRQ7b
kpxKcOB+qDXnTGD25oEr6+OycIQ9sK87oh7OJRkyaJrTUJz+r97zz3XwTefn
2n8L9TB/5KzKihHJUd1KTfzC9eBwZc7fCutA9YvrhadpNHSDNtt65Spo5eFv
cXpdDZaHmrLCn5F+lJRw686hRijuNH3ecaYZJglPYpsjDRct+7R/vqqA1t9x
Oqo9zSB4UGOyw46GkaYL76UHy2CrEedXKksTOLExGz/IomGONN22WrlSOOyT
Nyqf2wiFujSVXS9puPWZUNqhg1VgH1xj8Px9E2xRtD63n+Rbgcybe4xXq2E/
HZdoT3sjLMj6n2JhJbDN1BGMRj8Btc63cLq/Ga6LNtrqPiHzgqKrX+/eclDK
3muuq9wMl/ZKfVaOoGGNkMGlS8MlYFBknLuzqwTKnrvmhJD9EHmxLLOB4g/t
3dJmHz9+hnfB8q92xg6jTebb/rerU6D/4nsX465MCDx2xcB1ZQZtX1feLY3p
h/8Yyu8kkt/heVCEs9qbwCsOJ/y5RXJA7HW7pQZTOUhorNWIxtIwnyp3hqW5
ESSY2psb7yWB3K3pT40kj61tF67asisd+unDKYMxYbAhqatMnOSivFdKm+fj
s0CZ5Sc900gwhO2U+02Q8z91Xrtc9CcL/qwIbyr0iIS/wl5M75dJ7rqVobn3
zgfU/HNBNJrlONYPLg71rJF1HNYXki0DMTBn9nWYxVH8XsbNX0/WiUsbaXjM
lANut68+mZiPhMRdD9W8yXy0W4pbMKTTHVesY696Bx3Hc76vsnzJ3Odi+9Az
++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
rjzI3xoW3NhLg1Jnu/t8QQmQLXHU6c/vdGCe352wxEffl+27rms5TSAXHOSr
PJoOY0+NOEqaafDx1CzjK/N8mHgk93drUiaUnna00CPT4CyDqcnPxc+YEdpj
yFcTDfnz+3/ai9HgIovJlsLAJtip6b3hnfoN5k6uS/1spQHnC2Wxd+ZFYCF7
Njp2PgaIECLrEkyD/UmcymWVVUAs05feXpsGLw+oZVnS1xce7LC4L50Pr5Ka
Llh/TAf9rfnFruM0+Laa/NeqMAU8N4t8f/QoBRzJc9UiczQIbx7zTrCLg6B3
VU5PTfNA+U/6uMcoDW4vR886s9rifdbXhu2BubBr7s9NUyINyDfvhFz854GM
3h/YCSplkG29WeBxLQ1qohjzpaOege8f64U3U8XQKX9ys20TDXiEAseF3MKw
sK07++XObCj5uv/N7SkanPfcccdKNxxVOzcqv2XS+dv4te+IERUu+Wp2b82q
hRxDU/kZuq9PcUs1MJShgnLe349HvzTCzW2ebxY06qBcNd913WIUis+W+qn1
kiBdnfVYpBABDDdKpTwVqUAa3PJf760GWHRKvXXmPwL8t6M+j8duDvjYx8tK
BHrhxYEwKx7jDvDs9zk/f48CPd85+jqMCMDZl7pNa4EAmzosLMNaKaD2sOb7
19FWmPTR8RI/mw+ZK9cNe4Zo4F+cxXJuswd8CLtAlTyUD8wvDjXZ/v//EYZ+
KOa//4yuTPsGuQrKQfGa38M3+TSoPCX6W0AiBGQ35vDw53xYbuot2t5D7/M6
d7PzPTGgkb6xnD3cBniOXbNfnwqV/x7u7dhTBSoZ50+K7qwETkO5plVjGhyk
eYQynKoA9jMlRKO2ajh8r5Kwy5QCX5yzvwWy9YC0w8WJ/IFmeLy6rURGjgp7
eOcCpZ2bYeftFEv12lY4nWVu7UGfv4E5X2r4bjZD3A+reQ7RNigOn+DtpNef
teCrZwfUQPtq8WMO2yzQ7eF+ZEDfF/OVUxv5kqnwZOhAtjl/ApB2EvydqTSQ
fVJ/6JtYIlx2itd4nJ8J89J/5K/Q++rMnzOF7Wq2ED/WXerlHg/ez9nONSzT
oMy8hSnnpBtWHovOdc3Lh+0mVx6q9tNAmUjaNqkcCls2dhqEaKZD/7bYG170
+DfsdsrM6gfjbbD870lCPsx9NPDY1UG/RwJiUU+5v8Mq4+QDkCqGTQlR7x//
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
dQ2KRHY3+XU24ckqqgSf5yy4P55M0L6cjv5f3Bw2tgwj1+i/v+ShHjTJ+1U3
o89EWzedjxfZOUu0FPf7GUXCs1Fvlzle0rE9f1Vxl1QrqKs/FMsenQG92ofh
Jux66+XMj7CP7sO9xmlaTi/Hse/tou2leTrefC3+c86UAl66q+eOl1Bw2FDm
1fmhYdjQJfvp8LVaDDu8VMU7Ow7DgjrEgVImjDylXgotSgeXjfVFlfozIDfn
dODMrV68pb54MYJaj7nz9be+J83iiOyjy5l10Wjdr3+sHIrRO+9S5K/qWZR2
DVPM3lGF2UVxGT0lLbhq/Jt7fs0M2j1zaxHx+4yKrIEOgzfdmDIoMSrpxM67
mgNKz/Iq8aZlyukwqwHIHasJ3nKKiWbvKHu3rh4EjhPX3MJnXoO374XF/2xn
8IGDkFhNbg+OLr9zJMX14H/73pnPxbNA0eVshs+aPvgR1DTplVAIWWduJQQW
zMJfiYMnBcoR3ycbDvS87oCNf69dlTGYhqFrpgt7d/fCq3YvRbJmHzzuX8rz
lhpF0Z5ATe0SBvqJ3Si8EPoVHLOC/K8PT0P4y3R/P40u+BiW/OdaQxJWr7tV
Mu08jSqnjj6Y4xvC8SSXYwFKVKQ1bNmZRZ0Eq7avwqu3l0DpgkB2HYOK5SMF
3EcryHi1SXCYwP7dJquTNyycJnFztMH3pxpUuFxx55eKez04jkacWvORgpe4
JBKOGtPgqPYW9bmXcdCz8rU2MJyOf9Iql+bYzyn5Inm6ia8O/qyNDHjwlY47
E7ZU/refBE2RXLtes/PdbA0ht7KWDI5PgpgiclMgEel2eZ48DMmRP1Iev2Hi
XsrdmVtn2Xk4b5l05EE3WBZd/BTL/h7z/TWibYbRUvRu9e6r3bCyeU5W/zgB
YcthriVXJjxxR8UiYgO8ds303Ws+jrpWzToq80xwVzqewvGzCkZOkl7KRTLh
3mimoPT0MH7arW28rNoNpL7QpvDgHmhfb1v1NpkF69T9prRW9UGLza/SP+/o
uHV0YujfoUFoFlqqv/t4DHLMPSaqFCrx12rdQxmyBGw9SuG8+4kJGw8IqMZU
jOLnEWpshTkL8vQ32WwpqAKtm9Fa4cv10M4inA7wbofqkcyb3tUzOCS+NuxW
9Cc0dlap6+VmoGoerZ9fiIycXl0rNyO/gJb78JWv98oxPMFm8MbeWXwmohLS
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
P/3KUxXXB9OBVuULO+sh0K/rbul2AoTLO4oH+hJA/WmfgdbxZviylfUXh84s
7BARjrbtngfm8drcgzL18LOKRvO0+c1XEvZ4e6wGfo5mejXPOQEx83rKGWYK
2G/WRJRy9KPsf3E+2vXBIHSPV0aFNndHONjRLbQHf3CV5S1nxMLDe5TNf60U
2BcU0rxftgtdSE9+zrolI+eiYpXgNzKMFbq7sJr14/PiPEJIdxTeTumXtjGm
AEfW6ws9DL148PVDH8O7mfgT9DVHDclQzGXNvZ9/CB26Ep6fW/uEMZM8uR9D
KbD5p/2UbnE3MhfG8I8+WgQ9Y5bti7uLkNhxUIZ6dgYC18WfgPIcRNcY0/+8
ZISnWHPHHszPw3rsl0HRsgBIn78wvf+/cjj3VrX9VhMVM+4f6zt26TNcklJ3
5L/ZDb2Ozj7mnymYf+PgmUniLExU+ZOEaP505TxPJfnnLHben6vZfbIHJkss
9CivKNAY176ilxKLVyeYlCzLeuDSSdvhrzYUGPd8f+zQgjk4Ksk3bbp2Q9T4
7VSfYNr+/PtWp9uehdY6EbYaFr1QbD8S/+wGBV530t1/RMvLlOc5aS/P98GH
cftqYSEK6A5obIuxTIWxZmaBsuAE+GD4xlNzjApZp9c9/ol8wYzaa72HD/lB
b+UVbn0av30f6eb9q1CPW9t/7zu6IwySvwS1jdH4TThHSaqXvRrzKkKFzvyJ
gBXy5dgMGifLLQu2eQaVIKM4zx3Xz/Eg0T44oDJJhbuiQg5Wzwqw69JfXaJ0
GWg09GZENdLml/dvEndaPF75sLaxIlkCtxkCW1mQ1j8fjDwN0/NQ8+Dswzu0
PCFdWil+U5gKpxozOV256pC6O/H5ikEtFKmU942LUCHe4gNvzGAtPt2MORC+
kgBL6ZouxjQ+PL/l0aLUqU5MCBRqv1+5BAENP/44hA5DmgLDk+Pf+4E3aX/2
jcUluPrD5rNyLc2DTe4c1BUYAKsXPpoN5CngLOR/MM23AFttfxdG/u0DL7ac
WjrjafDTMtjznHmelj9nvdq/DYJtSWqF58tp2Lt6oHx7EwFCWFOurtDyWomI
D6/xp2nYri3XPiE0BUYyvq/KwmbAnTl25VwAAbr2E8nVM1Pg+OBu18bSCMyw
2nSSVPqgvCGI3yCRBK3efu9M/naD3oUrRuI9fVDS/ICVRYYEz+w0v6uO9YIF
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
tZb40RvRCAKSes2X54+irl7wQkXNYfg9yGr271eGhRv4aiSucmCR/9Cx7pR2
lBj+/+fTRf/6LAz/q8+CbvYi+7N4Eb6lfQi+WMDFm0fGl3t45OHubcEq1/Q+
oeYWunBVMhfPNUYbZzqX4leVp0GX63JxV2vVGXjJRb39YQHvZsowsUJr0pK/
AtmTu6pWN3HQaHX6g1fvmvC38QqTWeVKVKsUiqmf5KBDuuJ03/J6XNd6sy/0
RyWyBu2l2LJcXJ72SJ6yqAan3uvVTta14nj92iuPeflTRU3oZCy7BG95lMu9
Gm9F9m+5t4vvc9BbaXvZCY1inDf/1derK9pwt+x5slsIBzXlHosSdhZi59cp
bSu/NrQm3mm785iDXhdM9+d5f0Dx3CVVZV7dUOv8OOsPjGLgQjvj2t/dgAoF
vgmh3bDjl5u2vuoo+l/s65y3oQf2VKYEqfHGjy9gzlzWH8Xb8n4041/dsHvF
YdW7zt1wpMxHvtN0FKOn1O7ntXbDJqo2r0h1Q1zKeg2VVaPYuLRPMv4yL06m
wCr724VQ9fVNhVYuF9SC5ERfPctHSunxmUsZeZChO7JhyWsumI3O2pfpl+FW
ZtST0bFcGGVbGkQ854LS75fWyw3KUcxg/Jn5fgJEvX02f63yGEwwV0lXP+4A
gZ+T7wcILeA/JixXd2YMAl4kFXRUtoN5PFVn5EcTTBXenvxGGAPftnAD9cpW
UCcXnN1YSIC7IaJnv7PZQK92fXIlvRPWE//5rMI5n9U757OkBaR3pjxwhqqw
ia8JtwexsW54Jc2RjYp8/3jtf3EDZVfT9EIPMDd7vmJocyeWVy3XKFPl8PLY
WOqLURfQUH6xs2vvAC7rOp1zO4+NAsZyZl7kExD/9Gnao3c0HFJQ7AkJp2MH
lJ55OsbA9Xf2CccXd/DqR8bfke0k3DpzWWnTRgaqKMnNUwwfhvVXLZxWlPXj
xIWs/pyxRhAXuhC8eyUHTm5NMjnrSYCrgdPnqoyaoD/KYMPwnzGY/9Qy71gr
AbbsJjI2BzdBTaPb4BnuGLQT3zXN29AK573WvVnR9RiNr+dLDe4Zw8yYmdNx
A72o+1lva2/rOWRUCARsbBzDVRXOr/Yc6Ubxn4KmvyJjebprkV06h41sJbdz
a015dVHJZtseIQb+beKINy2kweIbCwn7Aj+CC+WaM8WUgSvHfcXbo6gQyL/4
WMfFQlB/a5I0LshAQadMviZxGvSY7nTtU02GKy/35xzi6SoBE4sXuXup4Mgf
J8q0/QxLDy5V/fGDgZryQ6pVmynweg1e7jtVC5MvXzRq5dDRrP5iW48PDXQ3
Ensk8AUuZg+b33el4wuJb9zxuzRo/VY3u/FXMf7d9SbllhgTxZce3Sk5SIYu
P2VlR8E6uJlu5bXuGwMXa9F/x62n4LO8DdtNR2rB6tG9NbFvmTjz1faQ3BkS
FO2OXOy+hABppWX84YeYmJN9rumYORk+GR99bFDXABlte3ZRM5hI93ZxLrAm
Qc7go3Y9YQI8fvZxU3UqE4hhjgorvFyBWhaW37qWAkIWX5ROT5DBbFfzeT4i
DaL9VZJiTfphnt2C9DAtKjykOf+NLiJDZkaS92cgQqDn47xtZWQotl+Qkaky
AluU/6xY2dYHlup2e5cgGa4N258J2jUCds1XDgV86YO2s+/VVteQAZKv5e6T
GwGxVgmNbfQ+kPSnOwgtYEHx4MoRv3tEHLLV3K+wpxXusHZIXV/HBAdbhz18
DWQ8+MGdNL6uDlQk2YXdI0z42Px484dYIm6nLFR1i2kFJUqCrKoDHW6kKdk3
RNDA2l60aE1nMa7c87HTMY4OWqJNusGPaLA85eLR4+IJOJv6r79G47/6a6hn
Ir/vig9BAWFv5+I1RHSz2J2tkzwKiaf+8cVz3HWOB2fZCugaDWLxGdWMISM2
TIpNfuYMFMJ7CNOqmBrEpD4+icafoxDbXHX0TmgZVJ4UqWIRXKBVxWtY4esA
dJyYMcwJZeN7l3/82RwnzfHxzaa1kgt9wbe4PpZwtwZyZJbZit3hosmmf/zi
HM+d4xeec/POa7jCVPzYCf2sfshLEew82cvGl5s93hz084TqG3XdzFsdcEMr
UuzGYQ6KU2X6aO4d8KtfRlf9FBEcaJ+7195n4uYHhgskRBthR7Rtd5HICKxJ
sCi8IDaC+w7EinOlzoF/tH4qh0NGlW2FjRqNTOx/dCx7inoWNNPbpNp+k+HU
rz9pu6uYePPQ0vSNLsXoohB4wGHTKPYvFAx+8pyIy+P7wuMX5+Pv9Mknh2ij
eLxUpUWgfQhN074JNeaXoW/rp94BCxYWd7uY0j6R0EI5/WOBbjn6BxkQb65l
4dbchDWXpkj4Vd5k0lSpHKvryTw5zcQXLVqXBxLJ+PM767hKYwdkWh3OXbaI
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
QWltz5ppczqGLnWql5Anw4dWirswry4pWvm7qGo74pd7Cz7+HaXDgpT2Jz58
/XisJLbTtY6Krt5CFePaVIjOCb8c+a0Fj9R8X7OfwEQRyS37/TeR4NCrhwmE
/hbk3y2b+7WHiaVeNIb4GhLo9YrfkXWrxwmsWESMGsVYqUuphm8GwcwlucPx
tgVeb91xUNCPjYUXM1cJyQ3C10++YXn6llgrz95uasfGsPv8p1KSBkE36P/m
YYu5PJxvctfFfI0NvhM5Vqi3eRTJ2jF+7eNEWDbHU+c4dY4/ZveuE9VtwUza
DkuFhUws33LbZO8pMji8/nd/5c/dX8lz91dt6d7FhkoELNk7r3RLPwOlS6D1
wjUyRJr93/i0ufibC24079NoQBn9bRvTwkchf8zxquXDQQiz2G3MGmhGK/10
+hKer4xTU/zNtiDC2JLzCgVogWserTOd78KGmrOHfSQuDcL6jL5bDgZmGB4b
Fy1qPwYNrfsyy0/2gsp00qfiaAt8oth45Bpv/B1rcWUb50Gwknv9SA9s0E72
qv7eTaPwlSIV6/CdCI2p/+JEzMWpn4uz/kCrspBpLaayhXUyTdnwqTjjt+L9
frCei3NiLs63uTg+WsuOPt7cgm+Oi9IWzPL04Z6eqLUXyXDKsZp0tJq3bhfy
Nt5OYoLnDauGuE0UiK+682OtbAu6xcSqmV9ngJrQl782UpT/OX5T3sU/KdIt
WC6uLN/mw4BYk6WBQWKU/+97/fd8anKytr7a0IKT4fqxs9MMEMmOWt7qzLuO
/K8C1i7qxA0B/pPrNrNA7c7lSUfLIfDWnXrtndmDbncvyjxRpkPMgR/0W/vI
IN82TH/1ioC26l2W9Y/7kM35ZHB+ZBTdJcbqLnQSUHb5OTFdq17seqs7rLyF
jXnn/n5zzyjFu0I75zvJMXDkZsAzA14e3z9DuR1vUIKn8l59Swxg4EfnTl2v
vVR8DMo7Tf72oXvP8CPnJio8l2tUi9KkQrqhofqPR0SMaDvXt+B9L3wv0LC/
t52Xh9OF9hm8dkCnviUl0np0eKVbLfPhDw32hCTFgnEXNnEet5+6SgJP6vzy
BEcGbEm94qw0TcJ0Z9tR8q0MqJCLUBe6yIKUuwsV7MOuYzr/gWjRCTLcrf8t
Z8HLt3v8/vH3czxgjh8/b+vA9ejCEsGXsT86eev1NFVdP5vn7x9tPT+qPIRv
R8xfO8X2gTW5vGgnmQHFfGYJC3OIuO5g2aI1gTUwLdgdSsxjwS+Hf/2b/v/V
12n7Pz5X+kRRg/PmbhyNLy9p1h0GsVbStlFnJsTcPi357e15fH1KNGvyKi8P
Sjlr0xtGQMByC4Wk0Y1r9r2cLsjl+Q7FwrUaOQyY+h/r9rfKk7zDsBvVrxx9
vu8HEUyYS8q2BzLA3yf6elvqFfy6UU/7oAEVEuadS/9WzQCnO7dH8rd0o539
N6W6hUT4esHui8hWJrgbBTx6WX8FXTS36FKkufjCwC55it2EujUPtXYn3wLJ
5a/L9xtwsVuwf5nOlQbMvuhm9T4yHMqFmzwLLbg4OfBO+9zOejTVp+W1XgmH
ofi4GsHrvPHXuSFLLGvxMOnF2K9HgZA0YSZ26iYXJXfW6x6ercGbpQEWrwnB
0CcvLezBG1/72YD/hnktKo917xKW6ACDl/tVtz4hYip6ylRcZ2L6Z+6zfG47
BBVSKAYvhvG1BJsTNsXEe0XcWXn1bmh17ll9e2wU/UteHfrN7MDNikHfOand
4OptN0LLZOOO3Okt+fYtWPtUTOfdg24Y9UgsCk9ko70/tffkNgLWW9uFXevp
huO22r7l1Wy8nrxXxMChCdtJiZdjlXvg+6s7w1v62ajefk9HrqcexcN2NRNj
30HBlO45fykuJpeejQ2wbsIt+SdeGlZ9AIlzTsuqNLmoTyi+eKerHkkX/h+6
3jwa6vd/H48KKVkiUkKWorK2aH1UtohsJUtFKWRpkbJWUpZsUWlViCxJ2UJZ
HvZ9GczYzRiDYTZJKoV+8znv11/fc37/Xuc+z3k+7+d1X4/res65H3eaNsn+
Mzim9U5WPp3C1Vayl9dfq8SkyeKg3wHZcIIz+YKpxcIbm0881+Xn8vJGjKLm
tkRoe+sc5PCAgUTd5ctMBqiY/s/GFP1zoXm7pnDUQxaavRxSXxU+iPdNr7am
dX6G7bZXZbQs2Lg+0lbttUgf2rF4fnWcboC5r/IvL71hosf8lPLXb0P4xND4
1qJYE4D04ZnVuSy8attc36HShxK2x5NOuNaBOs/lZ5HHGRidTFyva03F209W
86WbJYB57Ja2XF0GbrY8ccDmyAjymDLCZ+qbQO3hNfGb31lYIJLV0FTD5dlv
q7mie7WgzudkeLR8EpdXOi0s3zeCXqnSv2OSgsBElz07R5zAhKBY6Rg1bk5X
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
+96ujOLqfWOu+amN/Sj8qt7uDQ8bzlZZeS4pIuFddsxcUXodrl/aHPr8Nws4
hP/uO7D9376Dhv/tOzBusdn+OJ6EMyeEPmrt0gcj8uwzl0I2Ltf6715p9f9n
r7QQ1TzO70wPZv/0lhh1IuHD9kt3Pa4xYYeoMOG5GgU7p5jzB3ur0f6T+fKE
NSyItZDa+NmHjJcLxne5pxLwcrvvuXqu/24n6MdEK/ahScv1YoNMBm753Bi0
g5t/JsOWmdFkaTh3weX1uqRqjLTunr53lwE1cnKZ1zyoeN5wlr/AjYBPntMu
FVygw7ctvUmOV0fRpnN9zhLZUfRa8djDmpuz3t93dPpJHEQjekWTAoeCU5rh
Me9bqWDaYblvWUoj0vWVHV/5c1BJc5+eWPswnNH4717a3//bS5v0v720KwmC
RRlr2vHU59nxl41MhJ+6o/ejyeCf8H/vpR3cXE7p8GtCaeOb5g4eHCgXCaw+
2DEMxCJWnvlaU1R80hM4ZDwG957b/rk6Ogw2h5zll544h2Jth7zLFlnQbrUs
5PtHMnj6Wmo4y7ShAuHwPuhhgtHKPSmFiWRQO1QY9Ue2Dz8vBC9EZXH1LXXc
cmU7CdagtH7ZVBlONwWq1WxmYrt30T3hLCpmX95M/NA/iE+vyYSozlJAe9ba
0LmBCvR98XxxrqO4W1ne2GfHKFieeM23fgsDcjb9/+cSL/xvLrH+pdS1tsRO
LLd4cW7OjZsH/pCqwxpp8PJJWYfbMhJO7XF5d8mrG0xZFnleRCZYKT18YFJD
woKqJ3edGmvgsaHTsquCbNjlZtQtuoOCe7Nl5e6cMoNXT4siL6ewQDWNLyAi
ewSZY9t7s1v64Pkkj0uKMgs8l+bK371PxFXr+Qd59zdDn5iRy8rHbOiN/O+8
37n/zfsV/t+839WieoeOxt3CyovP9jd+osJS+9u37a4zIanrkKGtVQ++X7CX
7r9KggO6W4XbnJngzKAudV9LxnwNQscbcV2I1+CjxlxhQ8o19lsvLjdLf3cI
+O5PRtc7k4sdcwws/TIc8TGwG3xStFVe8HF1JqlHU8qdgmFDoUIjRQSYW8F3
SflpI74p2bdJ+uk4So8HPIt1IEBgnFrUKqkBXOI862Zkx0Fnbac6AS6/CXvt
iRhMYuPs7kthmpWDqHvL686nJX0wpcT7tbttDId3ynnGajXjry6der76LIju
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
6PlFFm+wHTy8z+9wInqr8nBqfhpDmg77ecyl4oP8DbVmH5vhikJVZXgcAT0t
C+t5X9PQsv+1ZcWHJkj5W7rZzXwCrb+4Z3KXUPDjauaVx9NfIErgzI+gaCI+
9Gve98CQikZ1L6Imxr9AdJmu2hfjCaxZdL0ZKEzBDlvcsijYDduOli7ySk7i
+Ngz9bnnZBTi6FwV+dYNIeCr0LhtEj9oRB0XdCbh+cFL/DLzBOg+nCvJ4KTh
tbLFKuX11eh7zEmtoG0MJPcYCYxY0XBN2VCxs1YrrjN571rOSYBnvRAdVjqB
G/dk2Er+puCmuJwgYdVqGOrkeJ0sM4UOIvV/Hs6R8Q2Jf3i1rxZ+tBw3snGh
oVfxzL8263IMqd0033J6FEqvD1safaFheaf1vkMWd1Gc19C06NsINF7c93Bq
cRKDVMwCTMzJGHyk96StdQd4npkYvPhlEkWqX8/Z2pJxV7NWkOa2TuDXeZLg
YT2FBkdbxhsLyXjhc1IC+WIdbGx//sVswzgO95jkZBdRUdHdP26Oxf9z+QG5
+msJuConGZh8lop7Jh5GiQn2g/sw/cAvn0F867FJkXGOhk03Aov4/HtgVT84
prJjFAWcZ1WURiiYFb2Z9z/3Xrg7Zvb1pVw/tskwzd5dpGOgIJfGep12sPCf
qNPhH8RPqXn4bQ0d1xLi2gb3tkHU4TM9/jH9uMGcy1B0MwMHJ9LK9/7IAbno
9f95z/cgl/evUgcXBhIv/t4avjcbptnuc8sSBzFqnhTXK0tHqV5BvR7vBrin
/fSeZM4Qhj4aK/jCTkd9V/OwBVID/FG4HPJIdQjnZWOuXn9Ox2XplugwrWLI
dd6fM/G8BxW9tkSBNEu3v/F1mLA3gKhK0v6TJ7qxmU/WXN+NgXov/J/xKdaA
vZxBmuaRflzmK9wGdXTs/pz+QM6qHnbLb7+w6wqL80WCvd7XMdAkaOJnEHca
PKjXPV4+b4Gpb3FQKoMJvQ0iivNqtfglrETuJI1W9SFSZd+bVCbUVofkafjU
Yp58LKeWkiey+Vvu7c1ljT/+Xfs8qAYT/ms5NWNMw7ptz8v5tyIU16e+vhc3
Cr9ldxOGq2i43viDr8+5MkhVnJeeMRiBwdWkufvKFIyDJeI582aQyelLYvkg
DF1zsfGqj4eBdQcP8gTQwS7Y6QjNdAillnwfk8xOgV+X4BohVzpscf+tl1U5
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
ftWqFov34NF7D45bPkxHOzLbJ57BWbT/fvvD7aE+VOGkFCR+rcJag+hw5xIm
bow8rrap6ASuili4s3mmBr/9nr0vcouJCsbDwUKrS6Ci+//68Z35jx/fpor/
7neWLZif0iRTglOuh7MfdDPR2tbesfHxOyiv8XeJ8WjEL/q+Mi/mGPjVzUqU
26wGRpL+r7/hyH/8DUt2nJa5YJKH2/2v7RRl5eVMnut+ZeFMyPnc5vSNkY7p
GZrk7az6qVphKd+qRBz9bmzJxUbAo7Knnt6bo2Ht5uHiVZRGCL35tX8D3xCO
WGYMDLH0c40Rmldt7wV1+SukyDfdGOzYFhOuykCtraaXTQMr4NfO5we3UvtR
y8tX/vChWbywN2JdSlQt3JMxNFA6OMHiL2tJL79pFOsf/RER1gdRNwddD33s
xU97AgbZuRl4+cRYTsjGHFjK+e/+LzZsL/+rD8vAmnbrmZdpAAGC6l0Ds7B2
p/pi1jhr3vgYp+zji8VX/m94HxYzIZvXzetkVBXmWR1IL9lHxvpzVXv9OCbh
QeVXP68jQ6D6jU/hRCUJMxXyRIt7yXClwUpDk60TYsZ7i4V7aCivI6l90H4Y
lPd+FhUI6wW75wY3+V+SsdcuDjIvTSLXD2FCekM/KOT/X7+Pov/4fZQvctsX
elVh2TPH6WdFDDSzlLlpOtYO9751Pr9rQEXF75dzbp4noulXv0Dy02YokejX
5hEPR//mG4mvLBlwd2RmvnJ1DzKzVw6/d+1G97zdHr6eDAj7w2aR+PQV5v/k
+T5ZRsIAmp79rnYyDvWDAFO2E1bFz4qkkWn4oU3U6cC7YfTsPpBmOtsD20LC
Rg22lED0LZEf8wkUUN7KGUg3nIIGscf9g655UHHwgasGq69ypN+/vrQxDTzd
9A+WS6dDgk6qeQCrr+68peWRIfMWxw0j9ud5VkGlVPjzoM8MIL/Vp7+S74Aj
44SB/S1VkMdnVSZQwgTXbXvX/c50wktN6u/V+mogvrdhb6sDE+bGg53jXYrh
o4W4TYlSHTjoPJoN/jUFU1ykk0kxZCiIT2TfqBMGpBt2w3QLBtwpNHweyN2D
b+88Cd7+Ig2n1+/9fb9/Fr7cXQ4uI/dhPSXOp8iwG1SuiTBcHzEgb2ZJY2Yl
Ciet4tufhMXAlKjOmvusetA0uaQfHVOFV9J23JPKocHHzwz+3S7DwCX3GtqO
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

                  "]], {}}, 
               Method -> {
                "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                   GrayLevel[0.3]], "DefaultColorFunction" -> Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}}, {
               DisplayFunction -> Identity, DisplayFunction -> Identity, Axes -> 
                None, AxesLabel -> {None, None, None}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, Boxed -> 
                False, DisplayFunction :> Identity, FaceGridsStyle -> 
                Automatic, Lighting -> "Neutral", 
                Method -> {"DefaultBoundaryStyle" -> Directive[
                    GrayLevel[0.3]], "DefaultColorFunction" -> Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}}, 
                PlotRange -> {{-1.6500000000000001`, 
                 1.6500000000000001`}, {-1.6500000000000001`, 
                 1.6500000000000001`}, {-1.1, 1.6500000000000001`}}, 
                PlotRangePadding -> {
                  Scaled[0.02], 
                  Scaled[0.02], 
                  Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
               Method -> {"ResolveAsTriangles" -> False}], TraditionalForm], 
             ImageSizeMultipliers -> {1, 1}, StripOnInput -> False], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "red", "template" -> 
        "Assuming \"red\" is a color${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"red\"} -> {\"Color\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Color", "desc" -> "a color", "input" -> 
          "{\"C\", \"red\"} -> {\"Color\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "River", "desc" -> "a river", "input" -> 
          "{\"C\", \"red\"} -> {\"River\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "red", "template" -> 
        "Assuming red${separator}Use ${desc} instead", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"WolframLanguage\", \
\"Red\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "{WolframLanguage, Red}", "desc" -> "red", "input" -> 
          "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"WolframLanguage\", \"Red\
\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{HTML, Red}", "desc" -> "HTML red", "input" -> 
          "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"HTML\", \"Red\"}}"}, \
{}]}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.41400000000000003", "parsetiming" -> "0.256", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP4160129e0c9b7dcd95ie00003f9266de7i72dceh", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "1", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa4161129e0c9b7dcd95ie000027g6f2887f4e634i7794153569472399936", "version" -> 
    "2.6", "inputstring" -> "red heart"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 4, 13, 35, 40.3879133`9.35882629535537}, "Line" -> 
    111, "SessionID" -> 26971751672665615464}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "red heart"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{475.6, {269.41904296875003`, 274.18095703124993`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.879138921714771*^9},ExpressionUUID->"33f8d74c-9944-4b72-90c5-\
912470b214f1"]
}, Open  ]]
},
WindowSize->{536.4, 574.8},
WindowMargins->{{Automatic, 0.6000000000001364}, {Automatic, 0}},
TaggingRules->Association["TryRealOnly" -> False],
Magnification:>0.9 Inherited,
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"3ef2f13a-4376-4c56-8b46-b0ac9c23633e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 297, 5, 26, "Input",ExpressionUUID->"9987bfc2-17ee-431c-b991-267b194bba6f"],
Cell[858, 27, 245, 5, 25, "Input",ExpressionUUID->"2dc6c530-b5cf-4f3e-8ffc-6bb541a307a6"],
Cell[1106, 34, 333, 6, 25, "Input",ExpressionUUID->"3f5cc84f-fb9b-4aa7-a63b-56700a3cbd78"],
Cell[CellGroupData[{
Cell[1464, 44, 1164, 22, 78, "Input",ExpressionUUID->"164c5184-6afc-4665-9c2e-e906ab3d4901"],
Cell[2631, 68, 22890, 408, 127, "Output",ExpressionUUID->"56e2f065-d6b1-4f15-b915-a9bc2a75cb09"]
}, Open  ]],
Cell[25536, 479, 285, 5, 26, "Input",ExpressionUUID->"a455687f-f2c8-41c3-b74e-65ee88f1d9c4"],
Cell[CellGroupData[{
Cell[25846, 488, 375, 6, 43, "Input",ExpressionUUID->"212ddc31-92cb-4e7a-8ce6-4425d4e2bec3"],
Cell[26224, 496, 4247, 90, 58, "Output",ExpressionUUID->"4aded084-aed7-41ab-a50b-54d57a50a845"],
Cell[30474, 588, 355, 5, 28, "Output",ExpressionUUID->"2b9def8f-3cd1-4280-b4b1-7d33a4c914f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30866, 598, 277, 5, 25, "Input",ExpressionUUID->"17acdf8c-3f7a-4f6a-b716-20532e614c45"],
Cell[31146, 605, 335, 7, 30, "Output",ExpressionUUID->"4c9d91f2-bb3c-47fd-bd32-4aa0f24aa3b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31518, 617, 1283, 27, 78, "Input",ExpressionUUID->"fbf3b259-6361-40a5-9337-e0c4fa6ef1ef"],
Cell[32804, 646, 168104, 3015, 166, "Output",ExpressionUUID->"7f9c63d5-298c-4137-a98c-8199dbbf6e5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200945, 3666, 770, 17, 43, "Input",ExpressionUUID->"4467a6a4-d3aa-4316-bdd3-0cfc1e3f0b29"],
Cell[201718, 3685, 447820, 7990, 171, "Output",ExpressionUUID->"87e50e9c-c33e-40dc-b425-1cf67a4a5fa4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[649575, 11680, 1119, 22, 78, "Input",ExpressionUUID->"cdfbfb23-ddd3-4ff8-b92c-6e9b07b6fc86"],
Cell[650697, 11704, 333, 6, 30, "Output",ExpressionUUID->"31610e66-0b46-440a-b7ce-d453e1e57b75"]
}, Open  ]],
Cell[CellGroupData[{
Cell[651067, 11715, 1086, 22, 129, "Input",ExpressionUUID->"2d208638-7acc-4864-a4de-3d4bbe5a9289"],
Cell[652156, 11739, 28459, 518, 106, "Output",ExpressionUUID->"ade5a4e4-8a73-4553-a7ff-c448ee77fc9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680652, 12262, 296, 5, 26, "Input",ExpressionUUID->"512416ef-32e7-4b0f-b021-9927074aeb06"],
Cell[680951, 12269, 52428, 970, 136, "Output",ExpressionUUID->"3e71f617-1d8e-4c1e-8963-b7c6d8c43cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[733416, 13244, 153, 2, 25, "Input",ExpressionUUID->"516e3391-79ed-40d9-8d5f-ec8ee2fd972b"],
Cell[733572, 13248, 4052, 87, 58, "Output",ExpressionUUID->"b977245d-f2f6-44ce-bb97-072d8f3dcbcb"]
}, Open  ]],
Cell[737639, 13338, 189, 4, 26, "Input",ExpressionUUID->"0f4000a9-bf3d-4427-844f-a308d0023775"],
Cell[CellGroupData[{
Cell[737853, 13346, 421, 8, 43, "Input",ExpressionUUID->"b7cf4906-4e28-4828-addf-1df00e8bba7f"],
Cell[738277, 13356, 251, 3, 28, "Output",ExpressionUUID->"fb8ff56a-8291-497a-8a54-951ee8c6d656"]
}, Open  ]],
Cell[738543, 13362, 322, 6, 26, "Input",ExpressionUUID->"d560712e-69e7-477e-90d8-89885f69ecaf"],
Cell[CellGroupData[{
Cell[738890, 13372, 244, 3, 37, "WolframAlphaLong",ExpressionUUID->"39bd07d7-a8c6-413a-a8d0-4ecf22be649f"],
Cell[739137, 13377, 53390, 1070, 887, "Print",ExpressionUUID->"4b6810dc-fda0-4f1e-9659-2fa6f6be5a41"]
}, Open  ]],
Cell[792542, 14450, 293, 5, 26, "Input",ExpressionUUID->"bcc39ab0-67eb-45c8-ba59-92da62aed7a7"],
Cell[CellGroupData[{
Cell[792860, 14459, 532, 13, 36, "Input",ExpressionUUID->"43486d10-5d50-402a-98f1-893e3da5d6e9"],
Cell[793395, 14474, 473, 10, 39, "Output",ExpressionUUID->"df1e0342-0af0-4171-bf60-741593aee688"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793905, 14489, 424, 11, 26, "Input",ExpressionUUID->"b45842c0-6103-46a8-9086-a7c36ea2062b"],
Cell[794332, 14502, 3475, 75, 214, "Output",ExpressionUUID->"ad768eaf-3690-4fa2-ab50-4061542139a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797844, 14582, 14473, 353, 62, "WolframAlphaShortInput",ExpressionUUID->"abd3dab1-29ba-4480-9a2a-65de20f3871a"],
Cell[812320, 14937, 3456, 75, 214, "Output",ExpressionUUID->"7757def8-29f8-4487-b8c7-0d8d8a92910b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[815813, 15017, 186, 2, 37, "WolframAlphaLong",ExpressionUUID->"8e8c5066-8f5f-4f50-aeaa-a1d88d906770"],
Cell[816002, 15021, 99902, 1966, 1283, "Print",ExpressionUUID->"e70255da-1547-43d3-8bb9-52f964f0bf09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[915941, 16992, 442, 7, 37, "WolframAlphaLong",ExpressionUUID->"7d88ab07-692f-4166-b192-1e30a18f5836"],
Cell[916386, 17001, 632181, 10446, 552, "Print",ExpressionUUID->"33f8d74c-9944-4b72-90c5-912470b214f1"]
}, Open  ]]
}
]
*)

