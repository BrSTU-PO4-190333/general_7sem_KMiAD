(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2895507,      53243]
NotebookOptionsPosition[   2890776,      53152]
NotebookOutlinePosition[   2891147,      53168]
CellTagsIndexPosition[   2891104,      53165]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["1.", "Title",
 CellChangeTimes->{{3.8802909703615103`*^9, 
  3.880290971764484*^9}},ExpressionUUID->"cc4bfd8d-b628-4394-bfd4-\
da4dcba9265f"],

Cell["1. \:0412\:0438\:0437\:0443\:0430\:043b\:044c\:043d\:044b\:0439 \:0430\
\:043d\:0430\:043b\:0438\:0437 \:0434\:0430\:043d\:043d\:044b\:0445", \
"Subtitle",
 CellChangeTimes->{{3.8802842652599993`*^9, 3.8802842716664953`*^9}, {
  3.880285783204224*^9, 
  3.8802857979792705`*^9}},ExpressionUUID->"dd937140-3fc8-46f4-94aa-\
ddb5370f56f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<x + 4x + 12\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "\:0430\:0432\:0442\:043e\:043c\:0430\:0442\:0438\:0447\:0435\:0441\:043a\
\:0438\:0439", " ", "\:0430\:043d\:0430\:043b\:0438\:0437", " ", 
    "\:0434\:0430\:043d\:043d\:044b\:0445", " ", "\:0438", " ", 
    "\:0441\:043e\:0441\:0442\:0430\:0432\:043b\:0435\:043d\:0438\:0435", " ",
     "\:043e\:0442\:0447\:0435\:0442\:0430"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.880284368987542*^9, 3.8802843915123944`*^9}, {
  3.880284481682788*^9, 3.880284485578417*^9}, {3.8802845372954235`*^9, 
  3.8802846772391543`*^9}, {3.8802848955149164`*^9, 
  3.880284910352332*^9}},ExpressionUUID->"bf3fc263-ef82-4352-b76f-\
ad32ea8ee1aa"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "x + 4x + 12", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x + 4 x + 12"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"x", "+", 
               RowBox[{"4", " ", "x"}], "+", "12"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Simplification", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{"5", " ", "x"}], "+", "12"}], HoldForm], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[12 + 5 x, {x, -3.6, 3.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4344$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4343$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1008842$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4343$\
1008847$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4344$1008848$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4344$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4343$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1008842$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4343$\
1008847$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4344$\
1008848$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1008819[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    12 + 5 $CellContext`x, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$], 
                    (
                    Piecewise[{{
                    0. + 3.84856188353891 Tan[1.5040801783846716` #], # < 0}},
                     0. + 3.84856188353891 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$], \
-3.5999999999999996`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$]], 
                    (
                    Piecewise[{{
                    0. + 3.84856188353891 Tan[1.5040801783846716` #], # < 0}},
                     0. + 3.84856188353891 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$ + 
                    0.0072, 
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$]], 
                    3.5999999999999996`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4343$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4344$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1008819]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1008819[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1008819[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RivjYS9IsI6NSQNKUt57S5zEwrWD7WyDfx58dpM0a1cppgM0pQ+n+tJ8vvvuu+s9PxFB0u/\
1euqmMR8Ei5MtPD0zZiRmuSh4/P48l0QpKnhyA5/dMyYkep8w+EFi57ttzIGQM9Du/\
AbfBxYVDDT5qimjmhI1PZSQZzRStWcs6an5yZSJCBj9SV4Mt7d3d3eGDgZjGYPWRHK10xYyzyQokvQ\
Q6JYxewz4N3d8Wh4/FYyF5HtBeETUY+OdSIgNjODAMB/\
vW683Uw8wMQ08BhlfOU1WnqO2FygtKU8nZJbjG5eTNWwLDDJVjpuHJTfrFOTCv4MPRGhjch6btD1bA\
v3CuGb0XZTVP+dugOe3beGlOFtNHOb3jiFvoOkpUct0vmxdJ8dI1bU2+jlXVzVfNhrk5VOm/\
l86pkovh/GqbRhkdmJqvFp7y/Cv28KLHLt+\
Lu5Hxnx2jhJw1XCoBPdRxAWbR9FMeeAk2j5dlRuHw7hf8R2i06eCFU5g4iz7xfbHkwq83hRCrN10A9\
Lh9QwISE6MK7bc7tOU6lEGEiIDPL+\
uXzbZRNSheNzZvvaUx9QMMEfIuuUJzVGyUHfQUfblj4pbyeVCkyHvR1yTlMi1or+\
L9ZGGXB5PhGckIV7Q1Ks3h1VSY5Desh+UIGEOnCIk/WU+9pt7uFgJpOpQorqkY3FgS3Pun0S/\
LPAx4anOmju25+jyblvMJhBnteoCmiSL02ZzTPebTDduaA50XxJ8S+I/0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JtiI8V/pNwkWuEY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Geometric figure", "scanner" -> "Geometry", "id" -> 
     "GeometricFigure (ofBoundary)", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"line\"", 
              $CellContext`TagBoxWrapper[
              "Entity" -> {$CellContext`GeometryData, "Line"}]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Properties", "input" -> 
         "GeometricFigure (ofBoundary)__Properties"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Select[Solve[12 + 5 x == 0, x], Element[x /. #1, Reals] & ]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"-", 
                    FractionBox["12", "5"]}], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Decimal form", "input" -> "Root__Decimal form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true", "buttonstyle" -> 
         "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[x + 4 x + 12, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[x + 4 x + 12, x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Bijectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"bijective \"", 
              StyleBox["\" from its domain to \[DoubleStruckCapitalR]\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[12 + 5 x, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"x", "+", 
                    RowBox[{"4", " ", "x"}], "+", "12"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", "5"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[12 + 5 x, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{"12", "+", 
                    RowBox[{"5", " ", "x"}]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "2"]}], "2"], "+", 
                    RowBox[{"12", " ", "x"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.27094685033842053`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.27094685033842053`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.27094685033842053`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.27094685033842053`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.27094685033842053`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.27094685033842053`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.27094685033842053`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.27094685033842053`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.27094685033842053`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.27094685033842053`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1009653$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1009654$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1009655$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1009656$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1009657$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1009658$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1009659$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1009660$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1009661$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1009662$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1009663$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1009664$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1009665$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1009666$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.27094685033842053`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, 
                    CalculateScan`PlotterScanner`Private`normalThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.27094685033842053`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.27094685033842053`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.27094685033842053`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.27094685033842053`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1009653$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1009654$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1009655$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1009656$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1009657$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1009658$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1009659$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1009660$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1009661$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1009662$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1009663$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1009664$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1009665$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1009666$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    7.199999999999999/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    3.5999999999999996`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    3.5999999999999996`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(12 + 5 $CellContext`x) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    3.5999999999999996`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    3.5999999999999996`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 3.5999999999999996`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 0], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 0], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 0], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x], 
                    1} (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 0], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(12 + 5 $CellContext`x) == 0, $CellContext`x, Reals], 1,
                     False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[12 + 5 $CellContext`x, $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 3.5999999999999996`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 3.5999999999999996`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, 5][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, 5][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    2}}, {{5, {2, 0, 1}}, {12, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 12 + 5 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{5, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 5], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    RowBox[{"5", " ", "x"}], "+", "12"}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.27094685033842053`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.27094685033842053`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.27094685033842053`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{
                    CalculateScan`PlotterScanner`Private`involuteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 43}, {{
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.27094685033842053`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.27094685033842053`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtjEh8QEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+nR7a+vli90dD4OxjMAYqoR+\
3hYyzxRomvYQ6Jo1bzmIb/74qDx+KjiP6feCioTqB9Y7VkAsjBTAMZ/\
gWy83U3cxMQOCgCIXTpOT57DtBdooJqZjOsvxjfPJ2m4LDGqqPTf3Sm7WKciHfxMfyNjF5D0uaXd2B\
IaFccnoOyurf87dAM+v28IrebKaOMzvDUfewLBjqpfpfNa6Tp6Rqmtd9HOuLmq+bDTI86dM/\
b90yLRZDmOnbRh0dmRrvFp7y/C7beFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DYLZuE4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = ArcTan[6], $CellContext`sc1max$$ = 
                 ArcTan[13], $CellContext`sc1min$$ = 
                 ArcTan[11], $CellContext`sc2$$ = ArcTan[
                   Rational[5, 2]], $CellContext`sc2max$$ = 
                 ArcTan[6], $CellContext`sc2min$$ = 
                 ArcTan[4], $CellContext`scColor1$$ = 
                 RGBColor[
                  0.24720000000000014`, 0.24, 0.6], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.6, 0.24, 0.4428931686004542], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scTF1$$ = 
                 True, $CellContext`scTF2$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 
                    ArcTan[6], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 
                    ArcTan[
                    Rational[5, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], 
                    ArcTan[11], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], 
                    ArcTan[13], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], 
                    ArcTan[4], 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], 
                    ArcTan[6], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1009899$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1009900$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1009901$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$1009902$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$1009903$$ = 
                 False, $CellContext`sc1$1009904$$ = 
                 0, $CellContext`sc2$1009905$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$1009906$$ = 
                 False, $CellContext`sc1min$1009907$$ = 
                 0, $CellContext`sc1max$1009908$$ = 
                 0, $CellContext`scCount1$1009909$$ = 
                 0, $CellContext`sc2min$1009910$$ = 
                 0, $CellContext`sc2max$1009911$$ = 
                 0, $CellContext`scCount2$1009912$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = 
                    ArcTan[6], $CellContext`sc1max$$ = 
                    ArcTan[13], $CellContext`sc1min$$ = 
                    ArcTan[11], $CellContext`sc2$$ = ArcTan[
                    Rational[5, 2]], $CellContext`sc2max$$ = 
                    ArcTan[6], $CellContext`sc2min$$ = 
                    ArcTan[4], $CellContext`scColor1$$ = 
                    RGBColor[
                    0.24720000000000014`, 0.24, 0.6], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.6, 0.24, 0.4428931686004542], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scTF1$$ = 
                    True, $CellContext`scTF2$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1009899$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1009900$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1009901$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$1009902$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$1009903$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$1009904$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$1009905$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$1009906$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$1009907$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$1009908$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$1009909$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$1009910$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$1009911$$,
                     0], 
                    
                    Hold[$CellContext`scCount2$$, \
$CellContext`scCount2$1009912$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}] -> 
                    Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]] + (
                    CalculateScan`PlotterScanner`Private`i - 
                    1) (Part[{$CellContext`scCount1$$, \
$CellContext`scCount2$$}, CalculateScan`PlotterScanner`Private`j] - 1)^(-1) (
                    Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$}, 
                    CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1}], {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 5, 0, 
                    0}, {{16, 0, 2, 3}, {13, 1, 3, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1009885, \
$CellContext`C$1009886}, $CellContext`C$1009885 + $CellContext`x \
$CellContext`C$1009886], Evaluate][$CellContext`x, 
                    Apply[Sequence, {12, 5}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    3.5999999999999996`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    3.5999999999999996`]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 5, 0, 
                    0}, {{16, 0, 2, 3}, {13, 1, 3, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1009885, \
$CellContext`C$1009886}, $CellContext`C$1009885 + $CellContext`x \
$CellContext`C$1009886], Evaluate][$CellContext`x, 
                    Apply[Sequence, {12, 5}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    3.5999999999999996`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    3.5999999999999996`]}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 5, 0, 
                    0}, {{16, 0, 2, 3}, {13, 1, 3, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1009885, \
$CellContext`C$1009886}, $CellContext`C$1009885 + $CellContext`x \
$CellContext`C$1009886], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    3.5999999999999996`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    3.5999999999999996`]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[C[0] + $CellContext`x C[1], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{Derivative[2][$CellContext`y][$CellContext`x] == 
                    0}], 1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`x C[1], {C[0] -> 12, C[1] -> 5}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[C[0] + $CellContext`x C[1], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1]}, 
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[C[0] + $CellContext`x C[1], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}], 
                    CalculateScan`PlotterScanner`Private`j]}], {1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`x -> $CellContext`x4345]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 
                    ArcTan[6], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 
                    ArcTan[
                    Rational[5, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    7}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 8}, {{$CellContext`scColor1$$, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    9}, {{$CellContext`sc1min$$, 
                    ArcTan[11], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1max$$, 
                    ArcTan[13], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 13}, {{$CellContext`scColor2$$, 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    14}, {{$CellContext`sc2min$$, 
                    ArcTan[4], 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2max$$, 
                    ArcTan[6], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 17}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`x4345, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNkBifEACOhiTBpSkfO8tdhoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcpNfw9NCaoZzlshDk3UmuqNZMivQSPrtpTUzNLuXwgxLvu2rNe6lm\
YPz5Fb4PPCk4GPrVMM4Mo3qypyDPWKJrz0ixI/uTCZcJcPaTPt7e2nq5s/\
PCw2AsIzCGKqGftYXMMwWapj0EumLNWw7imz8+KI+fCs5j+\
r2gIqH6nvWOFRALIwVwzCf41ovN1G1MzIAgoMi50+\
TkOWx7gTaKiemYznJ842yyttsCg5pqz82dkpt1CvLhX8cHMnYxeY9L2p0dgWFhXDD6Tsvqn3M3wPPr\
tvBKHq8mDvN7w5E3MOyI6mU6n7Suk2ek6loX/Zyr85ovGw3y7ClT/\
y8dMG2Ww3jaNgw6O7Q1Xq29ZfjnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMimlPrIo7bXTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2U8X6g4myb78UXEruZxqMuR9Xxg6pWqt6G9gfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT6gYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6Db7FuKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "2.057", "parsetiming" -> "0.199", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP6761gidig1f6e0aff5100003hggg0579h1a2f7e", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "6", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa6771gidig1f6e0aff5100004h8eaeh779f85gc17167914177805443390", "version" -> 
    "2.6", "inputstring" -> "x + 4x + 12"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 19, 51, 22.7322814`9.109217952636035}, "Line" -> 
    29, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "x + 4x + 12"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{660., {860., 866.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.880284376458267*^9, 3.8802843922431173`*^9}, {
   3.880284472980449*^9, 3.8802844861163363`*^9}, {3.880284549067554*^9, 
   3.880284646792718*^9}, 3.8802846830838113`*^9, {3.880284715712564*^9, 
   3.8802847167373304`*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"f25c346d-baf9-4e1c-abdc-8f4a762051f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. \:041c\:0435\:0442\:043e\:0434\:044b \:0432\:0438\:0437\:0443\:0430\
\:043b\:0438\:0437\:0430\:0446\:0438\:0438", "Subtitle",
 CellChangeTimes->{{3.8802858104061*^9, 
  3.880285821263727*^9}},ExpressionUUID->"8e56cf88-1dfa-4efa-862e-\
48a604838461"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
  "WolframAlpha", "[", "\"\<{25, 35, 10, 17, 29, 14, 21, 31}\>\"", "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.8802849189280834`*^9, 3.8802849215584373`*^9}, {
  3.880285129516492*^9, 3.880285172897037*^9}, {3.880285215122717*^9, 
  3.88028523982889*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"9d8d35bb-26b1-4029-825e-fe4a95fe75c0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "{25, 35, 10, 17, 29, 14, 21, 31}", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"{25, 35, 10, 17, 29, 14, 21, 31}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"{", 
               
               RowBox[{
                "25", ",", "35", ",", "10", ",", "17", ",", "29", ",", "14", 
                 ",", "21", ",", "31"}], "}"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "List", "id" -> "Plot", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[{25, 35, 10, 17, 29, 14, 21, 31}, Mesh -> All, Filling \
-> Axis, AxesOrigin -> {1, 0}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, 
              
              GraphicsComplexBox[{{1., 25.}, {2., 35.}, {3., 10.}, {4., 
               17.}, {5., 29.}, {6., 14.}, {7., 21.}, {8., 31.}, {1., 0.}, {
               8., 0.}, {1., 25.}, {2., 35.}, {3., 10.}, {4., 17.}, {5., 
               29.}, {6., 14.}, {7., 21.}, {8., 31.}}, {{{}, {
                  EdgeForm[], 
                  Directive[
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   Opacity[0.2]], 
                  GraphicsGroupBox[{
                    
                    PolygonBox[{{1, 9, 10, 8, 7, 6, 5, 4, 3, 
                    2}}]}]}, {}, {}}, {{}, {}, {
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   PointSize[0.012833333333333334`], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[{1, 2, 3, 4, 5, 6, 7, 8}]}}, {{
                  Directive[
                   PointSize[0.012833333333333334`], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]]}}, {{
                  Directive[
                   PointSize[0.012833333333333334`], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  PointBox[{1, 2, 3, 4, 5, 6, 7, 8}]}, {}}, {{
                  Directive[
                   PointSize[0.012833333333333334`], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]]}, {}}}], {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {None, None}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{1, 8.}, {0, 35.}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{0, 
                 Scaled[0.02]}, {0, 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show log-linear plot", "input" -> 
         "Plot__Show log-linear plot"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "List", "id" -> 
     "NumberLine", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"NumberLinePlot[{25, 35, 10, 17, 29, 14, 21, 31}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{25., 0.825}]}, "25"], 
                 Annotation[#, 25., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{35., 0.825}]}, "35"], 
                 Annotation[#, 35., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{10., 0.825}]}, "10"], 
                 Annotation[#, 10., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{17., 0.825}]}, "17"], 
                 Annotation[#, 17., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{29., 0.825}]}, "29"], 
                 Annotation[#, 29., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{14., 0.825}]}, "14"], 
                 Annotation[#, 14., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{21., 0.825}]}, "21"], 
                 Annotation[#, 21., "Tooltip"]& ], 
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{31., 0.825}]}, "31"], 
                 Annotation[#, 31., "Tooltip"]& ]}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, ImageSize -> 330., 
                Axes -> {True, False}, 
                PlotRange -> {{8.749999999999998, 36.25}, Automatic}, 
                AxesOrigin -> {0, 0}}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Length of data", "scanner" -> "List", "id" -> 
     "LengthOfData", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Length[{25, 35, 10, 17, 29, 14, 21, 31}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"8", 
              StyleBox["\" items\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Total", "scanner" -> "List", "id" -> "Total", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Total[{25, 35, 10, 17, 29, 14, 21, 31}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                
                RowBox[{
                 "25", "+", "35", "+", "10", "+", "17", "+", "29", "+", "14", 
                  "+", "21", "+", "31"}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              TagBox["182", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Statistics", "scanner" -> "List", "id" -> "Statistics",
      "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"mean\", \"median\", \"sample standard \
deviation\"}, N[Through[{Mean, Median, StandardDeviation}[{25, 35, 10, 17, \
29, 14, 21, 31}]]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"mean\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["22.75", 
                  $CellContext`TagBoxWrapper[
                  "StringBoxes" -> "22.75", "SRString" -> "22.75"]]}, {
                 TagBox[
                  PaneBox[
                  "\"median\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["23", 
                  $CellContext`TagBoxWrapper[
                  "StringBoxes" -> "23", "SRString" -> "23"]]}, {
                 TagBox[
                  PaneBox[
                  "\"sample standard deviation\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["8.763", 
                  $CellContext`TagBoxWrapper[
                  "StringBoxes" -> "8.763", "SRString" -> "8.763"]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "Statistics__More"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "List", "id" -> "PieChart", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"PieChart[{25, 35, 10, 17, 29, 14, 21, 31}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                EdgeForm[
                 RGBColor[0.59, 0.615, 0.71]], 
                RGBColor[1., 0.885115, 0.509773], 
                DiskBox[{0, 0}, 1, {0, 1.2083048667653051`}], 
                RGBColor[0.959274, 0.715663, 0.430045], 
                
                DiskBox[{0, 0}, 1, {1.2083048667653051`, 
                 2.2785177487574324`}], 
                RGBColor[0.90045, 0.509331, 0.420844], 
                DiskBox[{0, 0}, 1, {2.2785177487574324`, 3.279684638362971}], 
                RGBColor[0.882353, 0.806806, 0.66154], 
                DiskBox[{0, 0}, 1, {3.279684638362971, 4.142759543195332}], 
                RGBColor[0.693034, 0.814481, 0.536202], 
                DiskBox[{0, 0}, 1, {4.142759543195332, 4.867742463254515}], 
                RGBColor[0.675563, 0.816068, 0.79678], 
                DiskBox[{0, 0}, 1, {4.867742463254515, 5.454633398540521}], 
                RGBColor[1., 0.885115, 0.509773], 
                DiskBox[{0, 0}, 1, {5.454633398540521, 5.9379553452466425`}], 
                RGBColor[0.959274, 0.715663, 0.430045], 
                DiskBox[{0, 0}, 1, {5.9379553452466425`, 6.283185307179587}], 
                RGBColor[0.59, 0.615, 0.71], 
                PointBox[{0.8229838658936564, 0.5680647467311558}], 
                PointBox[{-0.17175905309127612`, 0.9851389890168738}], 
                PointBox[{-0.9350162426854147, 0.35460488704253584`}], 
                PointBox[{-0.8421008849228117, -0.5393200344991994}], 
                PointBox[{-0.2056599030859361, -0.9786235252959553}], 
                PointBox[{0.43388373911755873`, -0.9009688679024188}], 
                PointBox[{0.8326664226872067, -0.5537748897605327}], 
                PointBox[{0.9851389890168738, -0.171759053091276}], 
                LineBox[
                 NCache[{{0.43388373911755873`, -0.9009688679024188}, {
                    Rational[21, 20], -0.9009688679024188}, {
                   1.15, -0.9009688679024188}}, {{
                  0.43388373911755873`, -0.9009688679024188}, {
                  1.05, -0.9009688679024188}, {1.15, -0.9009688679024188}}]], 
                LineBox[
                 NCache[{{0.8326664226872067, -0.5537748897605327}, {
                    Rational[21, 20], -0.5537748897605327}, {
                   1.15, -0.5537748897605327}}, {{
                  0.8326664226872067, -0.5537748897605327}, {
                  1.05, -0.5537748897605327}, {1.15, -0.5537748897605327}}]], 
                LineBox[
                 NCache[{{0.9851389890168738, -0.171759053091276}, {
                    Rational[21, 20], -0.171759053091276}, {
                   1.15, -0.171759053091276}}, {{
                  0.9851389890168738, -0.171759053091276}, {
                  1.05, -0.171759053091276}, {1.15, -0.171759053091276}}]], 
                LineBox[
                 NCache[{{0.8229838658936564, 0.5680647467311558}, {
                    Rational[21, 20], 0.5680647467311558}, {1.15, 
                   0.5680647467311558}}, {{0.8229838658936564, 
                  0.5680647467311558}, {1.05, 0.5680647467311558}, {1.15, 
                  0.5680647467311558}}]], 
                LineBox[
                 NCache[{{-0.2056599030859361, -0.9786235252959553}, {
                    Rational[-21, 
                    20], -0.9786235252959553}, {-1.15, -0.9786235252959553}}, \
{{-0.2056599030859361, -0.9786235252959553}, {-1.05, -0.9786235252959553}, \
{-1.15, -0.9786235252959553}}]], 
                LineBox[
                 NCache[{{-0.8421008849228117, -0.5393200344991994}, {
                    
                    Rational[-21, 
                    20], -0.5393200344991994}, {-1.15, -0.5393200344991994}}, \
{{-0.8421008849228117, -0.5393200344991994}, {-1.05, -0.5393200344991994}, \
{-1.15, -0.5393200344991994}}]], 
                LineBox[
                 NCache[{{-0.9350162426854147, 0.35460488704253584`}, {
                    Rational[-21, 20], 0.35460488704253584`}, {-1.15, 
                   0.35460488704253584`}}, {{-0.9350162426854147, 
                  0.35460488704253584`}, {-1.05, 
                  0.35460488704253584`}, {-1.15, 0.35460488704253584`}}]], 
                LineBox[
                 NCache[{{-0.17175905309127612`, 0.9851389890168738}, {
                    Rational[-21, 20], 0.9851389890168738}, {-1.15, 
                   0.9851389890168738}}, {{-0.17175905309127612`, 
                  0.9851389890168738}, {-1.05, 0.9851389890168738}, {-1.15, 
                  0.9851389890168738}}]], 
                InsetBox[
                 FormBox[
                  StyleBox["17", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[6, 5], -0.9009688679024188}, {
                  1.2, -0.9009688679024188}], {-1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["14", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[6, 5], -0.5537748897605327}, {
                  1.2, -0.5537748897605327}], {-1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["10", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[6, 5], -0.171759053091276}, {
                  1.2, -0.171759053091276}], {-1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["35", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[6, 5], 0.5680647467311558}, {1.2, 
                  0.5680647467311558}], {-1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["21", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   
                   Rational[-6, 
                    5], -0.9786235252959553}, {-1.2, -0.9786235252959553}], {
                 1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["25", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   
                   Rational[-6, 
                    5], -0.5393200344991994}, {-1.2, -0.5393200344991994}], {
                 1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["29", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[-6, 5], 0.35460488704253584`}, {-1.2, 
                  0.35460488704253584`}], {1, 0}], 
                InsetBox[
                 FormBox[
                  StyleBox["31", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm], 
                 NCache[{
                   Rational[-6, 5], 0.9851389890168738}, {-1.2, 
                  0.9851389890168738}], {1, 0}]}, 
               ImageSize -> {Automatic, 120}, {
               Background -> None, ImageSize -> {Automatic, 120}, LabelStyle -> 
                Automatic, RotateLabel -> False, AlignmentPoint -> Center, 
                AspectRatio -> Automatic, Axes -> False, AxesLabel -> None, 
                AxesOrigin -> Automatic, AxesStyle -> {}, Background -> None, 
                BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> 
                Automatic, ContentSelectable -> Automatic, 
                CoordinatesToolOptions -> Automatic, 
                DisplayFunction :> $DisplayFunction, Epilog -> {}, FormatType :> 
                TraditionalForm, Frame -> False, FrameLabel -> None, 
                FrameStyle -> {}, FrameTicks -> Automatic, 
                FrameTicksStyle -> {}, GridLines -> None, 
                GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All,
                 ImageSize -> Automatic, ImageSizeRaw -> Automatic, 
                LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
                PlotRange -> Automatic, PlotRangeClipping -> False, 
                PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
                PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> 
                True, Ticks -> Automatic, TicksStyle -> {}}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[1., 0.885115, 0.509773], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"35", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"19.2\"", 19.230769230769234`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.959274, 0.715663, 0.430045], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"31", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"17.0\"", 17.032967032967033`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.90045, 0.509331, 0.420844], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"29", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"15.9\"", 15.934065934065933`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.882353, 0.806806, 0.66154], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"25", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"13.7\"", 13.736263736263737`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.693034, 0.814481, 0.536202], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"21", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"11.5\"", 11.538461538461538`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.675563, 0.816068, 0.79678], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"17", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"9.3\"", 9.340659340659341, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[1., 0.885115, 0.509773], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"14", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"7.7\"", 7.6923076923076925`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.959274, 0.715663, 0.430045], 
                    RectangleBox[{0, 0}]}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   TemplateBox[{"10", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    InterpretationBox[
                    "\"5.5\"", 5.4945054945054945`, AutoDelete -> True], 
                    NumberForm[#, {3, 1}]& ], "\"%\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Right", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Box-and-whisker chart", "scanner" -> "List", "id" -> 
     "BoxWhiskerChart", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"BoxWhiskerChart[{25, 35, 10, 17, 29, 14, 21, 31}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               Opacity[0], 
               
               PointBox[{{-0.19605693430634064`, 8.75}, {2.1960569343063403`, 
                36.25}}]}, {
               CapForm[None], 
               Directive[
                RGBColor[
                0.798413061722744, 0.824719615472648, 
                 0.968322270542458]], {{}, {
                 Directive[
                  RGBColor[
                  0.798413061722744, 0.824719615472648, 0.968322270542458]], {{
                   Directive[
                    RGBColor[
                    0.798413061722744, 0.824719615472648, 0.968322270542458]], 
                   TagBox[
                    TooltipBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    GraphicsGroupBox[{Antialiasing -> False, 
                    PolygonBox[
                    
                    NCache[{{0.8039430656936596, 30}, {
                    1.1960569343063403`, 30}, {1.1960569343063403`, 
                    Rational[31, 2]}, {0.8039430656936596, 
                    Rational[31, 2]}}, {{0.8039430656936596, 30}, {
                    1.1960569343063403`, 30}, {1.1960569343063403`, 15.5}, {
                    0.8039430656936596, 15.5}}]], {}, {{}, {}}, {}, {
                    GrayLevel[0], 
                    GrayLevel[1], 
                    
                    LineBox[{{1.1960569343063403`, 23}, {
                    0.8039430656936597, 23}}]}, {}, {
                    GrayLevel[0], 
                    GrayLevel[0.5], 
                    LineBox[
                    NCache[{{{1., 
                    Rational[31, 2]}, {1., 10}}, {{1., 30}, {1., 35}}}, {{{1.,
                     15.5}, {1., 10}}, {{1., 30}, {1., 35}}}]]}, {
                    GrayLevel[0], 
                    GrayLevel[0.5], 
                    
                    LineBox[{{{1.0980284671531702`, 10}, {
                    0.9019715328468298, 10}}, {{1.0980284671531702`, 35}, {
                    0.9019715328468298, 35}}}]}, {}}]}], 
                    "DelayedMouseEffectStyle"], 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["\"max\"", Bold, StripOnInput -> False], "35"}, {
                    StyleBox["\"75%\"", Bold, StripOnInput -> False], "30"}, {
                    StyleBox["\"median\"", Bold, StripOnInput -> False], 
                    "23"}, {
                    StyleBox["\"25%\"", Bold, StripOnInput -> False], 
                    FractionBox["31", "2"]}, {
                    StyleBox["\"min\"", Bold, StripOnInput -> False], "10"}}, 
                    GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
                    AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                    Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                    Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                    Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                    Directive[
                    GrayLevel[0.3]]}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}},
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> Directive[
                    AbsoluteThickness[1], 
                    Dashing[{}]]], "Grid"], {}, StripOnInput -> False]], 
                    Annotation[#, 
                    Style[
                    Grid[{{
                    Style["max", Bold], 35}, {
                    Style["75%", Bold], 30}, {
                    Style["median", Bold], 23}, {
                    Style["25%", Bold], 
                    Rational[31, 2]}, {
                    Style["min", Bold], 10}}, Dividers -> {{
                    Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                    Directive[
                    GrayLevel[0.3]]}, {
                    Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                    Directive[
                    GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
                    Frame -> GrayLevel[0], BaseStyle -> Directive[
                    AbsoluteThickness[1], 
                    Dashing[{}]]], {}], 
                    "Tooltip"]& ]}}}, {}, {}}}, {{{{{{{}, {}}, {}}}, {}}, \
{}}, {}}, {}}, {
             DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0.7843373722630256, 8.75}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, Frame -> 
              True, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {{{1., 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {
                   0.008, 0}}, {0.8039430656936596, 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
                  1.1960569343063403`, 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 
                   0}}}, {{1., 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {
                   0.008, 0}}, {0.8039430656936596, 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
                  1.1960569343063403`, 
                   FormBox[
                    TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
               GridLinesStyle -> Automatic, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, Ticks -> {{{1., 
                  FormBox[
                   TemplateBox[{0}, "Spacer1"], TraditionalForm], {
                  0.008, 0}}, {0.8039430656936596, 
                  FormBox[
                   TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
                 1.1960569343063403`, 
                  FormBox[
                   TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
                Automatic}}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Stem-and-leaf plot", "scanner" -> "List", "id" -> 
     "StemLeafPlot", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 
                 GridBox[{{"\"Stem\"", "\"Leaves\""}, {"\"1\"", "\"047\""}, {
                   "\"2\"", "\"159\""}, {"\"3\"", "\"15\""}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  ColumnLines -> {True, False}, ColumnSpacings -> 1.5, 
                  ColumnAlignments -> {Right, Left, Center}, 
                  RowLines -> {True, False}, RowAlignments -> Top], 
                 "Grid"]}, {
               "\"Stem units: \\!\\(\\*RowBox[{\\\"10\\\"}]\\)\""}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              ColumnAlignments -> Left, RowSpacings -> {2}], "Grid"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Successive ratios", "scanner" -> "List", "id" -> 
     "SuccessiveRatios", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "N[Rest[{25, 35, 10, 17, 29, 14, 21, 31}]/Most[{25, 35, 10, 17, 29, \
14, 21, 31}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             
             RowBox[{"1.4`", ",", "0.2857142857142857`", ",", "1.7`", ",", 
               "1.7058823529411764`", ",", "0.4827586206896552`", ",", "1.5`",
                ",", "1.4761904761904763`"}], ImageSize -> 550, 
             BaselinePosition -> Baseline], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Exact form", "input" -> 
         "SuccessiveRatios__Exact form"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Diophantine relations", "scanner" -> "List", "id" -> 
     "DiophantineRelation", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               
               RowBox[{
                "25", "+", "35", "-", "10", "-", "17", "-", "29", "-", "14", 
                 "-", "21", "+", "31"}], HoldForm], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               
               RowBox[{
                "25", "-", "35", "-", "10", "-", "17", "-", "29", "+", "14", 
                 "+", "21", "+", "31"}], HoldForm], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               
               RowBox[{
                "25", "+", "35", "+", "10", "-", "17", "-", "29", "-", "14", 
                 "+", "21", "-", "31"}], HoldForm], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               
               RowBox[{
                "25", "+", "35", "-", "10", "+", "17", "-", "29", "+", "14", 
                 "-", "21", "-", "31"}], HoldForm], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Possible closed form", "scanner" -> "List", "id" -> 
     "PossibleClosedForm", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"no form found in terms of holonomic sequences\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "", "timedout" -> "List", 
    "timedoutpods" -> "", "timing" -> "2.361", "parsetiming" -> "0.22", 
    "parsetimedout" -> "false", "recalculated" -> 
    "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa242711g23e4ie5g6ab7h00003eh4e9076f5717ee6430556393126808734", "id" -> 
    "MSP242811g23e4ie5g6ab7h00004dg4feaadcc5b644", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa242911g23e4ie5g6ab7h000034f547c8ad8818ea6430556393126808734", "version" -> 
    "2.6", "inputstring" -> "{25, 35, 10, 17, 29, 14, 21, 31}"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 0, 47.1109413`9.425696642710387}, "Line" -> 
    34, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "{25, 35, 10, 17, 29, 14, 21, 31}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {674., 680.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.8802851495459847`*^9, 3.8802851735075474`*^9}, {
  3.8802852180816116`*^9, 3.8802852472226543`*^9}},
 CellLabel->"Out[34]=",ExpressionUUID->"18c3fd30-f0d8-48a1-99f9-9b6f63e3d33d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<x^2 + y^2\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8802859477888403`*^9, 3.880285976927025*^9}, {
   3.8802860752331705`*^9, 3.8802861072221932`*^9}, {3.880286222571769*^9, 
   3.8802862412533574`*^9}, {3.880286307790597*^9, 3.8802863407971826`*^9}, 
   3.880286399365418*^9},
 CellLabel->"In[59]:=",ExpressionUUID->"839182d2-b893-47fc-8c51-e9cd1c070b92"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "x^2 + y^2", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x^2 + y^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["x", "2"], "+", 
               SuperscriptBox["y", "2"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot3D[x^2 + y^2, {x, -1.2, 1.2}, {y, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJyFnXu01VW1x3n0tHEtLTPppeD19jBvgXbLzImYpYhmwE1TKy8PM7WrGVg3
0Qyp7KGhoeUNSCzpjUYi4EB/iW2xhuHx5MasC2wO7tB8AAcR0KxbZ8/P/I31
Zc+h/5xxvk7Wb63vnGutOeeaa50DJp03fuqQQYMG/fhFgwYN/cfPDUsPeeGo
Udsqfl5708gh793jxaP3+J+hb37x9C2BnzHx8wvvf3bo6DOn3XzdrZ96LPCR
L+7/VmPq4NHLnv7Iho9tbQc+bPaoa94x+2/WaacVeOttG+dce8yz1pFvBr50
U/9Btz220/FG4PNvn3T83Jk7bJD/V/ZzB/Km8t6+afveH+ven7Zp/328puN1
fkz58d9N+eR3eEWe3/n5ll13jj3ziUHBM/iukz9z/i2L/ko/A1/00Mq1p34m
xhX4tM9esLZ60/bgGfz4d8w8b+Pq/uAZvDOurcFz2Z8twbPKw7O2D8/d+9M2
7T8863jhWfmBZ+UTnuFP9BU47fM7P0v7aQc+0RYvG/OBbcEz+Kjb7jr/g7s2
B8/gHbt6LHgGv2lgvI8Ez+V3NwXPKg/P2j48d+9P27T/8KzjhWflB56VT3iG
p3K+bwlc9Bs4/eF3fu49c+i43n2fDJ7BS36agXfsrS94Bu/wsD54LttfFzyr
PDxr+/DcvT9t0/7Ds44XnpUfeFY+y3WjFetVuW60Yn6V60ZL7SFw+l+uGy2f
Xy1ZN1rezz/IutFyfnpl3aCdHlk3avly3ajbL9cN7U/btP/lulGPt1w3an7K
daPms7TnpuwXWwJnfSvtuSnzvS3yfWLPTeGzGXjHflaLPdPOSrFn5O8Qe67l
S3uu2y/tWfvTNu1/ac9NWX+2mPJT2nPNZ8lzQ9efwNlfSp4bsh62A2f+ljw3
1N4EXyk8N5yfRcIz+HzhuZYvea7bL3nW/rRN+1/yXI+35Lnmp+S55hOeGQf+
EjyDs7/DM7isb4GzfsJz2U5P8FzKh30KPj941v/gWeXhWduH5+79aYv8uuBZ
xwvPyg88K59iz5bYsyX2bIk9W2LPltizJfZsiT1bYs+W2LMl9myJPVtiz5bY
syX2bGrP9CtZny1Zny1Zny1Zny1Zny1Zny1Zny1Zny1Zny1Zny1Zny1Zny1Z
ny1Zn03XZ76f+BuW+BuW+BuW+BuW+BuW+BuW+BuW+Bs6X0zbF3/DEn/DEn/D
En/DEn/DuvsbbUv8Z0v8Z0v8Z0v8Z0v8Z0v8Z0v8Z0v8Z0v8Z51f1r0/4T9b
4j9b4j9b4j+b+s+0l8SDlsSDlsSDlsSDlsSDlsSDlsSDlsSDlsSDlsSDOh9N
+y/xoO5fpvxIPGgaD/LvkvyGJfkNS/IbluQ3LMlvWJLfsCS/YUl+w5L8hiX5
DUvyGzp/Tccr+Q1L8hum+Q3+f5KvsyRfZ0m+zpJ8nSX5OkvydZbk6yzJ11mS
r7MkX2dJvs6SfJ3Od1N+JF8XfF74mv32ff0DWyt+rj/pkAeWr635Bz/80ref
8+xnXujt9wR+wfl/fNfsx5/yfi4J/L8Gvss6tcQU93ZM2/HfLemPaX/4nX7R
Dr/zs2Nvv4p+gnfsfHHI8//B6b/KI8fPznp+ZYwr+a5l8vpdeNBxMV7kS54b
0v8bdFxG++V+R38u0XEZ/Sz3wbp9GZcl4zIdl/ZfxmXJuEzHxXfgWcZlOi7k
Sz02TNsXvZvYiel3ZVym40K+nC+NwDvr5zJZt2n/Zlm3a3mxE1M74f8n89qS
eW3JvLZkXlsyr7U/pv3hd+a3zmv6q/0Ef/N968585X47o5/gr/nlJQ9MfNOO
6Kfi9FPbkf7Ed8t9v0e+G3qs0Es57xpVot+q1O+SkC/tMPQe7ZTzrqHz3fS7
5T5b97/0z5coP5L3qPtZ5hlifpni9EfbKf3Y+rvSH9P+wIfwIPkBXZcaum6Y
tiP9Me0P/054M8XFbnebX+CJ3Vpit8qDaTuyP8Z3D35kxJ4/uqy/4udpX5h3
4fRzA7cER94S+cDhh3/3uX3POuIj73lRyPP/BY/xgvM7/y6RrxJ5xaukHdPv
/vWKFav2+Tjr85bqqn1/cseh/YNH//s9c161dZ/N8d2Fh9+wffgbhwaO/Pnr
H71u6SsGjZ63/71vmNHYFPKdeOTvBo78qqETln/u/3bZA/du+v5Rr3845E8/
7y6b8Nnn7GWlX1ptcD8QedrZsmz85TNO3RHy4NPdP79s7JGnX3fdQ/U59d/H
PH3KLbsCR37Rsb1Hzvz2Nttyw/QzDzyuN+Q/8uDhfx378Z2BI3/0iPEHzfpw
v91Wxh2Rpx0/f/iDvz/q54E/+Nz9//Llfbba+zp42MMTv7ht47g37Ahc5W8t
45Ro/8lOf0z788XOuEzHC67j/X2HT1P+wZXnuR091ufjrt+pybk58rRzt+t9
ahkfVTs9PjqkY1fRzo1ub+Bqb263If/dT89/83eefkHgas/YOXHSqjlHn/Kh
ZX8z7Bn8SwfetefJ258JuwX/1CfHzDnj5qfCDsGvfcOYyVMO6Q87BD/U43Hs
DfyHp1826oE1j4ddgffsddmQP0z8S9iVngtjV3Fue/fM+//UuynsR3HsR9vB
fsDv8+9iJ+ALvZ/Yg44X/YKf6/xMLfMM1TyP+9Aj+CznGX2pXtAX8euMV3+r
sWPGM6Ev8MMX7j3jueVPh77Ahz921eB/xoHoC/zbo0cs2OfPj4W+wL/neRj0
Bb73GcP3POCMh0Nf4O/ZZ/jaA9dtCH2BH+r5MfQFfs/AuNaFvhRHX+Dk2dBX
jNe/i77A9/J+oi/wa3286Ev5QV/gEzxfhL6UZ/Slein3kVY15pYxjdNH7rBy
v2hVg9638qJJ522TfaEV9l+u861qxIyZ168/qS3rfKt6q+dvy/W8VR3xH0Nf
u+aaP8m63aquXDBk+dqr1si63arGed64XLdbVetlQ05uX3G/rM81Xq7P9Xl3
uT63qiv8u+U63KoO936W622rGu7jLdfPVszTcv1s+Tq82cp1slX9/egOz+V6
WOulnF/Nar//Hn/ypX94SuZXM/ajcn41q4u/dMNBb1zQlvnVrHo2L/j1QfNa
Mr+a1c2ehy/nV7P69sB60ivzq1ndPzDe38r8arq+Vsr8albT//zFIzeN+5XM
r2Y1zfFyftXn5uX8ajrPv5X51ayu8X6W86tZrfbxlvOrWc1wfsr51azWef62
nF/Nao3zXM6vWi+lvhoxj0p9NaoZP7xsSs8pm0VfDeetT/TViPlS6qtRnej2
XOqrUX3i8SF/eeiVvxG9NKpX+3liqZeGz5cFwn+jeoXLl/w3qh8M7DsrhP9G
Ndm/W/LfiHlU8t+oxvp4S/6JBx8R/hvVRc5byX/NM/wTx+087OqRQ3f0B//g
5359RO9eZz0Z/IOzX8A/+OsG/LSHgn/wg/2cC/7B/3VgfWgE/+DD/JwX/sFX
fHjI5RtePi34B9/T5eEffP+B9pcE/+AH+HfhH3w/7z/8g7NPwT/4XN9n4R/8
bOcN/pVnsX9L7N8S+7fE/i2xf0vs3xL7t8T+LbF/S+zfEvu3xP4tsX9L7N8S
+7fE/k3t39clS/YLS/YLS/YLS/YLS/YLS/YLS/YLS/YLS/YLS/YLS/YLS/YL
S/YLS/YLS/YLS/YLS/YL0/2Cc5XEH7PEH7PEH7PEH7PEH7PEH7PEH7PEH7PE
H7PEH7PEH7PEH7PEH7PEH7PEH7PEH7PEH7Pu/ljbknjHknjHknjHknjHknjH
knjHknjHknjHknjHknjHknjHknjHknjHknjHknjHknjHknjHNN7hHDLJJ1iS
T7Akn2BJPsGSfIIl+QRL8gmW5BMsySdYkk+wJJ9gST7BknyCJfkES/IJluQT
LMknmOYTOB/WPCe45jPBNW8JnuQhTfOQUScg+UbwJK9oSV7RNK+ouOQPLckf
muYPtZ+SDzTNB4In+T3T/J7yLPk603wd+Wrye5KXNvLSkn828s+SZ7Ykz2zk
mSVvbORR0YvWM6AXcPK68K/y8A9+iueZJX8b35U8bfRf8rGW5GOjLkLyq0Z+
FZ75uWDUHh/a1jckeO70t7868nW3fXHisCHB83Mu31lv6/z8Zpe/cuS2k2/9
1LO75ecvlHlBO5cM+D/bd8urjxL7R/4ZjwueL0+O/NTT9j5+8LueCp7p57iV
F+y54ic7gmfkq+3Dz99vyq7gGfmpF2+7fPHm53bLY+8SO6edznys7XnswDie
qF7/8K7TH3zXoOCZn5348W+xXxzv8hvm9m+//ZNPB89vd3l4g+dPeB71nbJf
jPN27tnw6YtWHbgl1h/a6fjhW3bLP98s+0X0x/1S1h/a6ezvT+6Wf75Z9gva
Wfq5jY2rVz0ReqGdjr+xNfSC/B7j+39956ZtoRfkJ/TccPJrR+wMvcDDfNkv
4AF9sf7QjurLv1PNcTtHT53+Plqd+8zIUe/+xq7QFz/pP/qa6fKXPPWLr7y/
sSX0tdzzqAvEH5vv7Rwz4B9uCn3RDv6b5p8PE3+M/nT22b7QF+3cc8GkYdcP
au+Wfz5U/DHa6fgtD4e+aGf6SybP+M4L/hL6Qh57QF/IU5eIvuBhovhj8IB+
0RftLDr7lzNGffC52N87/e2rBjUXD3vP8TtDX94vz8ttj/5tdvkTJkz++Zwv
Px764mcnP/No6IufB0u8s8Xbeafzhr5o5wsD8fX6580/05+Hrlz5s3/Gc+iL
djpx7h93yz+Pk3iHdr484Bf9MfRFO9e4PaAv5KlHRV/Ir3I9oi94GCXxDjzc
MWXk/aMvjzg02rnD11X0danzh17QV2edXFvNO/iCn921sD/0NdPl3+fzgnbH
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
D/CbJX4EP0ziRM1LcD8EnPsm1NOX9x3mR10yuMZrJV7HZZF/kPgLfJHEWVm+
QvNX2HmcZ/p+zX0VcO7LYOfg1P1i5+DUv3GOG/kEP8/N8gAa16tewDU/Bq56
KfFaL+AvF72AHyd6AR8reon+i17AVS9ZnAs+T/RC3Me9S/QCTp08eon3gbyO
Gr1EXOn1hOgFXOuyiIMu9vWc/sT9cq+rZD0Epx6V/oSf73Xa9Cfqh7195i84
dXTq/1P/yXoIjj2zHoJTx8t6CE4dJuth6R9uivVQ/VjWQ3DqyVkPu8cFtT9J
vWVL/EbqAFkPWecYL3Xq4NSrwxv4e71ukLo63QepHwKnjoX6FXDqScRPiHN2
6vnIfx5W2k/g1JNk+XPq8JCn7ijuCzlOHRf1asm9sFivqJuiDkzboX4Oeero
qH/S/lBXpPfXJnh+Su9VUVcETl1TWZdS88N8VD7hWddP/M8yf1vXV5A3o96J
OkJw6qbwV8v+T4t6QeSlbjDWVdrBv9X+HOP/nnZ+6fxQ9xZ1It4+dV3aT/jn
u+ideiC+S90RvEU+03nDPiNv6fKafy7zAPV45R2wWIept4TPkp/5UTeJPPWT
y2RctD/R+4f8112P2BW41q3puLAr5QF+dP1nvOA/kPOgcrz1eZDKoxfwqUW9
bqxLUZcl9TwRj1A/Cs66JOtY1ONNdLtSnDo5bUfihd36o+c7y2T94R056qtK
f7J+P1/9QOpHwanDXCbrzKuL+bXEVJ66QP1u5u/Rz/L+af33RLAT6sfoJ/LU
c4IjP6nELZE3laf/SX9M+8O49BwNfXU/L+iJ+Uv9G/0v/b36HX7F6Y+2o/6b
/F080/MI3juIejC/ryR2Hvuv2HPs19xrAr/J7zfx/gvxLPcIeP8i6qn8Pg7v
LEQ9lftj3OeP+1KFv9EbOP7kcT4fwYf7fVLWMXDu87KOBe5xH/fowOU+XeDE
0dwLApd3Qur3NDxfwbsJ4LwjcYLzD867BNyzBececdynchw/k3WVeo9vuh/L
eyXgvAPDuxiB+30r7vNH3Yj35w6fz8TRJ3k8gr+E/OV+H3Cx26XW4eDnIM/9
XO7RgRPXc/8HnHtVvJtD3M24eAcEvHwXpS9w3t/gvQDwn3hcyf12cO65H+N6
AedeNveHwYmPuDcITpzC/TRw7uuhr6gfcDtHX+DUEaEvcN6j4B4pOPdq4Rmc
+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
5R0t/v/DMi7kyefQD+QXSjv8O7UfcPj5fwqw9V0=
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1: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
tP/j93j4Rdpe/L624LxoK79Po70jOg+SH3lJsVLmeO9n2pWpbaxs7d7M59I5
NR9nwBsZXyEf/xvtX2z/wHsyx3Q7C47rtmeODxUnVgnOKTS+FPwmXJK2Kccq
z1aO7SjO+wX9LRLH0IrlGmlf+CP4WD3rPA4fQ1uC/Uuy34rM/l3xo45ZQ/EQ
Y5onjoMVj9WW/4E/g5sljk/3FByPao7oOielfr56zh9wrD/TPOeib0Dq5zmF
tk7RMbrGaS3eTLu56JhecXVN+UbFYXBTeLNsCfy94iiudSj8b+ocSnnNm/T/
m/nZRq6/KPvG3+fyjr6VXaf/b+UusrXwP3BX2T4dh74k+Br2pe0hWwYnivfg
RwpeX/3hpwteU8rFboI/z+NMXdt38MeJYzbFS+sTx07bFH8mjvcU+32ZOJZT
/LZJthDeDQfZQPgIzrMxcUyoOPAb+Y2C40PFhLqef/M4UNcZEseNT+r6tQ4T
59Sz5a9lS+BWtN9nflcHar7DY+BStH9mfg9aHzMT5xr3KxbN563mb1/2/0sx
TB4jKb+ew5hJcAd4FrwmdWygGOH2xO99ftE2T7FiNfp2JH6GJWl/yNfpH7Rf
a43p/TL21sS5+Tz2/SX1uZTTb8q8JsrLxqa+R+kH46PznJuCn5VijG/Z90N4
ArxeOVHRMaLiw5OLzpfWwQ1y1rxvXPRaKpf3tcjHnFh0fioTomM0Z9sfbpmP
136tcv6m4DxW4zfpuXBNHWUzgnUKXb/y9KeKzhmVp//Odo7mD/dXIbj/Efi3
PO9T/ndSfv067xHB81+2onqes8se3go3Y+y64PM3y6/5pnzNXiE/Kpte8Hof
kzjWncKgF4NjRPUtY1wjzRn6/smsP8iHRsbVK3reaK3J3soGf007nb7e7FcW
Pq5o29Eif456xlNzTeBS2jL8blT02p4dPKd+CLYXmoeKw98v2lZIo1ib23Vp
IB8WnXMNgo9mn0nwssz3q/ckrWE7f+ssv5B5ruiZSysalzoOP472RbZ6erf8
/eng2Lq5nivtcfRfxXH6Jc5lRsKLgnOAJnqPqeNqxdfzUueMjRUfwQfr3Qff
t+aZcvLnU+dTJ8l3s08z+Hr656bOSY+lv1fimH8Y/Y8G5xjH6dpS9ysnWBwc
37egXRqcX7WkXZI6R1CucDHb8fA1HGcB/Ydq7TDmUfhw2VJdf3Ae0kzxV7BG
1SXadsuGy7dJ1+qmeUn/7cH246Ng2yEbIh1C+oXWrzSv5vn81Dorp7i0YM1N
OoXGS4OSDiJ/J41gYu5nT6R9ma2B1iX7PZY6H1FeckHieThaa6loXy+brvNo
PSjfOyg4R3ky8/prma/BHWzVi7Ypi4vWPdqmzv23FBzvyUco71McuDPYXlxI
+2qw3z5VPjb1fGitGIy+1vA09nk5OC86hfadYK3wLNpxtG0YM5Mx77LvCXqe
9K9K/V7a6DypcyXFYZ/ALeHT6f8q9b4d4beCtZX2tF+kPu+ZimMT24oHOP6q
YC21g9Y07bn0L6B/g+wFfAb9G+G2cCfFurpG+B7GrAzOOdvp+lPnccqFJiTW
Hm9nzJ2K62Q7aH9KvW8X+NvUNv9seCvcEe4crKXKbp8T7KP1DhQf7qS/m3wH
vCf1dXaD30+9FtrCXwfrpOfRShyQtqzY6vVgf6Lr+iJYRz6XdhHtcMa8wnVu
zqx/Hhwcm0nzPAx+hjFXwCuLzj+Vh57LOUNm3VWxw2epbaB82ozEduM+xpbI
rBP21r0E66fn01bJfMyBwTqL9JbhsiWZffdQ+utmzm2HwfewXcDft9O2pH+W
7DB8YuY4Qf5csfCjcFHxVWaNV/HFQfDl8ADG/x6sHQ+mXSf/Sv9Wzl8rs8al
GOQdtmlad/SXzfx8+gXHFbLdyjWkU0uH7A9vCdZB+srOB2tViskVsy/Sa6CV
MLg9j9uVH0ib2qm1Ln8DX0b/sXncNVJ+J7P/lR/eozmdOKfYzfZ54pyiNGMu
YkwfuHHmuOtS+NPE+tivHL8+/VPhi+j/k22DbBvtKZm1L8U+/wbraMovlFs8
Qf8+eSyn2FJ6Q9PMz2pUcK7zIPwXf/srOKZU7qNcR8f8nf6GmZ/h8GBNR9qO
bIa0Hmk+0gvnBmtYtWULGb+44LxvkPJeuCRjhirvLTjXq8AzLJPnbr0yX6dy
ybLRsaTytGHSCwrOE5XnrYJr6J6lOxSsN/fOHOOFfJ/lmueMeSrPNeSPFudr
Wf5iaR6PyS88B7coOK9fktsl5eZ9pR0UnM9KD9X9Sit4NrdRytlfSK3nSMco
HR0XK8dM4J2Jc7cR/O2lgvNl5etfy54rD6B/DXxzsBYsHVh68A3w+/At9Ffk
OOVS57kzU2tu0jdmwOUL1j26Z56TyrWVE0urP5rj7xsdmysH7sCYBfSPZUz7
zHH+1XAneKF8YvA4Pc8DaEtGx/7Ko7tkXoPXyv6kvpcDE+fTr8jPwK/kdlWa
z2up9TppQe/lNlY6UgX5M7hyYi1d7+hwuHTqfLas1jW8DK4CV4JfhQ9J/Axe
hCsmvifF+RJENZ80r8rAf+ZzWLmM5pTy5fL07U6c4+yl/yP4RviTouNt5Q7K
L7SGlLN8UfS6lD+VX9W6VPymOE7zTM+nQuJ3Ow/eQ//Y1NpsndTPTHlTmngu
KAeJieeyYvtSWoupNUPpUW+krhFIE3srde1PWtkHqX2NbPvy3A4r/pyTxwDS
blenrglKf1ubuh4nXU5avDRhaWV35nGXdLBZqXVa6WbXpK5hNaC9OnUdo17q
9aN1VILjj8281mbK56euazVKHYcoJpE+Nj+Pr6SPLUqtoyo+WQjXLVjvukxz
QudVXJZ5zigfkRaiGtMxjI+Zc1X5nQMy6wnSJ8tlridKtwy5zZe2qRroHwXr
Laqt7NI84Zh7U2sa0t8eKboO2I6+v1LXEKXF7Z+5zii9VLUu+bIeqWMD+Wvp
bKqrKjdUfrEx99HSJ6XHyKaVTlwnba3nLh0r903SY/fN7E+l2e5OXd+UNrgr
tW+VZljI7bx0zmJmnUQ+vWti3XsQ17UwWGdvQPtIsJ7eKNjOflewjqdazKaC
a4z30V8Bbkj/aYm5XZ57KQeTDnJu4vh8SNFzSTakPuPvTl0L0Lw6LfO60PpY
yL29mljnSTPHpdKKP0+deyo2ODWz71Oe3SlxXH2eYuzgmkRd+frUNaN6wbUK
zU/VjuoXrbEoV1FNfFvB+extwbX0tpy/TuZY4k3awzKv31dpD82cw0qTrJq5
1vla5lptKFozrJX74jcyxw/ym8tp3y663jGEc9TMvMZfp62dWa9QzLAudV1b
2uCB0fZL2p10VtnnBowZldmOyZ5Jc/0EbkJ/5WhbJj12PW37gnVF1YdWFFwj
GgOvhGcwpkZm+6PYpnVmuyE/3ib3a3q20hEUWzZRnJ76GwDpw9tSfz8gnf/n
1N8YSDP/NXXNVJr2D6njRmn7m1PXYaUzK1ZWzKxvCFSjl45xuJ49/BC8MnM8
Jh/xFm07tqXwatq2mW3ajnzOyFe+nTlGVKyo7xvOyP3+O5njIs0rxT+tMtvJ
VbQnZbbnivcOzhyzSR+eHF0Ll388K48B3tNY+pcx9qXMNVNpEtLzWkVrK4rn
K2fOhTWmdXRdQzH5idE6jvIFrZlNud0+OVpbUX6hmu+WgmObhvla05o7K7rO
otjsjGj9X/G86gmq+yt3rhGdGysXPi26pqC84GF4nmJZrufU6LqM8oKW0bG1
cpn/BddB9UwaR+dLyrP6ZPaDH9AOyOwf12k9Rvs8Pdu9wfVIvaN+ub39kLZ+
tN+QftEiOs9RXnN4dM1YtqJRdP6mfK1KdL1ZNuHv4Lqp5sAJ0b5I+cbgzPXT
j2irR+fnysfbRddBuuaxvdaj1uVR0fVU5dpXZNZd/1svideCtNWa0bVV5eCj
M9fBN2jNRtdlpRtUi67XShOoE10/kkZxRHRdWTqDvmnR+phOX9foWoPi+bOj
61+K5+tG16ekOUib/zb3g82iNTvlm7Wj9QLpCZ2ia23KdxSz6VsLxWkP0T83
sR5VNdq2yj53jq6vKb84OjpXl55QPjpeWc/4Mopli9aPm0frkspJa0XrLNJb
zoyuJSkflK1Yn9uNY6K1EukbJ0XnvcpzB+a2SPFvMbp2rvWYRcdAq/PzjuLv
D+baxYCCdTXZW+lp0tUOiq6R6/kfEGyTpRFVio7JPsl83bp+6WbS1aVtjU79
vYdyzLNS6yfSTCpm1rLGF1w3kC4mfUzf2mjdav1Kby+V14zel4/Oa0ma59LV
pYtdlloD369orUz6vPLLB6I1fOmUmkvl8nqT5qeuW9c/PvX3S1tzvyMfo35p
gsNyO/yx7jc6HhWX1vXD86LzJeVN0tYOjf7WQb6sBPw/eG1mDV+ayTDa4Zm1
esWM++U1Mq3fMtExltZmt+iamnLYP4K/nZIPkm1TzUUaU8/MMbOeSbfMMbDO
tSP4Gwv5NdUUZLf769kHf7ckHyfNU/ZffkD1F9VODqVvV3AcLH/6K7wisd/8
BX4zsW+Vz1c95b9vtTJrA7OiNVvFZorRdqTWjmTTVKNRDHVXdD1G59L3VrJ5
2wuOk/bhb38nrmENYXuj4LWg+FB5kOaV4i3FXdLme0bn89KdIvxXYvsv7UUx
nmI9abDSVu+JriEpDuypOJbfexLXyKSBSEubma9Xfaen7/Wk0+lcE+Du0fcu
HUPf52guT5K9idYOpC3IL+o5q94nvV3Hqag5mN+Xcqgjg69B19I7uj6nPF36
i3QY1W2lv2iNqCY7Mp8/yq0Oi47/FO+dkznXUE52Q/Q3SYoT9P70bPWMB0bX
SKQzXJTfr/K7qsH1J9VzL86fm3K9vtG1FuXv50a/d2k19aJr99IYe0XXZqTV
qMahOVAjuA6iOVkTPi+6liMNp0+0NiH9oX90/UZax9Tob9qUwx6VPzfNU9VZ
NB8q65lEx6nSCg6Jjh0VK54fXeOR7qE6iO5F99Q+up6uetkh+XNWLVi5rnJe
rVXlEsopZOP0rZRsxkTZ4Oj6lvSlU6I1QWmSN0Z/k6cc59jobxWkZ2rty87I
3gzO62TSSTpGa2fS4hpEf8+gWsDx0d9CSMOsFDyvNL/aRH/DoFpMh2htThpd
0+i6s/S966K/S1N+1CT6+wrpov8HVGdKaA==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJw1m3n8F9MXxmfu3JmiRaKFylZkS9myUwlZ06JUJBFRCgnJL1HW7C0qRdlD
SmTfJZSl7Ev2JVuWyE6/591z/TGv733unZnPzJ17zznPc8530/5Duw4JWZa1
KbIs6u/7ZZY9kmfZILX/Vd9qDRY6oo7Tqix7U+P3afx4jf+i8Rt0NFf7CI1v
pPHBusnzwnXUP1L4FOEXhNcRPle4hv7W0rm1dZwt/JDud5Hut7fOeVhjE3Q0
VvsgjV+u8b01vp3wMJ2zrfCNGm8h3EPjGws/qfGrNbaf+l7U2HvCDwkPFJ6k
9ls67hceIPyrxqfq2ETtLrq+qa7voL8dNF5Pfe/qWa/VeEO1O6l/nMYnCzcV
7izcRHgn4eXCjXTNeWq/o/s/oPZ8HW+r/TeTqSPXMVTnH6l7PqquTOeeLjxD
fzcXPFLjmwi/q2se1LUnqu9PjV2i8xuofYj6ZmrsRR03q32E+j7S+L062qp9
iq7fWtfPFt5B+EThLYU76fy9hC/UNbsLHyC8u/AY4d2EXxG+U+2j1Pclz6Tf
e1nthmqP1vhJws8J1xI+R7h96fufrWvaCL8qfJfaR6vva53zkvAdwr2EPxPe
TXhjtY9VX0ud/zq/r/5v1bee2g/ruFhj+wg/rv79Sr/PKPW11fmLhW9X+0j1
farxoXqeRWrXV/t/Gt9f47sKj9Y5uwhPV/9mwt30/s2ET9X5i/kt9Y8Sflnn
z9K5fZg/jZ2t884UPktHa43voPO+5P2FR6n9hs5vr7/f843Vfk7tfdU+V9ft
oPP3Vd9OwiN1/o7CI9U/Qu1zdGwvvFTjs9W+W8cStecUPv9knbeVxl9T3z0a
O0Z9KzR2u45tmS+Nb6HxdhpvIzxc52wnvI9wa+EzhFsJj9J556r9Px07VV7z
rP3z1L+z8Gl6x5eEG6j/POFZha8/Lvh73Cy8pfBRws2Fx+n8DdlPut8t7EXW
o/C6wfuX/cZ67Ck8S2MzhRsJ9xa+U/gCXf+h8JasXZ1/pfoWCjfX+Bjh54Qn
696Hqu8tnTNW/ROEx+t4RmNX6fqtWM/Cdwnfnb7nCTpvjvClpfdPo+DvOVnn
t8u8hlhLk6JtB+v9QeHrotcWNgXbck+yFyfp+nuFr9X4jmk9zxW+VeNNhI/R
+N3C43Q8Lrxh8H7YRvhz4e0K24Nror8P3+MebI9wK+HThWcLv67zXtNxka5f
IDxcxwT2isZP0PWb8Dwa21zHWOFBvKPG32NPCp8sfAm2iDUrfK7u/47wZrru
QuFzhN8S3rjw/I4Uflt408L3G8Y7srex0cJjNP6R8NYavxT7rPHLsPPsYeGV
6t9I7bH6e5vwtqX3A/sC+3uq8JXCn+icY4WfFZ6o9oHqW1r4HScJH5T53c/k
G6j9LTZN5w8Rvlz4Q9a88OnMmfDnwscJX6hrNlb7J/V15Dc1L9OED2dOwDr/
SbWbqv98zheejz8Jtk836ZyWwn2ENxP+n973Xdaf+m8Svqq0/9kieP4eF74i
955mb5+n899Xe3O1b9b4Uxq/RuP7q2+x+q4RXqL29rr+Mo1fpPPr86w65wbW
P2tMuCZ2ReMXa3w94f01fiO/JdxMuK/w7cxF9Ho7UvhW4aOi11uh3xqu62/T
322E+7FGeP7kl/cTnsHcCtcWPkz4NuGn+d661wHqe1ljQUelsRo6zqi8vrfm
94VbVN6/Wwj3Et5U+Gpd/wrrO3j/jmYPCpfCw4TnpvMHC8/Dl6b7nSZ8P2tb
D7dH8i/zhccKfyy8TeH5Gqu+ecQD2EnsF/4HFyl8qvBEnb+n8Fhd/4DGtsJe
aaxN8Hodo765Gl9b+Cy+L/5GeLXOHyI8PtofnCd8n8ZGcJ3al+h4RPgMjb+q
8caF18/w6O+5ofAF7C/8jfC/Ov8U4UfZH2q3V9/TxDDCt6n9j/oGV14Ti7hX
8FrB//C9uwvfIdxAx3fCM4Rv1flnanwdfIWOcexZ1rHaF+jYFX8avBfYE0HX
fh38brzj3nrWzdW3NbGG8ErhX4S/EL4Gm4vvDt6b7NHVwj+X3mvsuS2Efwj+
lnzTDsIH6Tdv0XhP4d/0PH+XfnfmYE+Ndw1e26zxaRpfGmxLsClbafzX0rYM
m7ZN9Ps2wzbgr4VbCm8rfD73F/6LmAjfIry78KfCi/CXfNPoe1yo9hvB9/6E
mEfjI9T3V/Q7XqD2kuB3/1LHyxp/SccXai9n/eIP8Vk69zPhxcIjWXPCn+i6
34RnCLcV/rf02mMNtiM2DbaF2MQWwj+VtsXY5M2i55B7Lw6e20MqxyfEO39p
fg6sHJ/1EF4lfGdwfNRXONe1PTS+QHi4cJPo+XwDe4tNFp6f9vuw4P0zL/nn
ocHr+XDWJGtTfXV1fufK8flg4drC7Svv/07YaF37fnR8erCuv5nYNMUXZwTv
r/c0/oXwgcI3CXfV9U/o+qHqq6+xI7DxwmcIbxAdXxLfDwz2l8wX83suNjM6
nthA7aOD/fcmOrbQ+On4PI03FW4hfKrwF8L7Vo4HDhP+Std2woan+Haizj2A
mEO4m/D40t+AtfJ88LfpqPEpGu+svm90/f6V/UUX4e+FjxR+nvgOH6lrG/NM
+Brh5dHxFva4f7C/vi+YH5ygvio6XtpE7eND8u/C+pMdEByPt8BGYV/U/xXv
qmMb1ovw12r/EmyrsFn7637/qL2ejvo6aurZYjR3mif8IWsxOhacLfxB6Rj1
G+EpwbErMTC+9rrg2Hi/6LX8MxxD9ysr+0J84mEaW6eyr8Rn9hOOwnVZS3zz
6GvWIrbKfK+ism3GRncSXkt4feGHsWnCNaK5yQPq+7g0J4Q7zArmirUqx2bE
aHAdYmb8+YUploYT3YqvCuZKcIAm2IfC3ADOQOwwOZhL1Kkce+ET8Y23/zc/
uWPrdTW+scaf5htprCbxC7G/jnoa66u+o3WU6q9b+WiisScyjxGTTxOeHny/
GpVjXWLewzVeCddjrwgfgq8nZhN+RvgE4W9L798x+JBoG3K92t8F25ZviAFz
26zG0TZ1Mms92NayZg7Ts/2aeS39wBzltoEb6dzvhd8SflPHitJrhP04LPPa
wYZOVPvLYNv6RLKfXMO1P+p4R+2L1Hd9Wt8L0n4uo9foEfr9PzOv3TUcWOPr
ZubGjYRbBXNCuGFL9e0lvEx4dLRN/kftB4NtNZyUWGl8MFdljgboWLvw3BHz
E59fEswFWEPszzMzr62N4EfYROGzhesVjtWI2dAOmhSOvfDZ+O4N4Gx8O+Ez
hR9K9hmfgG9YT+ObBXNYuOzK4NiMGK2jcHeN99A9/xLeVOd3E+4i/LtwM2Ld
Yg1VzzoGx28DiL9y+7TX4Hjpe7+r8b66trXwFOY/OH5vlb73m8HxO9/iYnwd
NhxeGf3tWQMT2Gv4JOHewlOEe2JDhA8SHi/cRuNThd8Ojtd5Z9Zi08Jzgf/E
F7+u8d5pvuFaFwfz/1663wr8gfqvZO50/jTh94Lj8aPUvzqzTXsVTqnxG4Q/
CI73mTPm7ifhkyvbKPzFkMy2a0cd09VepvF+lf0lscci4V7C/XT/PHcMs0TH
jxr/jb2m/okaP7H0758kPFX4OOY/t01dquOX6LV6jPonsVb1t3/me3SG+xa2
7X/o6FqYp8HX1sdHqf0NMRG2T+1rK69pbEGjtNZZI+z12oXXTqHnKeEuwjdU
tpnELr8H29KGwoF4R+PThAeWft7BwtOFBwhXwgOFb0zvP1rX11TfyYV1Nvxv
A2KWwjb3Zt4n2Bbz/sROa6V78n2I/WrknqMape81SO0Zle0o9pRvvKfaP+rY
UHi0/t6i8WPUbqzjK43vrL4+un4l/gxuo/HepbkXc3c186O/dVjnxERq76Ln
ahvMW+GYexWO9ValNYVmg3azS+a4GH+5Pr5P12wInxT+VHg9YjK1u+TWWuCY
2wvvqfN2Eq6nYwvWbu5vxzdsJTxCx7rEo8SMarfT+fsE8wQ4bcfSmghaCPoH
MS6x7vfqO6ny/OLbfhUeVPm9eX9ignm51w/vj8+6N7cm0j13TENsA2eCq8HZ
4FJoKGhbxAjECgN03+NyaxZoF2g4cD1iDGINdAC4DRznjcKaJdoemgraCjYQ
Wzhf5x1WWfNB+9lefU8U1jJPUvtvHT0L+9Jb1XebjoMrc7jDc2sycDv2JHvz
bp13qMYGMQ+5ORxcbpKOWmofGsw/Jwqvja8L1n/Q0OCucBq4zeXFGjkz2zeY
76IhwvXgfOgciMeDc8esxK5otGi1aE4PFd6vP2TmCHOJA3X+kNwc8v60nli7
rOE5ufXWOtiHYL6M5oXWgubyWOF4GT3zdI1vo7EPhbsLX8O6IHaMnnPm+k3W
S2V9GB+Fr0LDRPtBA3qmsH+G+ywP1ivWaHoa31l9Cwv7W/b/F8H6zW5pv34u
PIA1J3wj9xbuXzkegFt8Kzywso8hHn4mt++BN8JV4awvFeYkM9T+OFgP2VX4
JuFPg/WbZil+fiq3r+pQWnNEa0SPnBZ9T+4F/3+3cGx8qfr2qKyhoKWME96z
sk9AK8Mn4ys+KBxrX6XxvTW2TLir8JXCe1WeM2Lza4PnknuivbXL/FvEp2i1
kzTeobImiza7m/peKcxJ4JoTgrkKsddUjV/P3qv8m+gxHTM/C/oP/LuD8PvC
ewRzZzg0Gg386tHEfxBGtiut3RPDEMvUEa6bWwNCC1qbGFW4to5apTWh5snG
1RZep7TtQQNCC0ID4nf4vbqlNbF2aY2hlTUsrZf9mJlP1IKj5o6JiI0eD/aj
+FPiu9sr2xnsDVxkZrCdwd4QK/8azZVYI6yVn6K5Et+cb78cP5+bE8AN0BTY
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
Dj4d316XuKeyJtYvM6eB21Dz3Tt3ToL3R5NDG7wrWKu7N1pLY3+SGyX/cHDm
mkhqI+dHa3/YYvLlN0TXO1BDSS3l9OjYjfVDLR96PuuJGkTqy9CUqBv6rrTW
dH10LoP1Re07Np1cZZls/dxo+4I9oD6DPBn5Mmp04cNoMMtyc3y0GWJI7NUV
wbHl49FaFjUO1DrcHa01UiNDLf0D0bVV1HBRy/VgtL5DTRC1V/dFx8Z8L3L9
aJ1omY8Ea57McYvEx5l7fFrLxK/xdQ9H62XUdFHbRYxNLX/PFHvXT/N9SOH8
OT5568T/8dX3pPOpqae2nhotarU6Fc7/zojeD6x/6hHIa5LfpKYWfYCYpXXS
D4hl4ADtsOfB3GBe9PrGXlCbcVf0/xbwPxH8bwQcAf99dTB3qP6bv2Dt+Wbh
3plr5ql3QaP5JXeMRnyMplc/xZtofWh2ReI7aHloLj/l1vSIx4lRaqX4fU3s
Ev2+2AvqhdbWeIMUz/dIawnt+9ngNTUz2t7gn6jfgDOwHicGc4nHomtdqGmh
tgXtCK2LmIZ6Xe4JD4ND8VuPRPtONH/s66PR3IwcAv6KGLRK/IvYFI0Sck68
SvyNxgsP4f9E0H7RS9CG5gZrX7f9t/9y/y/CrdH/i8D/NPC/DXek/UuNPbX2
aFjf547v0bbISXfKXdOFv0ITJ7bpVlgr/z+50EMd
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
BfUI7H3pWSYrb0DzsFug2Z59U+jboj5+TRS3PVtfrfNZ3Ymw9p7l8crny+C3
1Vku2Jp6IeqF0Xq0FrZO8UHpEva/nOUKo/DrTb0PykZNYJmKB/jlYL/CHDHh
2Fkelk77Omd3yXuBfSfpe6kmfu1gPcMxbDHsK/xWwlbBusCUyPXD75TuXdgZ
zcMYy+ALYPP1O3C7Qt/lsIWwZFhz2FXYGeW7lE/Dt4bvKL2DaOze+PVCmdgb
4BtgG3WulI9jn3CWfw1mvjbU2zo7q9NhqfgtUrwLv/s5sKXYS9Bh7OPOcp5B
geVyyukOomuexRzFnrrYg/D93rN9pv32IBzXYj3LJZVTrsSug3rCErBr0HeV
b98afTz7DfotlQN7V6c9iw+KE/eUR6GzsJt57DulpuIX7DtYDmwBrAZsjbO8
pRnjPNAdpXzK2Tfay7C92PvQcXQMRUVYDMiKsLOuM68YEYVu0G8A7Ixn30cL
maM6bLWzHKppYLmScqZpsKaag/pT+CUpv1Fc9Oxc6XzVUt4HawPrrhiEXyps
L32PKh+EjYdVwt6vvQo7qzsYVk1xjr6zYJ9pPNh55ZuwzrCBsEqwZYqjsO7h
nCEStkJ3lrNv/wSeOY56R91lznK3kbAu1LvqNyjXoW+Kzm44Zu90ls9FB/bt
pG+oXc6+n2JgpZVzo33oW9hpnWv6VnF2n8d79g2lb6k12K+jrtqT4ftc98zn
zr6BGgT2naTvpSzYIeVb+I1R7HGWF5ek7Xl4GcVf/Pc4+19CbGD3q+7ZTGf5
V1Rgd4vumPq+7W3t8bepX3V256Rhp6M61C8rT3H2jdaQvtmwHN/iZCfP8njl
86u0R519JyTi112xGkXCm3h2l+tOr+nb+TjnWU6n3K5rYPfCTM/m1fyHsH2d
Bd/yK+VZTncqYzbH71V4Pth8yo2wLYoFiuuwp7BPOvtWGsrY0dRj0B9ywUxl

                    "]], 
                    
                    Polygon3DBox[{{1194, 674, 835, 1429, 1011, 1012}, {1383, 
                    716, 480, 479, 861, 1277}, {1384, 718, 483, 482, 868, 
                    1281}, {1211, 704, 854, 1434, 1047, 1048}}]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$6002432#1"]& ]]}, {}, {}, {}, {}}, {{
                  GrayLevel[0], 
                  Line3DBox[CompressedData["
1:eJwl0slLlVEch/GjpeaYmkNulJsLbeGUOV9LCVFSg4QQDRHcOCxs2aiuokjc
5sKVCyVaF0Et9S9wSCtNIyH6I0Q/Bxff93m+nPs777nn3sTEk6HZlBDCqtwh
0ds9/uLSpRDycQUr8CPW4lf8Jp18DwewIC2EMnP/9Mf6DX7GZ3iltWo9+3II
z/VaXsnfRsdl7MR1HMQH8pnP4CZmm88x0yXbehLrpTE1hB39Nu5iE37HZmyR
Pd6K+/jOWRrMtOk/9Fu8nf/ki9Ya9Q79V9yPJ/lBPBcexrvB33gXu+SId+Mx
vjBfaKZb/sQZbJLXzr+lP8UNnMJJ+cTv4xp24Hu86TvWmXnDq3kNT1h7Fu9S
r9KneRlP8FPvHNVPsB93cUeS/AvW4AcsxwP7/I9nN3c1vhOvy7jk6WOYi6M4
Ijl8OP5e+AizcMFepTyTz/MS/lCu6HN6Mc/gr3gRH5R0vR8dOfRhrzhK6EEf
C/fQFYaXyrWUi//fOdmxPxU=
                   "], VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{909, 1241, 578, 908, 1438, 1158, 910, 1439, 1159,
                    911, 1440, 1322, 1562, 912, 1441, 1160, 913, 815, 1323, 
                   1675, 914, 1242, 1442, 1161, 915, 819, 1324, 1676, 916, 
                   1243, 1443, 1162, 917, 1444, 1163, 918, 1445, 1164, 919, 
                   1446, 1325, 1563, 920, 1447, 1165, 921, 822, 1166, 1244}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{31, 353, 32, 354, 33, 355, 34, 356, 357, 35, 358,
                    36, 359, 360}, VertexColors -> None], 
                  
                  Line3DBox[{923, 1326, 1564, 922, 594, 924, 1327, 1565, 925, 
                   1448, 1328, 1566, 926, 1329, 1567, 927, 1449, 1330, 1568, 
                   928, 1331, 1569, 929, 1450, 1332, 1570, 930, 1333, 1571, 
                   931, 1451, 1167, 932, 1334, 1572, 933, 1452, 1335, 1573, 
                   934, 1336, 1574, 935, 1453, 1168, 936}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{938, 1337, 1575, 937, 1454, 1169, 939, 613, 940, 
                   1455, 1338, 1576, 941, 1456, 1170, 942, 1457, 1339, 1577, 
                   943, 619, 944, 1458, 1340, 1578, 945, 622, 946, 1459, 1171,
                    947, 624, 948, 1460, 1341, 1579, 949, 1461, 1172, 950, 
                   1462, 1173, 951}, VertexColors -> None], 
                  
                  Line3DBox[{45, 370, 44, 369, 43, 368, 367, 42, 366, 41, 365,
                    40, 364, 39}, VertexColors -> None], 
                  
                  Line3DBox[{955, 1463, 1174, 953, 1464, 1175, 957, 1465, 
                   1176, 959, 1466, 633, 961, 1467, 1177, 963, 1468, 1346, 
                   1586, 965, 1469, 1178, 967, 1470, 1348, 1589, 969, 1471, 
                   1179, 971, 1472, 1180, 973, 1473, 1181, 975, 1474, 644, 
                   977, 1475, 1182, 979, 1476, 1183, 981}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{980, 646, 978, 1593, 1351, 976, 1592, 643, 974, 
                   1591, 1350, 972, 641, 970, 1590, 1349, 968, 1588, 638, 966,
                    1587, 1347, 964, 1585, 635, 962, 1584, 1345, 960, 1583, 
                   632, 958, 1582, 1344, 956, 1581, 1343, 952, 1580, 1342, 
                   954}, VertexColors -> None], 
                  
                  Line3DBox[{983, 1352, 1594, 982, 1477, 1184, 984, 1353, 
                   1595, 985, 1478, 1354, 1596, 986, 652, 987, 1479, 1355, 
                   1597, 988, 1356, 1598, 989, 1480, 1357, 1599, 990, 1358, 
                   1600, 991, 1481, 1185, 992, 1359, 1601, 993, 1482, 1360, 
                   1602, 994, 1483, 1186, 995, 1484, 1187, 996}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{999, 1247, 1485, 1188, 998, 1486, 1189, 1001, 
                   1487, 1190, 1003, 1488, 1489, 1191, 1005, 1490, 1192, 1007,
                    1426, 1491, 1299, 671, 1298, 1250, 1301, 1701, 1193, 1300,
                    1428, 1492, 1303, 673, 1302, 1255, 1304, 1703, 1194, 1012,
                    1493, 1195, 1014, 1494, 1196, 1016, 1495, 1496, 1197, 
                   1018, 1497, 1198, 1020, 1430, 1498, 1199, 1305}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1021, 1259, 1258, 1682, 1019, 1612, 1366, 1017, 
                   1611, 677, 1015, 1610, 1365, 1013, 1609, 1364, 1011, 1429, 
                   1608, 1254, 1010, 1702, 1252, 831, 1009, 1427, 1607, 1249, 
                   1008, 1700, 1248, 824, 1006, 1606, 1363, 1004, 1605, 668, 
                   1002, 1604, 1362, 1000, 1603, 1361, 997, 1677, 1246, 1245, 
                   1297}, VertexColors -> None], 
                  
                  Line3DBox[{1023, 1260, 1367, 1683, 1022, 1499, 1200, 1024, 
                   682, 1025, 1500, 1368, 1613, 1026, 1501, 1201, 1027, 1679, 
                   1251, 1306, 1369, 1678, 1261, 1253, 1308, 687, 1264, 1685, 
                   1256, 1310, 1370, 1680, 1267, 1257, 1312, 1371, 1681, 1028,
                    1502, 1202, 1029, 691, 1030, 1503, 1372, 1614, 1031, 1504,
                    1203, 1032, 1687, 1272, 1204, 1314}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1035, 1275, 1505, 1205, 1034, 1506, 1206, 1037, 
                   1507, 1207, 1039, 1509, 1510, 1208, 1041, 1511, 1209, 1043,
                    1431, 1512, 1316, 701, 1276, 1266, 1317, 1704, 1210, 1278,
                    1433, 1513, 1318, 703, 1280, 1271, 1319, 1705, 1211, 1048,
                    1514, 1212, 1050, 1515, 1213, 1052, 1517, 1518, 1214, 
                   1054, 1519, 1215, 1056, 1435, 1520, 1216, 1320}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1057, 1284, 1283, 1694, 1055, 1624, 1380, 1053, 
                   1623, 1379, 1516, 1051, 1622, 1378, 1049, 1621, 1377, 1047,
                    1434, 1620, 1313, 1270, 1046, 1692, 1269, 1311, 1268, 
                   1686, 1045, 1432, 1619, 1309, 1265, 1044, 1689, 1263, 1307,
                    1262, 1684, 1042, 1618, 1376, 1040, 1617, 1375, 1508, 
                   1038, 1616, 1374, 1036, 1615, 1373, 1033, 1688, 1274, 1273,
                    1315}, VertexColors -> None], 
                  
                  Line3DBox[{1059, 1285, 1381, 1695, 1058, 1521, 1217, 1060, 
                   712, 1061, 1522, 1382, 1625, 1062, 1523, 1218, 1063, 1691, 
                   1277, 1383, 1690, 1286, 1279, 717, 1287, 1696, 1281, 1384, 
                   1693, 1288, 1282, 719, 1064, 1524, 1219, 1065, 721, 1066, 
                   1525, 1385, 1626, 1067, 1526, 1220, 1068, 1697, 1289, 1221,
                    1321}, VertexColors -> None], 
                  
                  Line3DBox[{151, 491, 152, 492, 153, 493, 154, 494, 495, 155,
                    496, 156, 497, 498}, VertexColors -> None], 
                  
                  Line3DBox[{1070, 1386, 1627, 1069, 1387, 1628, 1071, 1388, 
                   1629, 1072, 1527, 1389, 1630, 1073, 1390, 1631, 1074, 1528,
                    1391, 1632, 1075, 1392, 1633, 1076, 1529, 1393, 1634, 
                   1077, 1394, 1635, 1078, 737, 1079, 1395, 1636, 1080, 1530, 
                   1396, 1637, 1081, 1397, 1638, 1082, 1531, 1222, 1083}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1085, 1398, 1639, 1084, 1532, 1223, 1086, 745, 
                   1087, 1533, 1399, 1640, 1088, 1534, 1224, 1089, 1535, 1400,
                    1641, 1090, 751, 1091, 1536, 1401, 1642, 1092, 754, 1093, 
                   1537, 1225, 1094, 756, 1095, 1538, 1402, 1643, 1096, 1539, 
                   1226, 1097, 1540, 1227, 1098}, VertexColors -> None], 
                  
                  Line3DBox[{165, 508, 164, 507, 163, 506, 505, 162, 504, 161,
                    503, 160, 502, 159}, VertexColors -> None], 
                  
                  Line3DBox[{1102, 1541, 1228, 1100, 1542, 1229, 1104, 1543, 
                   1230, 1106, 1544, 765, 1108, 1545, 1231, 1110, 1546, 1407, 
                   1650, 1112, 1547, 1232, 1114, 1548, 1409, 1653, 1116, 1549,
                    1233, 1118, 1550, 1234, 1120, 1551, 1235, 1122, 1552, 776,
                    1124, 1553, 1236, 1126, 1554, 1237, 1128}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1127, 778, 1125, 1657, 1412, 1123, 1656, 775, 
                   1121, 1655, 1411, 1119, 773, 1117, 1654, 1410, 1115, 1652, 
                   770, 1113, 1651, 1408, 1111, 1649, 767, 1109, 1648, 1406, 
                   1107, 1647, 764, 1105, 1646, 1405, 1103, 1645, 1404, 1099, 
                   1644, 1403, 1101}, VertexColors -> None], 
                  
                  Line3DBox[{1130, 1413, 1658, 1129, 1555, 1238, 1131, 1414, 
                   1659, 1132, 1556, 1415, 1660, 1133, 784, 1134, 1557, 1416, 
                   1661, 1135, 1417, 1662, 1136, 1558, 1418, 1663, 1137, 1419,
                    1664, 1138, 1559, 1239, 1139, 1420, 1665, 1140, 1560, 
                   1421, 1666, 1141, 795, 1142, 1561, 1240, 1143}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1157, 1296, 888, 1156, 1674, 1425, 1155, 1673, 
                   809, 1154, 1672, 1424, 1153, 807, 1152, 1437, 1671, 1295, 
                   1151, 1699, 1294, 884, 1150, 1436, 1670, 1293, 1149, 1698, 
                   1292, 880, 1148, 1669, 1423, 1147, 1668, 800, 1146, 1667, 
                   1422, 1145, 798, 1144, 879, 1290, 1291}, VertexColors -> 
                   None], 
                  Line3DBox[{361, 38, 362, 363}, VertexColors -> None], 
                  Line3DBox[{499, 158, 500, 501}, VertexColors -> None], 
                  Line3DBox[{361, 37}, VertexColors -> None], 
                  Line3DBox[{499, 157}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{323, 579, 1438, 324, 594, 354, 612, 1454, 372, 
                   1581, 630, 1464, 390, 648, 1477, 408, 1603, 666, 1486, 426,
                    681, 1499, 442, 1615, 696, 1506, 458, 711, 1521, 474, 
                   1628, 726, 492, 744, 1532, 510, 1645, 762, 1542, 528, 780, 
                   1555, 546, 798, 564}, VertexColors -> None], 
                  
                  Line3DBox[{3, 910, 18, 924, 33, 939, 48, 956, 957, 63, 984, 
                   78, 1000, 1001, 93, 1024, 108, 1036, 1037, 123, 1060, 138, 
                   1071, 153, 1086, 168, 1103, 1104, 183, 1131, 198, 1145, 
                   213}, VertexColors -> None], 
                  
                  Line3DBox[{325, 580, 1439, 326, 1565, 595, 355, 613, 373, 
                   1582, 631, 1465, 391, 1595, 649, 409, 1604, 667, 1487, 427,
                    682, 443, 1616, 697, 1507, 459, 712, 475, 1629, 727, 493, 
                   745, 511, 1646, 763, 1543, 529, 1659, 781, 547, 1667, 799, 
                   565}, VertexColors -> None], 
                  
                  Line3DBox[{327, 581, 1440, 329, 596, 1448, 356, 614, 1455, 
                   374, 632, 1466, 392, 650, 1478, 410, 668, 1488, 428, 683, 
                   1500, 444, 698, 1508, 1509, 460, 713, 1522, 476, 728, 1527,
                    494, 746, 1533, 512, 764, 1544, 530, 782, 1556, 548, 800, 
                   566}, VertexColors -> None], 
                  Line3DBox[{331, 583, 1441, 332, 1567, 598, 358, 616, 1456, 
                   376, 1584, 634, 1467, 394, 652, 412, 1606, 670, 1490, 430, 
                   685, 1501, 446, 1618, 700, 1511, 462, 715, 1523, 478, 1631,
                    730, 496, 748, 1534, 514, 1648, 766, 1545, 532, 784, 550, 
                   1669, 802, 568}, VertexColors -> None], 
                  
                  Line3DBox[{333, 813, 815, 334, 599, 1449, 359, 617, 1457, 
                   377, 635, 1468, 395, 653, 1479, 413, 824, 826, 1491, 897, 
                   828, 1679, 830, 902, 844, 1684, 846, 1512, 904, 859, 1691, 
                   861, 479, 731, 1528, 497, 749, 1535, 515, 767, 1546, 533, 
                   785, 1557, 551, 880, 882, 906}, VertexColors -> None], 
                  
                  Line3DBox[{337, 817, 819, 338, 602, 1450, 362, 620, 1458, 
                   380, 638, 1470, 398, 656, 1480, 416, 831, 899, 833, 1492, 
                   901, 836, 848, 1685, 838, 903, 851, 1686, 863, 853, 1513, 
                   905, 866, 875, 1696, 868, 482, 734, 1529, 500, 752, 1536, 
                   518, 770, 1548, 536, 788, 1558, 554, 884, 886, 907}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{341, 588, 1444, 342, 605, 1451, 365, 623, 1459, 
                   383, 641, 1472, 401, 659, 1481, 419, 1609, 675, 1493, 435, 
                   690, 1502, 451, 1621, 705, 1514, 467, 720, 1524, 485, 737, 
                   503, 755, 1537, 521, 773, 1550, 539, 791, 1559, 557, 807, 
                   573}, VertexColors -> None], 
                  
                  Line3DBox[{11, 918, 26, 932, 41, 947, 56, 972, 973, 71, 992,
                    86, 1013, 1014, 101, 1029, 116, 1049, 1050, 131, 1065, 
                   146, 1079, 161, 1094, 176, 1119, 1120, 191, 1139, 206, 
                   1153, 221}, VertexColors -> None], 
                  
                  Line3DBox[{343, 589, 1445, 344, 1572, 606, 366, 624, 384, 
                   1591, 642, 1473, 402, 1601, 660, 420, 1610, 676, 1494, 436,
                    691, 452, 1622, 706, 1515, 468, 721, 486, 1636, 738, 504, 
                   756, 522, 1655, 774, 1551, 540, 1665, 792, 558, 1672, 808, 
                   574}, VertexColors -> None], 
                  
                  Line3DBox[{345, 590, 1446, 347, 607, 1452, 367, 625, 1460, 
                   385, 643, 1474, 403, 661, 1482, 421, 677, 1495, 437, 692, 
                   1503, 453, 707, 1516, 1517, 469, 722, 1525, 487, 739, 1530,
                    505, 757, 1538, 523, 775, 1552, 541, 793, 1560, 559, 809, 
                   575}, VertexColors -> None], 
                  
                  Line3DBox[{349, 592, 1447, 350, 1574, 609, 369, 627, 1461, 
                   387, 1593, 645, 1475, 405, 663, 1483, 423, 1612, 679, 1497,
                    439, 694, 1504, 455, 1624, 709, 1519, 471, 724, 1526, 489,
                    1638, 741, 507, 759, 1539, 525, 1657, 777, 1553, 543, 795,
                    561, 1674, 811, 577}, VertexColors -> None], 
                  
                  Line3DBox[{351, 821, 822, 352, 610, 1453, 370, 628, 1462, 
                   388, 646, 1476, 406, 664, 1484, 424, 840, 1682, 841, 1498, 
                   440, 855, 1687, 856, 456, 870, 1694, 871, 1520, 472, 877, 
                   1697, 878, 490, 742, 1531, 508, 760, 1540, 526, 778, 1554, 
                   544, 796, 1561, 562, 888, 889, 890}, VertexColors -> None], 
                  
                  Line3DBox[{563, 797, 879, 545, 779, 1658, 527, 1541, 761, 
                   1644, 509, 743, 1639, 491, 725, 1627, 473, 710, 1695, 872, 
                   457, 1505, 695, 1688, 857, 441, 680, 1683, 842, 425, 1485, 
                   665, 1677, 823, 407, 647, 1594, 389, 1463, 629, 1580, 371, 
                   611, 1575, 353, 593, 1564, 322, 578, 812, 891}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{567, 801, 1668, 549, 783, 1660, 531, 765, 1647, 
                   513, 747, 1640, 495, 729, 1630, 477, 714, 1625, 461, 1510, 
                   699, 1617, 445, 684, 1613, 429, 1489, 669, 1605, 411, 651, 
                   1596, 393, 633, 1583, 375, 615, 1576, 357, 597, 1566, 330, 
                   582, 1562, 328}, VertexColors -> None], 
                  
                  Line3DBox[{569, 803, 1698, 881, 552, 786, 1661, 534, 768, 
                   1650, 1649, 516, 750, 1641, 498, 732, 1632, 480, 716, 1690,
                    873, 860, 463, 701, 858, 1689, 845, 447, 686, 1678, 843, 
                   829, 431, 671, 896, 1700, 825, 414, 654, 1597, 396, 636, 
                   1586, 1585, 378, 618, 1577, 360, 600, 1568, 335, 584, 1675,
                    814, 892}, VertexColors -> None], 
                  
                  Line3DBox[{570, 804, 883, 1670, 553, 787, 1662, 535, 1547, 
                   769, 1651, 517, 751, 499, 733, 1633, 481, 717, 874, 864, 
                   464, 1704, 702, 862, 849, 1619, 448, 687, 847, 834, 432, 
                   1701, 672, 898, 827, 1607, 415, 655, 1598, 397, 1469, 637, 
                   1587, 379, 619, 361, 601, 1569, 336, 1442, 585, 816, 893}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{571, 805, 1699, 885, 555, 789, 1663, 537, 771, 
                   1653, 1652, 519, 753, 1642, 501, 735, 1634, 483, 718, 1693,
                    876, 867, 465, 703, 865, 1692, 852, 449, 688, 1680, 850, 
                   837, 433, 673, 900, 1702, 832, 417, 657, 1599, 399, 639, 
                   1589, 1588, 381, 621, 1578, 363, 603, 1570, 339, 586, 1676,
                    818, 894}, VertexColors -> None], 
                  
                  Line3DBox[{572, 806, 887, 1671, 556, 790, 1664, 538, 1549, 
                   772, 1654, 520, 754, 502, 736, 1635, 484, 719, 869, 466, 
                   1705, 704, 854, 1620, 450, 689, 1681, 839, 434, 1703, 674, 
                   835, 1608, 418, 658, 1600, 400, 1471, 640, 1590, 382, 622, 
                   364, 604, 1571, 340, 1443, 587, 820, 895}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{576, 810, 1673, 560, 794, 1666, 542, 776, 1656, 
                   524, 758, 1643, 506, 740, 1637, 488, 723, 1626, 470, 1518, 
                   708, 1623, 454, 693, 1614, 438, 1496, 678, 1611, 422, 662, 
                   1602, 404, 644, 1592, 386, 626, 1579, 368, 608, 1573, 348, 
                   591, 1563, 346}, VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1: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
uHNWbr9I+a8Fy3/l4s/dLH8fwuXvVizvzuDybpSno7we4QBoHSX8IZ7DH1Bd
GD8vCfcoALgHwq94O5GL59E4fHwutaP4E/krdL4gfUq4Vh0O10I4mEM/e7tP
vAoowKHbh0+HqGXX8SXD5cw5XA75VYT3SnhgCocHIhzpk5mlgcGOatIOvr2y
6WD9uqN7ihnjlAWzG2po76Z7ZSljH8nqWcJRczgcFdn5bIb3vuLwXoTfIj07
MjkPcnIiPaC4DulHVG8/sDxoFJcHIX2ieSF8m5cf8W1Q3Cjlj0Ysf4xi+SOK
J6X4PJeLz1H8L41zhI3Tgo2D2lG8ivIFlF+g+FY0H5HyxJFcnojyFDm7QvgD
n8dJ9S/GXP0L0hvKc9F65Sz2L+4/QkEOmy/HjleG0d1v/WeuXhwC21G+jOp0
kN5Qfo3WBdkh0pvUjvAHvh3pGe0LhNugfSeqZ7SPkJ6R3YruR4QjyekT6Z+3
c6luK5mr22p7t7jj+A+U1KZl1sx9l6Jo8YeRQX0fhcB2aZwkNk40V/+F9hfa
j1X1q1I7ik/QuYPu+9C5gMZH547ovND5gu6pUfufdY+M7KQH4xlO43iG78t+
EO+xBeCXIp4qkhONL+kB1W0hfYryDUTrU0T59lXlG8v1F+UBivKaRPkziG+A
+FGIf4Xmi3gvPB8Y8bRRf7nxkTxIfjRfUb0hPhLigSC+Gc+LQzwuxONF/GrE
G0T90fhyfEvE60PzFdWbKL9LlF9UVb6fKJ9TlK8ryscW5c+L1juIji8qv6h+
RPUvur5/lb0hXh/PN0P8UsS/ReuFePuongLF/6g/Gh/Jg+RH8xXVm9Quyufk
4zpRHq8oT1uUhy9aZ4HiNxQHov6i3xWdl6jeRNeluvaA4tiqvieA+NuIh4/q
KUTrZdA46LtITrn5ivKc+f0lym8XrV8QrU8RrT9CeRDKp1B/0e+KzktUb6Lr
Ul17QPkg2qd8fo38AKpbQX4J1ZGhdjQO+q5c/CzK/0dxAl/fIRonoLo5VP+I
6lJRfzR+deMEVM8iGiegeA/FdXw8ieJSVL+G6hCRHlCdL+qPxkfyyNVtofhZ
VG+i9Smi9RSi9UpVrUcTrTcUrScVrRcWre8WHV9U/urWY4rWA4qu759tb9XF
2fj6OIRToXpVVHfM14/L1fWjenM0PpJHDmfj5yuqN9H3o2pw4N/bEX6O+B4S
n2Eix2eQeBGDOF4E0sNtdo9Twt3jIL4K4ocgngm690H8JTQOX8+F6hoQP1Ma
B/GUEB8G1d/x9WKoLgnVUyAcD+Fv1X2HX/S9fb7eDfFU5dYR8YLe1/998LgE
qjdB/ITq/n8Hz6uUq1Ooan6N6gTl6mV43q80PuJJovvcP3tdeNwJ8TEQDwfx
lt/3uvDxCaq7RDx5xKOWxkd8QsTLGsL8OXH+nK/rRHxUxNPmz4uq8uj+6P9B
IB4m4sfK8fkRnxzFpUh+xANE/RFfXeINPqsib7CqPBapHcUJiAeCeBr8eiHe
UXV5d1Xl7yH+lSgPCvHEkJxy+kH65P0nwgkR3wnxphAOKcobRPIgXpzo+HL6
RLwjdO4gPhLvh5E8iG+JzhfEn0TjS+t4mLNnOd4amhfSA+//0ftm6N051F/O
zkV5WVXlkVbXvyF5+Psd5AcQjwvFgYiHicZH/dF3kb8V5Y+J8jlF20XlkeaF
7gX4dsR/q+47/IiHKfpuDKpXErVzVN+E6gjQOxhVreuX2lE8ydc7y9XzonoW
VE+H8mgUL/Hv3qB3JNC7BKiOWBof1YttYnFsARfHondg+PdGUPws8WqcOF5N
JFc/Xiv693pAxMNB9blyeT2qq+Lnhd5FQe9voHcDUJ07qstG+RHKU1C9njQv
/r0dpB/0HgWqq0X1m3J1Z3ycg94hEa1PR/EzqkOU5OHzffReDaq7R+9v7GLr
Tmzdt7B1R/WqaH3l3kHi4xP0HotcnsLHdSivlL6LcCoe10Lv9qC6b9H6bvSe
A6rjRuuF8BCEl+rsmfn/1Zz/5/FetO8+B+97oP3F+1u+vhXhsVWtF0bvuqB3
GND7GKg/en9Arp4a4eoI90bzRe8F8ee4dO6bM//gz5376N0J9E4CqvtG9cUo
LpLw/K6cHlA8xt+DyL1HUdU6NcSf1K0LhxMifFK07gzJib4rtYve44i+zyb6
3pSoPKLvOSA5Q9m8wrh5IbyUj5Pl4mF0r3GB7ccD3H4U3b+d2XdPsO8i/4ze
dUHnjpyfR+/soXlNZfqfzOlfug81Ae9jN6ji+9jPGL/FlfFbOjKezELwDvZQ
jsc1hPHrjDl+HWpH4yB+DuK9y/Eo0P0y0htvb9L6ruLWF8XVKD6X3m8p5d5v
qaqd8PaP9u9/y/8LSDiYA8PBnEEdXB7DRb9i4yT9l/1fAB/PzwdxO1p3FDei
+FzOH/7R9UV5x/te96rWP4r+TwTS219lD3w8Jr3/M4Z7/wf5B5R3oPdw0HfR
uSPnl3g7lHv3BvkZvl161+gN964RkhPpDb3LhNYd7VNeTp6Hg+KcKYwvdAi8
h8/zshC/TuJ/TmP8zxjGvw1i/Ns3jH/7mDu/VrPzS+KTe4H37fn2ZDZOB24c
9F0kp9y8fmV6MOf0gPQWDd6FRnbF23mlTN4kGh+ieBXFA4g/huLMS+y7R7jv
8vGYnPxBzC+VcX4J2Tnqj3BpFJ8jO0fve/NxaSqzQzMuHkPnEWqXs0P0zjma
F683FPcif4XiYXQ+ojhBGse5iuMgP9kW+Fu5fY32Ha83FJciPaB4AMVFKN4T
xavl6hp4+0d5HMpHkDzDONxAwoele/ASDsdA5z56PxCdC8hPDmV5VkuWZ+Wy
PAudF2hfIPtHeRxaX8QDQbg6ik+keKADFw+geSGcDa2vnJ7RfuH9NtovKI5F
+SDaF0g/KH5G9jaSre8Ktr7N2PrKxQnonOLjKJSnIz2gdmn8T5gfs+f8GMKj
0LnP4y0IN0DrKJdf8Lg00rPoOCgvkMsT0bkpGheh/nJ5qJRPyeHeKP9CuDeK
539hcYspF7eg/3lB8d77wldF8wsUT6K4Eemfv7+T8u66HN6Czi85Hh16hw3x
mni9Ibwd4faoXW5d+HakB4RXoHMc6Ucaxx7wvpCcvN4Qz01Oz1W1Ezlcrqr6
EcV5kH7+B5FFKMQ=
                "], VertexNormals -> CompressedData["
1:eJyMvXdcj1/4P17KLETZM1tk7+IQ2ZTxroxsIklkK2TvkZkZFaFSQjI62aTS
3ntvsyjie67cz74f9+f3evy+73/uR7fX+77Puc51rnWez+vWXrR6+tIaSkpK
N2spKamIa92ttdZvupfNcPVRdjq6pGkE+7MvenVlQiZL6X7Pq6tOLkvdNLfo
/ZRItj/nreOcS+nspsPJDy1u5jGfvFUNCg9HsYGDTZ7mJyazJXNU9li1L2CV
hwf/vvMqmrVfYqHZ7FAsm9r7a9H5jYXsxKvNNTwyY9hO89nBvaeHsfSfpz0i
jxWxSq8D1/qExLI77h9efH8cyPJv27t/Hl/M7pwzm7TOIo6NjLvX4OClIQHH
Ksc4xh0olv6OYx9nBieK3/PYkOc36PeXU59MpN/vjNoSK57PT43Su03PXxKw
/Co932MV6yDGw8fOGl5A4+l9crASjSfiZOsgMX7+qU+uA41/pJbzTxr/wmlf
nMR8eYHb4Pc035RawfVovneGPVwr5MPXu5/zIPmYZZwvIPmcMWm4UciRG3pM
tCV53tfpeoTkCTlCrpBng9H16tRZll19bT1m16zkkChmFWgzs7JPJlMturr4
TO1c1m9717URi2PYm4y0hY7r0ljHlz+PJnrlsYD+rx/+9yeWfczPv2bHEtjp
ldbOdqyA6XWekRm9O54NONjbNXVBBDszd9wWoxOFrEFHa5uxIQksYktpza3l
z9mIojVnh2woYsvnZAVG3k5kQ4e0m/O9Qi9gURezulfeFEl/J7KlrjW1xe95
hdX+M/T7Y2bKVb83H7fVWzyfO6hc2UTPP3Qy3Jqez1ZE3xXj4fYTB12i8ZzK
65tG4+lnu325GD8/9mvFIRp/m9Ap92n856fWMhPz5a3WDF5I8zXpF7qa5ls7
O7qekAuPW/GmJsmnw3ZjU5JPRb/L3kKeXLNFbWuSJ+QPvYSeQj8hR8gV8ixV
6v+stCCr+lrOLlfpm2aoh06bvhnsnLLZ+iVPc5hO03XtnPclsBnjGiZ/W5vM
Bvle9ttwMI/t07F9f/BqEttz557G9hyxDzLOJbQV+nNCt3F56JYU9niDgZde
0CsWsuDtlSB9If9O0X5Fr1NZr4b/jXzQbmTAnRGqpzRdC6W/09jzuGWvxO+5
pXnhZfr984mRD+j3F2b5a4vn83avGsTR8w0ftCqj529uZZYnxsPjtJrfp/Fo
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
d1P8nDqt/wuSZ9Dv02UkT+TtyOORvyPPRN6JfBN5EfIk5EeI4xHXI55H3Ik4
FPEn4iTETYiX4Nfh5+Hf4Yf+9UtpDHYTdhT2E/sc+x77HXoJPYV+Qo6QK+QZ
4rbvOc0T1z8W2wxovi2juiylfHD6nB2UL/PQQp+VJB/jH9ZhlA/e2Lb9FMnz
2mMbVZIn6iCoiyAfR96OPB75O/JM5J3IN5EXIU9CfoQ4HnE94nnEnYhDEX8i
TkLchHgJfv1fP5/I4Ifgl+CPYDdhR2E/sc+x77HfoZfQU+gn5Ai5Qp4Raiep
7sNx1XnU5j+Sz3GfnVQv4s/f59uQPMMnxeeRPFFXQp0J9SXUQVAXgfyRtyOP
R/6OPBN5J/JN5EXIk5AfIY5HXI94HnEn4lDEn4iT/o2b4hj8Ovw8/Dv8EPwS
/BHsJuwo7Cf2OfY99jv0EnoK/YQcIVfIM3LfDKp7clwfzbh/iOS5b6XS7dkn
squvNx/F5zWcE8maL2/qsXBVDnu9vJvl+Mgsxg2HjbLzjmBD9safajk/iFm/
e6F790QRe/I2tdZJl3hWpPSool2RD6uM297+Xrti1v6p5zzVjgnsw9qAXu2L
fHjC6CZV9zc0nVp1v/u2ZZ7iOfx52eme9JzYgrCa9Jwxbed7inHwIIvaN2k8
r3dq5dJ4hmXVvivGw486RC2h8XiNWqtP48E4MC6M54N7o5T/LidUX5tsdrmp
np7Pyv6brWQx8QVLGf/2wvmPSaxl4sarMdpF1X/j33E/O8lksPibLzmW7ET/
3v/F+St0f1zAvK9DZ7yqvmrOvuQ2v8VHdsZz01fxPv7Z+Ww8vddv7AQ3eu9o
Za0+w2a84iMaunym37cybupCv6//tftd8VxeO3P3r2XivRYn0y7Q8+eq7+4t
5sWTp+84SvOa9MhXieYF+ULekHP9ghc/B9pHsZhxkUUD7V8yt7C6q8akFzOM
G/PA+C9/nnJ38EGjAN9pZVnnnV9Jf39kGB/Gi3EabVJqNsg+ijur++XT87Nd
dyyn5/efbtaLfodrh7HHnOn3J4cyb5pX0QqH/vTeXVtVztN7vwkDJcbPf/QZ
UUbjt47raEbjh35AX6AnNsEDK2heA56WdR1k/5K/GvbKkt4L+ULekHMrY487
NK+hC+Z2uOBM46e/PzLIF/KGnH1mr21C8ypzSOhEz6/VUH8ZPR/jxjww/vtu
v0vofbjO0froTO8NTzirTfMKvWagQ+N/2felKY0f+g19h553H7jaeeKtCJbX
tqWmzZ9EHpESEWU6pJCl34l5orZ+coBpt9qr+hgm879/F7HCpm0fid9zrwl7
GtLvDR1Mw+n33kNNepGevJtY/wY9f1mS6x9H8XzsH+wn7COvvqPdaV/b1vpt
LfYRrzu63gjaR9Az6B30DeuEdcN6YZ6YN+aLcWBcGM++lsvIvnBcsyYaZdN4
9NrdWkHjCPMc4EX7u3yEwVAaD+wO7BDsT9oop8GLY96y5ovrLm9bUcQ+XnZh
LzvHsfDtkyb5xHqzy+F9V27YXMwOuiuXZByLYydiBtiJ+1z3WIQl3XcYe7eY
7kc9HzxaPIcvu+hgQc+Ztblf1XMgF8gJ8sH78H68t2JUngut45TZzSpX/0lk
ecsy42ld8Df+HfcLujg/p/W1zt1jItZX+ruoet9iH2P/8o5nn9K6a+3ZWU7P
M6u7PIaeg/2A/YF9AX2CfkGvpnZYukKMnydtm9SPxq9xcuswGj/kBflBbv+O
b3IAxvmvvTAKgN34d78ZBWDf/avHkwOgz6+ezrES7+XmuY7j6L3v153Ko/di
nbBuWC/MH/KAHGCPYJ9gl7Cfsb+xr7F/sJ+wj2Zu/UVy4I1H2G2i9z5vbFg1
HugH9AV6cnFOMukDD/2TP5zub11Vr0qe8E/wV/BTkDvWAfLH/CEPyAHjwLgw
HrwP78d7sX+wn7CP2hsnxIe4ZFdfey+pnGXnG8H6lemniL/5ukndYuj+4Lj3
JnQff+PfcX/f54MJ9Deuoyafn0H3w/6bPXGehshHV33XdB2bzVacKbcuXxTB
Wl261FL8zZ8EZo6hf9duaWVJ9z++v9uAfvfo4kJjcZ93kO7fqF1Iz+GNf5o1
of8v+VLKUrqP5+I9eD7+fzwPz8H78H68F8/Fe/D8pq2a91yrlMOKNPd0Sc3O
Yqd7mUWMnhbFXrw2z4xtl8nKzsxuH+OVy7o1MZli/iSSWSQvjJnvlcWUWxw4
0K8sm5lOqH2n1uxoZpWi1zHQK5W9ybPpZXArn4XU8Js/eLHIy/wfu0xanM78
YmbO0+iex7oPivk8yj6WqZu0yJwSlMiiOjV+HnihgK3Q7dFvQ88Ypq3gHPnO
OscJN5+ksKHtA4cZj8hnv8fHjwk9GMc+KTgPnTav58qazyPYNI+DX58PL2IO
813NQ/bHMhEcuT+qF83yFjfwqd2rkJl99XILtEpg4dnuUTa279nTL7H5OfFF
TKv3QJPCenGs/Oevmt1yQtn+5Ca9HhcXstRdFiXtu4pxKzhXnahhcddp7k2m
Gzrq5skAEZc5RE/q+SWRxbgZh/psvM5bvB4TdWxnMQs1rWi56azYR+7ztM/P
vclXXfziTr933rm/6vdLFJzDpjxd206Mh1+dfrMnjcegRc1iGs/L6LMbxXy5
ZsTbzzTfb9t059J8Txwd9EDMlzsuLPGi+W6rf9mF5jve9/gnIX8+V1eTk/yj
6nr0JvkvWeNrKuTMCw4aDiY5e9tsHEVyzllzoo9YX6485qMOre+G8qC5tL7I
twul/DtVyrt93afeFOvOdXo3nUPrvvaqVwmtu6Lz35isK7lC3/jOPVZtSN/O
1sqeSPqW2mF1vNA33lR50D7SN13/lx6kb+pPwlRWOmTxtgsMvk32zBHxRKfp
gdkR7Pzv072EPvPFSUs7kT7n1x8fRvo8zFX/9J0zuezMsMjuRz0z2NAfBy23
BkUzz7edypzNclhGQO/+ZW8zmbFa1MZ2TWJZp4DP69TaZzLLDXrOet1z2OSL
quGvEuLZk0a3fJUapbOPgfM3+S/MZZnzhl43G5fIZio4L+7UYOGBqaGxLH/2
6hwT93x2o9P72Rofk9nwfhVX3lwKZ3dT7e2eOBawnKPl6XuVUtkTBefI976v
+5bR2ZO5+mXedzpXyKKve29TbZHGOt68uCKzsydXWbKv6v6C91uq7gcqOF9+
OXTCHfFe7mHgtIXeq6r7MpXe20hv/TkxTr50QmQmjTPxETelcW7s//uBmC+/
4X1sA813f1krV5pv8PaRm4R8+De9lpdJPo937g8l+fSW6imnpPrKT6mu0rbF
jgohZ/45ZVdvkrPS3kO2JOejna85iXXhGj5enWldNDzvL6V10d45LeWPbj57
NcDWPCA/lel3HaXeyjCW7Q/T/eHWII8NW9Is/5F6Olt68to2veQ45spfLtNR
zWatuh2ud2h7Juu6OeHhf6uT2J1mpS0XlWewpZojDDUjsth13W5NapunMKbg
3FmrcdjmjDaJrNnJnUu9V+aytxWtNyZqprM6J5447xofxRxGn39fsSePpfx8
9NAnPZ3dUnAevVkrc8eZH96sqc6f3GvB+Sy/93XX9A8Z7NKTrqHiPt+8akvV
/QXLDKvuL5TOA0ql84G30rnAApNKX/FePixT6R29d2pY9AN67+uFgw+KcfJx
SisW0Tjr/ZewjsbZ2flaezFf/mtU8iia75BfwzRovoMiPlkK+fA6hy/WJvno
LHC8R/JBnctOqnvtl+pdcxK//RRy5qEHL2aTnJ1WHttMcl5lZpsh1oWv2P9x
Jq1LVKhaLVqXIRMOHB59u4CdvLrv1/C58ax0eo2+uTfiWMNn6z/Z+uazZJ/N
7q4miczjbGWI/qkEdr7DmQ5tv+WwCNtVJo3KU9kv/x5P7jVJZadNXgblKGWz
cZ0iZ5oapbO6/Us4i0pjCxScX9/TT9zc4lMKSz0zzSKwSRabW6eiXvHeTDbk
qPHZ95tjWUvXwXsGmmWzd4nBHVcFZrFH0nnhNOn8cK50bui43cNVt9SX+d0p
SAxIzWGpof30mg4XftFgzx9xny/wGVd1/5zpqWF0/4WC8+4n6qa3xXt5hz+L
dtJ7w03Vtem9yzo3OSjGyXuNarWExjnrYEJtGie3Gx8m5sufjl00jea7LOT0
E5qvfuqUrkI+fOe+DUYkH52Zy+6TfFB/tJLqkUp7/9Yhzw1c+U3ImX/YE+FM
cl4de/g1ydlkUf3jYl1486HF32hd9v681J3WRbu52syt+YWs/60ND6x8w5lN
2KRuM8Pi2brBNk2OtSpkL4a9uxSvF8laLb9865J6EtticCq3g38ee/fsYbpn
RQyb1O3o1HXP0lhep86OZh9zmJZ2768Ow+NZbsGFibstMpiLgnNwK9VWdY5u
SmeTzpy8Hzw9hT36723PBWL/zZ3zYejVigTWoMHYWQ1XpLGz3pXlh0pymYqC
8/GwEa/G2Vv6sfob3GovrpnBVqaEzkscV8CSCmZ6i/tc+cb3WnQ/ZGm4Od2f
rODcnA3fNlW8l79XP2pC733gVauM3ntP+aGGGCf3NB92h8bZcFzXbjTOzKIn
Z8V8ecsXXkU039/GKYY0318OoYVCPnxrz9xEks8DJeOJJJ8esvN0E6k+fPJy
j+ZCzjxsQNI5krOK5WoXkrO//kATsS68e2jzu7QuXc4Xa9O6vPwZfGIRL2Lj
Td4Udtd/zjTnj9349GwCK1JbYH+mcRHbd62/SY/iF+xOeMf0AQ2TWaTjhvEP
lAuYof+aDZP7vGUzLk77Ptglnc3vWivt8eI8Vre9xu/81CA2I0E9+fy5TDZd
wXl6v7HR+n21hZ7ua/LZzyWMla8+N7jZmDwWo+A8vfNCr51Plz5m3pNOfR7o
EsXUp1rWvdO8hBUqOE9vszt4gOGMFH4wocHmWeMimGaJypb67gXM8UnZGPFe
fv9el2J6b0iXpL703lQ3mywxfm60ftp3Gn/LSO04Gv/c7E+TxHz5/ftdbGi+
t/IffaH5ov4eLdXjz0t1+Dtj7mwXcuMxcf7GJDfbQ13jSW6tC5xOCjnzLwuV
cknOZtlTbUjOBh17722tVszu1bNJM08ZFvD3msAerHJq0HBlETs566V7zsrh
AX+vySyuPO7CtK0FLPRks4XpZaMC/l7T2ZrMby0jPwn5a9aou199TMDfaxZz
kc7ZNaVzdk3pnP30oMroo8GZrPnd3t0edZwQ8Peaz+YpOGf/Pmfqj5jiJywk
ueujve+NAv5ePzIjBefs7345O028lsoTT26xmRE+KeDvtZDp98pLFu/l82d8
1ab3/r3ms/5b+7QT4+cdmgeo0Pj/XrPYhZIOV8R8ubr1iLk037/XdIXn7+m7
AjSE3PiGnC3OJLe/12S25G7cPiFn3qHWyHiS89+r0HOHr8dJ/9fUiKqpo/+c
7zy+dQOty6C+m+1I/195/Vgt1pF//zYgjdYxqH+rcaT/CXnx54Q+8E8R88pI
Hzp5jk0h/e98u3e3gtQgbmp3KZH055CC8/eY4IhhpP/Mdn/dhy5hfG2DygGk
h6skPS6S9LqnpM+2Dtu3kf5r7spWH+QSxbv6BqmS/m+Xzt0dpOs96fx9aC+N
vqT/RbsPOQr957kW9zeQ/g8a/c2A9L+3s1NNeu+4VyN703tdevhkkP7PV1qj
TeNvt/5uDI1/xt7TE0n/R2YfdaT5jm//9jPNF+dJMdL5krF0rlSx4u020n/1
7G2WJLenXkPiSG6jbQIdSf+bNKivTHJ+3XT3apJzuKH9dPIXp50WPBd2ieto
xHchu6T1cocm+QvXdM/bwo7x7tGO7mTH9lt6Z5G/0Kr/5auwh3zHWMfJZA8n
3at9jPyFy7n0mjuHx/PzZ7TGk/20k87lK2Tn8smz69ckf9H2QbO3wg7z2m/j
quxwqs6aAeQvIrY6LxJ2m/dp2qyU7La7gvN6719TDMhfzDWr1BB+gY/qv8WM
/MI19+Rb5C+MDxhV3Xd5ZGdK9wulc3w36RzfXjrHD1RvP4H8xfEtefPpvTO0
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
r5wugelCH876DTP6nsleKqg/m+4pCA6LiOFae6Jq312TwzQKzp//wDOZkaW7
/zDXJJ4VdbPHlAXCLgWoNXock84c3adPyLDI4lNCM4b+OpzBPp2tkTJXL40F
Z4xbJNaPj9l5YKRYT2aS2zeD1nGaFI+ukvGwnvtculnSK5/r1px5tnFgMrNp
ZmnxtCyemd7QXy7sKS97cqTgcUYyW6fvYEN2VanhX7v/VfID9pL9D73apjsf
UcCMVHS/DN0Rx3qccbuhNyiRvZL2A/bHbGlfNF1cdi9X6Fn6xOMXrixLZWrt
fw5+7CDyFKn+XCmrPx/q2LpgVlBa9bV137C6x2yz2dw1oYbzFsSxjtMGxFoE
ZDJf9rl4S90chfVn1RmbFoxUu8eyD2WN7HY/kzn0zu/fsanI39JmOOjt9uM3
j1hvUpmfzdzW+0TeupZbXX8eL6s/r1rp//vrhATeovtVn7U6Gaxy/bvgU1E5
7PQCS9UfY9J43W4/I8vOZjC7QP3eg0xE3pqvOUCsHx+cXnJNrCdLS7/YkNZx
wLsBdVqfzeUatcy/vRPrdGHhldDCuFTWU6o/L5DxuVRGRw0TdpZ7ZjboJewu
S2h1YxLZ2ym/Ouxp3bqQO/zqaK+hGstCvOxe3akdz95WNFXROlzEDHwjXiQV
vGEflQeljZqZwEIk/2Ep+RP4keLuo1iMVz67c6LOhsNFoezj1IQX9dalV+8H
7A/sC+yHx7L6s5Xb6xsVLhns558tiaXfophmzzyr+aG51fVnXN2l+nNGWFmF
U5w/W173Y+k0kwTW/0a5O/tVVF1/tpbVnyOSrgdN2pLMGz5pNqjJ9Vh2n/WI
nRSZz1rfN3si1oOrH9DJFuvDVvy49J7Wpft/u/+sVc7jW/TaG90PCWcOVwo3
6/bLZErlZ9cI+8i/nq1sJ+wla9zFZCjZSeRdCVIedkHKv75ddHL9EFLIL91S
sVfzDWJ9Cq3nbXmcVB3fqErxzmwpzpkzr03+nrFFbEjTfWN9F/gz3cCE+Tsn
JFfbd9h72PkJiYFWf+7lsdn1QuK0azxj++y6N6qRmVldZ1ZWUlr7P/lc0OO6
kl5Dn1FnVlJSWv8/68xBDc/3+3TxSfW1dOubOypO/7fOLH5v8z/rzEqvLsbs
s0/lo++3y8mL8mcfjuu/8LxdyFwt/ZWaO2Ry54sjB+jtfsNSpqiWunnmMfOf
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
YN51DMnT9PsrfxpnzhttWxqnutPeSjEvnrFy4Gqa17ZNf/Xn/Ff9EINd2fzT
cPe3VN8eEPn7PdW3Me7p0jww/pojB6wX8Vz11dl+RznFdapSHWC9rA4wbLrS
A5E/snOL1w2j/LFLd40kyh9bZBsXUjwZOW7HMxFPsl8fdN5RPBnYcup9EZ8z
w0iPeyI+Z8WuDmoUnyOPjZThqaKk/7+29Lyf0nPa+E0xy4/y59sj9APp392T
Pr6h+6gzjJXqDL+lOkPH1K6rzsf58zrbL36jvHiOwZ0blBevNq3blfKL+ioG
Y0R+wVQ1Zk2k/OJW4+sHKK6dpj3AhuQw9nq7UpKD1exGV8Xv+elvzUfT70M9
boyn3wMHYynLrz07ffcS+SE/cpX1oTwx4WB9L8oTLx9wDKI8pdxxyR2Sg+e2
lzVJDhvUsqLFuvDLR95NonVJUm52mtbFJPSrqtbhIp5wP/Qp1R9ePdseT/WH
G+NstlAeN/n+1Kkij2PKhx9U5XENFPABd0jyainJD3L7H3mu/f/McxNKr9+l
9Rqc3qmA8ql600bVpXEeHvZpuNeeJ+xLScaMDttesW0Vrvu/mH5kCxyn+ov7
vEmI33S6bxnwaS/dvyDN/7EkD8hhigJe4boHFz3od7hypxkesvx60//Mr70r
vS/TuswzbrSN8kT9m/8Z0rrcMJoVTfmM/r7WM2i+Wy8pP6f5vr2vbSfkxt2n
Bo4jub34GpBHcnuZpK8i9ht/qWk8nOoPF5zM59K+wz6sK+1L7Me1CviJLhcv
+dC+uPqi5TSxL3iTNtpxtC/kfUuAm5oh6ZmHpHeGkr7da3RBj+Tcr1LphJAn
P17UoEqeW1eUPyA5GydGH6P7dt6zd9N98yXPSqn+s2f+n/rTTRJ4/4RTLqTn
dxTwHA+s/WJB+6JjtIc6/X7O+onX6PfIq3fJ8ut+khxvSXKFPId2HfOa6khN
WgdMpvle768fSfOdWetbDZKnx/h67iS3a31aV8lzXcWRrST/Wfa77aj+UOfU
gCr5u6j9VqY6WxEfnCz0nLeuOSCV9FxHAV+y+/cGqsbv/Nm6vTN7aLVL5tss
ve1+GxWxL4vO2or7/LNyPR26P11r9Va6X6CAR9kvNYHqe3z78/6x9N6vL+3j
6L3DrhyJov34vO2CJZS/z9COP0n7EfYU9hV29aK0bzdK+zhZ2r+K4pxOO1I6
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
7gkFAMalM9E=
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, 
              FaceGrids -> None, DisplayFunction -> Identity, Axes -> True, 
              AxesLabel -> {
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["y", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-1.1999998285714286`, 
               1.1999998285714286`}, {-1.1999998285714286`, 
               1.1999998285714286`}, {0., 2.879999177142916}}, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n  "}]}],
    Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[x^2 + y^2, {x, -1.2, 1.2}, {y, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max9365$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max9367$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min9364$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min9366$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6002535$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min9364$\
6002536$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9365$6002537$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min9366$\
6002538$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9367$6002539$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max9365$$ = 
                    0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min9364$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`min9366$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6002535$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9364$\
6002536$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9365$\
6002537$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9366$\
6002538$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9367$\
6002539$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[$CellContext`x^2 + $CellContext`y^2, \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$]], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$]], 
                    1.2]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$]], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$]], 
                    1.2]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9364$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9365$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9366$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9367$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMRnn5hgR0MCYNKEn53lvspBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d79GhjNJ+r9fTl635IDlJr+\
HpoTUjOc9lIci7k1xRrZkU6SV8dtOamJpdyuEHJd531Zr3Us3B+\
PMrfB94UnAw9KthnBlG9XRPQT5jia49Y8WO7E+mXCbA2U/6+OXOzvDFcOhhMJYxGEOV0M/\
aQuYzBZqmPQS6Ys1bDuKbPz4oj58KzmP6vaAiofqe9U4UEAsjBXDMJ/\
jWi83UbUzMgCCgyLnT5OQ5anuBNoqJbELnOb5xNllP2wKDyrTn5k7JzSYF+\
fCv4wMZu5i8xyXtzo7AsDAuGH2nZfXPuRvg+XVbeCWP1xOH+b3hyBsYdkT1Kp1PWtfJM1J1rYt+\
wdV5zZetBnn2lKn/lw6YNqthDNuGQeeHtsbrtbcK/7wtvMyx6xfivmvNZ+8oAdcNh0pwHyUp+\
CKKZsoDL9H26ercOjzGrYrvGJ0hFaxwIhtn2S+uP+\
5X4PWmEGPtpluQjqhnQERzal3EcbvLMmZGM1CQWODFdf2yySayDiXgzva1Z4IwO8A8IZuWJzT76VLd\
wSSzL39U3Eoup5oMed8XhmZUbRT9DayPsuQKMpGBkcR4QVOvwRxWSY1BBct+UILEOQiGkOyX/bhv/\
uFyJZCqPYXqUp7FgSvNSXgS/\
bLAB1RkZtbcsQNHV3DbYjaRPK5VF7E0XZ4222O632S6cUNzoIeSEFqS8IHebQrdpvBXN4WVPbhbE7o\
1oVsTujWhWxP+3zXBRYz/Sr8BIhS4Jg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], 
       "\n  "}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Geometric figure", "scanner" -> "Geometry", "id" -> 
     "GeometricFigure (ofBoundary)", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"infinite paraboloid\"", 
              $CellContext`TagBoxWrapper[
              "Entity" -> {"Surface", "Paraboloid"}]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[x^2 + y^2, Extension -> {I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"x", "-", 
                   RowBox[{"\[ImaginaryI]", " ", "y"}]}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{"x", "+", 
                   RowBox[{"\[ImaginaryI]", " ", "y"}]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "SymbolicSolution", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x^2 + y^2 == 0, {x, y}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x^2 + y^2 == 0, {x, y}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"\[ImaginaryI]", " ", "x"}], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "SymbolicSolution__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Polynomial discriminant", "scanner" -> "Expression", 
     "id" -> "PolynomialDiscriminant", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Discriminant[x^2 + y^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\[CapitalDelta]", "x"], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "4"}], " ", 
                 SuperscriptBox["y", "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Integer root", "scanner" -> "Reduce", "id" -> 
     "IntegerSolution", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[x^2 + y^2 == 0, {x, y}, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"x", "\[LongEqual]", "0"}], 
                    RowBox[{"y", "\[LongEqual]", "0"}]}, "RowWithSeparators"],
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Properties as a function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsAFunction", "position" -> 
     "900", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[x^2 + y^2, {x, y}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            
            TemplateBox[{"\"\[DoubleStruckCapitalR]\"", "\"2\""}, 
             "Superscript", SyntaxForm -> SuperscriptBox], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[x^2 + y^2, {x, y}, z]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"z", "\[Element]", 
                   TemplateBox[{}, "Reals"]}], "\" : \"", 
                 RowBox[{"z", "\[GreaterEqual]", "0"}], "\"}\""}, 
                "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", 
                  "\"all non\[Hyphen]negative real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[x^2 + y^2 == (-x)^2 + (-y)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod10$$ =
    XMLElement[
   "pod", {"title" -> "Partial derivatives", "scanner" -> "Derivative", "id" -> 
     "PartialDerivatives", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[x^2 + y^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[PartialD]", 
                  RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", "x"}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[x^2 + y^2, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[PartialD]", 
                  RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "y"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "y"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", "y"}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "PartialDerivatives__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x^2 + y^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "3"], "3"], "+", 
                    RowBox[{"x", " ", 
                    SuperscriptBox["y", "2"]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {"3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]
         }], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod12$$ = 
   XMLElement[
   "pod", {"title" -> "Global minimum", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMinimum", "position" -> "1200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[x^2 + y^2, {x, y}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"min", "\[NoBreak]", 
                  RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], HoldForm], "}"}]}], 
                "\[LongEqual]", "0"}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                RowBox[{"(", "\[NoBreak]", 
                  TemplateBox[{",", "\",\"", "x", "y"}, "RowWithSeparators"], 
                  "\[NoBreak]", ")"}], "\[LongEqual]", 
                RowBox[{"(", "\[NoBreak]", 
                  TemplateBox[{",", "\",\"", "0", "0"}, "RowWithSeparators"], 
                  "\[NoBreak]", ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a disk of radius R", "scanner" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "id" -> 
     "DefiniteIntegralOverAHypersphere", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                UnderscriptBox[
                 
                 RowBox[{
                  "\[Integral]", "\[NegativeThickSpace]", "\[Integral]"}], 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], "<", 
                   SuperscriptBox["R", "2"]}]], 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], ")"}], 
                RowBox[{"\[DifferentialD]", "x"}], 
                RowBox[{"\[DifferentialD]", "y"}]}], "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"\[Pi]", " ", 
                  SuperscriptBox["R", "4"]}], "2"], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a square of edge length 2 L", 
     "scanner" -> "InterestingMultiDimensionalDefiniteIntegrals", "id" -> 
     "DefiniteIntegralOverAHypercube", "position" -> "1400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[x^2 + y^2, {x, -L, L}, {y, -L, L}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "L"}], "L"], 
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", 
                    RowBox[{"-", "L"}], "L"], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "y"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"8", " ", 
                  SuperscriptBox["L", "4"]}], "3"], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux10$$ = {True, False, {False, False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "14", "datatypes" -> "Math", "timedout" -> 
    "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
    "timing" -> "1.986", "parsetiming" -> "0.179", "parsetimedout" -> "false",
     "recalculated" -> 
    "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa674019d7cb4682ag9847000037cigeg385cf4abh1697175660060143921", "id" -> 
    "MSP674119d7cb4682ag984700003329hcf9c981b97h", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa674219d7cb4682ag984700004i36hiad1h295h481697175660060143921", "version" -> 
    "2.6", "inputstring" -> "x^2 + y^2"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 20, 6.7936545`8.584678429288322}, "Line" -> 
    59, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "x^2 + y^2"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{660., {820., 826.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{
  3.8802857448985395`*^9, {3.8802859523395944`*^9, 3.880285986233592*^9}, {
   3.8802862444049034`*^9, 3.88028625556604*^9}, {3.880286313872677*^9, 
   3.880286344621129*^9}, {3.880286380210432*^9, 3.8802864071602592`*^9}},
 CellLabel->"Out[59]=",ExpressionUUID->"8bb50b9f-7f72-4154-a2a2-8fed37924553"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<time in Tokyo\>\"", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.880287111799183*^9, 3.880287197652069*^9}, {
  3.880287315065491*^9, 3.880287317354885*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"08180781-9942-4434-97de-0eb4cd10d597"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "time in Tokyo", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "LocalTime[Entity[\"City\", {\"Tokyo\", \"Tokyo\", \"Japan\"}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TemplateBox[{
                FormBox[
                 TagBox[
                  GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"current time\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnsEqual -> False, RowsEqual -> False, 
                   GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                   AllowScriptLevelChange -> False], 
                  $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                 TraditionalForm], 
                StyleBox["\" in \"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], 
                FormBox[
                 TemplateBox[{",", "\",\"", 
                   TagBox[
                    TagBox["\"Tokyo\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CityData, {"Tokyo", "Tokyo", "Japan"}}]], 
                    Identity], 
                   TagBox[
                    TagBox["\"Japan\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Japan"}]], Identity]}, 
                  "RowWithSeparators"], TraditionalForm]}, "RowDefault"], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              StyleBox[
               RowBox[{
                 TemplateBox[{
                   TemplateBox[{"\"2\"", 
                    TagBox["\":\"", HoldForm], "\"35\"", 
                    TagBox["\":\"", HoldForm], "\"18\"", 
                    TagBox["\" \"", HoldForm], "\"am\""}, "RowDefault"], 
                   "\" \"", 
                   StyleBox["\"JST\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  FormBox[
                   TagBox[
                   "\"Sunday, December 18, 2022\"", Identity, 
                    TagBoxNote -> {"Hyperlink" -> "Dec 18, 2022"}], 
                   TraditionalForm], TraditionalForm]}], 
               LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
              Identity], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Time offset from UTC+03", "scanner" -> "Date", "id" -> 
     "TimeOffsets", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  RowBox[{"+", 
                    TagBox["6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6", "SRString" -> "6"]]}], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"hours\"", {
                   FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
              SyntaxForm -> Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, ZeroWidthTimes -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Clocks", "scanner" -> "Date", "id" -> "ClockImages", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               GridBox[{{"\"Tokyo\""}, {
                  GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[0.6], 
                    Thickness[0.02]]], 
                    GrayLevel[0.96], 
                    DiskBox[{0, 0}, 1], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"AM\"", 
                    GrayLevel[0.5], {FontSize -> 9, FontFamily -> "Roboto"}, 
                    StripOnInput -> False], TraditionalForm], {0, -0.4}], 
                    GrayLevel[0.5], 
                    Directive[
                    GrayLevel[0.3], 
                    Thickness[0.01]], {
                    
                    LineBox[{{0.39, 0.6754998149518622}, {0.4405, 
                    0.7629683807340905}}], 
                    
                    LineBox[{{0.6754998149518622, 0.39}, {0.7629683807340905, 
                    0.4405}}], 
                    LineBox[{{0.78, 0.}, {0.881, 0.}}], 
                    
                    LineBox[{{0.6754998149518622, -0.39}, {
                    0.7629683807340905, -0.4405}}], 
                    
                    LineBox[{{0.39, -0.6754998149518622}, {
                    0.4405, -0.7629683807340905}}], 
                    LineBox[{{0., -0.78}, {0., -0.881}}], 
                    
                    LineBox[{{-0.39, -0.6754998149518622}, {-0.4405, \
-0.7629683807340905}}], 
                    
                    LineBox[{{-0.6754998149518622, -0.39}, \
{-0.7629683807340905, -0.4405}}], 
                    LineBox[{{-0.78, 0.}, {-0.881, 0.}}], 
                    
                    LineBox[{{-0.6754998149518622, 
                    0.39}, {-0.7629683807340905, 0.4405}}], 
                    
                    LineBox[{{-0.39, 0.6754998149518622}, {-0.4405, 
                    0.7629683807340905}}], 
                    LineBox[{{0., 0.78}, {0., 0.881}}]}, 
                    EdgeForm[None], 
                    GrayLevel[0], 
                    GeometricTransformationBox[
                    
                    RectangleBox[{0.04, -0.07}, {-0.04, 0.5}], {{{
                    0.2138516022285376, 
                    0.9768661588079952}, {-0.9768661588079952, 
                    0.2138516022285376}}, {0, 0}}], 
                    RGBColor[
                    NCache[
                    Rational[15, 17], 0.8823529411764706], 
                    NCache[
                    Rational[191, 255], 0.7490196078431373], 
                    NCache[
                    Rational[52, 85], 0.611764705882353]], 
                    GeometricTransformationBox[{
                    RectangleBox[{0.0125, -0.15}, {-0.0125, 0.9}], 
                    
                    RectangleBox[{
                    0.0325, -0.2}, {-0.0325, -0.12}]}, {{{-0.3308984695492537,
                     0.9436663620422006}, {-0.9436663620422006, \
-0.3308984695492537}}, {0, 0}}], 
                    GrayLevel[0.2], 
                    GeometricTransformationBox[
                    
                    RectangleBox[{0.025, -0.07}, {-0.025, 
                    0.9}], {{{-0.8496897849240674, -0.5272829121028787}, {
                    0.5272829121028787, -0.8496897849240674}}, {0, 0}}], 
                    GrayLevel[0.7], 
                    PointSize[0.05], 
                    PointBox[{0, 0}]}, ImageSize -> Tiny]}, {
                  TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"2\"", 
                    TagBox["\":\"", HoldForm], "\"35\"", 
                    TagBox["\":\"", HoldForm], "\"18\"", 
                    TagBox["\" \"", HoldForm], "\"am\""}, "RowDefault"], 
                    "\"  \""}, "RowDefault"], 
                    StyleBox["\"JST\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {"\"Sunday, December 18\""}}, 
                GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                DefaultBaseStyle -> "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], "\"               \"", 
              StyleBox[
               TagBox[
                GridBox[{{"\"Brest, Belarus\""}, {
                   GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[0.6], 
                    Thickness[0.02]]], 
                    GrayLevel[0.96], 
                    DiskBox[{0, 0}, 1], 
                    InsetBox[
                    FormBox[
                    StyleBox["\"PM\"", 
                    GrayLevel[0.5], {FontSize -> 9, FontFamily -> "Roboto"}, 
                    StripOnInput -> False], TraditionalForm], {0, -0.4}], 
                    GrayLevel[0.5], 
                    Directive[
                    GrayLevel[0.3], 
                    Thickness[0.01]], {
                    
                    LineBox[{{0.39, 0.6754998149518622}, {0.4405, 
                    0.7629683807340905}}], 
                    
                    LineBox[{{0.6754998149518622, 0.39}, {0.7629683807340905, 
                    0.4405}}], 
                    LineBox[{{0.78, 0.}, {0.881, 0.}}], 
                    
                    LineBox[{{0.6754998149518622, -0.39}, {
                    0.7629683807340905, -0.4405}}], 
                    
                    LineBox[{{0.39, -0.6754998149518622}, {
                    0.4405, -0.7629683807340905}}], 
                    LineBox[{{0., -0.78}, {0., -0.881}}], 
                    
                    LineBox[{{-0.39, -0.6754998149518622}, {-0.4405, \
-0.7629683807340905}}], 
                    
                    LineBox[{{-0.6754998149518622, -0.39}, \
{-0.7629683807340905, -0.4405}}], 
                    LineBox[{{-0.78, 0.}, {-0.881, 0.}}], 
                    
                    LineBox[{{-0.6754998149518622, 
                    0.39}, {-0.7629683807340905, 0.4405}}], 
                    
                    LineBox[{{-0.39, 0.6754998149518622}, {-0.4405, 
                    0.7629683807340905}}], 
                    LineBox[{{0., 0.78}, {0., 0.881}}]}, 
                    EdgeForm[None], 
                    GrayLevel[0], 
                    GeometricTransformationBox[
                    
                    RectangleBox[{0.04, -0.07}, {-0.04, 
                    0.5}], {{{-0.2138516022285376, -0.9768661588079952}, {
                    0.9768661588079952, -0.2138516022285376}}, {0, 0}}], 
                    RGBColor[
                    NCache[
                    Rational[15, 17], 0.8823529411764706], 
                    NCache[
                    Rational[191, 255], 0.7490196078431373], 
                    NCache[
                    Rational[52, 85], 0.611764705882353]], 
                    GeometricTransformationBox[{
                    RectangleBox[{0.0125, -0.15}, {-0.0125, 0.9}], 
                    
                    RectangleBox[{
                    0.0325, -0.2}, {-0.0325, -0.12}]}, {{{-0.3308984695492537,
                     0.9436663620422006}, {-0.9436663620422006, \
-0.3308984695492537}}, {0, 0}}], 
                    GrayLevel[0.2], 
                    GeometricTransformationBox[
                    
                    RectangleBox[{0.025, -0.07}, {-0.025, 
                    0.9}], {{{-0.8496897849240674, -0.5272829121028787}, {
                    0.5272829121028787, -0.8496897849240674}}, {0, 0}}], 
                    GrayLevel[0.7], 
                    PointSize[0.05], 
                    PointBox[{0, 0}]}, ImageSize -> Tiny]}, {
                   TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"8\"", 
                    TagBox["\":\"", HoldForm], "\"35\"", 
                    TagBox["\":\"", HoldForm], "\"18\"", 
                    TagBox["\" \"", HoldForm], "\"pm\""}, "RowDefault"], 
                    "\"  \""}, "RowDefault"], 
                    StyleBox["\"UTC+03\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {"\"Saturday, December 17\""}}, 
                 GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                 DefaultBaseStyle -> "Column", 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "Column"], 
               GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Current Greenwich mean time", "scanner" -> "Date", 
     "id" -> "CurrentGMTTime", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TemplateBox[{
                 TemplateBox[{
                   TemplateBox[{"\"5\"", 
                    TagBox["\":\"", HoldForm], "\"35\"", 
                    TagBox["\":\"", HoldForm], "\"18\"", 
                    TagBox["\" \"", HoldForm], "\"pm\""}, "RowDefault"], 
                   "\" \""}, "RowDefault"], 
                 StyleBox["\"GMT\"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox["\"Saturday, December 17, 2022\"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["userinfoused", {"count" -> "2"}, {"\n  ", 
      XMLElement["userinfo", {"name" -> "Country"}, {}], "\n  ", 
      XMLElement["userinfo", {"name" -> "TimeZone"}, {}], "\n "}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "CalendarEvent", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.344", "parsetiming" -> "0.386", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP239114a8ia45fi5dh44e00002d9cf658ib0b38h2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa239214a8ia45fi5dh44e00005423e5a343i56b778350669649384844499", "version" -> 
    "2.6", "inputstring" -> "time in Tokyo"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 35, 21.3144952`9.08124998341105}, "Line" -> 
    74, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "time in Tokyo"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{660., {216., 222.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.8802871903514795`*^9, 3.8802872069329925`*^9}, 
   3.8802873213543477`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"84984dca-8b91-4a0d-bbd6-821d7d9b218d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<20 million years ago\>\"", "]"}], 
  " "}]], "Input",
 CellChangeTimes->{
  3.880287430443739*^9, {3.8802875379012656`*^9, 3.8802875410730147`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"1d6c2b1a-a8e8-4b8c-aba4-bd6852a3f567"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "20 million years ago", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Date", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DatePlus[Today, -Quantity[2.*^7, \"Years\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TemplateBox[{
                StyleBox[
                 TagBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["20", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20", "SRString" -> "20"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"million\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000& , AutoDelete -> True]}], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                  SyntaxForm -> Dot], 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0,
                  ZeroWidthTimes -> False], "\" \"", 
                StyleBox["\"ago\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, "RowDefault"], TraditionalForm], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Unit conversion", "scanner" -> "Unit", "id" -> 
     "UnitConversion", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox[
                   RowBox[{"6.307", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "14"]}], 
                   $CellContext`TagBoxWrapper[
                   "StringBoxes" -> RowBox[{"6.307", "\[Times]", 
                    SuperscriptBox["10", "14"]}], "SRString" -> 
                    "6.307 times 10 to the 14"], SyntaxForm -> CenterDot], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"seconds\"", {
                   FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
              SyntaxForm -> Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100},
              LineIndent -> 0, ZeroWidthTimes -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "UnitConversion__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Exact form", "input" -> 
         "UnitConversion__Exact form"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Comparisons as time", "scanner" -> "Unit", "id" -> 
     "ComparisonAsTime", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               TemplateBox[{"\"\"", "0", "\".\"", "3", "1"}, "RowDefault"], 
               "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"time since the Cretaceous\[Hyphen]Tertiary boundary\"", 
                FontFamily -> "Roboto", FontSize -> Smaller, StripOnInput -> 
                False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["66", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "66", "SRString" -> "66"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Myr\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               TemplateBox[{"\"\"", "2", "\".\"", "7"}, "RowDefault"], 
               "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"time required by a supercomputer to calculate 42 as the \
answer to life, the universe, and everything according to The Hitchhiker's \
Guide to the Galaxy\"", FontFamily -> "Roboto", FontSize -> Smaller, 
                StripOnInput -> False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["7.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "7.5", "SRString" -> "7.5"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"million\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", "180", "\" \"", 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"time since the beginning of the last glacial period\"", 
                FontFamily -> "Roboto", FontSize -> Smaller, StripOnInput -> 
                False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["110000", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "110000", "SRString" -> "110000"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Comparisons as age", "scanner" -> "Unit", "id" -> 
     "ComparisonAsAge", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               StyleBox["\"( \"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               
               TemplateBox[{"\"\"", "0", "\".\"", "0", "0", "1", "4"}, 
                "RowDefault"], 
               StyleBox[
                
                TemplateBox[{
                 "\" \[TildeTilde] \"", "\"1\"", "\"/\"", "723", "\" ) \""}, 
                 "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"Hubble time\"", FontFamily -> "Roboto", FontSize -> Smaller,
                 StripOnInput -> False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"4.6", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "17"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"4.6", "\[Times]", 
                    SuperscriptBox["10", "17"]}], "SRString" -> 
                    "4.6 times 10 to the 17"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"s\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               StyleBox["\"( \"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               
               TemplateBox[{"\"\"", "0", "\".\"", "0", "0", "1", "5"}, 
                "RowDefault"], 
               StyleBox[
                
                TemplateBox[{
                 "\" \[TildeTilde] \"", "\"1\"", "\"/\"", "689", "\" ) \""}, 
                 "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"age of the universe\"", FontFamily -> "Roboto", FontSize -> 
                Smaller, StripOnInput -> False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["13.8", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "13.8", "SRString" -> "13.8"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Gyr\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               StyleBox["\"( \"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               
               TemplateBox[{"\"\"", "0", "\".\"", "0", "4", "7"}, 
                "RowDefault"], 
               StyleBox[
                
                TemplateBox[{
                 "\" \[TildeTilde] \"", "\"1\"", "\"/\"", "21", "\" ) \""}, 
                 "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               StyleBox["\"\[Times]\"", 
                GrayLevel[0.3], FontSize -> 10.219999999999999`, StripOnInput -> 
                False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"age of the earliest known land (air\[Hyphen]breathing) \
animal\"", FontFamily -> "Roboto", FontSize -> Smaller, StripOnInput -> 
                False], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["428", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "428", "SRString" -> "428"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"million\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], 
                    "\"\[MediumSpace]\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Geological time in the past", "scanner" -> 
     "UnitInformation", "id" -> "GeologicalPeriod:QuantityData", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"eon\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"era\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"period\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"epoch\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 StyleBox[
                 "\"Phanerozoic\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 StyleBox[
                 "\"Cenozoic\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 StyleBox[
                 "\"Neogene\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 StyleBox[
                 "\"Miocene\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Earth properties 20 million years ago", "scanner" -> 
     "UnitInformation", "id" -> "QuantityGeochronology:QuantityData", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"sea level\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["99.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "99.7", "SRString" -> "99.7"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox["\"m\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"above \"", 
                    StyleBox["\"now\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                    TagBox[
                    PaneBox[
                    "\"biological genera\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4700", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4700", "SRString" -> "4700"]]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["89.6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "89.6", "SRString" -> "89.6"]], 
                    "\[NoBreak]", 
                    StyleBox["\"%\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" of now\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                    TagBox[
                    PaneBox[
                    "\"atmospheric oxygen\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["20.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20.5", "SRString" -> "20.5"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\" vol%\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], Identity], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["96.2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "96.2", "SRString" -> "96.2"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" of now\""},
                     "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"atmospheric \"", 
                    SubscriptBox["\"CO\"", "\"2\""]}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TemplateBox[{
                    TagBox["267", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "267", "SRString" -> "267"]], 
                    TagBox["469", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "469", "SRString" -> "469"]], 
                    RowBox[{
                    StyleBox["(", 
                    GrayLevel[0.6]], 
                    TagBox["267", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "267", "SRString" -> "267"]], 
                    StyleBox[
                    FormBox[
                    "\"\[MediumSpace]to\[MediumSpace]\"", TraditionalForm], 
                    GrayLevel[0.6]], 
                    TagBox["469", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "469", "SRString" -> "469"]], 
                    StyleBox[")", 
                    GrayLevel[0.6]]}]}, "Interval", DisplayFunction -> (#3& ),
                     InterpretationFunction -> (RowBox[{"Interval", "[", 
                    RowBox[{"{", #, ",", #2, "}"}], "]"}]& )], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"ppmv\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TemplateBox[{
                    TagBox["79.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "79.7", "SRString" -> "79.7"]], 
                    TagBox["140", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "140", "SRString" -> "140"]], 
                    RowBox[{
                    TagBox["79.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "79.7", "SRString" -> "79.7"]], 
                    StyleBox[
                    FormBox[
                    "\"\[MediumSpace]to\[MediumSpace]\"", TraditionalForm], 
                    GrayLevel[0.6]], 
                    TagBox["140", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "140", "SRString" -> "140"]]}]}, 
                    "Interval", DisplayFunction -> (#3& ), 
                    InterpretationFunction -> (RowBox[{"Interval", "[", 
                    RowBox[{"{", #, ",", #2, "}"}], "]"}]& )], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\" of now\""},
                     "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"interpolated results\"", 
                    "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show history", "input" -> 
         "QuantityGeochronology:QuantityData__Show history"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "3"}, {
           XMLElement["unit", {"short" -> "m", "long" -> "meters"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "ppmv", "long" -> "parts per million by volume"}, {}], 
           XMLElement[
           "unit", {
            "short" -> " vol%", "long" -> "volume percent"}, {}]}]}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Continental plate configuration 20 million years ago", 
     "scanner" -> "UnitInformation", "id" -> 
     "QuantityGeochronologyWorldMap:QuantityData", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GeologicalPeriodData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"ContinentalPlateMaps\"][Quantity[2.*^7, \
\"Years\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    EdgeForm[
                    GrayLevel[1]], 
                    GrayLevel[1], 
                    EdgeForm[
                    GrayLevel[1]], 
                    GrayLevel[1], 
                    GraphicsComplexBox[CompressedData["
1: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
M8PwXP1fvtO7tJfMhnFBSjD1o/UoFa3rvZC1+D0DbtpHL2GsYICy5vfG7U6Y
H4RektzAJ1DxGc9S7io+mN49WPcxyRK6FboLSUIOUGYzUeMoQUbjH1pH9uH4
27RqxWOKSSgw5L7BQTM+VHU/1ot/YQFhq+84ufUzIBxtRfew/llcJDqp/IEN
u600pf8tI1As6TYFltrDbPY4cbefjPJEkoULnVmwMkrnjSzev21u8Dd92B7O
m8cu/rCMjJTDTQI+6PGhLE5y6/63FpAxbuwrzGaDwhGhzEMsAslR2ladKZ2L
Vzi6JOxMHw/CXq0Y+ThORjGNJ0+DGOajNQsmPSMtYUPTvHwTZy7Enz8RaDVG
RQsrVPR+1zKAuVMrTlSCAfveTblvzMf8/t/Rulacn1BN86MHN/Oh7eyPwtPN
FhASde/iA3z/raaI9/NIBIo5U7b1iwjGI2FIKnmJ96neR8cWvG/aEgf86mQJ
5J6tH+oCeF/on/gmKERBP4Iat/jm2kM9g1VutZ6M1k9gfmfMAnM9G1XxdgJc
Niwl1k85gLxJ33B7IM5/AIlrb8aG/cmeP57tI5A0e0rYy5ALW/1uSHLGqSgg
bneYR8pc/Aq7x/NZ4Tz4xFSXTF1JQTnm9AMvQnkwKymxcJscBbU7D/ppxjBA
MW7ykttKBuy/8+yj4kd7KOt/f6eyloTqNK7Jjt7DfXMno+2kOAMeGhtrP8b5
Gy92K/o0bgHTlmrftE7zoGXbE/fwNRRkY3nowP0AzJ8+tageXUGg5KFF+gcM
2VjfZrwPQwTacPyFgtc8PoyNX1zUMG0B7PwRgcCj9rDCZfWZl9swH754SCPh
hwNIccIyrCwswYzyhZcmxwLfT/vPCbcSUG4s2G02gfst7Tg9VtgSevPyv/uv
ZcHReffafzURWH/NU2fm2MNK96fSy9pxP5L4vc+kufB41usx6w8Vtc4e/Vz4
ywHiSKH59qqWwNuZI//GjAdyaWuaTTUpaNfQ0s+3+xwgaOLgdCiyhCING0eL
Y1g3aLeaDeL8WPJqlrO12CBr+eU5ezuB+lozp7hn5/LdraF+84+VPXSr7o7O
NiCje4XXHP+eZ8BvibWK33H/N9oKbzrPYIPDulcN0nIEml7Y8zkmyB6O9KUG
8vpJKLiin7N2Pg9SwzpeRFtQkO/gku/lwiwoeWXW0vCGgLRuoyddSmywkrT3
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
8o9vTMtHVzuQ+dVatf8YujuC80VFl/s/+Si9l5H4bJYz9Go0bXUyFmKs9Kat
S+tsgUcPlHGbwMKoI9MdP7tw4WRpxmc1sj5N90af8AlkfTNqehQ6Gah2jtO0
keDB6oDfu58Z//Ir05NQYdguxLk21gNXv1hB29M7Ny0NBZhsNlF0sZkjRETe
kXYk15vb933LpQsW8Npppek6PyFmrBi3aquzgTWLEh2mkPMfdittObbcEUx+
VdcvaBYiK2LltLZmK/hwx2rOOoK3R7+WBR+ZbQWyKudrrnzmY4phyUXp73Ro
NEs3TR8gfqTmyODBdVyQb163QbxPiAZXqzuDCB5iktt2ar4i+BHOSPE4YgWR
EyzC0+w52KQsYWcWx0b1bLifqMfAi52zdmwn9RWpxvrNvsnAxbUSv70IPhR7
1p2xf0HwuTIShdlWcDWyXW28j/+3n86yXbTfr4uF2zV2XNAo4ID0nioff4EQ
Nw7NaOJds4EcO8bAgDEHy5YNLm0k8606Nm7mtoaDQffl776OZ+Oe5WJ0Bolf
UfaTOZI0K8j08Qy/pi7A7HcNZfcmOoJWQHjy2x8CDACjhe9n2IGZ6e83YR+E
WLmLmijeaAnyd1peZixxwdlps7ZMzLSA2Y8/zP3II/ktuGUrvpv0//7Hv+tL
GH+fp7kp5iu95Y4Qq1gPruYftoLrpy4tvUD4qr5j16XRR1awNCj0JZYzUeHg
edoaLy7Mmm328CX3X76jMzX1JAlfzhuYqs0DKxDtndUy1ibE5e1DA3VnLWHW
mVe9Jk/5WG4XWhFZQYfeHrH1ZxZxMKFYp92R7PeJfG9dLk34t78Udxsdr5Nl
4BjL6aaWGw+NtMs+dpexcJFMrFz5eQ7MXzOvk3+Y8ff5/nscG3F1uhB/nMrN
jhe1gUr23sfScUK0SAzOPDJoBTMFC8dwnEKpsnqvD38cwBi/xn3+JcTpFhp+
gngL6BJYPz+VT/yJVgQ/lmkF98rsp2CxAF0DZ9RcYtmB8+R0e40qIV6cmhl+
J8QSbPV2LuyyFaJMsLVv2ivSX5UWhFadEOLppz6cMB0riADvePlsJvZWao60
+HEh85iE3850xt/nxdNEstuWmgux2ePKd6Vya1ikoR/lV0b841m9+Cl76HDQ
L/d261FyXNVrbucSK0j2mtYwfluIWq+kZ/30tYTXWTPP3Jv5L/7FXz0/aJL6
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
pObw+qi88dOFFrXbwQNaA1Qh3osRcffs4IckXY87+Qe1JtryQRHmJ6o1IhHL
BDVkz1jjd3d9EDRIkV1YH6TixnrCyxbuJ/lGbbk2Tq05sa0zC7cXVzonZEaN
U9vqzTfd9dQH1lY4a3H1O9XqqfczUMT1ioy1Q6z3T6oWSmhMrhSCtF9KA50f
h6nxqryUV5hPq0xQIF9ijGox8TFR/5Q+3NWeXDUJ+061PiHA2zloBa3zwvaM
Lv3Uptd0493RFCANDbmo7R6mPpfNMLmzivNLt6Bonv8g9fQxHSuSFxnuO/Dp
KeoPUf99fndfe5Gyue0g1fF9+1oz5nM08U1WFfpGXUp4eK71MBl4ZtYDRwuH
qHNPYvhcMg1h352gJ5VL/dSdbIzLhzDeJ8uDb5n+DFKvJEhdVzujD4mXJS7s
DRykeixNRi+E64I7j9K3xMvfqPeV9LLYcXslC23ZhOMXav2PqV7TNmuUT15Q
z53robZaxZpfxHjM5cUxxFQPNf5lCk/0rBUom5mYJLD0UWfto+++9tMHRifh
4ZWlXqqK3PvO+4H60LGcST3V8IX6hqzOVLNiBmtK77N37+uiPrpaaSjgS4a6
36kVw0ud1PRZq8UkjK/z0Tr40LFOatgj9Z0nQvVBsnzzuya9NmrQ5rBpBdyf
ouV61epRG9U95ZOivTkJaq8X1QSPtlOtSipOWrIZwd1awfdhY+1U9k3s6a8p
wqB5TPe4vmYtNaAW8VvjeNN7zlrTLVRDbfxyiS63yA4uO5K8Xxh9oJYFBx6j
hOuDU2z8WmNSE1WvVTdDE/NZ/DB/wxL6lnrZqT9L9xIF9jgqVSWUvaNW2R3P
TjuG6/MZn6bs8QZqF2/WSTVsr8CRGCzV1EBVu7nWPHNZH8KyNdn/bKumTj/Q
2Pc5EK83L5WaFjqrqbVGVtkHfEmwUVPQ/vbGampkVsq4ng4ZONcWiD/Zb6hd
/I0T9pifUcaOJYBaTrW+LvL2F/b367Qz5QJZT6kyJlPbOh7owpOKhfJG81Jq
heXyyBjGH/29/8GaUTlV/cOlrWyTZuCX7OtHm5FD3WBBekqHx6s1LVJp4xFD
raxLGkBBtsDTbLPo3RtNPZvtrjgarw/OASGUDmtPquLvBj73NBLQ/PP39/dU
7rkTI/5BxOWZl4m/MZ+f7x+5au0Uwko7unGwygr4djYnWz3JIlZv6LFqeJKh
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
y46wOsuhnsdZsZLEVw77WQnTUSpsfB/oCBF6m36uHVY3p2KVg4bi9hEvSPps
HaeEUrH0Y9TTFS1eOLRbNPJ01L/7+R8brVCYUkRMSUe7X60dbpyq4/30URnu
Zm5MpWTuT/FvV3gsqogJFjnX9AonzH8rbdzGJIfeOv+zAWZekE0vjAzgksM2
+1B2fcI/W9Z1n+wBKhbXGT6MIvyoGxZrHT36Lz+T768tC45R8TZRm+V4oxfC
h6/kqSnIgb1iesdOQo+Zt+RehxgF6hVy0RdlvbFzw04Oldp/9weeTvZ+e0wB
X5wydhjscMWTj4oxtTeoeLNW6M9ZQq+3V0pY4zwVw+LZDVrPvCDPa3fM9oQM
5l30RugMb5i3HUgba6aiSZnH8P4N0q8mZDO5OclBhmq9JoPwr9yQpveuTQZM
sSd+cd/yxpbT9vs1++VQdGLetIDwj9d+FrvkHRW3eL/p9pH9oua37MsnqMjt
/hQxV+2FAc9rFsphchg8cCSlysoLI0y1GtGb5WB46rBzHqF/kjnYb12WMix7
874kX7Rk6DTmZHWnK2NcZOvFWlkrrCzLuVUgJItHZmnPIwneSbpD3zTpt/ii
VlXyZrlh9uTD7eYZcqR/357UROg/OzGi77JEDtHuwYGXGV5QWDZ6yKhGEk6z
9gXXWn0QKiv28OMlRRi4vX7N7uiMjxcf+TVSaX/l+d99h3/zQdbn3aGc1nKI
Wl952uKSF05k+0Z5VhF+vn47HxN+qbvUg17KS+ENzWP1VuLvt2OnjK/b/kuv
nPWksiqrMnypTtGMS3boLNtYyeIlh8vxjhSdOi+o/8q86n1UFifVuzp2E/mY
DnNt+NUth+7/3leJtY0eai4R/9I7OOizcX2iHChN4SzlRV7wk13tbj4hh2n7
xaa9Dl5IM+V4sPS3HIk/tphZsl/q9eoJtZNy+LVsYNrvihdOvfI+fK5GDld0
yjof5HtB0apdMSxVFQGRZbK/lAiduvIoW2Eavmt+NXpL6K2f3t2SeYjkv+Be
J7MLTjgd72FxUoGKjdz3ip6yecNMu86Ufk8Rumd/RbJtdcXwhZ/v+Yh/dM5z
rJfNIfo/EVJapUSB3pKtdZeIfHwsYStcTQh94S79KUI/dPsOo8QFOTKHflqr
Sf6/sdOhq46ThrKKt6e9DnnBfc7k6yJvGoSMG38Punmh6nfuFD2Yhi9ztTqs
jqQ+GB6/l+ZKwdzT4Nwlrd6oXyz6TkuDhvOH23NDyH4VNgfFCTL/87LvnZol
+5k2CtGjpeSxX6bKI4vos7OKTVhMVB7MnN/77pZ7MgaXujYeCKPgz+ydyjsE
75pNggFH5lRQecWL0+qTJUNhdCxumxxZuzb3FsfYoSxNmX5ZUBW7xS2DHT9b
Yv9/XqDxoOFcbOXxLYS/rNTurJHjNOgpb775lk7i+7RSpf8qGpLNyh6eOOCF
pHHF9kROJfwQ4/r9cb0bbL81a346Q8PSz+GT3O5eMNK7WXYtjAY/5mKWW2le
0PL9ruu0ggbtaUq6zykvdAhHPL94SxrKF7w1TIj/LfBVTmcrKcN/l9eGaldn
8KiU9+pm0ODbGT73guy3EGGLysuhQed4iN6fXV7ouht9dW0RDYv9VkXKx5H+
Onh8iP2SNLznr6nykXg5uy3nm9V9GhK+G15/4ueFoysNggYvUpBT/SfFmOj7
d8GFFN5pKmr0nHwmv5P5evmgw7dmGvYntl0p2+n1z32wf+NpV/7GW+pNqtB8
95TXh2bFyI2xO6//UwUbPfMOKqjbQfZO8ezQbyXs+LU+uGezK5hPlU5+EFdH
zEkmCxcWOeRH1RubuKjCeeVJ93IHWyQvjjhkRVdFE9NE07yFLVY5RfXn6stj
8KN7D0eQF94s+K98+VUVt5+oD5htsmJ8uvg1/Cm7Ct42HHSYJP4s8vXdXqnN
qji+/1VAEKH3veGx9NQmVeyS+Dnd6WMLweOc4uJkrcl9N8M72BYiH9N7br5X
wmhT6o26ADfoqQ+X3v4jjw+Hzn++RvynvFjvpmmWKjJs9E9IhdqCTSj7xDOK
GjR5uQ4v1FoxzPLr3x3KU0XVgG/+zDpbvOT3z2MmawXVPo0j620Rv99mR2ij
KsTSL5+L47PFb3nWZQL9qrjWvLcgpNsGZcYJk2aOVMzu/romgej/zupTkfHW
ynjm8Qkxrm6QdVs9mcWQg4DyIqmtL+hIeu899iRbDXuONda3X7eEk1Xal7KH
qrCN53mYtsQODg45Vu6RanAIifSjSVkzzn6/ImvpLQvj5t9dv8h8zbYhTyAn
SAVqms/iD8Q5I87ql29khTxkRTiDPkaQ/LFittGFQw2Rsn7zbQm2MMm5Hmq+
Rw2OkVaPnVOtGeVKxi0Ps6i4tHyP6dt2b7jvy/ny0U8NKyS2nF01bgOhzoa1
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
oqeWjjT3USpU7VyWqk4xRfMr7n+pKNKFpw++7WzDfF0bEhu+6YMurHnj1hl5
mYVUPs/Ip67UA2bX6R/n0llIQUXE+kmCCZAlKnufpVqA2mPG6q0/cXw2/LZj
SzVFGe5paw7+psLDtjVcq1mmyMPaVkxlwBSuSL4T885TRuyjHDynj+n++7zx
2slE/hYjyNlpvNO6xwlxXs1MD/hKhYMNNgn3vtOA1/31o/d3TWGEn79xl4Ie
SCq0PqV/osI+XlnlpY3YnqH7fx4QMwXLw6v9c/F4Lw3XITIfDXxvWG1/FCgA
XSZxUlR5Kkw/mEqKO2sGQd4ShChcD4fxf7qxap811AtYUZI0aLAYaFcmvEIQ
FvszbxPfmMKwtI7eWVc9GDourOSG9YWUxyrZokKH1YWb+63laJDeaP9opZQK
UonpMD7YpAv2gtHVEji+Rpsg3HOTKZRo5t3ytTBFo+Remtt9ffC4eC0hu98V
hNYeM3I6ZQgPbK31OnlcYMnu7JcqW1MA4wm2aVcaTH4wehlAp8HtM9c/rdDf
gBYoGtkRGL/Ney7q0LcB7Rq7wrH9pgnIKqRPF8VbAn9pysI5O1M4vWo47xA7
wLGZF/3lkyawNVH0w/YHFlD3Z+pI4jcTCOCakhOts4DLb5yOHbKnwVPLjvBf
USpI3DyiQcuXBhx7tIw3TiojfZei3psYbwkIqn//agPKrhb5ctGIBkeHb8nK
X9QD6eGGU5IZpsAeyH6pmGKKRsprq6YDaTDbl1y4V0MVpSoE7dx2jQqmaTVU
4wAzQIpXOQkbsT38p5y/6dNhlL1J78k1U1h91eL1s0ZTyJB9psUjrgcZzmnw
EPOv7zf3Ndd0GvgEJZQYCKqihtLQ56N7TWHKJsHxnQ4d1g/HaOcG0IBGQQnH
7ujBbPnW20eHTaFxfE3uvVVU+MJgzE2W4/mV6HPe8KeBuei8nZs/CW7uetr2
utkJ2T6PrM98bwrh//RnOC9ZyHRLNNEg5n4wuV1fCGSDeUe+36SB0he34tyz
yigptcvz04QpEPmjxxzsqRB5+Lf19SgTeMLFRaGfswbJpc9EDi8q2N4oHb54
2gLM9x0fb+6igdNZyq2ycEHg6voyKmBBhaVpm+t6by1A48HhTZ8qaFB7RO7r
xoeqKPewPF96DQ3Eljt215WoIbVp0Q6vSD1Yeah85PUlFrpzsonn0Hk9MN79
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
01+Ijn1b/SbTiw+pc/7CLjMqcmrbXqiQ+Pixsne/D7XFu0gp/QM3WfC9X3Z6
w2caNg7cZUoRPqSoP7XO6VlgyhbXeMoqvni8VbX1khE26tWifupt46MjRmPM
NWk2NKIeXqIIScP9/stG3YiKo0NCx3Iy3j20Cyv6vRlokjjRVa0rhObG43fl
Cm3x43hU17oEFt74XGhX7uRg2azOgkMrqBDndl465mgHWc/bdmMPmYK+c/xP
jh4T+ypO930qtkeax+HNuSSeqtanV18+QkeGe9Anp7lsjLs4tWuVnQAtnr18
5kNbXMk2W55GOGsNqxQ/b+NA4cqrG2vFVKSus1xDPUDDmCf1t+2J39hT7t7w
diOpaxbbAodIPJbuf1FYr8vBVwT2n5vIRPCbj2fC0mm41jG1bedKkXid3TeN
A8RfBG6yKm/LEiFvQVDP4Gc7TPg4/6xmoj5GL9W9Gp5pB4aEjW/IIioi+2Zv
6ftM6vWCHft6jrMgrGzM7ybHz/bqzq9KWglrBeGO03st4DL0WU3NgC+++9pm
5wcxHcc+lrysvSKEhNf6Gc3f7f5vfQ8kb13m7bScjpHd9HjBDyFi6Me8O63/
4yFHOvSdtx3Ru7drVN6t52O4uejJ1hAqhrao3mGR+8v9qdfqfNIC7gV77yQs
5YujU5+tP5liB3PlOoe6RFNck0ks+EDGO6f7zMn7YXwcnXFkrpcCF/aBE95W
TNFHXn9/pZYHE2cYDz21S+3x/LGm3JJsBuL8lsv76QhhYTv11VkZLizsDx+i
HDXA/uN6az8utYNPWXTsfKIf5CP2uPPViN6QPaVZvo2Fnjnjp4R4s6Hps+vA
cbYAz8fe35O2nwod9s7HjYSfS/rWIwGKXASsUJG7Ib0K7mpqnksLLDBxJEZT
gehlwwXmN72+EX6OLVTiOdNxtfnSNxbbAofmLuz2O8PHtIJHsd+NSH+ToDHH
kesdrZht4FBFxT7B5MuBZPyUojeMqLXbISxYfr7fOVPIty6ad1ibi1cezSvC
H6yATuAjy/WXLLDxebB8uAUfq82/ml26wMHGE8OH9Ii/S2Pr3x16SkPEnj6H
XoZI/G3D7eWqmVRkdFzbsKBMhCtthjfdZxJf0B1sp960CuPGXvTY8YOGX88U
6/foicRpbbul+0PtMN9Drvc6qVtT/Q1qWyW4mFaZN2VZmCmuWK5489PFAvvN
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
Fswpl+g4YYUzz0uGa7J5UB2wz+y5RfyILbdwDOFjzTxq34Y1//GgHPL80NAJ
Gqo0l1XJkvsve70/fW4ZF9Kt4itLN5ghlZqlYbORBccD5kEVHfZQlu7fta3E
CqJmpWWnonjwM/9jf30ZDy+td0+xaV6IsNcerQanaRC7jfzaXy5Cfrvq3dde
XOR2BC4wz6QhcneA75HJXPh6XabYnWaiRWahU9pNBtaoa+pr1wtRbvOSm3qb
i9ZhpQfZkebQvzPh9+EkLiYW71nURnz+uGK5wMDpXESqve3cGMfEtOrQ8FmB
/+Xre/e5tR/AQ7J0pPBNqwZOa4Ve2xhBw/GJJ7ZrEB51b/hOkFPhYrnTTasF
V5iosnlExx8rWB3vycnYxkPuB2/DjDoultio1y94ZwZbuclPFs3mQtPv3Yak
W0w8kt7g/ymGizqb3GzTm1SclLKw1eDx8GVr0pB0lzokxxz7mahM9M6k10np
Gixk5T2fZzeDC5E/Dw0qLDSF/DaXZVhh8+lQdOnyxcUqF8e5RbEQP/G88/wP
9tCoKx25PJmBB6avVYb1ReKLV5sdO8n4JbRRGivJ+Oz/MswWmzIQmieVsV6N
9NdYqv2MJi74+2Nb738xx+F1XMMmEr+lkxWx5gkQo3WrwYlqjR3xkkeucXig
JRXt2eTG+9/8bWpIKEveP/Ed+XxFYb9UNprDo2/fyMgIDbi05176VRG05l6Y
ODPIGg/Pf4uJXcTDmNqL2Xr6pL+cCezd28aEzzRHaQkaFz8Y85vyIpmI334h
NMmPh29zI8sCeuaC4b+6ZdMOHobjJ0UFrJyLa5/F09bW06B8d0vucnI/NcHP
P83+zIC4Mm/kZqMQb2aGXrr9lQtmhHZLZYT5/9aD/I/XF5HKnsIMLtprogbk
g2gY96fOryufgT9eZ03kiP68SJsm+aCOhkTVgLNxhL+G0VVdfmT/9Fr5xmay
P8boYveOBhrMHdy+WJH9yq/ylhwa4CLUCB1n0sxxfejovYdXCB8SnXOehdIw
Wbc45Mh1a7C3vblXqsCDhVKZQaKYxFfo/DSU6LSwC6W+dCoX/lI9yOhjIvzG
9KY30Vx8n31nW/NqOrbPznMdS7Zn6bipj66nQ8JEeO5DLBda5W9e8YjuOTJp
eKr3d9Jv7Wcv1eBSINp518UhntTvb497rEzoWO8hX7DlMA+hkcnvYpLmYHfv
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
bR63jz9D8HFz3tOyCWUkLrfuben3QLLjC4vRZApWT1pcTIv2wPNdleJzomgQ
P9G97KUdBT8XugaeIPjx+m1Kjb9DB89c0akZhK/bb16T73OgoKXmyGs2OV7D
aejsM6VDQ+rb7MIaW7Sfn77tpj4dzwrEKgZe2YJ7qifkPt0DfTJPBTL87THj
lF2Y1qN//G75JaBATpWBSsXmymsrzdC12ONw2UMapmZuPaNB8ol57uKG8nIG
fOIyLbU/K+Nh4oMBVz8KMp/WWV4keNybvD93XxkdAb2Rp2iTRJ/4UzZ2DXlA
44nrm/Okf83ucYZ14QysPdY3PWiPPpSqDzisNqGj+LP1/AeTttC5/7ZWrpOO
XztjM4XfWqL7+cXYn6R860h1vXmfJUrmPd/9pJqBjLRuSslbZZhN/zVDNIj4
tbkHx9ba2qN8jmSmSA0dX97sUK9otcI7MW987KX973kA4i3212lfdkWNz6KG
3/1u3O26gXuvN3mgvVDA5OVqKqZG2RIhz//11+SJ6MUXQwTfC2THvIm/uyA+
6/XUIQ9E8zafbD1IQ8/1SpEgJXso8G5+ItnJ4C40OW/Mc4eBRFf/KrUOZVwY
DjK5u5PoqRz5pRse2KDqe1K1SAwFF8K8fqoQfAobsoe3xFH+vl/K8wm9cFKZ
gQBFkei1oRbI/hGUKPmAjLvwCUmDFmUsr68MO5NKwbUtjQnxpH6W3qonxo50
eLqxRdvFia6S0Bv/MOmBFRK9W4JvUrCjLPyFaQsDo7d6E6zuK+NVvKfaLjL+
29clhTMijVAStvOCTisdmlvUVSe5Vohxk5Z0GaXgXIhdGB/Bn/Nuw9rU+3T0
Ra+x8ptjjZd8sw8OnPbAwTkU+s4UGo4+FHDhIXw76BI2fjeKggP94tnzn5Fx
TtIuYSUpw7DVdclLOh3BMxypeaLEhw3PjHUkx3X/e9+qjM6auKsKyR6I9+xy
U1xqD9OfKg9WH/qH3xOsJZpaRPebWofNWxWjjMiGuF/cFlfwlY2ElT5347bx
fj547AgF7yRHn0+7w8TcLQlLBT4SPrmkt+qKHxWdd3NaVFbRsa7o0cecTyQf
cE961UgQfsoM3KYSSoHwnx9+rf2H98nSELpAPgMzulWoW730cfJ1x9fDjyn4
Pn94ZQPBd8Ujw4XriL4/dtH03iNnojOkTJ9wpIj/MHuZFr6BgrXCTkcj6jyw
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
DCjtdHN3JPXlC/gs9Ty/Wmwpc8zZu9AVhQm2H04UET7dsvZaX6Uj1kxpWX8i
fkDo9dlVJWQ8Xv+3n6IUJLZ9DhuV+Dt/mAjyTbPh58DGz0V7jGnNrasvzRjc
4onqus0OvJf768zpIwHLtnnCqmJyyRn9qxZ7mjwfTe5gQ0Zsw0ipnh13qeKT
4Bnk+MV0hVU9ud/rPA5IlRUsZOP7z5BV48MULBlfXvian8T/Q8F2eyV9VGzb
8CFLyBMW2tnTsm/pYSBHZrbCdk/EWB6UNvCbqgvQttx/1o0FPc9I2Rsj9liu
X1CwKtwTd1kemy4OLuRmteXlR+3whLbZdkUp8HEj74Rsset0xHXZIOMnRUw0
K+8SbI/wxGPO6ZqTj2dwr0WcDJQn5WuHgsL0ls/lJng+renXdfy3f/KsbO80
cr3oreZhAfyLuBy7Q2kiBA8vtLep7XW047qKNOl/3UvwdPjeL+7qj3XqJclH
3u30hN46SwHVxfO5OsezxosV6LjPK3avYoY718zGoj0n2hO6kW4m10fG6v4f
UVceT9XXvSOFZjLPQ0UoY5l5zNd8L/de3AElQxSaiySRkCYRRYqSMjZIIRxl
iEpIaS5DilTGkpTfed/f+/12/zufs88+a6/9rLWe59yzzz7zqITO2MrC+JIQ
Z9oteVgoOB0p2MvCxQVUd8MMEUJe3XMlnTwOcvNe8YlHjLBq5e+wOsCC6HP7
OM5bHsIvq+O6YSwL8eO7pN6HziWcOiXDNeNY+LHk0lW/mXnEzX2UkQGyffhy
Xd3I4iXE+Q7/86dI+8XMl4tobbEljIeVeBzI9p9U9K1vaC4lkt66NAnI/PU/
nFexPx92+nc/0hg+Z07BQRbQbHPi7lVRwnWVmLh6NOt/+4PK4kTA1p3RGzyg
urRPVvWHA67azFu/lfRP0ThrrfcqeWyQ8Jm/kMxnKwpaNludsyVCautYV+Q8
4XWduVxVhwJbOTvBX2peOCWocBPLrMBJe+abQdan4RpT+fnJ9kSE9/6urSS/
L3D69c1xjiOSfY9duEnm+53xX06eCFiD6grGqWlDKliv1zUQOQzixoM8thaH
Ch1n7YmOZAZx/1FBSVOgM2TDJb7NSiZ53JujdbOOkPmgzKJ4V7EMcvl3TymX
e+D6FbaVyzd7op/P90SasRccb2+KmRwh9XJWQOmGMg+s7d0quvW3PdFwjTeY
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
i5u4J3K7qi7WPA86smWQ5BP5Ypab3lnCcM9qYc0BD0hbfBp5dcARqyp3wcua
jcnRFRunXeQJ3WLDusg6KmyvumU0pzGIxTO5n76S9WK9v+wny3FHrPd1ePnU
lY1VWDWd5SMKjWPVBq/s2Dih95sr5ClHHJnxTLrfRwVNu6OjYT+DUJy2+jZz
3xMHUna0JnuQ8fzWXk/Mno39ctc777DlibuuiVdevaCidU49oZTIgENm7DEZ
Jhur2/e4Pt0gDPsY1+roXc64UnWl5lY1E/W//BPsvjpDeaH+0bPnmZgseFmw
8B0VZ5Js6pYeYoDWsaHn8WsqZgL6Zp1LYEDhUJSz1IgHbq+o/q58whHttoti
by9m/+95ig6WyYyOKHizyXztG6yhJAqJ6oPGk6SedH56yLwz0IIo+xM3YtP7
t39xX1OTVCE2qFccFrdW62CpnTdrnJfUu56FSdqPLbGiovrEVkdPHNK62r8z
2IEwoRxq3P2BirKUs40C5PVzJkZzHTewse8aT7acnDDWs9W+9HLYGLijsdY0
RYGYOFr+fWk/HepzrXtOTtEIjFr7lEqw/1cPdXBkkZueGxmfq3vLP6l566CV
GvSm0peNP8qelDuyCkRdYKh7sh8b8U2Zv40t5YlN8XffyS5kYfiJcSr3lSUs
kpTetrZ74nRuZiZ/JgUPtQ5HCb73gNe25d7Ti5xApboUGE44Y7cTS1mHrFeC
DlEii0eoyJLf9fBrHAMR4om7er57QMyIfb26wREsvY3CK8n4VlMvdI6x0oHH
nCSO33cq2us9e24cYMCy9qh6/1Y2ahQWrUoMFEG47juDr2NUDCR8E/Il+8u6
pNxwSYaN8I2XP0qd1MXe6+uiEsLYkCXogTHbZAgn/UQLX5u/8Vj/3LOmbDcb
/W8lK3o9hOBUv+/7WKQLGefm+Z/jmdD5Hcq6Of33/gssFn3+POKJgbfNRzdx
KfiwsPYuawcbzFmN+tN7FQnBZbJaulN0fL/Mn3yR9PfJQA/6s2UuWDP9/Nhw
NhOOa+Zn9F90/nd9XOPsI33ipiR+3hLPIKiDkOiMYlHSnp6OYhl9KyWsvqh9
rz6BPKafPaPzcCkGr28ZKotiwzqHq/z8sgLe76mqosey4fBOij4qI4esTUs0
7I+y/9EnCLm9MfLOQhr4ZkJm0/cxoH05tjZmPg1xvespndEMGP2yOdj1lYq0
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
gtZwyrxIXwI+fJR7Us0CCOqrKTKm/fZ/AStMicA=
                    "], {
                    EdgeForm[{
                    GrayLevel[0.6], Antialiasing -> False}], 
                    RGBColor[1, 0.93, 0.82], {
                    PolygonBox[CompressedData["
1:eJwl0T8oBHAYBuCfnDt/JkQZxMkpupR0GW64LNeVRAZlOWW5FCeyGS4GZbhB
YrlFmVwWC3Wbsp2yyWAiVspAFJ4yPNtX3/u9X3xpba7YEEJYphgLYY8KVWo8
8MYvXc0hJBglxSRZJkgyQBvvZl+oc8oBm0zTy2c0hCv2WWScHr6bQniizhmH
lCgwQ4YxErTzEwnhkWvOOaJEgRzDRLlvdAvH7LDCAlNkSNJPJ6200M0QKbLM
s8o2FS655YO4HWnyrLPLCTXu+KJD3hHSzLJBmSo3PBPRQR85trjglUGd5WP/
//kDZvk0bg==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0LtKggEYBuAvMn+CpginSIUIFFqChnAMRJxE0Jr+obFQqTXosNTkDZib
WxdgGHUFBdIidAGt1VQQBD3Q8MzvoXjQa3bnIqJBPYnYo0vKOh/ZiDGn1MiT
4W0h4plb+pzQoEKZZX4yETPuGXHFMSkVinzPR0y544ZLOrSpss0GORZJWGGN
TXZpccg5Qya88EtBxg77HHHBgDFPvJPVNc8WNVLOGPLIK58s2V2ixTUPfLGa
/H/3B94kJxg=
                    "]], 
                    
                    PolygonBox[{15777, 15750, 15731, 15701, 15682, 15686, 
                    15689, 15693, 15694, 15688, 15695, 15729, 15753, 15778, 
                    15777}], 
                    PolygonBox[CompressedData["
1:eJwt0S1Ig2EUBeDXGXTCwrBoklm0WFwyKIiYbDMsT4dF2IIIQ9MHghZ/kkHZ
kmVhZQYRdCxtxbFocRhFQcQgBtH5hIUHTrlwODe1UcwUhkIIecZYYIuIS+o0
6fDEB38kHE0wzRyLrLHJDiUijilT5YY2PT5JxEKYZIZ5VsiSZ5eIEy64osYt
d7To8sw7v4wMhxDnR37jkQca1KlS4ZxTDthjmxzrLJMmRZJvPV/o0KBGhTOO
2KdIllXSzDLFOKP07fXFKz26tLjnmjKHFFgiPvjFP8w3NsQ=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j0oJ3AYB/CfOhz/kkU2QhZvuaKjJBYXEiELFgNdii51t0iS6OoykC6Z
LBIGmbyULAqFJAPZDPJSf6+3IPeR4dPTr6fn6enbL6Ojt7EnJoQwylEkhB3G
aKCYLCLE8pAYwh2X/OOZF1L1UvjEjfceq0wxRCc1fCGXrxTRzi/GWWCXa6K8
kWjfvfrEAXMM0EwhmSTxmBDCCRvM0McP2qgkh1RiuPgcwj7rLDLNKN20UkUl
xRSQTQpv8SHccsYa80zzmx5+8ocpZtnilChx5tPJp5Q62uhikAlmWGKTQ865
45Vkd6dRQDnNVFNPLSVU0EI3I/xlhWOiJMgpjTy+8Z1+Jllmm6v3PGWeQxlN
DEc+/sV/5nNKbQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j9I1AEUAOAnOIR61tWPsjshmlwkFAxbGqThpMgDUQT1QsIxkkCDFMGI
BocIgjA4aIiWLginGsJFHUSjIWrwHIJySKMiikTR9DscvuXB4/09e32k+2ZV
RDwik0Q0kqKa/yci/vKTzywzS5ERuulniDEKtHOGav4cjyizwiwzTDLARbJs
pSPeUaSHhA/HIibIkeXH0YgF7tLLOTbqI14yThfNpFlPRbzlMcN0cZ6E33UR
SxS5QxtHWK2NmCZPG6fJ0EwTHRQo8Z1ETif3ecUndjipRgtXuc1TFvlWqa+3
FgZ4wDz/Kn2b5Rr3KFGmxsyt9POcbS7YyxSv+ULa7trpY5SHPGOOj2yyQ4M7
tJLnBpfp5BI5rjDIMLd4wgve8J41vvKrck92qfIbtZyijn2xPeqTwx86AI1K
UZU=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0jFIFWAQB/ATiUCfmfXQIpGUSIwGnQwEyRwSRSQdeqhFipDDIwnE2YhA
ERMaoiEcxILEHIJ0ikCFkCCICkERonghirwhyFLDftDwg+Pg+7j7c+W9A+13
ciJijsHCiElWyFJ+POIaj3jHLhVFEc20c5tRXpLh9ImIBm5xj6cs8JEsiZMR
F0jxkFmWWGWbXf5ySCIZUUI+ORzo/STLd9b5wAIveMJd+uimhas00kQzadqo
4RR7ZtriM2+YYoJBrlNLEd/sNs8wl/gjh2k6qSGPNXnNcJ+bXOTXsYhFxumi
miSbBRHLTDJEK9UUs5eI+MIcD2giyXa+/7lBA5WUcpRsXsQPVlnkOWOkuUIt
dfQxwgzv2aHA+/NUUMIZ9vV/U6yuop5OnvGVDJ9YY51c850jxQRv2SRhn7PU
0UEPY7xihQ2OyKOKRtI85jUZDsiVYxmXaaGDFF30F/6/2X+nd2N+
                    "]], 
                    
                    PolygonBox[{15786, 15748, 15727, 15709, 15683, 15678, 
                    15680, 15699, 15703, 15700, 15692, 15705, 15725, 15733, 
                    15732, 15736, 15761, 15790, 15789, 15788, 15787, 15786}], 
                    
                    PolygonBox[{22, 73, 75, 78, 80, 88, 86, 103, 108, 119, 
                    127, 126, 132, 144, 143, 146, 173, 172, 175, 163, 142, 
                    136, 114, 113, 109, 92, 97, 93, 70, 56, 18, 19, 20, 21, 
                    22}], 
                    
                    PolygonBox[{15778, 15753, 15729, 15695, 15688, 15694, 
                    15693, 15706, 15718, 15730, 15743, 15755, 15766, 15783, 
                    15782, 15781, 15780, 15779, 15778}], 
                    PolygonBox[CompressedData["
1:eJwl1GtIFlYcB+BTW2WlrmDMWrFqwsTibWR0sTBrRnSzLbsbtNJo0Z2JUFCa
UaR2gS6kNB2txZijyK4WFUgfssvE9SKLoma2BUmULqJVK+uJPjznfPsfOOd3
fgNyVmet6hBC+N7ykX0sc/iWXNZTTjXnqCNKI//QxnNe0NmMBBL5kq+YwRrW
U8oeDvAbx6nld5po4Q29OoYwkFFMIZP5LGMtBWxlO2Uc4FeqqeEi9dyllXZi
PwihD8mMZRrZrKKAYn7iKJe5yys++TCEFMaTzhgmMJlJfE0m3zCbmWSziIUs
ZiWbKKWE3VRwlHNEaeMJD7jBVRq4yS2aaeEpXTuFEEM3EkgkwghSGUcWy1nB
FvbyCye4ynWiNPO807vHC6ED8fQgielspJBtnOQOHbuEMIjZ5FNOGceI8oD/
iI8JoS9JpDCamSyhkBKK2cchjnCGC1zmCteop4E/aORPmmimlXZCV/mlD/2J
kE4GExjPROaRw1K+Yx0FbGAXP1JBNbVEaeJv7vGSnt2cQYR05pPDBkopo4pT
1HKacvLIJo1hDOYLEulNDO3mP6GF+zTTyCVOcozD/Ewlm9lCPiuYy1SGMoSR
DGMSw0nmU+J45d6ecp+/qKOGKg5SznaKyCOXLMaQxnCSSeB/7/2QRk5QSSEL
mUxfnsnOebYyi2RiaZO/m1ygggIWMJEU+tGZx7J/jdPsZyPLmUsq/Xntz17n
LBUUsoxZZBDhMz6mC691wyOaaOAS5znLEQ6xn50Ukc9i5pBBCkn0Jo5/9dcd
6qihikp2UMRa8shlCmlE+Pxd7xFHuzi3cpt6ajnODxSxhFTEJXQnljjiw/sO
fwtjA8KT
                    "]], 
                    
                    PolygonBox[{18, 56, 70, 93, 91, 96, 95, 90, 79, 65, 16, 
                    17, 18}], 
                    PolygonBox[CompressedData["
1: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
+2Pw/98t/wck2kLo
                    "]], 
                    PolygonBox[{15628, 15667, 15666, 15652, 15631, 15628}], 
                    PolygonBox[CompressedData["
1:eJwl0j1I1AEUAPBnEpx6ZRwJ9kmXKRicDSIiUgROKv/lXA6tSCNcJKWgTKzR
4RxC+lDMBl1EaLKsIEgdK6g1MKkGoxoaHIJIxJ80/Jb3eA/eR7ZvMH+tJCKe
Ml8ZMckQ7aTY3B/xmXe85zdV4kc4TDkZyjhJwjlyHOUYB2mmQBednOc4pWzp
ucESjxigjXr2sr4v4i2LjNNLF62cIM2PdMQy9yhwilLWKiKeMUxCC1mCr+UR
q7xijgdMMEQvCY3UkyVDCX/KIr7zjQ1+ssk2KflD1FBHA02cpZsbTPGCFZZY
YJIid+ijhyuMMMZjXvOBT6yzxwwp0mQ4QDVnaCVPgUtc4DL9XOUWNxmlyEPu
84QFXvKcVb7wlwr7rCXhLvN8ZIuMG2Sp5TQ5GuhgkNvMUKSf68zyhjX+7da7
dRMJeboZZ4Vf1PiVi0xX/v/VHcNhViU=
                    "]], 
                    
                    PolygonBox[{4375, 4391, 4415, 4437, 4439, 4501, 4550, 
                    4603, 4645, 4652, 4656, 4664, 4686, 4672, 4662, 4639, 
                    4589, 4547, 4500, 4435, 4376, 4321, 4254, 4258, 4267, 
                    4293, 4257, 4203, 4297, 4375}], 
                    
                    PolygonBox[{15791, 15744, 15723, 15712, 15681, 15660, 
                    15633, 15603, 15597, 15580, 15566, 15574, 15584, 15585, 
                    15587, 15588, 15593, 15595, 15596, 15598, 15600, 15601, 
                    15612, 15622, 15635, 15643, 15648, 15658, 15672, 15687, 
                    15720, 15734, 15759, 15799, 15798, 15797, 15796, 15795, 
                    15794, 15793, 15792, 15791}], 
                    
                    PolygonBox[{31, 58, 76, 116, 130, 151, 160, 177, 193, 208,
                     227, 246, 258, 272, 284, 295, 308, 306, 319, 330, 345, 
                    344, 341, 340, 338, 337, 336, 323, 311, 297, 285, 276, 
                    271, 268, 265, 263, 257, 247, 234, 218, 215, 206, 201, 
                    190, 170, 133, 121, 67, 53, 23, 24, 25, 26, 27, 28, 29, 
                    30, 31}], 
                    
                    PolygonBox[{15799, 15759, 15734, 15720, 15687, 15672, 
                    15658, 15648, 15656, 15661, 15662, 15620, 15623, 15626, 
                    15630, 15651, 15668, 15684, 15707, 15714, 15722, 15738, 
                    15746, 15756, 15803, 15802, 15801, 15800, 15799}], 
                    
                    PolygonBox[{35, 72, 117, 149, 162, 180, 188, 197, 204, 
                    213, 225, 226, 238, 235, 229, 214, 200, 191, 185, 183, 
                    177, 160, 151, 130, 116, 76, 58, 31, 32, 33, 34, 35}], 
                    
                    PolygonBox[{346, 334, 324, 310, 308, 295, 284, 272, 258, 
                    246, 227, 208, 193, 177, 183, 185, 191, 200, 214, 229, 
                    235, 238, 226, 225, 230, 242, 251, 259, 270, 277, 282, 
                    289, 298, 309, 313, 320, 327, 329, 335, 342, 361, 359, 
                    356, 352, 349, 346}], 
                    
                    PolygonBox[{362, 363, 364, 372, 378, 377, 384, 387, 393, 
                    402, 404, 411, 422, 436, 447, 457, 474, 473, 480, 496, 
                    515, 514, 517, 534, 550, 556, 564, 580, 584, 588, 592, 
                    594, 586, 571, 560, 547, 541, 528, 518, 494, 488, 465, 
                    453, 443, 431, 417, 407, 401, 391, 375, 366, 365, 347, 
                    350, 353, 357, 360, 362}], 
                    
                    PolygonBox[{4076, 4067, 4057, 4048, 4038, 4032, 4013, 
                    3997, 3992, 3986, 3979, 3967, 3918, 3876, 3831, 3800, 
                    3766, 3739, 3701, 3660, 3639, 3621, 3600, 3571, 3540, 
                    3538, 3530, 3511, 3503, 3501, 3485, 3474, 3462, 3458, 
                    3455, 3424, 3418, 3417, 3416, 3423, 3436, 3451, 3479, 
                    3507, 3525, 3545, 3566, 3592, 3612, 3630, 3652, 3673, 
                    3691, 3720, 3738, 3768, 3803, 3823, 3873, 3924, 3976, 
                    3990, 4026, 4052, 4072, 4076}], 
                    PolygonBox[CompressedData["
1:eJwl0TsoBHAABvC/k0E2nZI8oo7BwOpxmUwW3SyDSEnYZJGS6PIIp64olEFK
MUkedwxKWKTEYkMWi6Tk8asbftvX9w1fdc9wYigvhDDAcTyEFDOM0ksH7TQQ
I8pPawhvPHDJEbtsscYS8ySZZoJJZkmzzg6HZLjimlueeOSOL/LtlVBGFbXU
UUoBvzLf3HPBAftss8kqKRZZYIM9stzwzCevvPDOB38E/REKKaKYciqopIZ6
GmmimRba6CRBF9300c8gI4wxzhRJ5lhmhTTnnJElwykn8dxH/7PVU0U=
                    "]], 
                    
                    PolygonBox[{42, 52, 54, 55, 59, 60, 63, 66, 71, 77, 81, 
                    83, 84, 98, 100, 106, 140, 156, 161, 169, 167, 166, 158, 
                    153, 145, 159, 174, 168, 138, 118, 89, 69, 36, 37, 38, 39,
                     40, 41, 42}], 
                    PolygonBox[CompressedData["
1:eJwl0bsrxAEAwPGfhYUyuLJJFopSUojyKGJQLlIG5UjO487zjpDFoywUg8Gx
eT8ysTqKjOIfoEwyWcmnDJ/9W9/CSDwcywiCIMFhKAiOOOaEU1Lssc8Z51yR
5oFH7rjnlht2WCDJLFPEiDNMhH566KKbdlppo4l6qqmhgnKKKaGAfHLJJoe3
vCB45oUn0lyzS4plVhhgkChDxBhjlBGmmWKSCcaZI0mCGZZYZIF51lhlnU02
eOWdD7745JtffsjSnEmIIsoopZIq6qilkQZaaKaTMB300keUVbbY5oJLDkL/
T/8AgOhEKg==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T8oBHAABeDfuVsNkswnppssymBgkYUyiGS5uFjcsbrBou5G/wYxOURd
Zzmlc4OrqxuuriQTbryJurKIxVeGb3z1ei+eTM9vRkIIqxSiIRyyS5o1kiwz
xySjDNFHjJ+eED54pc0zTWpUuOOWS844Zp8cWbZYZ4lZphhjhH5+lfukTYs6
VSrcU6PJGx2+iMkNMEyCcWZYYIUUGbbZYY88B5xS4IoSZR54pE6DJ154p0OX
byL26GWQOAkmmGaRFBtkyXPECedcUOSG6+j/F3/uBDiC
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0L1LwgEQBuAT2iIoKVM3oy0iaOgDWh1dfg21CCHoYFBj0dJQJDlGhNgQ
OYhrQy0tDS39B05uQqs4CE0+0vDADcd7L1eonCdnqYhIGK1EjJnLRCywxCJZ
8uRYY4dd9tinwi0XHHFClTo3NLnngSeeafNCl2+GpFdlc8odPX745Y/5bMQW
RY4pc8UjnwyZsJGLWGds7vNGiwaXVEk4YJs8KUZuDPjinVfaXFPjkM1Zj9me
vh90aFBiOfP/wylBXS9+
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T0rBHAAB+C/jiyMyiKJMng5RUg3nIvBcMprKRMGFIejyGA4MimTUEfK
Jix0C2GwyQdABoysLIpHhmf/vVSMpHqn80IIKyQiIfQwSpp1djnhllfy80Oo
pJpa6onSTIx2EnQywCQp5lgiwyY7ZDngiAue+eSLbwoKQiiilCqitBGjgySD
DLHAKutsscshR5xyxjk5Ttgmwwwppphkgj66iNNIDRWUUMiPbB88cc8lOQ7Z
YJVl0owzTB/dxGmhjnKK/zrb9Z03XnjmiUceuOOGa644Zp89sqyxyDyzjNFP
L0k6aKWFZpqopIyGyP/vv27tP0A=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0D1LAgAUBdDn0OTSUKZtRYNgGbTm1lTkYuAcgg4hig3Rlk7OBUG09fEH
GkzammsIhCiHpJaCpiRq7kDD2e67XN5cpVlqJCKiTD8d0eOQNi222WSeSX5m
Igb0uaDDDkXWyJIh+EpF3HHJHotM8DEd8c4rjwx4YMgLn4yZki3S5ZxrRiR1
L7FFjQNOOaPHLSPGJGyeZYUCJars0+WEK575ZiETkSNPgQ3qHHPELmXWWWWZ
FMGv+zeeuOcm/f/TP0P4Na8=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt1GtoFlQYAOAzkATnPmervJZaJGxfF9nQP+kSyo3QMC2qTXO6oWbFKuYl
J7h987415ixEP7poihP27Rbkpa2pC4WlTXexzaB+pILMEkExuyg+kT+e99d5
ec9533POpML35xcnhRCKhA+Hh7CaKuIk+JrDtNFJNwNc5DJ/cI3r/EVICSGZ
FMaTSTZzmM8b5LGQxRRSQgUfs4NPaKCRJjrooZc++rnFI5EQMphLjAN0cpXU
ESE8x7uUsJTniZLCEG5bd4WfOc8Z2mihmQR17OMoJzjJJZLlTyaTLHLIJY8C
SllHLWcYmhrCTApYRCExathOnASHaOcs3fQzyA3+YdjIEMYxkUlEySaPBbxN
GZuppIrP2Ecjp+8b/C//wRDmsYbPaeVXktKcjZeoYCObqKKaGrazlW1Usp4y
YpTzEWtZzXKyeZKJjCWNhxhBhGEkc039Xo7TQj2VrCCX8QQu2H8XZ2mljoPE
KSWLq/q1k4W8zCtMIcoo0rhrNn/SThstfMV+8onQbd61vEmUCIPu3zmO8Q0J
4uxmF59STQ0xlpJDOhFueis/0cMpTtDBl2xgAfm8yjzmksuLvMAMpjOVLJ7l
aZ7gcSbwGGN4mFQiPMDd5BD+5W9u8TuX+I1f6KKRevaymxoqWMtKPqCYFSxj
CUW8w3uUsIoNrKOUGOWUsZ6tbGEzO6hlJ3F2sYcv2M9BDtBMEw0kOEIrh/iO
Y3xPG0f5lnY6OM4pTvIjP3COPvoZ4CJXuMEdgn4NYSSjGM2jZBAlnck8xTNk
Mo1sZjKLHGbzGq/zFosoYDFLKGQZRcP//4fvAQHux4g=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0jtIFWAABeC/oYeUj0hCUbKLUpJSGip6w0BpKdBAMnHMwUHClhpCBKFF
ELLwgVxUSsOhMo2giDDFKQnRssIScSgbzFuboWT0ScO3HjiHE2m4VtO8K4Tw
hPZoCB20cYdeYjzmEZ2MMMoDhujjNncZYJgXvGaOeT7xhVV+EmeNFd4wRgs3
aaaJRuq4RBXnOUcFZyiigBMcI4NUktjPPnYTIYt0DpJIAnvI4ShHSCOFQvLJ
JZuzlFFCLRe5wEnyOE4l5ZRSTCaHSeYAf8tC2OYPm8RZZ41FPjDNJKM8ZIQh
7hGjmy7uM0g/TxlnigneM8tbZlhmic98ZIE5XvGS5wzTQwet3OA6V2minstU
U0kF5ZymkDwiZHGIZJJ2epaG8Is4q8wzwwLvWGGZ73zjK+v84DcbbLPFXnnp
FHOFZ5yy663o/8/+A13HgbE=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0ttPzwEABfBv0kZbPJQl5lISkRCm/BqT++SWSlEP0gOhZBUe1B/jRVNY
bRXLZcvm8lBmlEpbLqkUIVuGxWfz8Hk9O2c78SUVOeVhQRDc5EYoCBpo5BZN
NNNCK3e4Szv3eEAHT3lGF895wSAfGOYLX5nkJ78JMoMgjBnMYjZziSaGBSxk
KfEksIxVpLKODWwji50c4DDHKOQExZRwmjOc5RzlVHCBSqq5xGWuUksdV6ii
houcp4xTlFLAcY6Sxz6yOcgOMljJuM3vGOIl3fTxhvd85BNjfGaC70zxiz9M
85dweTOJIIo5zCOWOBaxmCUsJ4lk1pDGJrawghTWsp6NpJPJajYTYivb2c0e
9rKfQxwhh1yKOEk+u0hkPpH80HuEV7xllG+85gmPuM9jeuilnwE6eUgbt7nO
NepD/z/7Dxfefg0=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j9IFHAABeCfhHLYpd6gBLpYg7cUnkSTDcY5JSgh2E392eKuuxODhgh1
SG5x6eBEV2k5RcEc5FZxuEJCcYmWg27wQLujISoR/KDh2x/vvcEXucfZthDC
By5jIfyjRpVtisyRI8srMiS5Rx+NnhDKLPOel0wwyi0i/OkO4YxTTqhQosA0
gzS7QvjOHmsUSJMiyV0GiPDzRgjfOOATK7wlw1OeMMMkD7nPCAlu08t1LqIh
/OU3LZqcU+cHJxxxSJUK22xSZpUCi8ySJ0OOOd6QJkuKKcYYpo8onQwxwwIl
PrLPZxp0yNrPA8aY4jXvWGePr9RocslNPcUZ5RHzFNnimHadJ3jGEht8ocU1
m8V5zgK71InZ+w7j5NnhkDq/Yv8/dAWc/1Xl
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0r1LFXAUBuDfvVdJEgdTvGCF+BFI6WZjWWMNEmIYhEZOipg1K0FJ0B+Q
S5SQTX3QpoKDmoPWVVHTNPMrLdMyidDkWhk90PAs58D7Dufk1zVXXouEEJ7x
qCiETp7wlC5eMkiCEd4ywyzrbPCDHX6TciyEA8SI8tdslyH66eYBbTRRQwWn
OE6cP4U66OEFnTzmFq20cJ0G6qnjKrVc5gLnOUse+wUhzPOeGcYYZYQEr5jj
HbN8Zo1PfGSLb2zyiz2SpMs+SBpxckglhV37n+zwlS9ssM4KH1jmDZOMs8Qi
C6yyTUxWlAiHyOQoRyikmFJKKKOc05zjIlXc5Db36eAhz+llgD4Gec0wE0wz
xTxzLLLAd7bZI0nMvaJESCeDbLI4TC4F5FPKCU5SRjlnqOQS1VyhkRu00Mod
7nKP9qL/f/oPLc14Gg==
                    "]], 
                    
                    PolygonBox[{8214, 8183, 8150, 8118, 8089, 8053, 8019, 
                    8015, 7999, 7981, 7967, 7968, 7970, 7972, 7974, 7983, 
                    7993, 8008, 8023, 8033, 8050, 8072, 8076, 8096, 8108, 
                    8120, 8124, 8146, 8168, 8211, 8243, 8292, 8387, 8442, 
                    8471, 8466, 8445, 8431, 8409, 8421, 8439, 8458, 8441, 
                    8411, 8397, 8398, 8401, 8379, 8372, 8351, 8328, 8324, 
                    8353, 8374, 8335, 8283, 8244, 8221, 8214}], 
                    PolygonBox[CompressedData["
1:eJwl0k9IE3AYBuDfnJcUyYqxoUQIXsJD0KkIycsIb9ZBIvqHkNhlCyE8lHgQ
g+2mSEwUjKZRGVJYMOigDcnBKFJ0EOQhshF1SUUQuvSIh+f4fh9879fSk76S
ioQQnnAqGsJZLpCki+vcpo9+7jNMllHGyDHHGxYoUOQjn1hjnQ2+8p1fbLPD
HkdqQzjKMY7TSJyTJGgmxgnqifJPbpd9/vCbn2xS4QtllnlNnue84BUzPGWC
cTI85C69XOUS7bTRQpwGIgd7a0L4S5VNNlhlhWWWeM9b5nlGnknGyDDCA/q5
Ry836KaT87TRSoxadhVW5RtlPlBgnlnyPCbHFDPM8Y4iJdb4wQ51ZjZxmjOc
4yIdJLnMNW5yizukSDPAIEM8Iss407xkgUVKfKbCFnsEN2wkET38vf9ALVhr

                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0k8oHmAcB/CHEkXRir1Jq3fNvP4d1hsHdthtq+VAyw7L5T2uUCIOjnJa
HCQpkeGdWtZKspUtIzVRNERSKHovTkZOL/ssh0+/np56fr/ftyeaaG9qywgh
fCQaC6GU57ziLS28p4dePjDFCvv8pbA8hBqa6WKCOb6xwR+OuOCG3IoQ8onw
hDgvSdDGIEmW+M0J12RXmo9aXpOggwFmWGKdc4qrQohRTdp5m2n6aKWROBHu
vJ1ij6/MMUwP76ijjLTZz9jmB5N000Ej9ZSSR0ouqyQZo50GnpFNqiyELRb5
wiT9dPKGF1TymCiPKCKLy6fyZI0VvvOZEUaZYYEtDjjlgnOO2WWTX8yT5BNT
TDPLModcc0u+viU8pJAHZJB2l6fmkEkBEeI00UovQ4wyzgQ/2eGK2/97yaQg
dv8H/wGPsG6J
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl001oDgAYB/DHO9vkYw6WtomytsmSHXZZay1FIhyMzE6vj+RAdnkl7KKG
k0Yy5bA5+AhhsRfbaqmNvQctxULIIoYybaONJn7l8Dv+D0///7N0V2PdgRkR
kSE/N2IyJ6KfNlLsYCurKaOAP9kRn3lOHw95QAe3uE+aTm5zg0tcoJWTNHOQ
BraxiTXUUE0FJRQwl2ymZ0ZM8YufTPCVDwzzltcM8YQBHtFHF2nu0sF1LtJO
Gy00sZ/dJKlnI1WUUUIxf7MinjFAmk7ucIVWTtPCKU5wlCMcZh872cI6aqmk
gpWUU0oReSSYTESMM8YoH3nJK97wnhG+MME0s+TmU8gyqllPPUn2cohmznGZ
e/TQyyAvGOU77/hEuH82+VSymT2kOM5ZrnKTXjI8ZYzQYYI8FrKYJSyikDnM
o4hilrOCKmpZywaSpDjGGdq5RhePGWSYcXLsdQHl1LCKOrbTSBPn6SbDECN8
4we/ycr9/xv/AM7jbMc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt1HlsyFccAPBfMceMIescm/sIySoyi9Ka/jGlgmUtpm5KVFNVprRsujni
qDq3OOYI4ljdG5tb0FIpyoQ5w1riTBzbbIur+zTrH5/3vslLXt73ffP9Nk5I
jRsTEgRBhiU1Ighiud8hCO5xiatc5yQF7OEgW9nBclYwjwUsZjbfMI3JpDKO
EYwimQEMYgi96ctIBtOdNrxFOf5qHwRv2P+1n+EC5zlLIde5RjHPeM0utrGW
NWQzj0V8ywqWs5QlfMdqvmcZG1jPZnLYyx4u8oIQ76lKZWrQgOY0oylhfEA4
HehMDL0YSH+SSGQ8Y/mSSWQxh01s51cKuckNHvO89D8or171COVDwojhE4Yw
mjQml8VJDCSejkTQhPpUoBwh/OPuZzzkLrco4hx5HCaf3ewnhy0sYRnZzGcm
s8hkKhmkMIahJNCHeGLpQU+i6UQUkXSkHW1pQSPq8Q6hvFSTEh7xlLvc43d+
4xIFHOUYP/ML29nED6xjFQuYTgajGckoEkkhmQmkMYlMpjCLuWSxkJVsZCtb
+ImdHGAfeeRyknxOc4orXKaIB9znT/4gkOubVKEWdXif92hCK1rSmo9oTzpf
k0sxd3hS2leUEKh3LWrTlu58ynC+YDxTmMo05pDFYpaSw2Z2cpBD5JXOEZ7w
isqR+oS3CaU+DahDXd6ldlncsOysKY1pRTjtiKIzXYihB3H0pi8DGEYSKaSR
TiKD6E88vYjlM3rSja5E8zGRhNGamlSjOpWoQEVK5PV3aa/wmNsUUcx5LnCR
Qgo4xXFOkE8uRzjGj6wkmxlkMoGJpJNIP4YSTRThfE4cXUgghWTGRvw/z79i
XFn8HxDyD+Y=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt1GtM11UYB/DjZThN3UpS1hwpzZjmBQhB0CVoGm4JyrzCclz6G1pycaZT
cEMXLWLiEpubulrqmJovtMWm1UqR1NIugItiusCRVmw1MdxytfX5z158zpvf
Oc85zznf/SaXVOSXDwkhRAxdaSH08Qf/MiE9hInEM45YxjCJp0lkOsmkkEYm
a3iNct5gD++wnyZO8AmtdPA1VznPBT6jjct8w7f8QBc3uEkvt/idAeLmhJDE
XBaQxwqW8xxPMZ7Az+Z/zoe8zXZKWU1GtBaBfndwky+5wHEOUEcZJaynki00
spcmDvIBR2jmCt3cZbjak8mmgCr2cYqv+IWhzhlPKvN5nhfIZx4zyKGIjWym
mt3UUU8tO6hiAxHWsJRsUpjGVKYwiVE8sH8fPdE74G/uM8g9fuUnznGSRirZ
xCssJ5UERkbX6bmdTznMLiLk8iKLWUQS05hKPHHRDPIYY3gkmsvZIfzDX/Rx
g26u08lFWmnhY5o5RiNvUkcNm6liIyUUk08uqTzJYKraXOIsZzhANRGWkcIE
bj+rP/azjZfIJpEHKfJLC29RyBzGcTc5hO9o4T0ayGMs15NCOEo161hAFivJ
IYPF5FPMejZRSiG5LCGNmSQQSwyDs+zNb/TSThe3GOH7oyxkKXlEqKGew3zE
9wTnjPlfIqXU8j7HOcc1ehhgmJ5HMpoE5rGaInayhyaqKWctBayjmDIqqGQr
29lBA4f4gkv8yB3+5AlvkEkBL7OVBo5yktNcpJvHvWUmGWSxkHRm8AyzySGP
tbxKBRsoo5x6jtHGALGyNJdV1HKKDvqJkelElvE673KazrSH/+P/AMyV9sg=

                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1n1wyHUcB/DfZm3MQxZ5mkmRllQ7tFhCxTys81iOPD/G5WnOs50rhrYI
4aR5Opd5uhFCE4YVU24qeTptnpblGpnKU6GX64/X3fd+97vf9/t9f76f7/2e
HDSm2+iQIAh6hQbBgvJBsJx1jOEt2tOaOBJJ5ih/Ua5CEETzCsOZwDjmkEo6
HzOPRaxmJZlksYmt7GA/e/mWo3xPPgX8wgWK+Z2/uU1YxSAIJZLKVKEmsTSg
OS1IogP9GMZgRjCKqUwmhZmksYCFZJDJWjayk90cYC+55FHIRX7lElcopoRS
7jxcZ6UgCOG+8b+EGZchgnDK8zj1aUoTWtGSRF6jCz14mz4MoD9DGcIwxjGN
GbxLdxKoQ00emPsyJzjNXWI8j6cdAxlOMmMYzSQmMoXJvM90ZjOLVNJJYwHz
WcJilvEpq1nFWj5nIxvYQhZfsp0c9vINueRxmGPkc5wCznCJixRzmauUUMp1
7nLn4Z4JfVTWhBNFDapTlydoSBwv8hKv0oK2tKE9XelMDwYxkGEMYRSTmEAK
s0hlBuksYhmr2EAmW9jO1xwgh8Nc4yZPV3YeaERDmtKKliTShiQ60p1RjCSZ
sUxlCpOZyQw+Ip00lrKEFWSwji/YTDa72E8O+RzlJOcp5DcuU0oxoVGypDHx
dKYffRnAYFLoSQeaU4/aVCbPNxYzjOZUI3g4hywKOMhmkulGArFU4IIa7+IT
+tGMaG473xfIZysfMpqutOI5qlOWP90p5zjMdlYwm2kMoRMJ1CWCW+7AUq6z
hnn0pi0vU5co7kW6LynkJ3bzGXNJ5j06EU9D6hNDLSryTznzUMRxsslkLmMZ
QBcaE0sMtYnkeln14juy2cp6VrCMhcxmEsPpR2eSaE8H2vEm3elFC+JowGNE
UYEIyhBCwP0I+XODKxTyA7vYwRay2EQ2h8jjJOe5RBHnKOAspzhGLl+xjfWs
ZD6pjKQPbYgnmhpUpQx3w9WDqxRzgjx2s5QUxtCTbrSmBQ2pQjg3HrFG8jlE
NhtYxUI+YDz9SSKRljSjEc/yFLWoSHlqEk0dYqhGJUIJKA2TH3nsI4t1LGIW
4xlKV5pQlUgCLpeRI39wjVPks4895HKEYip5P4436M0IpjOXDNawls1s4yCn
+ZED5HCEnzlHEcWE2ENVYomnHX2YShoZ7OQYRdwiUtZ1eJ5OTGQz+TzgBfUc
xBzWsIczlHCPas5hLE15nb6MJ53lbCSHU9ykkp6pRwLvMI7V5HCaEsL0ZDTP
0IyhzGcXZ7lPrL6PpyM9GFX+//+r/wDYF0pb
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt0DFIAlAAQMGvFI6StNVQ0RBkQ4PU0NKSLS7h4CANBVkQGSIRCAYNLUJb
g44uDbkJDoFT0NBSbYJgY4FESJsQeEPDrW94iwfFvbNICCHHPkVqPPDICz36
fPDJFyN++WNaYIY5lkmyzjYZjrigyjU33HJHkxZturzyRp8fItEQYsRJMM8S
a6TYIk2WPAVOOKXMITl22GCFWQJD/R7PdLinTo0rSuTZZZNVFkgwxVjmmwHv
PNGhQYVLzjn+fzsBcm8sQA==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0jtIFAAYAOA/QsImC1eFhqvIwCX1riOyxYZCxLgtqLQSHHzCcUOLdFJD
iARKNxQuEUgYSQZJcEQQCEZUUKhohq+LIDARhSD8wOHbfv73sbbu1q4DEfGc
oXTEA+4xwB16uE2GCySpo4bjVFLG1tmIJaYZ4QaH2UpFDNPOLbIM8pRZ/tAo
Lscz3rHBf3bZ5i+/WeYjbxhjkAT/5FhjlUn6qGUpGfGSIbLcpJlajlBJDSma
uMQVMlwmyWlOUM5uQ8Q6UzziPp1cp4EEFRxkoT7iNWMMkyVNUKqL+MQEeTo4
TzXlbJ6J+MoUBUZ5wgRF3vOdX6zxg2V+8oVFSswxy1ummeQF43wm1ErQxABF
1qnQYyO9POYDO1SZ6xwZ+inwihXK7Ock9bRwjW4eUmSeKje5SJ5vHHK7FgrM
UGKT8E9HOUWKZq7SRo676f1f3QPpY4D2
                    "]], 
                    
                    PolygonBox[{15815, 15758, 15747, 15726, 15697, 15670, 
                    15638, 15607, 15569, 15548, 15529, 15507, 15492, 15463, 
                    15382, 15326, 15284, 15263, 15256, 15251, 15243, 15231, 
                    15214, 15190, 15183, 15215, 15236, 15250, 15259, 15269, 
                    15291, 15357, 15421, 15484, 15501, 15518, 15538, 15554, 
                    15573, 15568, 15571, 15602, 15629, 15657, 15676, 15711, 
                    15739, 15762, 15818, 15817, 15816, 15815}], 
                    PolygonBox[{50, 51, 61, 68, 82, 74, 47, 48, 49, 50}], 
                    PolygonBox[CompressedData["
1:eJwl13l0TmcaAPAbaWcsrSQIQWIJIq1qprZQVT0ISkeNZpwiVWlMq0hraDuW
mB5MbUWMUloZXSYkaquEoRykpCTNEMYpaq1GzGJpqWAo5ved+eN33vN9333v
e+/zPs9z79f8pdcHvRYWBEGf8CAojwuCS4Q1CYLGdCKNLD6hhH8T1TQIBpDF
Br6nUbMgGEo+9+jVPAjeYBFrOUmz+CB4kWxWsY+fSWgRBH3JYC6rOMYNHmgZ
BJ3pTzrz2ME5arYKglYM5CWmkcc2DnGV6IQgaEFfRrGIPVygZusgaMtAJrOQ
PL7iLHeISgyCRDrQkxR60YMk6nPdcacoZg3LmEQKrQjnB+vt51M+ZCLp9CeJ
OMK57JrPc4vaPsfzJKmM5k+sp5gKboXmOn8iTzOe2SxnJesopZIw11qX2oTz
g+9OcIDd5LKCD3iPLDIZRHtiiKQa1XkgFCPrhxnrEE0DYongrt+qOE4R+eTy
PlPJYgqTyWQkfehI09D+cEUcSthINmNJI4VGoT2WBx8wjiF0oTXRXJc/5ygm
jz8zn3cYRAxF8i+X6QwjgotytZg8ljGNUSRxVG4vIZ1O1KFS/u9kMaPpTU8e
5K56ucZp9lNGAatZwWIWMo8pTCCTVPrSlZZEEs6P6vMylRzlALvJYy6TGc0Q
BtKR6pyMdS+kEsvpxvaA7jTiaKMgmMFT3M8/Gqp5XiGeczHqhi18QRlHOct1
AsfUJ4muPM1gxrOIJYylH0/wKG24YW4l21nMZF7geVJIoha3GgTBvygln5mM
oRN1qKxvz1jFJrawnd38nTJKKecIJzhOBWe4zCWu8l9u8jO3CXP+CGoTTV1i
aEIc8TxCG9qRTHd604v+PMsg0hjGCH5HJmMZx0Sm80fmsoAl5LCcT1nNOgop
YDs72UMJ+9hPOUf4hpN8x5lQnDjHBX7kMj9xlZvcI1y8q3E/NahOberQgGhi
aU4CbXmEx2hPMo/ThW48RV/6MIBUnmMwQxnOSDJ4mbG8zmuM502mksXbTGMm
C5jPe+TwEX8hl7UUso2t7GA3Jezjaw7xLUc4SQX/5CIXuEIVYfL0nvGXxigi
aEBTHiKRDnSmO31IYQBpDCODTCYxg+nMZQ4LyWYZS/mYj1hBPnmsYiOfs4H1
rGMta9jONr5gK5sppIAidvElxZRRygH2c5ByvuEwR6ngLBep4hp3ucN9+kNN
qvMg0dQjjlgeIpmOpNCTVIbyPGmkM4JXGc84JpLFbGaxiOV8SB4FbGQnezkc
6lOc5jwVXOIGVYTpa7WoQxSNaUFzEmjDwyTRjs4k040ePEN/UhlKBumMYgxv
MoG3mUU2K8ghjwJ2sZMyLnCTGvpvXSKJI5HHeJwu9OIZBjGcNF5hHFOZwyyy
WczHrCafrRRzkON8y3dU8h+ucoXr3OU+z4ZwahBJfRrRkCa0JJHWtKET7elO
N56gK8l0oB0Pk0Ar4oklhgiqhd4vuWPtW1TxExc5zznOhJ5PnOIIhzlECXvZ
wxY2U8BKctnAGj5jG39jB9v5mq8oYhOfs56/8glLWcJCFvAOk3iDMbzKiwzm
t/ya/vSgM8k8SlviaUg9oogIxZl79v4ON6jiGpf5noPspYhC8lnFUuYzg8mM
ZAS/oTcpdKQ9vyKeZsQQGVpPHdzmDKcoZw9fspk1fEYO7zKFCQznBYbwHM/S
j748SRc60Jp4oqjFEf1hJQuYzUze4vf8gXeZRw4lob7KL8xrSm8ymEMhx7hJ
fffRk5d5ix2Ei2cMSaSznBMcYycVXOA2NeVbPRrTmR70YwQTyGI+77OJXeyl
lLK4//8v+h+GqwKr
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt0jFIFGAYBuAvMAiyMAShoMHBhgpLrtSujqDxljJDMxNBB5c6G4QoIjmU
CxT0QI4MB6EySQgRMkxyCPUaNCJpCBI3oTGiCEXIB2p4th9+vvd9Kzu6r2b2
RMQsi6mIx2TpJEUl2xciPjHPJHmytFPG6vmIKZ6QJ8dDbtFCghqqKGUnGbHO
G8bIUc77cxEPSHKcEpbrIwpkuEGaasrYqYvYYI6n9NLICf7WRnzkGX10coyf
ZyNWyNNGksNsnfGeSQa5TQMn2cdaIuIVw/TQSj0JrnCNZpq4Tjf9ZBmlwBgT
TDPHLAsUWecrm2zxm73+PUApRzlNmpvc4R4D/xV4wVu+UOKmIyRI0cp9ZvjG
NlXyaGaAeb5zUHYXaecRExT5QbnM62jhLjkWOKSnNM9p1OM4q/xiv75PcYnL
NJGhl0FGGGWc12xQYVNd9DPCS97xmT9U2GQtDWToY4gPFFlmKfVvz7vV3oRM

                    "]], 
                    
                    PolygonBox[{47, 74, 82, 101, 107, 115, 122, 85, 43, 44, 
                    45, 46, 47}], 
                    PolygonBox[CompressedData["
1:eJwl0LFKAgAQBuALoUEKl5DMpHoCV6GWDApyS1qaMqExB0Uk2pqC2sKlwDdo
KWgycYkiwiKIoLExmgsa9AOHb/q54/5b2qttHUxERJlBLuKJR+7pcUObM46o
s8smRQpkmSHJ/3zEN1/c8cEnF1TIM0uCbjaiyT5rpPmbM8M1J1RZZ4FJhpmI
By45pU2XH6bkKYqU2GCbQ3pM27/MCi06vJN0S5kqdfr8sqjPKjs0OOacDlfc
0ueZF155y43/OAIulTV1
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1W1MVmUYAOADWGZOsA8bueH3KyAqJQhUzlYjE7DZFIWtXMaPPmDDoEjc
0q3NFWtOxJWATi1FUxnQYiomk0FsaK8o2lxZoWkhuBnOSjDnWhfrx3W28+N5
znN/PPeZWrBmWXFEEARtHmeSgiBydhCkkkIR1bQzQD/3mDInCJbzEW2MnxsE
MTxDJi+zlDw+5AuaaKSdU5znLLe4PzkI7mMck8llI1VUsp069tJEC0dp5SeG
RtY+EQRjGU82xZTwKVup4QD1HKKZ43RxmjDnuMAVrvE7N/iHO0Q+aX8m8jjT
SWQxy8hnDSWs5WO2UcuXNHOU45ykizBn+JFL9NLPMENEzJMT4plJMum8RBnv
UU4l++mmh4v8yW2G+ZfYlCBIIo1sVlBAMaW8w3o2Uc0xTvAHk1KDYCGvsJZK
DtHE13xDK6e5yAC9nOcKv3KZPq7zA9/SRiO72EYth/meW4yZ79s8y5tspJGz
DBCk6TveZwufc4SfiUpXL0Kks5pCKqjhMNe4w5gMOWY2GSxhBcvJYRFPkcSj
PEQ01609QjVFLCGbWURw0zmu0kOYg+xiA0uZQSSDYrlAF8fYST5zGc0lufiK
KsrII5XJPEi/Gn1HPVsp5w0WEWIUg3qgl3N0UEcVGyginyzSSCCOB/hNH3Zw
kAqymMYorroX3ZyggR2sZxVPM5HL7mcze9jCJ7zL26wkkWjumgVnqGMdrzGD
sBnzGQXMI5Juc6iJWgrJZA4JTKTPLDtFK/vYTCkF5JBGiNHcnqU/OUkr+6mk
mAJeJIUZxBLDWIYTzQd+4TxhWmhgN2WsZD4T+CtB39PBXjbxAeUUsoo8FrOA
EFOZQjwzmc4kYplADNE8QgR98eKmgX3soIJSskggjrsz1ZVOGtlIIbksZBrR
3A25IwwS5T2OZHJ4nXK2s4dubhJl/xAvsI4a6umklyEec9ZknieTVymlmk7u
jcQuZ8+xmnJ20EQ7vfzNw+qQQS5vsZkDtNDDDcapcTwLyKeEnYST/v/njfgP
2Hk1Ew==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0b8rxHEcBvCPxUAUm1K6dL53ZFCUOpSOUhZJkvzqMpyUi0kmYRYWgy4G
RRarFJKfUfIPXDIKm5I65VWG1/Sup+fpHcvkBudKQggz3CdD+CHeGEKKcdbY
55Y3vqlpcmeUSXJscsYFTzySZ54ROoio4EPGMyccsk6WIdqp5kuPApccs8Mi
U3QTo5gI4ZptFhijh17StJKgit8ohFduOGCDJQZopoz3hhCu2CJLH/XEaSHN
MLMsc8QDBT4pl1FHGxOskueUF4rU6pKinwwr7HLOHaV2VRLRSRfT7CX///MH
pP1FxA==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt0j1IFHAYBvC/KXRodn2hHCdIU1Mo5JVCiNwQNAUiNSiRQQ1hKoItRVSb
qJTfgcYpZoqg1SUa1EFtDg6BJGKCocNBhoRLi5k/qOE3PsPzvs/pmy21zTkh
hFf8rvhnj0OJEArI5yjHKKKYMpLUcZ0b3OYuTbTTwQB9pBhmiHFGGWGCMSaZ
Ik2GTVZYZIkNIudDiHKKKlq4wwOe0E0nvTxnkH6GSTHBS6aZYY407/nEKuvs
sk/kgr7EKeMs56gkwUVqSHKZK1yljnoauMU92rjPYx7RSQddPOMpgwzwghRT
zPCaWd6Q5i0LZPjAIsusssZPdvhLXmUIuUQ4zBEKiROjmBJKiVLAH7ks3/jK
OyYZ4SGNXKKc4+y51Xc+0kM9MbJ+Nk8r16jmDHFOcJJcftnaD1b4zBe22Gbn
/x4PAOCbeNY=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T0oBHAAxuE/Qp3vQuTKXRaUj7uThclHUcrXeiKDQRe6sijpjGbDbUaU
G5iQMtyuKFlkQhYmC8t5yvAs7/SrN766ubBRFkLI8JgM4ZlPKlMhNNBBDyPM
MM8sfTRRTy11RIjSSRfdjDLONJNMMESSVlpopoYqYgzQT5xqKiinpOuHb954
4Y4il5xwzRUXnHPMAetMEaOUCOGdewrkyTFMG1+DITxxS5EPIvYoKeZYYZsd
9tljly3SLLLEMmtkyXDIGTc88Movjbra6SXBGGky5MhzxCmF5P9Xf6sDRRo=

                    "]], 
                    
                    PolygonBox[{12634, 12642, 12651, 12644, 12638, 12641, 
                    12631, 12649, 12664, 12682, 12685, 12690, 12687, 12686, 
                    12665, 12645, 12628, 12593, 12575, 12541, 12508, 12507, 
                    12486, 12449, 12416, 12402, 12375, 12356, 12321, 12315, 
                    12328, 12324, 12319, 12318, 12316, 12313, 12309, 12306, 
                    12297, 12284, 12270, 12260, 12244, 12235, 12227, 12230, 
                    12236, 12238, 12245, 12246, 12262, 12269, 12288, 12327, 
                    12341, 12363, 12378, 12400, 12422, 12432, 12448, 12462, 
                    12482, 12495, 12517, 12532, 12559, 12614, 12634}], 
                    
                    PolygonBox[{10731, 10727, 10738, 10751, 10766, 10777, 
                    10792, 10783, 10774, 10769, 10739, 10737, 10686, 10658, 
                    10650, 10663, 10667, 10670, 10674, 10681, 10705, 10713, 
                    10729, 10731}], 
                    PolygonBox[CompressedData["
1:eJwl1HloD1AcAPC3MYbYPwizjZKjlKSEJDmiSbkVzZZ/0NhcOWLLfYzQxtzR
fo5sNkLIplm5QoRNuU1uamyO5JjP8sfn9er7rfe+7/vtdZ6eOS4jKoSQbHmc
FMJDrlJOMcfYShbzSGMK4xjCYAYxkH4MZxLTSGUNRVzhLc06hdCFbgxgCMlM
ZBIppLKALaxgLmtZyRIWM4FF7OQUVTTtHEITvtt/4yvV1FHLF2LEG9OItrQm
migCf+V84iPvecFznvGUSu5zj1vcpIJyznOOEo5TSIQC8slhI1ksYzbpDKUr
7YgjtqEWookiUO/t/vKH33yljhre8JRHVFHJXSoo5QIlFHKEw0QoYC955JLD
RtazjtWsYilLWMgCMslgFlMZTSKhoceJIdzgCLtZwQzG0J/utKMF9Qn6xBsq
KSPCLnaQzRymk8J4RjGMXsRwr2MIR9nDPnI5wHHy2cA8pjCSQSQRw+v4EM6y
jVVksJx15LCJXPLYzg4KiHCIIoo5wQVKKeM6N3hINbXU8Z1f/KaV8/symRHE
05JoPohXsJ81ZJJMT2J42cG9OcZBCohQwglOUkoZF7nCdSqp4gEvqOYt73hP
DbX8pJ5GDfekOQkk0p44GhMaapRXTDabOcw1XvGRz/SQN5L57OE+XdS5jDJq
SNDLEcwgizzOco0qPvCDWHPTkd6MZTJpzGQp+RRyktPc5gmvqOEXseY0jjbE
04dkUkgnm23s4wyXuMydpP9/5D/AHtuY
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1mtM0GUUB+C/mS4VRNGa99VyICXOW1sRmgQaliaaiCzzkjaULXTIFi5R
Z+VlIyxRdDkVhqjTxFR0OE2WEXYRkVJKsATSim4SidXS6nF9eD69n8457/m9
7wMvLp6W0SEIgk53BcGq0CB4nb3s5z3OUEsrXboHQQhh9COCx0lkOvNJZwmv
kUseReylimrqaOQG7QRhQXAfkUQxmniSSGERaSwmg2Vks4Ic1rOWDeSxmU0U
cpRjVPIR1ZzjIg1c5huu0EQzP9LG7/zNLTr1CILOdCOEUMLoQR/6MoCBDOJ+
IogkmmE8wqPE8SRTmMlLpLOULHJYwTpK2M1BDnGCk1RSxRdc4BL1NPMtv9DO
Tf4l6BkEHbmbEEIJpxd96cdgIhhOLHFM4CmeZR6LSCeTV8hmNWtZxwbeYgtb
2UkhRZSwm33sp4yjlHOck5ymkk85Ty11fEkDl2niO77nOq20c5N/7tQYblbc
QxdC6U5v7qUPAxnEYCKI4iGiGcFIHiOGWMYSTwKJTGQSk5lOMjOYSSqzeIH5
pLGQl8lkKdksYwUrWc0brCGXN8mngK1sYwc7KaKYXezhXUop4yjHKOc4p6jg
NFWc4SznqOE8F6njKxq4QiPX+IEWfuI32rjBTW7RsZc+04VQehJOX/ozlGiG
M4oYnmAcCUxiMsnMYDZzyGAJS8niVXJ4m40UsIXt7KCQInZRwgFKOUIZ5Zzg
JBV8wGkqqeIMZ6nhPPU0cpVmmviaS9TyPvt4h0zmMZ4JPMd0UnmeFJKIYzRR
RPIgA+hEq17+zCU+4SCbWc9yFvA0o+hHV267621cpZrDLGE80fS8c2b3y1jF
PIbQkVaZ9hn7WcNcRtzJOT6XyaXks5JniGUIfbjtLbhOIzWUU0wOWSQRxxj6
05mWEDvNh5RQwCpSiKQrv3YLgo/ZxAImMoZh9KIDrV3VRD1VnKKMIxyilAPs
oYRiCtnBdgpYSyaLSWcuKSQxnhhiGcs44kggnglMJJFJTGEaU0kmlZnMYg6z
SSODZeSRzy4quMA1/qK3+gbyMCOJIYGppDCHTHLZRjGHqaWOFtr5kzD9HMI0
sljOVo7RwB+EmctghjKaGBJJZmHo//+B/wA5CCL4
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0LErBAAcBeDfDTc4p1tMSrq6QbGQ6RaLRUm5RVmuTCyUjFdXVtLVUcot
1/kDZLBIlpPFQOeUI4oIg00YlK8M3/SG13vZ+eXCUiIi5phKRyxSZo0KW2xT
o06DfY5o0eGed35J9ET0kWeMYXJk+JLfcsgOJVYpMEiG7+6IT9645pIDGuyy
wQpFZplhgjyjDNFPLz+piGeuOGGPKptUqFHnmFMuaNHmjCbn3HDHA4888coH
XXoGGGGcaRZYp8kLSbuyTKb/P/4DQ4836w==
                    "]], 
                    
                    PolygonBox[{13057, 13053, 13041, 13019, 13012, 12990, 
                    12963, 12956, 12950, 12940, 12935, 12928, 12914, 12899, 
                    12898, 12895, 12874, 12861, 12851, 12820, 12802, 12798, 
                    12781, 12770, 12752, 12734, 12718, 12695, 12667, 12625, 
                    12582, 12574, 12567, 12556, 12539, 12534, 12533, 12531, 
                    12547, 12552, 12580, 12620, 12653, 12689, 12705, 12722, 
                    12733, 12746, 12769, 12784, 12788, 12810, 12826, 12835, 
                    12852, 12857, 12865, 12885, 12900, 12949, 12980, 13004, 
                    13007, 13024, 13028, 13040, 13046, 13051, 13057}], 
                    PolygonBox[CompressedData["
1:eJwl1Hlsz2cYAPCvK1GkRh1jKvr7ubVYmKqjmWPaoInjD1fiqKhN127r0jpL
E9LGZNI6qs2Uxi2IujZHHLFsjpGaxJFKbBiaCe1ixLn5NP74vHnfPMnzvu+T
931iUr+akFkvCIIMw5NQENRQyz/8x/8E4SCIpDnt+YhO9KA3ffiET0knlwJW
Ucg6SimhnG1UsJ8jHOY0J7nIeSqp4jbVPOQx//KKRp2DoCERRNKGaDoQpi/x
DGYYySQxjolMYzapZJLHMkrYwFb2socznOIC57nHHWqp4S1vaNrFWWhOS6L4
kHaECNOLWOIYSAJDGMDHdKM1zYjghbxPuc9tKrnCzxzjOPup4ACH2MFOdlHG
JjZTThFrWEs+Bawkl6Vkk8N85pBCPz7gkbpf5Uc2kMcCsviWDDJJYwYzmcJU
xjOWFEaRwCC68dob+4UjlLORMtZTzGoKKWIl35FPAYtYzBKyyeEbsphHOl+S
xlxSmc0kJjOFsaTwGaOIZyBx9KEzHWlNG5rSjFcx/gl/84g/ucMtrnGD37nK
b1ziV85xgp+o4g/u84CHVFNDLc94Tj371acBETQhilZEE0MsPenNUBIZxnCS
SGYkXXkp5z0uc5Ct/MAKcvmaDNKZy0xmMZVpjGcCyYxmDENJZADx9CWO7vSg
JzGE6u7ZyZ9iN6tII5/vKWIdWSynkGymM5mJpJDEYGIJ0YEwiXxOGWepoIRS
9nGSc9ylius8Icq5omnBa+tqGpu3I0wXBjGdHBayiGK2c4CL3OUx7dW5P2NI
IFTXS2nLU/GbVHKFv+r2JFKsBSOYxRfkUcoW9nGUC6H3/fodhVrhdw==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0C1LQwEYhuHXcECPQUGnVkFW9we0CGIZCysGUZiwxZ24HzEcgoJiERQm
VtcEg0Gb7CMps2+gWJYMopcYrno/8KweZOX6VEQUmU8j5sixyDJLLJDwPRPx
xYRP3hkxpE+XZ+7pcM05J7RokFGjwj4lttmgwBorzP5tTUeMeeOBW6444pAW
p7Tp8MgTA1554YNEK0eedTbZYodd9qjS5JgzLrjkhjt6jPkhTf+/+gVi1ixS

                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0D8oxAEcBfCv7Rb1S9TVCXeXpC6Juii7kpQrpXSLGHT5sxh0ZbmuDDec
waaUwWC9m0wGNx4pi1iUxYJJysCnDJ/tDe+97PpuaacnItaYy0WM00fCIJOU
KFJmjwO2WSJPmu9sxCMdLjmhyRH7bDDPLBkuRiK2mCHhazjiiTtuuKbNKU0O
qVBmgWkyDJCQ4mco4oNXnrmlxRX3vPDOL2n5MYosssomVeocc0aLLm/06tnP
KBMs06DDJwW7VqhSo8E5bR5I+Wkq9//zH1/5OB0=
                    "]], 
                    
                    PolygonBox[{2475, 2474, 2478, 2487, 2503, 2505, 2504, 
                    2501, 2500, 2498, 2492, 2485, 2479, 2468, 2457, 2447, 
                    2433, 2432, 2435, 2431, 2428, 2420, 2427, 2440, 2441, 
                    2442, 2445, 2439, 2404, 2386, 2359, 2343, 2326, 2324, 
                    2323, 2312, 2307, 2296, 2295, 2283, 2281, 2278, 2285, 
                    2290, 2293, 2303, 2306, 2308, 2310, 2322, 2338, 2348, 
                    2363, 2385, 2399, 2410, 2426, 2450, 2469, 2472, 2475}], 
                    PolygonBox[CompressedData["
1:eJwl0bErxAEYBuDPIEwGhhsstyn1u98lJXfndO5SbtBJFup0JYvIgDBiuk1h
tTBJGfkLbjIaZLMZb7nhCk8Znt5venvry7b2V/cGIqLFSD5ikJ80YlxmybHI
EiXmmWGOMkUqVCkwyRQJKcuss0GdMXr6v3mnwzP33NLmiBYNykwzSi8X0eWT
F56445orLjnjgCY1KixQZJYSVVbYZItdTjnmkG3q5JlgiN8kok+4MyQ02OGc
No906DNsb4YCazQ54YIbHnjljQ++6Kb/P/gDWVo9ig==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0TsoBXAUB+C/LJJFBptClNe9t4uBgUERpbgZuJtLkrwSizwG8hwtitVi
lInVYDBIkUKRrmdRLDLgK8PXWX6/Op1TmBpLjGaEEOa4iITwwCcvfPBFbjSE
EqrpZogRxumnhwSt1BInRg31NNJEH5PMssoGm+ywxyFpvsmI2cN85YVbbjjj
lEseeeeHHPk8iimlnAoqqSJKnDKyudc5Yp9dlknSQR3lFJHFmxs8keaEA7ZZ
I0UX7TTTQD1NtNHJECNMMMU0M6ywyDwLrLPEJGMMM0gvCVqoJkIp+fxWhfDM
HVecc80Nr3yQKVdAGUkG2OI48v/zPxREVzg=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0LFKAlAAAMBnFAhhUIK7tAk2NfgJtQoNDRrU1qDiIg6Fizi61RRBQ1Cu
SggONQjSEA1BNCTiFggiJAkVdNBwP3DJw2K2EAkhZNncCiHGGqussM4GSVJs
s0OOEnWaXNPlkVfGTJjzwTt97riixh67ZEgQZ4koy0T4Toew4JMfvpgzY8qE
MSOGvPHCM08M6PPAPV06tGlxwRkNyhywT54jjqlQ5YRTmpxzyS039PhN/x/+
AdjjPjM=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j9IFHAABeBfoHmKYKVDCpkSWLQouUlBZrdYiAXmn4hCPMQUz4I0TRtE
Q5AkwnMQKYJAIVEQJw0JEaJIQcsxAkmCBgnUoCzwA4ePN77hvfz6+PXWQyGE
SY5GQjhGAUWcp5Y6blNPjFbitHGfTh7TzyDDjPKCcaaZZYEl1vnOFnukp4aw
Lb+yyFvmmOIlCfropZseHvGQB7RzjxaauEsDd6imhhtUco0KyrlMlDIuUkIx
hZzlFPnkcYJccjhONplkkcERUkkjiWT+pYTwl11+s8NPfrDJZ1ZZZoVPfOAj
71nkHfNM8poxRkjwjKc8YYB+eummjTiNxKijiitcJUoppznDSbJJ5v9he/CL
XdaY4Q3jJHhOH13copZyopRwjgtcIkYznQwxwRe+sUeOzjJu0sEQr5hiiXU2
2OIPkcjBV/cBHw9a6Q==
                    "]], 
                    
                    PolygonBox[{1554, 1580, 1615, 1636, 1677, 1696, 1744, 
                    1792, 1798, 1830, 1840, 1864, 1906, 1938, 1955, 1973, 
                    1975, 2000, 2014, 2025, 2034, 2040, 2046, 2048, 2049, 
                    2051, 2055, 2060, 2065, 2056, 2041, 2030, 2018, 2005, 
                    1988, 1966, 1953, 1934, 1911, 1883, 1859, 1818, 1787, 
                    1759, 1748, 1704, 1678, 1657, 1643, 1637, 1602, 1597, 
                    1586, 1582, 1576, 1563, 1551, 1544, 1529, 1518, 1502, 
                    1491, 1480, 1481, 1485, 1499, 1511, 1532, 1554}], 
                    PolygonBox[CompressedData["
1:eJwl019oDVAYAPCjpLU7HhBidzORVtKmePDniVq3MJt2R4vWau5CV3vZ3K5F
Rqilruk++E+W8SCa9iBqD1jqSute9oCQB2P+zAOSFj95+L2czvm+833nOxUt
++qTU0IIL5iMhlBcFkIJ86lkHXH2sJsk7eynky6O0M0xTpHhDGe5zX3uMcQw
j8hRIM8r3vCad3xinG/84DtTy0OIUMwMZjGXOaxkDatJ0EYHnZwkyzX6yfOS
CX79i7UwhHKqiJEgxWH6GCJSIT4xGklyiNOc4yr93GSQ50xSvsjdiNFMnC2s
ZQVFFOy7wxV66CZNA8uYkP8hPdSxnCXMZjof1PCEAS6S4ShpWtnGRlaxlHn8
0c8vvGWEuwxwixtkSdFGM43UUU0pRfw0Kx95xjCD9NJFghqifC319qRZTH6B
2eASfYwy03otB+klxxhPOc8BkqynijIifHb2Ade5TIq9JGihiQa2UssmathA
jM3UE2c7O2mlnRNkyVEiVyW72EGGx4xygQLT1FpNEx0cp58c7xljnN/R///s
L8CEios=
                    "]], 
                    
                    PolygonBox[{10202, 10193, 10177, 10154, 10134, 10102, 
                    10088, 10073, 10075, 10069, 10058, 10056, 10059, 10062, 
                    10072, 10080, 10095, 10109, 10110, 10113, 10124, 10130, 
                    10153, 10166, 10201, 10222, 10248, 10265, 10297, 10320, 
                    10340, 10359, 10392, 10425, 10477, 10513, 10551, 10583, 
                    10601, 10619, 10647, 10627, 10612, 10607, 10567, 10539, 
                    10505, 10463, 10401, 10398, 10386, 10358, 10339, 10326, 
                    10318, 10291, 10263, 10234, 10217, 10202}], 
                    
                    PolygonBox[{11757, 11813, 11823, 11825, 11867, 11868, 
                    11870, 11886, 11935, 11989, 12035, 12079, 12143, 12102, 
                    12076, 12058, 12042, 12020, 12003, 11981, 11966, 11957, 
                    11955, 11924, 11921, 11895, 11872, 11854, 11841, 11816, 
                    11769, 11710, 11665, 11617, 11574, 11563, 11562, 11559, 
                    11533, 11494, 11474, 11442, 11442, 11410, 11384, 11369, 
                    11331, 11284, 11229, 11210, 11186, 11184, 11179, 11231, 
                    11289, 11328, 11378, 11421, 11465, 11518, 11573, 11608, 
                    11637, 11668, 11714, 11757}], 
                    PolygonBox[CompressedData["
1:eJwl0T8oBAAUB+AnKQwmSiHddrgzyGAQSiEK2RikqzNQ/mQxWAykGEgZJJPB
ImS8MpFYriwUdQsiZZLI4ivDt/yG13u/l8jMjswURUSWQjriiVduOWSJefrp
IkU536mID644Y4VBynhskrHBNMO0UsVPY8Q9F+Q4ZodV5sgyRh/tJKihlK+G
iGcK5Dlhn3UyDNBGM3VU00IP4xyQ45oXis2spJluRplii1PueKfE3kl6mWSd
cz6pdW8HC+xyyQNv/FKhq3qSdDLEBIsss8Ym2+xxxA359P8//gDjQUXa
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1GloD3AYB/Cf+1hLYa5hOWr7O8a7yYsRhhaJlTDRyFFqWyH9XXOW9sZe
jISkkSM5ms3c+wtLxAwzy9FsyjGWJccc5SMvPs+bXz31fJ+n35AleXNy24UQ
4pWbkRBuU8szPtFpRAh9GcwoJpLJTOaRwxo2UMQBTnGBGDU08YuOI0PoThLp
zGcDh7hFC4NHhTCd9RymhrjRIfRjMtPIIJVefPFeywNiVHCUA+yigLWsI8om
8lnJUpaxmBwWkM0csshkJhOYxHjSGEcqY0hmGMNJJIE+dKYDHfltrh/85C2N
vOE5dTziDjHKOMsJDlPMTraxiSgLySBCV97JtppSDlJIHnNJZxAJxNOFFntt
5j311HCJUs5wiuPsp4TrtPKBBp5TRyVllHOSIxxjD3vZTQFb2EqUjWxmB0Xs
o5jlZDCCFJLozwD60pPe9CCO+H+3SRfa0Z62lBD+8J0ffOUbLbTSzEeaeMNr
GnnJKxp4Sj2PeUIt96nmIVXc4S6V3OA2l7nKNWJUcJHznKOEYrZQQJRcVrCI
2UwkjQhDSaQbbcmyp4FH3KSci1yhinvU0cQ7vvKJz/yisz6DGMtUsshmFevZ
TiGneUGQ50AmMIUZzCKf1RyM/P8v/gLeVbxr
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0k8oHQAYAPBPTY4Lh3faQb2jeNhBrZSTHUxSbi6UchCH3Ta9A8XJy3o4
zJ8toST/Dy5PsdX0GiVJbYWc7DQpLUL8tMOv7/R9ff/KOnpbegoiIku8jnis
iXghPoj/uOKSvxxxwB45NplnhiwZBhngI92000CKJMGf6ohdcqyyzBwzTDPF
Z/pppo5ySripijjjmG3WmGSENK3U8ooSirhIRfzikBwrLPCFDGne00YjKRLc
VMojzw7z9NPKW8oo5b4i4pxdvrHOKgt8ZZxhhsgwQpYxplnjOz845YJbEmon
aSLNBMOMMs4S+xTqtZ4uhphlixOKzV9PHxMskueSOwrt9CUJkryhgRY6GWSD
PL+5f76FG76jiw98YpmfXNf8/6MnhApvbg==
                    "]], 
                    
                    PolygonBox[{8274, 8256, 8234, 8219, 8204, 8184, 8164, 
                    8158, 8137, 8131, 8139, 8160, 8213, 8233, 8237, 8255, 
                    8260, 8262, 8288, 8305, 8314, 8318, 8378, 8440, 8457, 
                    8472, 8474, 8487, 8500, 8511, 8517, 8531, 8534, 8537, 
                    8525, 8515, 8499, 8463, 8444, 8429, 8419, 8390, 8363, 
                    8350, 8308, 8281, 8274}], 
                    PolygonBox[CompressedData["
1:eJwl1G1MEEQcB+BT5kqzXKKgwBzoWlNclltqLueHULRUJk6HL+jGBF2pSbM2
Q9CmrixC1FLxFUMyyQjBKECxTdFUTLE2SWfmyoEj5tsUy019nB+e+3Db7X+3
3e+XkPFu6qJOIYQ5lui4EKJIIJ5EBvEqQxnF64xhLONJI50sBtKdxtgQNrKG
bDKZzXSmkcokxpNEMhNJYQpTmUkG81jAUnaxl6O084xZ/XiZN1jEMrZzhtbH
d2EDy0mhJ+edLaWYLbzHOAZyMyaEf7nKcUrJJ48lvM1ouvJ73xBK+JxcsphK
Kn2JIZLOnO4TQiWFLORNRtCDv6NDqCGHZKJ4lo6oEO7SwnnOcZZaCplEHE9x
p3cIVzjBj1RQSTFFbGEjBaylkM/I52M+YSWrWE0eS/mQJbzPYrJ5hwVkMp90
5pBGCm+RxFCG8BIv8gL9iCaKLvzfK4T73OI2bbTyF1do4hSV7KCYvXzLPr7j
J2o4SgPHqOMQ+6mihN18zR42sZmtFFHAejbwBV/yFaUc4AfqOUMzl/mH69zh
Lh3cI3hXZyLoRIu9S/zJWY5QTTk72UUZ31NBLQc5zHF+4QSN/MofXOM/HvK0
GV15jh48T08iiSGWOBLozyASeYVhDGcC05jJLOaSxUJyWcFHrOFT1rGJrWxj
N6VUUU0NdRyknp9p4CSNnKaJ32jmApdp5wYd3KObvx1PMtNZzAry2UM9h/iG
7axlNbnMZwZTWEc5VRyjlQgZi+Y10viAMpp4wADZHEsGOayiiDIOc5EI2R7M
ZPKopo0h+mEuO6klUreMJJ0CmrhBiHvSu48AMwLW8w==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt0k8oHnAYB/CfhNNcLGYOkpbLStvbLA7Kyq7DauZf6vWm14EdFpKIsoPL
ZEVRbHOxNKOIUmP+lgNRnDg42oiLdpJ8isPn+jzfnu+TE/1Q0ZIQQuhnPyuE
z9RRRBpLj0P4Sox8zjJDWKCbcp6SyNGjEFaYYoQ+OonymlxuMuxgijbeU0gG
iZymh7DFHL8Y5C3VxOniEwOM8YPfLHNOkhkRSnlHA3GGWWWXc1JkecgTXlBA
MSW8opxKaqilgy8MMcwo43xjgkmmmWGWeZb5wwabbLPHAYec8Jd/XHDJFdck
u+cDUskhjwgveUMZVffqiNHERzrpY53/PNdZPY0000oHPfTynZ8sssYORxyT
rf9nFNOedfcft6mGVU0=
                    "]], 
                    
                    PolygonBox[{9977, 9983, 9984, 10010, 10016, 10025, 10026, 
                    10028, 10030, 10032, 10038, 10040, 10043, 10046, 10049, 
                    10054, 10061, 10070, 10081, 10092, 10097, 10114, 10121, 
                    10123, 10117, 10107, 10074, 10042, 10019, 9997, 9975, 
                    9962, 9939, 9914, 9887, 9872, 9869, 9871, 9857, 9855, 
                    9864, 9868, 9867, 9839, 9821, 9810, 9805, 9780, 9774, 
                    9770, 9760, 9754, 9748, 9743, 9733, 9727, 9723, 9719, 
                    9721, 9726, 9728, 9756, 9779, 9798, 9815, 9841, 9889, 
                    9928, 9959, 9977}], 
                    PolygonBox[{10637, 10626, 10587, 10576, 10560, 10540, 
                    10506, 10458, 10411, 10381, 10349, 10322, 10302, 10286, 
                    10251, 10219, 10204, 10183, 10159, 10135, 10116, 10083, 
                    10076, 10052, 10051, 10047, 10055, 10065, 10067, 10084, 
                    10087, 10090, 10077, 10079, 10082, 10104, 10133, 10156, 
                    10189, 10226, 10266, 10301, 10336, 10373, 10379, 10407, 
                    10441, 10470, 10500, 10526, 10553, 10573, 10600, 10604, 
                    10603, 10630, 10629, 10638, 10637}], 
                    PolygonBox[CompressedData["
1:eJwt0TsoLQAYAODf6Bjc6EYoTro370GciYHJ405swuBRJgackYWMCGXQ7Sal
lKQMnqUUmxIZDBKbQWexUPLpGr7tf//JgbGu0ayISDNdFbHMHte88KM6opE+
0qyxzzkXvFNdE9HOFMvsfTvgkScy5NVGJCnnN630MMEsG5xxxxvZdRE/KaSI
YkooJcGHmFsuOGSHTf6yygwj9NJJC78o+KrNq5ke2GaOIVLkcGuvdcbppp5c
3tzknhNWSTPEH1KUkCBTGXHDKVsM0kEDxWQqIq645Ihd/rHEIivMs8AOz5TJ
a6KNYebY5ZhH3snXu5l+Jqv+//QT8BpRXA==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0z1I1HEYB/CfS7gECUpLWKZngUNlXUVInJcuSl05GNUN0Rt6ZH9Km5Jc
DAo1UEjIgixJxN6spaHrjWyQxK6IlF40WsLKthBa6gMNn+3hge/z5Sk5FDWc
yAshTDEbC2GOBX7wna98YIr3TJPjNR/5SX55CBVsoY4UNVSxnmIKyOOb+Ume
McowNxhkgMv0c4k+ernAeTpo5wxtnCQiQxNHOMxBDrCfRnZSR5JqthFnExtZ
SznFrGA5gT9lIfzmFwvM8ZY3POIBd7nJRTppo5VmkixhsjSE63QTcZwU9dSQ
ZDMxcqtDGCfLLUa5Rg/ddNFBRBN7SLCGpfwtCWGe5zzhBRM8ZYxhBjhHKxEZ
jpFmN5UUMbNKz4zTx15qqWQdceppoZ1BskyQ4xNl9mxgK0mqSRCnil0c5RS9
3CHLLBXypDnLELe5x2PesUihm9XSyGn6uc8rvjBPgQ62kyJNhis85DOLLNP3
ShLsYB8tdNJFD1cZYoQxXsb+/8w/GeKHAw==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0CFLQwEYBdDPMrRYXBFU2ILhOR2CMBfGQGRJDIJYhwYRxQXBKIMlwWQY
KoiDFcUiGAyCwSrCYA+WrRoW9gc8Yjj1cu/N7Ta2jsciYpu5YsQE6VLELXtU
yDJYjOjzTIcmpxyyzizDQkSPJy7YJ2G0EPFOmyM2WCVHhq8k4o0bWtSpkbDM
CiXW2OSEc+54IeWbkDVFnnkSCtSoc8YDfcb1mqTMDi2u6PJISsamGSo0uOaT
0d9en1Q54JJ7Xvngh+ni/5+/FtA2Zw==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwt0jkoBnAAxuG/wZUMGGzyDQYWUSKFGJRCcuVMviTJ9TG4UmRAisjCqGRS
rsHgHGysjCyKMkkmxVMMT/3Wt95IdLRxJC6EsERiQghpRCiijihjrLDLISec
cc0dz7ySnBhCOlnkkE8RVfQywzQxmimnjBKKKfzvUiqopp4GmmijnW566GeQ
OTbYYY9DLrjiktN/+2yxyiILzDPLFBP0UUMBeeQSIZMMUkni294PXrjniD12
WGeSIYaZYJwYA3TRQSsNVFJBMTlkk8JXfAhvPHLDOcfsss0680wxQj/dNFNL
C210EiXGJHMss8Ym+xxwywNPvPPJT/zfL34BztpDFg==
                    "]], 
                    
                    PolygonBox[{9027, 8967, 8894, 8873, 8819, 8783, 8753, 
                    8692, 8637, 8619, 8609, 8601, 8599, 8595, 8585, 8574, 
                    8567, 8524, 8480, 8392, 8347, 8264, 8232, 8209, 8181, 
                    8159, 8119, 8112, 8075, 8064, 8028, 8009, 7997, 7965, 
                    7938, 7937, 7941, 7956, 7971, 7984, 8016, 8025, 8065, 
                    8100, 8140, 8171, 8225, 8247, 8268, 8291, 8319, 8371, 
                    8420, 8486, 8553, 8578, 8605, 8640, 8695, 8755, 8820, 
                    8829, 8837, 8871, 8880, 8891, 8985, 9016, 9027}], 
                    PolygonBox[CompressedData["
1:eJwl0b0rhAEABvCXK+LNYNWdj6IuNgr3B0ghSZ2SRSaSjysuJVHcdlcWi+XK
YFNWH4tuEMlwkuW6KKVMFJGP8ivDb316ep6WqYXR+YogCFI8hEFQ4pYi5+TJ
sMY4SYYYpJ9eumijkQhftbK4oMAph+TJsUWaFVZZZ5MMGyyzxDRjJIgTJaSa
KiJU8lMTBJ988M4z95Qpccc1V1xS4IwTDthhmzRzzJBkgAQdNBElRpxORphk
kSz7HHHDI698U6djAzFaaaebYWZJkWWXY4qUeeOXeps200MfE+TY44UnyuH/
f38OW0Bg
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0KFKAwAUBdA3g8Kasyw6pyIY/ALHwoQlg06YE4NiE5QZBjbBIgsiWJYU
g1VwyFAYiIYVk8jAsLYiJrEZlJ1hOO1eeO9mtvdX9hIRscpvNiI5HZFiiTUO
qHPHJ4mZiHEKbFLjkCPqnNPgmiYt2nR44Y13+ozNRqSZI0+ZDdapsEiGFKOM
8KX3QY8nbjjlmF22KFEkxyQ/7u5xzxkVFkjz5+cuTU7YYZkJvqcinmlxxQUN
bnngkXm5Kpe8DjvZ/x0HVW84LQ==
                    "]], 
                    
                    PolygonBox[{1570, 1565, 1564, 1558, 1545, 1539, 1523, 
                    1514, 1498, 1476, 1471, 1448, 1443, 1438, 1427, 1418, 
                    1414, 1404, 1398, 1395, 1401, 1419, 1424, 1441, 1457, 
                    1474, 1488, 1496, 1506, 1510, 1517, 1521, 1530, 1541, 
                    1556, 1572, 1571, 1570}], 
                    
                    PolygonBox[{8642, 8606, 8572, 8536, 8479, 8394, 8327, 
                    8249, 8224, 8198, 8173, 8151, 8135, 8117, 8097, 8044, 
                    8021, 7973, 7942, 7912, 7906, 7894, 7888, 7876, 7867, 
                    7864, 7862, 7852, 7848, 7845, 7822, 7813, 7827, 7829, 
                    7837, 7836, 7865, 7873, 7895, 7922, 7969, 8007, 8001, 
                    8004, 8045, 8087, 8130, 8172, 8222, 8284, 8377, 8426, 
                    8491, 8527, 8568, 8586, 8607, 8634, 8642}], 
                    
                    PolygonBox[{11499, 11506, 11520, 11571, 11620, 11674, 
                    11721, 11782, 11829, 11879, 11929, 11964, 11993, 12033, 
                    12071, 12126, 12125, 12087, 12050, 12013, 11972, 11930, 
                    11889, 11830, 11801, 11747, 11694, 11650, 11605, 11561, 
                    11523, 11498, 11480, 11446, 11441, 11401, 11375, 11333, 
                    11301, 11243, 11194, 11146, 11145, 11159, 11195, 11235, 
                    11255, 11293, 11317, 11345, 11348, 11343, 11344, 11308, 
                    11269, 11249, 11233, 11203, 11175, 11167, 11149, 11132, 
                    11127, 11180, 11226, 11283, 11357, 11406, 11453, 11485, 
                    11499}], 
                    PolygonBox[CompressedData["
1:eJwl0DFLggEQBuD79mgRmq1AUmtyCyKiyRbBNSR0qKEyECwarKYc/AXfUkOD
BNFmu0JTfyAhkLaGIAdpavCBhme6e++FW26cVZtJRFToFiJuuGPIhKQYkWWb
fa6554E+A75ZWXeDLbIskDA1G/NKSpdb2tTZY4NFfvV9MOKJlB6XtDjlmEMq
5Ak+8zKkdKixS44lftYi3njkijondEh55p0ZGfslNilzxDkvfPHHqs4dDrgo
/P9tDoFLNT8=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0CFIgwEYBNBPEYPBhdXJGCIKxu2XtYUF0TDEwZIgzGSZbVvYkiBiXTWI
JsOwbdViEozCiohokNkGU1DEB4bHlQvH5epHu42ZiKgwTSLmNiImckEuUaTM
NpvkyZImwyKf+k88cMMZXfYos06Kr0LEC7cMuKLHMXVqVNmiRJEVMuRYJsUs
43zEOyMeeeaDb374ZVWvwgFNOpxwzgWXDLnnlXkb10jYoc01pxyyT4s+d7wl
/5/9AdOzOA4=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T8oxAEUB/BHCnUZEPe7K7lIohRikIGyKBkMFkWxKDoWJpNFGUguSd1m
YVYWSQaiG4zKYLVh8ifJ5zJ8esOr932vl5tfmcpXRMQChSTiiHOuueWeR555
4Y1XvvggMhF1pGmigVYyJHTRRo4WsvTQTQftDNLPMEOMMco0eXY45IACu2yz
yQz1vNulxA0XnFJknz222GCVReaYZYQ+UvymI6rKt6kD6hqXfNIsY4Il1jmm
xDc/1GQjaknRSCeVPOjdccUZRZYZZ5JeqsszZDxxkvz/4Q8F3jkr
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0LFKQgEYBeC/oTFcLJqEbhoEEc2BNIQE5pTY4qZgtOjQkEvLJdpCZ+c7
FTS1CA3SAzRIzUKvUDkZ+EXDt53hnLPV6p11VyKixuZ2RIEiCSfc8sAbP+wX
I8655521UkSZBpfcMOSRMVO++GbOgo2diD2OqNPhimvaVNjlV/aDV57JuCOl
wykH5FnlU58XMlJ6VDnmkBwzG8YMuKDM+t++JOKJEX26VCmRo0lKxiT5/2oJ
esowEQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0k9I03EUAPAnRsfIJBFGAztF+GvLjUjxUKAkgR4yhAilPLjTCqNDeJEu
sYFB1E1IQZEgvSoxiCRS6hbtpmCMAocRBEHbRewDHj7w5fF4vD/frsmHtx60
RMQzbuQjBrnCBc7TTiMX8Z0vbPGZPX7S5JSc0/zw/sgCZaa5Qy9nOOiJqLLJ
W15S5DaD9JGmjZP8vRxRZ5cK87yiQMJRVj3Wec1T7nGVw4xeecMis9zlJgnn
OLwUscN7lpljjCz7ScQnlplhjCH6SfOvO6LGBypUOSGeYZznvOMPiXqjlFnj
Kw1SerjOFI+Y4D5zrFKhTod5RnlCiSW2+E3KHoZ5zArb/OKs/V2jwAs2+EaT
i24xQpESi2xSo9UdO8kxkD/+E/8BG41hLA==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j1IFHAABfC/YGqtQXqgRdwdiaDdyY2eYheHUWF3Wgh+HHeIDtKVX0Rf
CkFSXVSgRG1FZBS2BA1BoGODuIjQ6SINDS0ubS39wOG3Ph6Pd7p0I1+uCSG8
JNoYQow2OkiRY55b3OcRT1nhNW9Y5QN7VPnDAX/5x7GmEI4ToYmTxOihwCQL
vGObo5EQskxRYoBBLnKZDOdJ002CJHGaaeEIv2Vt8p3nPKHCYx5ykyIZOmil
ll2d13hBhSLn6CVJHT9PhPCZB9zjLne4zQzTlLlOgQy9pOkiRScJ2mjlDHFi
RDlLOz1kuUCOK/QzxAiTTDDOMHn6uMQ1rjLIGKNMMccsiyzxjBWWecVb3vOJ
j3zhK9/YYJ0fbLFDlV/sU2+fBk41Hn7qP2mcTZk=
                    "]], 
                    
                    PolygonBox[{11334, 11339, 11349, 11350, 11377, 11398, 
                    11431, 11432, 11433, 11438, 11478, 11481, 11487, 11505, 
                    11556, 11590, 11593, 11577, 11547, 11501, 11458, 11423, 
                    11392, 11329, 11274, 11242, 11213, 11154, 11109, 11073, 
                    11044, 11011, 10980, 10962, 10938, 10970, 11005, 11038, 
                    11063, 11092, 11120, 11151, 11190, 11232, 11277, 11324, 
                    11334}], 
                    
                    PolygonBox[{8719, 8741, 8778, 8814, 8824, 8858, 8878, 
                    8910, 8981, 9021, 9063, 9103, 9145, 9183, 9231, 9274, 
                    9266, 9224, 9165, 9116, 9094, 9066, 8993, 8890, 8872, 
                    8840, 8804, 8729, 8654, 8642, 8634, 8607, 8586, 8568, 
                    8527, 8491, 8426, 8377, 8284, 8222, 8172, 8130, 8087, 
                    8045, 8004, 7991, 7988, 7964, 7948, 7923, 7939, 7932, 
                    7933, 7962, 7976, 7977, 7986, 8006, 8042, 8084, 8126, 
                    8165, 8210, 8246, 8289, 8341, 8407, 8495, 8552, 8577, 
                    8600, 8615, 8644, 8684, 8719}], 
                    
                    PolygonBox[{1973, 1955, 1938, 1906, 1864, 1840, 1830, 
                    1798, 1792, 1744, 1696, 1684, 1674, 1680, 1683, 1693, 
                    1705, 1711, 1723, 1764, 1785, 1793, 1802, 1808, 1826, 
                    1849, 1856, 1863, 1836, 1814, 1771, 1756, 1733, 1721, 
                    1730, 1774, 1783, 1812, 1816, 1819, 1846, 1860, 1884, 
                    1900, 1924, 1935, 1950, 1960, 1970, 1976, 1987, 1999, 
                    2007, 2011, 2013, 2015, 2020, 2019, 2016, 2006, 1992, 
                    1990, 1977, 1963, 1965, 1967, 1973}], 
                    
                    PolygonBox[{1804, 1796, 1763, 1750, 1769, 1790, 1803, 
                    1843, 1874, 1899, 1897, 1891, 1873, 1852, 1844, 1837, 
                    1824, 1806, 1772, 1761, 1754, 1747, 1738, 1735, 1731, 
                    1743, 1755, 1737, 1700, 1666, 1633, 1584, 1588, 1593, 
                    1585, 1590, 1595, 1604, 1606, 1607, 1612, 1619, 1623, 
                    1627, 1630, 1635, 1641, 1653, 1656, 1676, 1719, 1762, 
                    1804}], 
                    
                    PolygonBox[{8006, 7986, 7977, 7976, 7962, 7933, 7930, 
                    7909, 7874, 7839, 7796, 7770, 7751, 7750, 7738, 7731, 
                    7757, 7779, 7814, 7844, 7863, 7887, 7885, 7902, 7924, 
                    7934, 7949, 8003, 8006}], 
                    
                    PolygonBox[{1770, 1766, 1751, 1745, 1739, 1734, 1727, 
                    1725, 1717, 1709, 1708, 1706, 1695, 1691, 1688, 1692, 
                    1689, 1686, 1646, 1611, 1583, 1570, 1571, 1572, 1556, 
                    1541, 1530, 1521, 1517, 1510, 1506, 1496, 1488, 1474, 
                    1457, 1441, 1424, 1431, 1445, 1466, 1493, 1515, 1538, 
                    1562, 1579, 1609, 1639, 1670, 1669, 1672, 1667, 1665, 
                    1662, 1661, 1699, 1726, 1753, 1770}], 
                    PolygonBox[CompressedData["
1:eJwl0j1IFWAUBuDPBqWhIcXB8iaCOohokJFC6FCBSpnd/AmKIrFBSW+IaAZ5
URAUMzUQKQjM/x8kUxrThhoc3aIMwtbQiBBxiB5xeLb3cM4LJ7M+Fm1JCCG8
4nEkhE76mWKNr3zjB384diaEJE6QQoQc8singPNcpJIoN7nFbe7ykFbaeUKc
bgaZZI0NZhmjixj13KOGciq4xGVKKOUCRRSSSxrJnOQ4gX96HLDPX3b5yXc+
MsQALxhmmc9ssc0XPvCG14zzkmkWmOctq6zwjvcs0kMDddRSThnXqOQ6Uaqp
4T4PuMMVzpLCTnoI63RRyjkS+HU6hD4e0UYzTVRRTBaJ7J0KYZM5RnlKnBE+
sUOqXDaFNLJ8OGvHDSb4TYZbrhLjGRMsMcNzeonTQkfk6Mf+A7dVXAU=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T8oBHAUB/AfRfl77qx0yWBRl5QsSqSQJIMMbhEp5ZR/k0wM6lIyKRan
MFuYGAwXg+3OdGWScPkzWBSfy/DZ3ut933st04vjqbIQQor1aAi7XPHCD18U
yXLOPmk22WCFKcbop48KHhpCyLDHDIMkaKWcXCSEey45YI0RGsnXh3DIAkmG
6KGNGG91Idxxwg6rzDPBAJ3EqeKzNoRXbjhmmzn6aOK3Rg2PFHjinQ++ianp
YJY0p1yQL/USNaOZBN0k2eKMa3KlDFTLHSdBL8scUSBi52GWyJDlmZg7dTFK
mluKVLpvO5PR/5/9AVglQGI=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0DFLggEYhdG3pampsRAS/AFBCTW2NAguhUONhRAVCgrtKaiT0RIpFNWY
k3xD0FC4JDXUEP2BhohwkIbG6EDDGR+43PRWea00ERHrXGUjyuywQYEDOpTI
s8w8c0zxsxgx4o0XEi5o0aBGlQr7bLJKhmm+FyK+eOeZexIu6XJGnwGvfDJm
UjvDLCsU2OWQJm269BjywS8pmzMskaNIjSNOuOaWAU888sAdNyT0OOeYOtvs
UeU0+//jHyXuQBM=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0CEsxAEUwOGnYBx3/wuEY5hiY7spdneFesJtLt12IxjiGaLMhEumKhTK
bSYQTXETRBJ2xaYIBBrfJnx77e2938TqZrXRFRF1aknEDN18ZCLuaVJhjizv
6Yg2p2yzSJqXwYgTdlggzxh9fA5EPHLDOXssUyDPKAm/qYgnrjmjyTqzZPnu
j+gxxylRYY1d9jnmkjte+aLX3mGmmWeJBgdc8ECHH3JuLbDCIVd0SPlvihJV
tmhxyzNvhDZDFNngiDYZLUeYpEg5+e/8B3EdL8A=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0TtIGwAUBdAnuhQcnEzrJxJMRUEHwRZpkDqJi0MLYnEwWJE0KAYRKShI
I4JDEQSH4Ky4WOgeHNWUUgolZFSoZOokiJ9uHnA424XHvS/1sfB+qSEiNrju
jGhMRrSQJsM4AyRo4kbmklPKlCiyyjKLZHlDM7WOiDX6qbVHrDNKgt9tEUfs
scwUw7yklxEmyLFFiV0KfCJDI39eRByywBjPqD6POGCDHFnekiZJH13cJSL+
8osy39kmzwyT9HDbGnFGiTlekWKQWb5yTJ0m+WGmKHFClXta3RxikhU+s8kR
51zwwIAO0+xzRYue75hnh5/8o8OOr/lAkQrdti5Q4T8pfxgjzxe+8YN659PP
HwGGoEl5
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0jsoxXEYBuCfQRmwKGVR8nfcNgPJpCxK6ZBMFpEsnFA2haKEcishKQth
cMklYnIpUYpkkc4kNgqDwVOGZ/ve3nf48lq7G7pSQghDHMVCOOacO5J88Etq
YQiZZJNHRCll1NHLBGtckeSb9CI31JNgkQUm6aSdJqqJ+JG5Z4dZElSSxZcd
jxwwzySj9NFLD63UEpHBV0EIn9xzySmbjNNPB3GKeY9CGCROjLd8fVywwTT9
NFNBRAktDLPICUmCfC41tLHFC2l6qmiki1l2ueGHHJvLidNJggGGGGGMOVZY
ZZlNDrnglieeeeWFB645Y59t1plhiiW22Iv9/8AfJlBbGA==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0D1LgmEUBuDHoJwdWlokWnJx83XJycEGJ7d3sEEkB7+m0MFJQfCXuLW7
uBREIg2RgUsQ4aBLTYG1dEHDNdycw+HmnNa6lU4ihFCmH4XQY8Itcx54Yc0b
X/xykA8hySEbecUrdzyy5IkPvjmyd0yaLCWuqHHNDSPGDBnQo05MkQw/bu3Y
8syCe2ZMGVOhwBlJPnN6s+WdNTv2pMxPOCfigktiqtRp0KFNi2b0/6s/EK06
rg==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0j9IFGAYB+C3DCw8IokbIgJrqOT0rq7znAoDoUAS6oT+gFoSGBU2KEF6
OJQuRSiRQ0VSNKa4mAiK1SY03NAQlGZDECUNFQUhSo80PMs3vL/ve7/f7o5r
p7o2RMQsNfmIKpIkWKmL+MF3FpnlIT1c5CjVVPIrF/GFeeaY5BF36aWNVk6Q
oYoKPhyKmOIBRdo5zHa+ZiPe8JwBCqQp5/3BiGlGuESOCj4eMI9RBumknjJK
mYgXPKXIDTrYz0YW0rLopoFgpjbiNqepJUE5qzURfykxxigjDNDFVY6xl7VU
xB9+85Ntzs5S5A7TfGaHuc30MbWeI38fTfQzziuWWCPhzklS5ClwncfM8ZZN
3p3jDFfo5SZDjPGaJZJ218wgz3jJOxb4xipb7X0nKepopJVubnGfCeZZZpc/
rKfAZfoZ5gmTlNiiA2la6GGY8fVesFmvsjRwnAJ93GOGT5Tp6R6ytNHOeS5w
jhZO0sQRMqTz/7v+DxXgfpQ=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T8oJmAcwPGfjjJa/HlfDO9ZbmBQ6DZKmSiuE2dCSfcOJ+lOKeXPRgYT
RtEZWGUxUegdDK/hXTDoldzgpORf6j5vN3zqqefX0/N8n9Tw2JcfRRHxk/va
iDwn7DDDdzpI8VITccwYdYV1dcQs/bRQw59kRIYlRuihjKtExBoDNPBcFXHB
Eb+ZY5IJemmigqfKiDP2WaGPzxSTr4jYZpEhGklRzgfeyyPeeOWBv9xyQ4n9
en6xSYZ7wrkJPtFOF2lm2WCPLI+Uud9HOhlknBmW2WWPQ/KFOW8eZZ0sJZq0
MU+OpHatTHNZaKnvV1Y5p1T/Zrr5RpopFtjigFNyXHNX+/8//wHUEUq5
                    "]], 
                    
                    PolygonBox[{1384, 1380, 1370, 1361, 1354, 1341, 1326, 
                    1312, 1296, 1275, 1260, 1254, 1235, 1216, 1204, 1192, 
                    1190, 1176, 1173, 1172, 1166, 1163, 1159, 1149, 1144, 
                    1142, 1141, 1134, 1117, 1095, 1077, 1073, 1067, 1061, 
                    1054, 1052, 1064, 1036, 1031, 1025, 1018, 1029, 1032, 
                    1026, 1017, 1012, 1008, 1001, 1022, 1049, 1066, 1076, 
                    1085, 1099, 1106, 1113, 1126, 1136, 1146, 1153, 1160, 
                    1175, 1193, 1208, 1229, 1259, 1283, 1299, 1319, 1333, 
                    1346, 1367, 1381, 1384}], 
                    
                    PolygonBox[{15641, 15609, 15576, 15556, 15541, 15540, 
                    15525, 15510, 15496, 15482, 15454, 15414, 15388, 15366, 
                    15309, 15285, 15268, 15264, 15260, 15252, 15245, 15232, 
                    15219, 15208, 15178, 15156, 15152, 15140, 15144, 15143, 
                    15123, 15099, 15084, 15063, 15035, 15009, 14983, 14948, 
                    14833, 14789, 14737, 14751, 14816, 14941, 14989, 15039, 
                    15078, 15098, 15113, 15138, 15148, 15166, 15179, 15205, 
                    15211, 15222, 15229, 15237, 15247, 15258, 15262, 15265, 
                    15278, 15307, 15367, 15424, 15475, 15499, 15517, 15539, 
                    15557, 15582, 15617, 15639, 15641}], 
                    PolygonBox[CompressedData["
1:eJwt0ktI0wEYAPB/T8qkQMoQY+hBEoTAk7G0YxQIgpc6KIodPJkPoggZRVYg
ughGxQYeRGVCp12G4ePgQEgvRlriIZoUSKPbEif2+A12+PFdPvietT397feO
BEEwxTAJ0mT4yFd+ccBxiRXU0MBVbtLBEI8ZI06SNCtskSsWORoE56mniRvc
4S73ecBTXhFnknekybDKOtvskucfZ44FwQUuUU8zrXQyQIQxXvKWJItkWGCJ
edLM8JpnPKSXLm5zizCXqeIcpzjJCQp6yZFlgw8skiLJBDGijPCIPrppo4VG
aghRzUXOUl6ck9MU7PKAff7wl0P2Sn6T5yc/+M4OWb7wmU02WOU9KWZJMM5z
IgzSQyvXaeYaYa5QR4hKyoo3LtYWvvGJNZaZY4Zp3hAjyigvGOEJkdIf/gfl
TFlw
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl001oD2AcB/DfajaNFmUHNrb5+2+WqCmSORAiq1kILU37L7uoqVn5H1b2
grRIxAHZ2GHT8nJwwDKFtCGxSNa8RCIyxWUHq/mUw+fwPD0v/Z7f9ylOHdjW
mBERr9laGtFIKz3c4wOZiyOWsIkGjnGcfsaYXhaRSxZDxvfppp0UlVRQwKTz
PjLAJTqoZQWFzGC8JOI9T+mnlf3sZD3lJEmQx59kxAgD9NFGimqS5PBlUcQg
J6ijklXMZCIR8ZZeOqlnMyVMLlQTvZxiL0W8K464xhma2cBUUcRVapjH58KI
m7RQxWy+L4gY5got7GEl+WQwPj/iBa8Y4SXPecBtbtDNWTpopoZ1FDFRYC0H
qWc7ObzJt480Rxkjab6CLVST4hBNdHKe6zzjIZ/4xhSTZLsvjwTLKGMtu2mg
niaOcJouLnCXUX6TpeY5FJNgI3W008NjvpLt7cpJcZJBfjDXO1fRR64e7OAw
lxlmml6tpo1bzNLTCvZxjkf8ZY0cpBlilJ8sl5tdpOniDqNkytxSqmnkIk/4
Rab8lpb+/0v/AAhYhfY=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1mtMUGUYB/CDWkogICKoBNLMC7mpaUiIqXlZ4KXMWg7MxURSwaAszUt5
GZk4h2k2tFK8lAuXmZqaOSnRWk3nRt5g3svESyslsXm3n+vD79M5O8/7/t/n
fXYeGVs0sjAkCILYRkHwWWwQlLOZHeyljhPUc5O7xMQFQRIPk0wK6WQwgmxe
YSyFvMkcZlDMAkpZSjnLWcVmNrKVPeznJDVcpI473CC8dRA0pzuZDCKLAkpY
xxoq2M5BLvAPzdoEQTRhxBBPaxLpSHvS6MUAniaDHKYxm7nMYR4zKCSfPEYx
jCROq7eRYiYynC4kEc9te6mlmn38xI/8wA62s47PWckSPmAe7zGdybzBeMYx
hiyeZRhDyKQPvelONzrRgXja0oIoQrnnnO/QwFUuc4mL/MZJDnOIKnbxNRtY
zQpKmMs0ipjEUAYxgL6k05OudKQdicQTRywtiSaMUJrxICH3+7GVfqCBvznH
WU5xnKNUs59trKGUyQwng3705VESCOMhmlAfEwRXuMRxjnGAKnZTwSeUsZAF
lDCDaeQznjxyyeJFhjOYfvSiC4/RgQSiaMqtlupznloOsJ21zCeXFBK4Gx0E
17nGeWrYy1cspIRi5jCTqUyhiAImkUc2L/AcIxhMOil0pQud6EwSscQRTRjh
NKUxD3CvhXVxg3oucJGznOI0tRzkEEf4mSp2Usm3bGAT61lJOaUsYi7FTGcm
U5hKAeN4lZfIJoOhDKM/vUknlW48TmeSSSCRVkQQSShhhHA7Su40cJ3LXOEc
xznJaY6wnwNUs4e97KSSb9hGBetZxWqW8zGLeJ/5vMNspvA2hRQxngnkMoos
RjOGHEaSyUAG8xSp9KAnybQlhghCaMLNSLOABq7xJ39wjjPUUEkFn7KOLWxi
A79Szz32sZXF5PIyT9KGqxGyoZy3eJ40kgg40TwIvqOMAgaSSGPOhPsuS8gn
leaEcClM9nzBChazjM1c5hZtvZfGa7zLh6zle6qp4y6t1UplNLNYxS6O0UCc
dfZgCBNZxhYOE2KPvchnDbWEyrc3U6m6nzVd9VUeZeymgfbu0VBe5yPW8wu/
c4dE9z+NCSzlS3ZzlDrqCcyTSGJpRzJP0IdnGEE2OZTy1/3nZmAOs1lLJTWc
4AL/0sgcDieCZPozkVmx//9T/AetDDKk
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1FtoD1AYAPAzsbnN9je3UdOsMWnSWjOmFqPV5JKaNBO2JtTfLa1FPPCg
rRVG9jCyLeWykJVpkZFkJffFDC8j82BpNRRt8ysPv1Pn4XznnO9830kt27th
T0wIIdmQlxRClLNcpp1OuvjGT0ZNCSFCCpnkspJ1bGIbJaynkGVkM5/ZTCOB
wIB4X3nLA1o4w06WkMLQ5BB66eQqZ9nHatIYjFjLOSpYyJ/EEB5SyVLG0Z0Q
QhO7ySGGrkkhtFLPLorIYjqD8SH0cI+LHGUzi5nB8ERn5yX3aaaOI0RZwkz+
TgjhB7eo5xRRNlJEDhkMjw/hA3c4SQW5zGMWo/k+zj3ooJEDlLCUNCbxa2wI
7+jgGuep4SBbWEE2GUxjKE5c3nOPZk5QxkJGYkN4zg0qWUsmKYzn95gQvvCC
Nhqo5hClFJJDBlOIoW+0nDBEgvlcsilgLdsp5zC1XOAuT/jID4aJt/9UctlB
E90MkODsEeJII4+dRKmhkTa66WeUXMxiAbkUE+U4dTTSQhuPeEMPH+jlD3Hy
HyGZdBaxhnKqOEYDrTylh0/0E7zvDNLJYjVRqrnJK/qIVSuZFFDGbfpJUmv5
FFFMKVXU004vY9TtHFayn0s84zdpan4VR7jLMMv1SC2vieihYq4Tp8fWsJVm
ekjUi/ns4DRXeMxnRkhN+v+//APURZbE
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl0T8oxAEUB/BHUbbj59/IFZnc4E9SSjcYDOrOqK78NtSJ8ZLBnyySxa7k
sumyGKSUm2xKlrOZ5FZCyqcMn+W9vu+9eoPperHcEhEpza6ITBIxyQonpOTo
4VP/kSuOWGacVuqdEftM8JuJuGaTPRoMqW9Q452sTJEKp9zQ4IesXTOssssF
dRo0+aajO6KfYcaYZZ5FSuzwzDZLFJhjmhwDJLTxYd4bT9xyRoUCI7Tz6q57
zjkgpUSZY6rc8cIXfTJTrJFniyo1HrjkkAVG6SWS/x/8AbwAONU=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1Gtoj1EYAPCzWkouWckQ5dZiNtt/LmMK0WLNbPZhyyXLmCgNYXwwm1u2
tcRSalHWbLL2AdtckstckrlkWYRkxZTaQi7Jh81PPvzees/lOc9zznnfiYXb
coujQgijPQYSQkhNDGE7zfxi8YwQDnKbX8QlhVDMae4yQHpyCLuo5RFREW1U
08prolNCSCaPY7TTy6SZISxjC0dp5h1jZlmbTRyhgWdEzQ4hnpWc5BWD54SQ
wWFu8p3JqSHkUEojXUTNlT/pFFLBHWLnGcs1NqeF0MIHLlNEm/ZsRnHL+MOs
ZwlT6Be7k3r2soKx9MmjhVIWMiDX51STwWT+qOkuZyijgPnE0GkfzlHOBhYw
gvf27SplLGciP+3xU5ooIYFvzuI61WwkQq/zusIx8hlFt3NtoojpLKeEVD65
A3UUkcwPd+QGVbTRw1jtOZRxmUrWUMMTJomzilN0Em3NBZRzgQ6Gy20pezhB
K90MU8ciDtFIOz0MUXMimezgLA+oYx/ZpDCMz8bf4xw7ieer2B2cp4rd5DGe
t/K5SAVZjOSjvFspJZ2h3FTbIbIYyRt70UAJEb5MD+ES5eQRYSg98b4nTrGD
TOL4PS2Eh1SRSwX3+ckE/RlspYY2Xv+bQ6yYacTQ5/0hdRwgn9kM5qU4Dawl
Qv9Ud4FKCjhKG39I0r+aM7xgkPlJ5LKfeh7znXHWXcIWaukiVv3rOM69hP//
lr+fQ8OM
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1HtoVmUYAPBnIQNzQsacSokO52rq/Nx0F1IUaxY6xZg5h8w1tIx1sWwu
8IoXYmt5yQlJin/M+nKCoYZmhLLicw3mpegiZRcIdBRlurZg9Efz9+EfvwPn
nPc87/ue53mf3NWvVq3LiIjnXCbkRdTTRc7kiMW8xkHO8QtZ+RHl1LKL89wg
85GIBGvZy2muEY9GTGMRG0jyO3kFEcs5wFWGTYkoZjk7SXKFAcZPjajgRQ7z
PWOnWSv7ucgQKd6hjjF8Z9whGniCh+kX7xLvs40qEmTyrXUcYSUJ/rPOszTz
LG/xCf9T5H0tSa4x3PclrGAH7XRzi1HmfYwxDLr/kbO08TILmci/4lykhSpa
6WaQfO8rWc9BOrlJlphFVLOd09xOP7P/N0hynezCiCXs4gJZ0yMWsJUz3CA7
YQwtnOInxs8QmyZaOUYPd5hSFNHIB6T4g5HF8shSttBOF72Mmxkxjzqa2MPH
fEY/+bPsm/Xs5jg93GKI0SURpSylmc/5i5xSdcNuOhlgRFnEXCrI4jfPTrKZ
CpZQQy3LmMVUHqKQMh7ndTaxnWZO8BWD5IlbSQOHSdHH6PKImVSzhkZWUMKD
3Damk3beZBWzuZ9ecc/RQjW56bns8QdOsZGVzKGIsRSygDJyGcmA//UzF+ig
jW28wGIKyOCK/95BK43UU5nORTonctbDe6xlHjn8Lc9dHGUdk/lTPXzKHhqY
y310q6EOdvAUD6TrSq0d4yWKuakek7xCORl8qWYPsJoJ/KqmP2QDVUxnBL3O
QIojbOJpCsngsnPTRg0F/OPcnmAzNZSSTZ8+9TVnOEQTcxjFHb2tn284yUbq
mU8+w9P9T19M8RHNPM9CEmRyVT/dx5NMZGhSxBf0UeD+Gd7mOu9Sl3evF98F
JsrtPw==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwl1ntsTmcYAPAXc6m5VVtFN1VFUZdiS1am6MZiBHXrYtJmXWLVmUtGumEz
ymrRxUZGjG0uY1QEX4jLEiKm2Yxu0Qxz6Taj4lIWRka7y6/ZH7983znfed7z
nvd9nud8SXkzx82oF0JoUD+E5skhRBHpFEIRg7mbFMIlEnyfyBL20sx14/mA
A9ymb+cQXqMLvzvextv0p0LMFgoZSGMqjLudFcxmOM3Y1zGEAlJpwLnEEA7y
ObPIogdRVHcI4QJHOMY+NrCMqYwkhZbUPhnCLc5wjPXMJ4d0orn8hHuxnHxG
8xTteZQQwh3OcYxS1lFCNr35p30IaxlLfWraieMet7nOFX7lEuf5mYtUcpUb
3GUvMxlQN0bbEH6gkmpa1cX63EEJ+YwhhUZciw+hjJVMIImbbULYzVxSqY0z
F8rYzHyGEUttrLlQQh7ZjOY50ulNMnE04WGMtaWS74iwlqn041k6U5+q1iGc
oJSVFJBJDJeiQ/iSPLJoQqRVCJOIo6JlCB+Syd8tQjjEAjLpxP3mIZxkA7MY
wgsUsokybhLj2l5kU8xhakg37nsc4BqJ7jmB9dyih/m8w2HqmW8fclnCWiKc
oprgWdvQm9GUsIvv2cNWFpDJ6zxDPA/r1oGjbOUjZpBDHsVs4Ruu0EhMN7KY
x2YO8xM3eEBDexRDR/owgOFk8TLvcpbF5DCeFxlCf7rSligeGa+aixxnG0UU
MIhC3ucLDlHBdf6ikfhYOtOXQYwgg36k0I6mJNCNpxnKSCbxCh8zk1yKqKiL
k7djWcxeyrlFS7k+jE84RVO1kMEcdnOZaDUzkALWUE5TNfYS66giTT0Xcp4U
tZ7LHuL0hgLKeVwPySCfYr7mFx7QQg/qwihSiSONMUxjBTs4zR+0098msJAI
vxGvH45hDx30yjyWc4DH9NTJrKGMfvruPHZSRU99eToVJHUJYRxz2cgRrhLf
1TowkblEuEANXVPUC8Vs5QT3SOzmXUE+qzlNq+7ymtns5w7te4TwPNNYxUEu
E5UqJ8lmEft5yEGKyCGd1txx/Um+YinbKecusX4fxKss4yihp+dhEaVUEtfL
HhDNWcebmEMa18Xs5C1KqaK782+wnpM0EZfBmwykId86v5qpJHFO3EZmMIJk
as3xDKUsYwrpNOO89dlGLmnUWMMIi5jMAJpTZb2PsIGFZJLAn/bnRz5jOqNI
4b49PcEulpLDYP6VA58yisYclx+rmJL8//+A/wAmRzl9
                    "]]}}], {
                    GrayLevel[1], 
                    EdgeForm[None], 
                    
                    PolygonBox[{{-95.796, -91.296}, {-97.63429787234043, \
-90.7389001531915}, {-99.47259574468085, -90.18180030638298}, \
{-101.31089361702128`, -89.62470045957447}, {-103.18404255319149`, \
-89.04273702127661}, {-105.44055319148937`, -88.18727407659576}, \
{-107.69706382978723`, -87.3318111319149}, {-109.95357446808511`, \
-86.47634818723405}, {-112.23153191489361`, -85.58553232340427}, \
{-114.61672340425531`, -84.5179518638298}, {-117.00191489361701`, \
-83.45037140425532}, {-119.38710638297871`, -82.38279094468086}, \
{-121.69761702127659`, -81.29015264680852}, {-123.78408510638299`, \
-80.12234083404256}, {-125.87055319148935`, -78.9545290212766}, \
{-127.95702127659575`, -77.78671720851064}, {-129.9776170212766, \
-76.59481879148937}, {-131.8664680851064, -75.35474716595745}, \
{-133.75531914893617`, -74.11467554042554}, {-135.64417021276597`, \
-72.87460391489361}, {-137.4908936170213, -71.61025143829787}, \
{-139.27863829787233`, -70.31190577021276}, {-141.0663829787234, \
-69.01356010212766}, {-142.85412765957446`, -67.71521443404257}, \
{-144.5844255319149, -66.39355914893618}, {-146.25727659574468`, \
-65.04859424680852}, {-147.93012765957445`, -63.70362934468085}, \
{-149.60297872340425`, -62.35866444255319}, {-151.182, -60.99194389787234}, \
{-152.694, -59.609683608510636`}, {-154.20600000000002`, -58.22742331914894}, \
{-155.718, -56.84516302978724}, {-157.08906382978725`, -55.444255046808514`}, \
{-158.38965957446808`, -54.034023217021286`}, {-159.69025531914895`, \
-52.62379138723405}, {-160.99085106382978`, -51.213559557446814`}, \
{-162.1914893617021, -49.789341957446815`}, {-163.35880851063828`, \
-48.36046243404256}, {-164.52612765957446`, -46.931582910638305`}, \
{-165.69344680851063`, -45.50270338723405}, {-166.69608510638298`, \
-44.064111523404264`}, {-167.66578723404254`, -42.62357719148937}, \
{-168.63548936170213`, -41.18304285957447}, {-169.6051914893617, \
-39.742508527659574`}, {-170.4148085106383, -38.29770076595745}, \
{-171.2098723404255, -36.8525045106383}, {-172.00493617021277`, \
-35.40730825531915}, {-172.79999999999998`, -33.962112000000005`}, \
{-173.39744680851064`, -32.51691574468086}, {-173.99489361702126`, \
-31.071719489361705`}, {-174.59234042553192`, -29.626523234042555`}, \
{-175.17523404255317`, -28.181326978723405`}, {-175.59804255319148`, \
-26.73613072340426}, {-176.02085106382978`, -25.29093446808511}, \
{-176.4436595744681, -23.84573821276596}, {-176.85574468085107`, \
-22.400541957446812`}, {-177.21421276595746`, -20.955345702127662`}, \
{-177.57268085106384`, -19.510149446808512`}, {-177.93114893617022`, \
-18.064953191489366`}, {-178.2620425531915, -16.619756936170216`}, \
{-178.51021276595745`, -15.174560680851066`}, {-178.7583829787234, \
-13.729364425531916`}, {-179.00655319148936`, -12.284168170212768`}, \
{-179.22102127659574`, -10.838971914893618`}, {-179.36808510638298`, \
-9.39377565957447}, {-179.51514893617022`, -7.9485794042553195`}, \
{-179.66221276595746`, -6.50338314893617}, {-179.7748085106383, \
-5.058186893617021}, {-179.83914893617023`, -3.6129906382978727`}, \
{-179.90348936170213`, -2.1677943829787236`}, {-179.96782978723405`, \
-0.7225981276595741}, {-179.96782978723405`, 
                    0.7225981276595744}, {-179.90348936170213`, 
                    2.1677943829787236`}, {-179.83914893617023`, 
                    3.6129906382978727`}, {-179.7748085106383, 
                    5.058186893617021}, {-179.66221276595746`, 
                    6.50338314893617}, {-179.51514893617022`, 
                    7.9485794042553195`}, {-179.36808510638298`, 
                    9.39377565957447}, {-179.22102127659574`, 
                    10.838971914893618`}, {-179.00655319148936`, 
                    12.284168170212768`}, {-178.7583829787234, 
                    13.729364425531916`}, {-178.51021276595745`, 
                    15.174560680851066`}, {-178.2620425531915, 
                    16.619756936170216`}, {-177.93114893617022`, 
                    18.064953191489366`}, {-177.57268085106384`, 
                    19.510149446808512`}, {-177.21421276595746`, 
                    20.955345702127662`}, {-176.85574468085107`, 
                    22.400541957446812`}, {-176.4436595744681, 
                    23.84573821276596}, {-176.02085106382978`, 
                    25.29093446808511}, {-175.59804255319148`, 
                    26.73613072340426}, {-175.17523404255317`, 
                    28.181326978723405`}, {-174.59234042553192`, 
                    29.626523234042555`}, {-173.99489361702126`, 
                    31.071719489361705`}, {-173.39744680851064`, 
                    32.51691574468086}, {-172.79999999999998`, 
                    33.962112000000005`}, {-172.00493617021277`, 
                    35.40730825531915}, {-171.20987234042553`, 
                    36.8525045106383}, {-170.4148085106383, 
                    38.29770076595745}, {-169.6051914893617, 
                    39.742508527659574`}, {-168.63548936170213`, 
                    41.18304285957447}, {-167.66578723404254`, 
                    42.62357719148937}, {-166.69608510638298`, 
                    44.064111523404264`}, {-165.69344680851063`, 
                    45.50270338723405}, {-164.52612765957446`, 
                    46.931582910638305`}, {-163.35880851063828`, 
                    48.36046243404256}, {-162.1914893617021, 
                    49.789341957446815`}, {-160.99085106382978`, 
                    51.213559557446814`}, {-159.69025531914895`, 
                    52.62379138723405}, {-158.38965957446808`, 
                    54.034023217021286`}, {-157.08906382978725`, 
                    55.444255046808514`}, {-155.718, 
                    56.84516302978724}, {-154.20600000000002`, 
                    58.22742331914894}, {-152.694, 
                    59.609683608510636`}, {-151.182, 
                    60.99194389787234}, {-149.60297872340425`, 
                    62.35866444255319}, {-147.93012765957445`, 
                    63.703629344680856`}, {-146.25727659574468`, 
                    65.04859424680852}, {-144.5844255319149, 
                    66.39355914893618}, {-142.85412765957446`, 
                    67.71521443404255}, {-141.0663829787234, 
                    69.01356010212766}, {-139.27863829787233`, 
                    70.31190577021276}, {-137.4908936170213, 
                    71.61025143829787}, {-135.64417021276597`, 
                    72.87460391489361}, {-133.75531914893617`, 
                    74.11467554042554}, {-131.8664680851064, 
                    75.35474716595745}, {-129.9776170212766, 
                    76.59481879148936}, {-127.95702127659575`, 
                    77.78671720851064}, {-125.87055319148935`, 
                    78.9545290212766}, {-123.78408510638299`, 
                    80.12234083404256}, {-121.69761702127659`, 
                    81.29015264680852}, {-119.38710638297871`, 
                    82.38279094468086}, {-117.00191489361701`, 
                    83.45037140425532}, {-114.61672340425531`, 
                    84.5179518638298}, {-112.23153191489361`, 
                    85.58553232340427}, {-109.95357446808511`, 
                    86.47634818723405}, {-107.69706382978723`, 
                    87.3318111319149}, {-105.44055319148937`, 
                    88.18727407659576}, {-103.18404255319149`, 
                    89.0427370212766}, {-101.31089361702128`, 
                    89.62470045957447}, {-99.47259574468085, 
                    90.18180030638298}, {-97.63429787234043, 
                    90.7389001531915}, {-95.796, 91.296}, {-94.43719148936171,
                     91.296}, {-93.0783829787234, 91.296}, {-91.7195744680851,
                     91.296}, {-90.36076595744682, 
                    91.296}, {-89.00195744680852, 91.296}, {-87.6431489361702,
                     91.296}, {-86.28434042553191, 
                    91.296}, {-84.92553191489363, 
                    91.296}, {-83.56672340425533, 
                    91.296}, {-82.20791489361702, 
                    91.296}, {-80.84910638297872, 
                    91.296}, {-79.49029787234043, 
                    91.296}, {-78.13148936170212, 
                    91.296}, {-76.77268085106383, 
                    91.296}, {-75.41387234042554, 
                    91.296}, {-74.05506382978724, 
                    91.296}, {-72.69625531914893, 
                    91.296}, {-71.33744680851063, 
                    91.296}, {-69.97863829787235, 
                    91.296}, {-68.61982978723404, 
                    91.296}, {-67.26102127659574, 
                    91.296}, {-65.90221276595744, 
                    91.296}, {-64.54340425531915, 
                    91.296}, {-63.184595744680855`, 
                    91.296}, {-61.82578723404255, 
                    91.296}, {-60.46697872340426, 
                    91.296}, {-59.108170212765955`, 
                    91.296}, {-57.749361702127665`, 
                    91.296}, {-56.39055319148936, 
                    91.296}, {-55.03174468085106, 
                    91.296}, {-53.672936170212765`, 
                    91.296}, {-52.31412765957447, 
                    91.296}, {-50.95531914893617, 
                    91.296}, {-49.59651063829787, 
                    91.296}, {-48.23770212765958, 
                    91.296}, {-46.878893617021276`, 
                    91.296}, {-45.520085106382986`, 
                    91.296}, {-44.16127659574468, 
                    91.296}, {-42.80246808510638, 
                    91.296}, {-41.443659574468086`, 
                    91.296}, {-40.08485106382979, 
                    91.296}, {-38.72604255319149, 
                    91.296}, {-37.36723404255319, 
                    91.296}, {-36.008425531914895`, 
                    91.296}, {-34.6496170212766, 91.296}, {-33.2908085106383, 
                    91.296}, {-31.932000000000002`, 
                    91.296}, {-30.573191489361704`, 
                    91.296}, {-29.214382978723407`, 
                    91.296}, {-27.85557446808511, 
                    91.296}, {-26.49676595744681, 
                    91.296}, {-25.13795744680851, 
                    91.296}, {-23.779148936170213`, 
                    91.296}, {-22.420340425531915`, 
                    91.296}, {-21.061531914893617`, 
                    91.296}, {-19.70272340425532, 
                    91.296}, {-18.343914893617022`, 
                    91.296}, {-16.985106382978724`, 
                    91.296}, {-15.626297872340425`, 
                    91.296}, {-14.267489361702127`, 
                    91.296}, {-12.90868085106383, 
                    91.296}, {-11.549872340425532`, 
                    91.296}, {-10.191063829787234`, 
                    91.296}, {-8.832255319148935, 
                    91.296}, {-7.473446808510638, 91.296}, {-6.11463829787234,
                     91.296}, {-4.755829787234042, 
                    91.296}, {-3.3970212765957446`, 
                    91.296}, {-2.038212765957447, 
                    91.296}, {-0.6794042553191489, 91.296}, {
                    0.6794042553191489, 91.296}, {2.038212765957447, 
                    91.296}, {3.3970212765957446`, 91.296}, {
                    4.755829787234042, 91.296}, {6.11463829787234, 91.296}, {
                    7.473446808510638, 91.296}, {8.832255319148935, 91.296}, {
                    10.191063829787234`, 91.296}, {11.549872340425532`, 
                    91.296}, {12.90868085106383, 91.296}, {
                    14.267489361702127`, 91.296}, {15.626297872340425`, 
                    91.296}, {16.985106382978724`, 91.296}, {
                    18.343914893617022`, 91.296}, {19.70272340425532, 
                    91.296}, {21.061531914893617`, 91.296}, {
                    22.420340425531915`, 91.296}, {23.779148936170213`, 
                    91.296}, {25.13795744680851, 91.296}, {26.49676595744681, 
                    91.296}, {27.85557446808511, 91.296}, {
                    29.214382978723407`, 91.296}, {30.573191489361704`, 
                    91.296}, {31.932000000000002`, 91.296}, {33.2908085106383,
                     91.296}, {34.6496170212766, 91.296}, {
                    36.008425531914895`, 91.296}, {37.36723404255319, 
                    91.296}, {38.72604255319149, 91.296}, {40.08485106382979, 
                    91.296}, {41.443659574468086`, 91.296}, {
                    42.80246808510638, 91.296}, {44.16127659574468, 91.296}, {
                    45.520085106382986`, 91.296}, {46.878893617021276`, 
                    91.296}, {48.23770212765958, 91.296}, {49.59651063829787, 
                    91.296}, {50.95531914893617, 91.296}, {52.31412765957447, 
                    91.296}, {53.672936170212765`, 91.296}, {
                    55.03174468085106, 91.296}, {56.39055319148936, 91.296}, {
                    57.749361702127665`, 91.296}, {59.108170212765955`, 
                    91.296}, {60.46697872340426, 91.296}, {61.82578723404255, 
                    91.296}, {63.184595744680855`, 91.296}, {
                    64.54340425531915, 91.296}, {65.90221276595744, 91.296}, {
                    67.26102127659574, 91.296}, {68.61982978723404, 91.296}, {
                    69.97863829787235, 91.296}, {71.33744680851063, 91.296}, {
                    72.69625531914893, 91.296}, {74.05506382978724, 91.296}, {
                    75.41387234042554, 91.296}, {76.77268085106383, 91.296}, {
                    78.13148936170212, 91.296}, {79.49029787234043, 91.296}, {
                    80.84910638297872, 91.296}, {82.20791489361702, 91.296}, {
                    83.56672340425533, 91.296}, {84.92553191489363, 91.296}, {
                    86.28434042553191, 91.296}, {87.6431489361702, 91.296}, {
                    89.00195744680852, 91.296}, {90.36076595744682, 91.296}, {
                    91.7195744680851, 91.296}, {93.0783829787234, 91.296}, {
                    94.43719148936171, 91.296}, {95.796, 91.296}, {
                    97.63429787234043, 90.7389001531915}, {99.47259574468085, 
                    90.18180030638298}, {101.31089361702128`, 
                    89.62470045957447}, {103.18404255319149`, 
                    89.0427370212766}, {105.44055319148937`, 
                    88.18727407659576}, {107.69706382978723`, 
                    87.3318111319149}, {109.95357446808511`, 
                    86.47634818723405}, {112.23153191489361`, 
                    85.58553232340427}, {114.61672340425531`, 
                    84.5179518638298}, {117.00191489361701`, 
                    83.45037140425532}, {119.38710638297871`, 
                    82.38279094468086}, {121.69761702127659`, 
                    81.29015264680852}, {123.78408510638299`, 
                    80.12234083404256}, {125.87055319148935`, 
                    78.9545290212766}, {127.95702127659575`, 
                    77.78671720851064}, {129.9776170212766, 
                    76.59481879148936}, {131.8664680851064, 
                    75.35474716595745}, {133.75531914893617`, 
                    74.11467554042554}, {135.64417021276597`, 
                    72.87460391489361}, {137.4908936170213, 
                    71.61025143829787}, {139.27863829787233`, 
                    70.31190577021276}, {141.0663829787234, 
                    69.01356010212766}, {142.85412765957446`, 
                    67.71521443404255}, {144.5844255319149, 
                    66.39355914893618}, {146.25727659574468`, 
                    65.04859424680852}, {147.93012765957445`, 
                    63.703629344680856`}, {149.60297872340425`, 
                    62.35866444255319}, {151.182, 60.99194389787234}, {
                    152.694, 59.609683608510636`}, {154.20600000000002`, 
                    58.22742331914894}, {155.718, 56.84516302978724}, {
                    157.08906382978725`, 55.444255046808514`}, {
                    158.38965957446808`, 54.034023217021286`}, {
                    159.69025531914895`, 52.62379138723405}, {
                    160.99085106382978`, 51.213559557446814`}, {
                    162.1914893617021, 49.789341957446815`}, {
                    163.35880851063828`, 48.36046243404256}, {
                    164.52612765957446`, 46.931582910638305`}, {
                    165.69344680851063`, 45.50270338723405}, {
                    166.69608510638298`, 44.064111523404264`}, {
                    167.66578723404254`, 42.62357719148937}, {
                    168.63548936170213`, 41.18304285957447}, {
                    169.6051914893617, 39.742508527659574`}, {
                    170.4148085106383, 38.29770076595745}, {
                    171.20987234042553`, 36.8525045106383}, {
                    172.00493617021277`, 35.40730825531915}, {
                    172.79999999999998`, 33.962112000000005`}, {
                    173.39744680851064`, 32.51691574468086}, {
                    173.99489361702126`, 31.071719489361705`}, {
                    174.59234042553192`, 29.626523234042555`}, {
                    175.17523404255317`, 28.181326978723405`}, {
                    175.59804255319148`, 26.73613072340426}, {
                    176.02085106382978`, 25.29093446808511}, {
                    176.4436595744681, 23.84573821276596}, {
                    176.85574468085107`, 22.400541957446812`}, {
                    177.21421276595746`, 20.955345702127662`}, {
                    177.57268085106384`, 19.510149446808512`}, {
                    177.93114893617022`, 18.064953191489366`}, {
                    178.2620425531915, 16.619756936170216`}, {
                    178.51021276595745`, 15.174560680851066`}, {
                    178.7583829787234, 13.729364425531916`}, {
                    179.00655319148936`, 12.284168170212768`}, {
                    179.22102127659574`, 10.838971914893618`}, {
                    179.36808510638298`, 9.39377565957447}, {
                    179.51514893617022`, 7.9485794042553195`}, {
                    179.66221276595746`, 6.50338314893617}, {
                    179.7748085106383, 5.058186893617021}, {
                    179.83914893617023`, 3.6129906382978727`}, {
                    179.90348936170213`, 2.1677943829787236`}, {
                    179.96782978723405`, 0.7225981276595744}, {
                    179.96782978723405`, -0.7225981276595741}, {
                    179.90348936170213`, -2.1677943829787236`}, {
                    179.83914893617023`, -3.6129906382978727`}, {
                    179.7748085106383, -5.058186893617021}, {
                    179.66221276595746`, -6.50338314893617}, {
                    179.51514893617022`, -7.9485794042553195`}, {
                    179.36808510638298`, -9.39377565957447}, {
                    179.22102127659574`, -10.838971914893618`}, {
                    179.00655319148936`, -12.284168170212768`}, {
                    178.7583829787234, -13.729364425531916`}, {
                    178.51021276595745`, -15.174560680851066`}, {
                    178.2620425531915, -16.619756936170216`}, {
                    177.93114893617022`, -18.064953191489366`}, {
                    177.57268085106384`, -19.510149446808512`}, {
                    177.21421276595746`, -20.955345702127662`}, {
                    176.85574468085107`, -22.400541957446812`}, {
                    176.4436595744681, -23.84573821276596}, {
                    176.02085106382978`, -25.29093446808511}, {
                    175.59804255319148`, -26.73613072340426}, {
                    175.17523404255317`, -28.181326978723405`}, {
                    174.59234042553192`, -29.626523234042555`}, {
                    173.99489361702126`, -31.071719489361705`}, {
                    173.39744680851064`, -32.51691574468086}, {
                    172.79999999999998`, -33.962112000000005`}, {
                    172.00493617021277`, -35.40730825531915}, {
                    171.2098723404255, -36.8525045106383}, {
                    170.4148085106383, -38.29770076595745}, {
                    169.6051914893617, -39.742508527659574`}, {
                    168.63548936170213`, -41.18304285957447}, {
                    167.66578723404254`, -42.62357719148937}, {
                    166.69608510638298`, -44.064111523404264`}, {
                    165.69344680851063`, -45.50270338723405}, {
                    164.52612765957446`, -46.931582910638305`}, {
                    163.35880851063828`, -48.36046243404256}, {
                    162.1914893617021, -49.789341957446815`}, {
                    160.99085106382978`, -51.213559557446814`}, {
                    159.69025531914895`, -52.62379138723405}, {
                    158.38965957446808`, -54.034023217021286`}, {
                    157.08906382978725`, -55.444255046808514`}, {
                    155.718, -56.84516302978724}, {
                    154.20600000000002`, -58.22742331914894}, {
                    152.694, -59.609683608510636`}, {
                    151.182, -60.99194389787234}, {
                    149.60297872340425`, -62.35866444255319}, {
                    147.93012765957445`, -63.70362934468085}, {
                    146.25727659574468`, -65.04859424680852}, {
                    144.5844255319149, -66.39355914893618}, {
                    142.85412765957446`, -67.71521443404257}, {
                    141.0663829787234, -69.01356010212766}, {
                    139.27863829787233`, -70.31190577021276}, {
                    137.4908936170213, -71.61025143829787}, {
                    135.64417021276597`, -72.87460391489361}, {
                    133.75531914893617`, -74.11467554042554}, {
                    131.8664680851064, -75.35474716595745}, {
                    129.9776170212766, -76.59481879148937}, {
                    127.95702127659575`, -77.78671720851064}, {
                    125.87055319148935`, -78.9545290212766}, {
                    123.78408510638299`, -80.12234083404256}, {
                    121.69761702127659`, -81.29015264680852}, {
                    119.38710638297871`, -82.38279094468086}, {
                    117.00191489361701`, -83.45037140425532}, {
                    114.61672340425531`, -84.5179518638298}, {
                    112.23153191489361`, -85.58553232340427}, {
                    109.95357446808511`, -86.47634818723405}, {
                    107.69706382978723`, -87.3318111319149}, {
                    105.44055319148937`, -88.18727407659576}, {
                    103.18404255319149`, -89.04273702127661}, {
                    101.31089361702128`, -89.62470045957447}, {
                    99.47259574468085, -90.18180030638298}, {
                    97.63429787234043, -90.7389001531915}, {
                    95.796, -91.296}, {94.43719148936171, -91.296}, {
                    93.0783829787234, -91.296}, {91.7195744680851, -91.296}, {
                    90.36076595744682, -91.296}, {
                    89.00195744680852, -91.296}, {
                    87.6431489361702, -91.296}, {
                    86.28434042553191, -91.296}, {
                    84.92553191489363, -91.296}, {
                    83.56672340425533, -91.296}, {
                    82.20791489361702, -91.296}, {
                    80.84910638297872, -91.296}, {
                    79.49029787234043, -91.296}, {
                    78.13148936170212, -91.296}, {
                    76.77268085106383, -91.296}, {
                    75.41387234042554, -91.296}, {
                    74.05506382978724, -91.296}, {
                    72.69625531914893, -91.296}, {
                    71.33744680851063, -91.296}, {
                    69.97863829787235, -91.296}, {
                    68.61982978723404, -91.296}, {
                    67.26102127659574, -91.296}, {
                    65.90221276595744, -91.296}, {
                    64.54340425531915, -91.296}, {
                    63.184595744680855`, -91.296}, {
                    61.82578723404255, -91.296}, {
                    60.46697872340426, -91.296}, {
                    59.108170212765955`, -91.296}, {
                    57.749361702127665`, -91.296}, {
                    56.39055319148936, -91.296}, {
                    55.03174468085106, -91.296}, {
                    53.672936170212765`, -91.296}, {
                    52.31412765957447, -91.296}, {
                    50.95531914893617, -91.296}, {
                    49.59651063829787, -91.296}, {
                    48.23770212765958, -91.296}, {
                    46.878893617021276`, -91.296}, {
                    45.520085106382986`, -91.296}, {
                    44.16127659574468, -91.296}, {
                    42.80246808510638, -91.296}, {
                    41.443659574468086`, -91.296}, {
                    40.08485106382979, -91.296}, {
                    38.72604255319149, -91.296}, {
                    37.36723404255319, -91.296}, {
                    36.008425531914895`, -91.296}, {
                    34.6496170212766, -91.296}, {33.2908085106383, -91.296}, {
                    31.932000000000002`, -91.296}, {
                    30.573191489361704`, -91.296}, {
                    29.214382978723407`, -91.296}, {
                    27.85557446808511, -91.296}, {
                    26.49676595744681, -91.296}, {
                    25.13795744680851, -91.296}, {
                    23.779148936170213`, -91.296}, {
                    22.420340425531915`, -91.296}, {
                    21.061531914893617`, -91.296}, {
                    19.70272340425532, -91.296}, {
                    18.343914893617022`, -91.296}, {
                    16.985106382978724`, -91.296}, {
                    15.626297872340425`, -91.296}, {
                    14.267489361702127`, -91.296}, {
                    12.90868085106383, -91.296}, {
                    11.549872340425532`, -91.296}, {
                    10.191063829787234`, -91.296}, {
                    8.832255319148935, -91.296}, {
                    7.473446808510638, -91.296}, {
                    6.11463829787234, -91.296}, {
                    4.755829787234042, -91.296}, {
                    3.3970212765957446`, -91.296}, {
                    2.038212765957447, -91.296}, {
                    0.6794042553191489, -91.296}, {-0.6794042553191489, \
-91.296}, {-2.038212765957447, -91.296}, {-3.3970212765957446`, -91.296}, \
{-4.755829787234042, -91.296}, {-6.11463829787234, -91.296}, \
{-7.473446808510638, -91.296}, {-8.832255319148935, -91.296}, \
{-10.191063829787234`, -91.296}, {-11.549872340425532`, -91.296}, \
{-12.90868085106383, -91.296}, {-14.267489361702127`, -91.296}, \
{-15.626297872340425`, -91.296}, {-16.985106382978724`, -91.296}, \
{-18.343914893617022`, -91.296}, {-19.70272340425532, -91.296}, \
{-21.061531914893617`, -91.296}, {-22.420340425531915`, -91.296}, \
{-23.779148936170213`, -91.296}, {-25.13795744680851, -91.296}, \
{-26.49676595744681, -91.296}, {-27.85557446808511, -91.296}, \
{-29.214382978723407`, -91.296}, {-30.573191489361704`, -91.296}, \
{-31.932000000000002`, -91.296}, {-33.2908085106383, -91.296}, \
{-34.6496170212766, -91.296}, {-36.008425531914895`, -91.296}, \
{-37.36723404255319, -91.296}, {-38.72604255319149, -91.296}, \
{-40.08485106382979, -91.296}, {-41.443659574468086`, -91.296}, \
{-42.80246808510638, -91.296}, {-44.16127659574468, -91.296}, \
{-45.520085106382986`, -91.296}, {-46.878893617021276`, -91.296}, \
{-48.23770212765958, -91.296}, {-49.59651063829787, -91.296}, \
{-50.95531914893617, -91.296}, {-52.31412765957447, -91.296}, \
{-53.672936170212765`, -91.296}, {-55.03174468085106, -91.296}, \
{-56.39055319148936, -91.296}, {-57.749361702127665`, -91.296}, \
{-59.108170212765955`, -91.296}, {-60.46697872340426, -91.296}, \
{-61.82578723404255, -91.296}, {-63.184595744680855`, -91.296}, \
{-64.54340425531915, -91.296}, {-65.90221276595744, -91.296}, \
{-67.26102127659574, -91.296}, {-68.61982978723404, -91.296}, \
{-69.97863829787235, -91.296}, {-71.33744680851063, -91.296}, \
{-72.69625531914893, -91.296}, {-74.05506382978724, -91.296}, \
{-75.41387234042554, -91.296}, {-76.77268085106383, -91.296}, \
{-78.13148936170212, -91.296}, {-79.49029787234043, -91.296}, \
{-80.84910638297872, -91.296}, {-82.20791489361702, -91.296}, \
{-83.56672340425533, -91.296}, {-84.92553191489363, -91.296}, \
{-86.28434042553191, -91.296}, {-87.6431489361702, -91.296}, \
{-89.00195744680852, -91.296}, {-90.36076595744682, -91.296}, \
{-91.7195744680851, -91.296}, {-93.0783829787234, -91.296}, \
{-94.43719148936171, -91.296}, {-95.796, -91.296}, {-95.796, -185}, {-90.796, \
-185}, {-85.796, -185}, {-80.796, -185}, {-75.796, -185}, {-70.796, -185}, \
{-65.796, -185}, {-60.79600000000001, -185}, {-55.79600000000001, -185}, \
{-50.79600000000001, -185}, {-45.79600000000001, -185}, {-40.79600000000001, \
-185}, {-35.79600000000001, -185}, {-30.796000000000006`, -185}, \
{-25.796000000000006`, -185}, {-20.796000000000006`, -185}, \
{-15.796000000000006`, -185}, {-10.796000000000006`, -185}, \
{-5.7960000000000065`, -185}, {-0.7960000000000065, -185}, {
                    4.2039999999999935`, -185}, {9.203999999999994, -185}, {
                    14.203999999999994`, -185}, {19.203999999999994`, -185}, {
                    24.203999999999994`, -185}, {29.203999999999994`, -185}, {
                    34.20399999999999, -185}, {39.20399999999999, -185}, {
                    44.20399999999999, -185}, {49.20399999999999, -185}, {
                    54.20399999999999, -185}, {59.20399999999999, -185}, {
                    64.204, -185}, {69.204, -185}, {74.204, -185}, {
                    79.204, -185}, {84.204, -185}, {89.204, -185}, {
                    94.204, -185}, {99.204, -185}, {104.204, -185}, {
                    109.204, -185}, {114.204, -185}, {119.204, -185}, {
                    124.204, -185}, {129.204, -185}, {134.204, -185}, {
                    139.204, -185}, {144.204, -185}, {149.204, -185}, {
                    154.204, -185}, {159.204, -185}, {164.204, -185}, {
                    169.204, -185}, {174.204, -185}, {179.204, -185}, {
                    184.204, -185}, {189.204, -185}, {194.204, -185}, {
                    199.204, -185}, {204.204, -185}, {209.204, -185}, {
                    214.204, -185}, {219.204, -185}, {224.204, -185}, {
                    229.204, -185}, {234.204, -185}, {239.204, -185}, {
                    244.204, -185}, {249.204, -185}, {254.204, -185}, {
                    259.204, -185}, {264.204, -185}, {269.204, -185}, {
                    274.204, -185}, {279.204, -185}, {284.204, -185}, {
                    289.204, -185}, {294.204, -185}, {299.204, -185}, {
                    304.204, -185}, {309.204, -185}, {314.204, -185}, {
                    319.204, -185}, {324.204, -185}, {329.204, -185}, {
                    334.204, -185}, {339.204, -185}, {344.204, -185}, {
                    349.204, -185}, {354.204, -185}, {359.204, -185}, {
                    360, -185}, {360, -180}, {360, -175}, {360, -170}, {
                    360, -165}, {360, -160}, {360, -155}, {360, -150}, {
                    360, -145}, {360, -140}, {360, -135}, {360, -130}, {
                    360, -125}, {360, -120}, {360, -115}, {360, -110}, {
                    360, -105}, {360, -100}, {360, -95}, {360, -90}, {
                    360, -85}, {360, -80}, {360, -75}, {360, -70}, {
                    360, -65}, {360, -60}, {360, -55}, {360, -50}, {
                    360, -45}, {360, -40}, {360, -35}, {360, -30}, {
                    360, -25}, {360, -20}, {360, -15}, {360, -10}, {
                    360, -5}, {360, 0}, {360, 5}, {360, 10}, {360, 15}, {360, 
                    20}, {360, 25}, {360, 30}, {360, 35}, {360, 40}, {360, 
                    45}, {360, 50}, {360, 55}, {360, 60}, {360, 65}, {360, 
                    70}, {360, 75}, {360, 80}, {360, 85}, {360, 90}, {360, 
                    95}, {360, 100}, {360, 105}, {360, 110}, {360, 115}, {360,
                     120}, {360, 125}, {360, 130}, {360, 135}, {360, 140}, {
                    360, 145}, {360, 150}, {360, 155}, {360, 160}, {360, 
                    165}, {360, 170}, {360, 175}, {360, 180}, {360, 185}, {
                    360, 185}, {355, 185}, {350, 185}, {345, 185}, {340, 
                    185}, {335, 185}, {330, 185}, {325, 185}, {320, 185}, {
                    315, 185}, {310, 185}, {305, 185}, {300, 185}, {295, 
                    185}, {290, 185}, {285, 185}, {280, 185}, {275, 185}, {
                    270, 185}, {265, 185}, {260, 185}, {255, 185}, {250, 
                    185}, {245, 185}, {240, 185}, {235, 185}, {230, 185}, {
                    225, 185}, {220, 185}, {215, 185}, {210, 185}, {205, 
                    185}, {200, 185}, {195, 185}, {190, 185}, {185, 185}, {
                    180, 185}, {175, 185}, {170, 185}, {165, 185}, {160, 
                    185}, {155, 185}, {150, 185}, {145, 185}, {140, 185}, {
                    135, 185}, {130, 185}, {125, 185}, {120, 185}, {115, 
                    185}, {110, 185}, {105, 185}, {100, 185}, {95, 185}, {90, 
                    185}, {85, 185}, {80, 185}, {75, 185}, {70, 185}, {65, 
                    185}, {60, 185}, {55, 185}, {50, 185}, {45, 185}, {40, 
                    185}, {35, 185}, {30, 185}, {25, 185}, {20, 185}, {15, 
                    185}, {10, 185}, {5, 185}, {0, 185}, {-5, 185}, {-10, 
                    185}, {-15, 185}, {-20, 185}, {-25, 185}, {-30, 
                    185}, {-35, 185}, {-40, 185}, {-45, 185}, {-50, 
                    185}, {-55, 185}, {-60, 185}, {-65, 185}, {-70, 
                    185}, {-75, 185}, {-80, 185}, {-85, 185}, {-90, 
                    185}, {-95, 185}, {-100, 185}, {-105, 185}, {-110, 
                    185}, {-115, 185}, {-120, 185}, {-125, 185}, {-130, 
                    185}, {-135, 185}, {-140, 185}, {-145, 185}, {-150, 
                    185}, {-155, 185}, {-160, 185}, {-165, 185}, {-170, 
                    185}, {-175, 185}, {-180, 185}, {-185, 185}, {-190, 
                    185}, {-195, 185}, {-200, 185}, {-205, 185}, {-210, 
                    185}, {-215, 185}, {-220, 185}, {-225, 185}, {-230, 
                    185}, {-235, 185}, {-240, 185}, {-245, 185}, {-250, 
                    185}, {-255, 185}, {-260, 185}, {-265, 185}, {-270, 
                    185}, {-275, 185}, {-280, 185}, {-285, 185}, {-290, 
                    185}, {-295, 185}, {-300, 185}, {-305, 185}, {-310, 
                    185}, {-315, 185}, {-320, 185}, {-325, 185}, {-330, 
                    185}, {-335, 185}, {-340, 185}, {-345, 185}, {-350, 
                    185}, {-355, 185}, {-360, 185}, {-365, 185}, {-365, 
                    180}, {-365, 175}, {-365, 170}, {-365, 165}, {-365, 
                    160}, {-365, 155}, {-365, 150}, {-365, 145}, {-365, 
                    140}, {-365, 135}, {-365, 130}, {-365, 125}, {-365, 
                    120}, {-365, 115}, {-365, 110}, {-365, 105}, {-365, 
                    100}, {-365, 95}, {-365, 90}, {-365, 85}, {-365, 
                    80}, {-365, 75}, {-365, 70}, {-365, 65}, {-365, 
                    60}, {-365, 55}, {-365, 50}, {-365, 45}, {-365, 
                    40}, {-365, 35}, {-365, 30}, {-365, 25}, {-365, 
                    20}, {-365, 15}, {-365, 10}, {-365, 5}, {-365, 
                    0}, {-365, -5}, {-365, -10}, {-365, -15}, {-365, -20}, \
{-365, -25}, {-365, -30}, {-365, -35}, {-365, -40}, {-365, -45}, {-365, -50}, \
{-365, -55}, {-365, -60}, {-365, -65}, {-365, -70}, {-365, -75}, {-365, -80}, \
{-365, -85}, {-365, -90}, {-365, -95}, {-365, -100}, {-365, -105}, {-365, \
-110}, {-365, -115}, {-365, -120}, {-365, -125}, {-365, -130}, {-365, -135}, \
{-365, -140}, {-365, -145}, {-365, -150}, {-365, -155}, {-365, -160}, {-365, \
-165}, {-365, -170}, {-365, -175}, {-365, -180}, {-365, -185}, {-355.796, \
-185}, {-350.796, -185}, {-345.796, -185}, {-340.796, -185}, {-335.796, \
-185}, {-330.796, -185}, {-325.796, -185}, {-320.796, -185}, {-315.796, \
-185}, {-310.796, -185}, {-305.796, -185}, {-300.796, -185}, {-295.796, \
-185}, {-290.796, -185}, {-285.796, -185}, {-280.796, -185}, {-275.796, \
-185}, {-270.796, -185}, {-265.796, -185}, {-260.796, -185}, {-255.796, \
-185}, {-250.796, -185}, {-245.796, -185}, {-240.796, -185}, {-235.796, \
-185}, {-230.796, -185}, {-225.796, -185}, {-220.796, -185}, {-215.796, \
-185}, {-210.796, -185}, {-205.796, -185}, {-200.796, -185}, {-195.796, \
-185}, {-190.796, -185}, {-185.796, -185}, {-180.796, -185}, {-175.796, \
-185}, {-170.796, -185}, {-165.796, -185}, {-160.796, -185}, {-155.796, \
-185}, {-150.796, -185}, {-145.796, -185}, {-140.796, -185}, {-135.796, \
-185}, {-130.796, -185}, {-125.796, -185}, {-120.796, -185}, {-115.796, \
-185}, {-110.796, -185}, {-105.796, -185}, {-100.796, -185}, {-95.796, \
-185}}], 
                    GrayLevel[0.85], 
                    LineBox[CompressedData["
1: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
WSyXzrN7ga7za5O+49DK3pY3TVry7TW/AMtF+7bcrXzR3/Lr5Y5Xbz+3p+XA
kOsdhrXqYXnKiv8Onn6iu+UtRU0nbkjzs3yxRc/lqNnNcmm/7u5qud+uqWfc
R/hYnvE0+16n550tRy8Y3WyrdLJ8uO66+IeL2lt+c9O5jb3PvmV5mW+NK4sa
t7H86OuQ5ucSW1uOK33DlpYXF7wX8N2NZpZH/vzL4eRpjSx7V3e+qoC6lu+P
2pvZuEM1y9kb8+b0HVLO8tGMdq9KruQIcSD9vdD7CX2e0PcR+r5Cv0fo9wo9
D6HnJfQ8hZ630HkInZfQeQqdt2WtB8taL5a1nixrvVnWerSs9WpZ69my1rtl
7QfL2i+WtZ8sa79Z1n60rP1qWfvZsva7ZZ0HlnVeWNZ5YlnnjWWdR5Z1XlnW
eWZZ551lnYeWdV5a1nlqWeetZZ3HlnVeW9Z5blnnvWXdB673K9sXrvMr2yeW
dd9Y1n3k+ryyfWVZ95ll3XeWdR9a1n1pWfepZd23lnUfW9Z9bVn3uWXd95ZV
D1hWvWBZ9YRl1RuWVY9YVr1iufT1gYtV74jRO6qHxOgh1Uti9JLqKTF6SvWW
GL2lekyMHlO9JkavqZ4To+dU74nRe6oHxehB1Yti9KLqSTF6UvWmGL2pelSM
HlW9Kkavqp4Vo2dV74rRu6qHxehh1cti9LLqaTF6WvW2GL2telyMHle9Lkav
q54Xo+dV74vR++oHxPgB9Qti/ELpsZUkifET6jfE+A31I2L8iPoVMX5F/YwY
P6N+R4zfUT8kxg+pXxLjl9RPifFT6rfE+C31Y2L8mPo1MX5N/ZwYP6d+T4zf
Uz8oxg+qXxTjF9VPivGT6jfF+E31o2L8qPpVMX5V/awYP6t+V4zfVT8sxg+r
Xxbjl9VPi/HT6rfF+G3142L8uPp1MX5d/bwYP69+X4zf1zxATB6geYGYvEDz
BDF5guYNYvIGzSPE5BGaV4jJKzTPEJNnaN4hJu/QPERMHqJ5iZi8RPMUMXmK
5i1i8hbNY8TkMYZNXkN/D3o/0OeBvg/o+4J+D+j3gp4H6HmBnifoeYPOA3Re
oPMEnTeoHkD1AqonUL2B6hFUr6B6BtU7qB9Mnmn6BdRPoH4D9SOoX0H9DOp3
0DwAzQvQPAHNG9A8As0r0DwDzTvQPATNS9A8Bc1bk5eLyctpXoPmucnjxeTx
tA9A+wK0T0D7BrSPQPvK3DeIuW+gfQfah6B9CdqnoH0L2segfQ3a56B9D9ID
IL1g7nvE3PeQ3gDpEZBeAekZkN4B6SGQXgLpKZDeAukxkF4D6TmQ3gPpQZBe
BOlJkN4E6VGQXgXpWZDeBelhkF4G6WmQ3gbpcZBeB+l5kN4H+QGQXwD5CZDf
APkRkF8B+RmQ3wH5IZBfAvkpkN8C+TGQXwP5OZDfA/lBkF8E+UmQ3wT5UZBf
BflZkN8F+WGQXwb5aZDfBvlxkF8H+XmQ3wflAaC8AJQngPIGUB4ByitAeQYo
7wDlIaC8BJSngPIWUB4DymtAeQ4o7wHlQaC8CJQngfImUB4FyqtAeRYo7wLl
YaC8DJSngfI2UB4HyutAeR4o7wPlgaC8EJQngvJGUB4JyitBeSYo7wTloaC8
FJSngvJWUB4LymtBeS4o7wXlwaC8GJQng/JmUB4NyqtBeTYo7wbl4aC8HJSn
g/J2UB4PyutBeT4o7wfdB4DuC0D3CaD7BtB9BOi+AnSfAbrvAN2HgO5LQPcp
oPsW0H0M6L4GdJ8Duu8B3QeB7otA90llr7/59zP/A7RkehI=
                    "]]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    PlotRange -> {{-181.68825951219515`, 
                    181.68825951219515`}, {-92.20896, 92.20896}}, ImageSize -> 
                    Full, Background -> None, Frame -> False, FrameStyle -> 
                    None, FrameTicks -> None}], 
                  StyleBox[
                   StyleBox[
                   "\"20 million years ago\"", "Label", StripOnInput -> 
                    False], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", #2}], "]"}]& )]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["userinfoused", {"count" -> "1"}, {"\n  ", 
      XMLElement["userinfo", {"name" -> "TimeZone"}, {}], "\n "}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "7", "datatypes" -> "DatePlus", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "2.091", "parsetiming" -> "0.26", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP55741def2109dc5ii2dd000036a1eaeic60h92b2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa55751def2109dc5ii2dd000039bfe8dbfd0c8aei3454770973695860617", "version" -> 
    "2.6", "inputstring" -> "20 million years ago"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 39, 18.2038803`9.012738911195608}, "Line" -> 
    75, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "20 million years ago"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{653., {502., 508.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802875590044994`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"c4dcb6c7-f361-4d3d-aed7-53af39002bef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<lens,f=20ft,o=400ft\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8802883653753405`*^9, 3.8802883809475126`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"da746392-1f72-40cc-b00c-52866da9a2dc"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "lens,f=20ft,o=400ft", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input information", "scanner" -> "Formula", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"LensManipulate\"][<|\"FocalLength\" -> \
Quantity[20, \"Feet\"], \"ObjectDistance\" -> Quantity[400, \"Feet\"]|>]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox["\"thin lens equation\"", 
                    GrayLevel[0], StripOnInput -> False], 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                 TagBox[
                  PaneBox[
                  "\"focal length\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["20", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20", "SRString" -> "20"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"feet\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}, {
                 TagBox[
                  PaneBox[
                  "\"distance between object and lens\"", 
                   BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["400", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "400", "SRString" -> "400"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"feet\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {{None}}, 
                 "ItemsIndexed" -> {{{1, 1}, {1, 2}} -> 
                   GrayLevel[0.9568627450980393]}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Formula", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"LensManipulate\"][<|\"FocalLength\" -> \
Quantity[20, \"Feet\"], \"ObjectDistance\" -> Quantity[400, \"Feet\"]|>]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"distance between image and lens\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6.417", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6.417", "SRString" -> "6.417"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"=\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["21.05", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "21.05", "SRString" -> "21.05"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"feet\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], LineIndent -> 
                    0]}, {
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"=\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    RowBox[{
                    RowBox[{"\"21\"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Null]", "\[Prime]"], 
                    "\[NegativeMediumSpace]"}], 
                    $CellContext`UnitBoxWrapper["StringBoxes" -> "'"]], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{
                    TagBox["0.6316", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.6316", "SRString" -> "0.6316"]], 
                    StyleBox[
                    TagBox[
                    SuperscriptBox["\[Null]", 
                    StyleBox[
                    "\[Prime]\[Prime]", FontTracking -> "Condensed"]], 
                    $CellContext`UnitBoxWrapper["StringBoxes" -> "\""]], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}]}], 
                    AutoSpacing -> False]}, "RowDefault"], LineIndent -> 0]}},
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More units", "input" -> "Result__More units"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Equation", "scanner" -> "Formula", "id" -> "Equation", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Column[{ResourceFunction[\"LensManipulate\"][<|\"FocalLength\" -> \
Quantity[20, \"Feet\"], \"ObjectDistance\" -> Quantity[400, \"Feet\"]|>], \
FormulaData[\"ThinLensEquation\", \"QuantityVariableTable\"]}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "i"], "+", 
                    FractionBox["1", "o"]}], "\[LongEqual]", 
                    FractionBox["1", "f"]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}, 
                    "RowDefault"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], 
                    BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]"}, {
                    TagBox[
                    PaneBox[
                    "i", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"distance between image and lens\""}, {
                    TagBox[
                    PaneBox[
                    "f", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"focal length\""}, {
                    TagBox[
                    PaneBox[
                    "o", BaseStyle -> {{
                    Alignment -> Left, BaselinePosition -> Baseline, 
                    FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    "\"distance between object and lens\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Left, Baseline}, {1, 2} -> {
                    Left, Baseline}}}, AutoDelete -> False, 
                    GridBoxBackground -> {
                    "Columns" -> {None, None}, "Rows" -> {None, None}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                    GrayLevel[0.84], BaselinePosition -> Automatic, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Ray plot", "scanner" -> "Formula", "id" -> "RaysPlot", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               LineBox[{{-10, 0}, {10, 0}}]}, {
               RGBColor[0, 0, 1], 
               Arrowheads[{-0.05, 0.05}], 
               ArrowBox[{{0, 0.5}, {0, -0.5}}], 
               StyleBox[
                InsetBox[
                 FormBox["\"lens\"", TraditionalForm], {0, 0.55}], Larger, 
                StripOnInput -> False]}, {
               StyleBox[
                InsetBox[
                 FormBox["\"object\"", TraditionalForm], 
                 NCache[{
                   Rational[-1, 2], -0.1}, {-0.5, -0.1}]], Larger, 
                StripOnInput -> False], {
                Arrowheads[0.02], 
                ArrowBox[
                 NCache[{{
                    Rational[-1, 2], 0}, {
                    Rational[-1, 2], 0.3}}, {{-0.5, 0}, {-0.5, 0.3}}]]}}, {
               StyleBox[
                InsetBox[
                 FormBox["\"image\"", TraditionalForm], {0.02631578947368421, 
                 0.1}, {-1, 0}], Larger, StripOnInput -> False], {
                Arrowheads[0.02], 
                
                ArrowBox[{{0.02631578947368421, 0}, {
                  0.02631578947368421, -0.015789473684210523`}}]}}, {{
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                ArrowBox[
                 NCache[{{
                    Rational[-1, 2], 0.3}, {0, 0.3}}, {{-0.5, 0.3}, {
                   0, 0.3}}]]}, {
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                ArrowBox[
                 NCache[{{
                    Rational[-1, 2], 0.3}, {0, 0.}}, {{-0.5, 0.3}, {
                   0, 0.}}]]}, {
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                ArrowBox[
                 NCache[{{
                    Rational[-1, 2], 0.3}, {0, -0.3}}, {{-0.5, 0.3}, {
                   0, -0.3}}]]}}, {{
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                
                ArrowBox[{{0, 0.3}, {
                  0.02631578947368421, -0.015789473684210523`}}]}, {
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                
                ArrowBox[{{0, 0.}, {
                  0.02631578947368421, -0.015789473684210523`}}]}, {
                RGBColor[1, 0, 0], 
                Arrowheads[{0, 0.03, 0.03, 0}], 
                ArrowBox[{{0, -0.3}, {
                  0.02631578947368421, -0.015789473684210523`}}]}}, {}, {}}, 
             PlotRange -> {{-0.7, 0.5}, {-0.5, 0.6}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "FormulaSelect", "template" -> 
        "Assuming thin lens equation${separator}Use ${desc} instead", "count" -> 
        "2", "pulldown" -> "false", "default" -> 
        "\"FSelect\" -> {{\"ThinLensEquation\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "ThinLensEquation", "desc" -> "thin lens equation", 
          "input" -> "\"FSelect\" -> {{\"ThinLensEquation\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MultipleLens", "desc" -> "two thin lens system", "input" -> 
          "\"FSelect\" -> {{\"MultipleLens\"}}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "Formula", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "0.6890000000000001", "parsetiming" -> 
    "0.417", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP3060227bg7165h0a8fae00000g67db7f63ea28a3", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa3061227bg7165h0a8fae00004796d89651142i358884920455003441207", "version" -> 
    "2.6", "inputstring" -> "lens,f=20ft,o=400ft"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 53, 3.5746801`8.305812163612066}, "Line" -> 
    76, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "lens,f=20ft,o=400ft"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {414., 420.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802883836205573`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"0111daf3-d37c-4a27-9e86-e8f1f08df758"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<H2SO4\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8802886515759764`*^9, 3.880288659209887*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"800b1958-e2f4-4bf7-8f64-100f88c92018"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "H2SO4", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"Chemical\", \"SulfuricAcid\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"sulfuric acid\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {ChemicalData, "SulfuricAcid"}, 
                 "SRString" :> $CellContext`GeneralData[
                  ChemicalData, "SulfuricAcid", "SpokenName"]]], Identity], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Chemical names and formulas", "scanner" -> "Data", 
     "id" -> "ChemicalNamesFormulas:ChemicalData", "position" -> "200", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"formula\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    SubscriptBox["\"H\"", "2"], "\"S\"", 
                    SubscriptBox["\"O\"", "4"]}, "RowDefault"], 
                  ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                  False]}, {
                 TagBox[
                  PaneBox[
                  "\"Hill formula\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    SubscriptBox["\"H\"", "2"], 
                    SubscriptBox["\"O\"", "4"], "\"S\""}, "RowDefault"], 
                  ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                  False]}, {
                 TagBox[
                  PaneBox[
                  "\"name\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"sulfuric acid\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalNamesFormulas:ChemicalData__More"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Structure diagram", "scanner" -> "Data", "id" -> 
     "StructureDiagramPod:ChemicalData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Chemical\", \"SulfuricAcid\"][EntityProperty[\"Chemical\", \
\"ColorStructureDiagram\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[{
               CapForm["Round"], Null, {{
                 RGBColor[
                 0.6029533333333333, 0.6467666666666667, 0.09002666666666667], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"S\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {340.3, 0.}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  426.90000000000003`, 50.}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  253.69000000000003`, -50.}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {290.3, 
                  86.6}]}, {
                 RGBColor[0.800498, 0.201504, 0.192061], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"O\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  390.3, -86.6}]}, {
                 RGBColor[
                 0.43333333333333335`, 0.4666666666666667, 
                  0.4666666666666667], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"H\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  480.59000000000003`, 19.}]}, {
                 RGBColor[
                 0.43333333333333335`, 0.4666666666666667, 
                  0.4666666666666667], 
                 InsetBox[
                  FormBox[
                   StyleBox[
                   "\"H\"", FontSize -> Scaled[0.11318292674603248`], 
                    FontWeight -> Plain, ScriptSizeMultipliers -> 0.8, 
                    ScriptMinSize -> 8, FontFamily -> "Source Sans Pro", 
                    StripOnInput -> False], TraditionalForm], {
                  200., -19.}]}}, {{{
                  AbsoluteThickness[0.55], 
                  RGBColor[
                  0.6029533333333333, 0.6467666666666667, 
                   0.09002666666666667], 
                  
                  LineBox[{{360.4214188010807, 11.617447344734783`}, {383.6, 
                   25.}}], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{383.6, 25.}, {405.0415356097463, 
                   37.37963949754405}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[
                  0.6029533333333333, 0.6467666666666667, 
                   0.09002666666666667], 
                  
                  LineBox[{{320.17800037644656`, -11.616441302132213`}, {
                   296.995, -25.}}], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{296.995, -25.}, {
                   275.5490953540771, -37.38073238997974}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[
                  0.6029533333333333, 0.6467666666666667, 
                   0.09002666666666667], 
                  
                  LineBox[{{{324.35255265526524`, 17.62141880108065}, {310.97,
                    40.8}}, {{333.0125526552652, 22.62141880108065}, {319.63, 
                   45.8}}}], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{310.97, 40.8}, {298.590360502456, 
                   62.24153560974628}}, {{319.63, 45.8}, {307.250360502456, 
                   67.24153560974628}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[
                  0.6029533333333333, 0.6467666666666667, 
                   0.09002666666666667], 
                  
                  LineBox[{{{356.2474473447348, -17.62141880108065}, {
                   369.63, -40.8}}, {{
                   347.5874473447348, -22.62141880108065}, {360.97, -45.8}}}], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{{369.63, -40.8}, {
                   382.009639497544, -62.24153560974628}}, {{360.97, -45.8}, {
                   373.34963949754405`, -67.24153560974628}}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{448.7582608185647, 37.379286917945514`}, {453.745,
                    34.5}}], 
                  RGBColor[
                  0.43333333333333335`, 0.4666666666666667, 
                   0.4666666666666667], 
                  
                  LineBox[{{453.745, 34.5}, {458.8896509461412, 
                   31.529536611466227`}}]}}, {{
                  AbsoluteThickness[0.55], 
                  RGBColor[0.800498, 0.201504, 0.192061], 
                  
                  LineBox[{{231.83173918143535`, -37.37928691794553}, {
                   226.84500000000003`, -34.5}}], 
                  RGBColor[
                  0.43333333333333335`, 0.4666666666666667, 
                   0.4666666666666667], 
                  
                  LineBox[{{226.84500000000003`, -34.5}, {
                   221.7003490538588, -31.529536611466227`}}]}}}, Null}, {
              ImageSize -> 104, PlotRangeClipping -> False, ImagePadding -> 2,
                ImageSize -> 95.42075214430328, 
               PlotRange -> {{176.856359383331, 
                499.10491249333523`}, {-114.65289771717451`, 
                107.63967328788088`}}}], ImageSizeAction -> "ShrinkToFit", 
             ImageSize -> {440.}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "4"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Skeletal structure", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Skeletal structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Skeletal structure"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Lewis structure", "input" -> 
           "StructureDiagramPod:ChemicalData__Lewis structure"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Show bond information", "input" -> 
         "StructureDiagramPod:ChemicalData__Show bond information"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show graph properties", "input" -> 
         "StructureDiagramPod:ChemicalData__Show graph properties"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step", "input" -> 
         "StructureDiagramPod:ChemicalData__Step-by-step", "stepbystep" -> 
         "true", "buttonstyle" -> "StepByStepSolution"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "3D structure", "scanner" -> "Data", "id" -> 
     "3DStructure:ChemicalData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[
              RasterBox[CompressedData["
1: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
2be50DN+7LOSmpRbXIMy2dfdfe7I+Y6KuWu1tyLXMfB0P7WaWoaHC66Oujr2
/r5cs0bsyexlnn6NOdMLfveKeP3KeErau1fU1lFjP3DmjH43535L1q1Tmfp6
3pS1i/qXLrbPh9SX875+8WZ04JQd5TMuXtYTpFrVJY5tp67bC/9zI8uR7rF/
ymQ8PS2qy7hrxHlzY14NOeepw8uFn+PM72tNesLYymA/dprjpamv9e8wQ78e
6usdYmJEXV07a5bI/RD7dhw8SOdv36bn/A4g83tcUCC4+dHUVD0/RjN7yRK1
qa+hLKxT9w90vQeZ0aCRH4k61bylVnTxnorfE5d/q68fvmBHN3Mc6QHHuZzi
mowbV/7/6M4/D6Ji6sK3LXn5yM+rJepbeB44mp5jYvwoM21kTMXdUwRPZ1yR
ukULiujYkXoPGiT6FOYvWyb2jbcnJ9Ox1FTKkesIucXFlMaYunD3rj7xLfZN
f2Tden+g7z9M2ucbq7Vg7mlBOw9Vo+w/2BNMz2NMse+BD8ovdmYs1eOFHoeO
vIbxiuXVilcD+bmuAluop+qzHcS+j3aWJY2bYqHnv6eNjftAa+rrf1WDXp2/
m5vog0H/Z2xcnKgnoH8q8bvvaMu+fSLePWT/VMxXnc/rRm4uuLl+R3Ky2tSv
v6yt14AP9dg/HjXJnLAXOHuxFc1dYkUnr1cXvsa4vv6siHlTYQ32U84c6+CP
6vECrjrxmsarP68IXh7yc2qXYiudYyfqX19vqEILv65MsxZZ0ZTZ0r7iqEkW
+l4Dy+++NTDV0txcBz2VNt7e1KVHD/5/OI5mLlgg+l6+37VL8Cbsz6BGhfpn
+pMndJN91duY672K9R3yoR7xj30IaT+1FHWq1UlV6Lufq9Jto/p6UQnjSnAm
F/k+V9kvefMKlzGl4dWaV0OjvZ7a4vF3sh1FjWs/8zfUUfH7Uav/YlVlgWXs
MwJj7C+x/6ONiC4/8VLSlZb0fwfY2tDYsFaiRoW6J/qodh89Slc49wNPL5Zr
n+BUnO+9FbnK61i/oR8lwlfhM521qBIt+aay2I9B/TP5rB0VMIcvLHalvOJa
9IJXkfBRDeUFvxTIqzOv7rza8AqQ8VbXCFuulMlxFfWIaw8d6Hy6StRQ8fsR
c1FnXbOlithXBL+bPq8SJXzC8ZIxFj+G42Uv02HMoAHcjjEFzQv0d0M77PvQ
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
9T6UtaG+gPODIyaa01drrUl3yo5u5BrXF7BXHFa6R5NX/O+19PJsHa2sNP3k
eQnIAVGrQs8neBVqpUeYm+mbqimXuXnxyGFUgpiHfWXUX1Fbhx45dMmBKyPd
1Qe+3ibnmOXZWke+r+072IwmTrOkb3+wEfoK9184iZ4Vqb7QWd4jluoL6YUV
b4b4YLH3Zyv2cT6T+Tpq6ahTneC8Mi3Qn4q6dpG4FDTtwasG9efvZ0i1fszf
EDrRL3F1Vdlr/lPr2PUD3cARH4lzWFv2VhX9dNml9QX0HaCXxcdk9YW/w3rZ
WGvRa4pZVNhHBrfaIuuPo86pZ670om0bKe5hTxlxr3OU5KdwCz3yli+1x18E
+Cq+6k8M9YVuvT4U5wehj7b7aDWxH/hccCvgKlTeAy4/9YXXtaHVquqmMn9f
WPMlrvbLuLrGOeAjzEsI4+tFH2irltJsBMNCP4xB0z7IX3/OTfFVf2bBEe+r
ew00E2dSce7q0Hk7odkhnYWHf4qSsSX1KuzRVdWY+jW/rkWYmakSVNIcjkQ5
DupK53C4i/0e1KYKoS9n0B1v/jtN+6AA/R0fD62pr6W8W7uo9xNx3hm6aTjT
h7Mxj4ud5P1kNzkGBpbWF/gpalO/5v+NQVf1U0cH3TKZtxtrj0OjELUDzFr8
N017oQnmr9d7KZh6FYv0/0g/ZJSkywANNGgPPRExEHkg+32KlPEFf1W/QnKr
31s0Y2uek4NWzPtkn4UZsmc9Ggu9XsO8hHwDtuSV7+/HmPJSmfq1VwRDzzf2
9/s7V6GFvSXtPfRCSfWFujKmWpfWF55UsPrCX9lMUaOvqd1eT9Idh64cavS3
OR5Cb/WRn4/+cRMf3SWPxhpTv9aKZC3MzbQx1pVFTxLOtmA/I6V1Q8pZwRz9
DGqgMXJ9QYqByeW4xv6/New1rqvjok6qV1uzo149zTZl3++1LdzCQoczTWPt
7cQ5JvSGY4/+kb8fUZswomkDicYxrlZ50ovvGr0VMVCxN2teHAPbW1US5wWw
r4H+b8SCa8wxML+LenSX9sSQWzN/ve3jWWHrC4qVnTG3UndibjXAtqroF8HZ
AvSI3GJuUYjcB/Vm9Mlhn5V562mlXqPYK1iIubmuO3Mr1KBx7gQ9beizvc95
ttgHGzZEmkkvast+SgxU7JUMZ+fQ54b+NuTbqDtjlmp2oL+0bzGgLxH6j9h3
PWqi7K8q9tfWjGNglKw9gL19nBUQ85d8PCkfteYBcUR9ekhnmTgOnvVopDX1
a1as/FsLc3NRX8DZX/R3owfptHtjcZZY8HT0h8BncQxEf+RqFxe1qV+zYuXf
DPUFnBdHvwh6RS56utNj5IERrSVcoVeSY+CTJr4Kt1LsLw31hUhoGlatInSk
cAYT5y3R0/0McybQF9Kvj2GPldJ9PJUzcor9pTW1MNN0Zm6FXm/0eKNX5IRb
I6GlUYT6AvJA1K6U+oJi/4GJ+gLHQGj3oBcXfbg46/kA85bQu4YYKNcX8pX6
gmKvYNCoa1NJqi+gHxcaKTgzd8XLQ5w/oW5dxDl0CmkuuJXSv63YqxjqC9Cl
wxkCaBJsquMqNOhu+nrRC/QaoQe3b0+p14i/P+mm1BcU+2tDfQH6BEPtbMU5
J+hboDckAzV2nAkYNby0vlAY5I8z4mpTv2bFyr+1trDQQfMJZ53QhwutHehF
ZyIPhDbLaMZVeKjwV9nK2TjF/sQMur9iZgJzK9QXoB+2oXYtOti4gdDsfA5u
Bb0faBHIZ5huKfUFxf7AjPEUaqTP2q1KZaFPsBW6c+6NhC5UMWpVONuE+gJj
DP23ugZKX5tivzXDrASDPqtBm/z3OtLQfEpifInYB26FWMj+6om/Ul9Q7Ldm
jCn4qTa/05GOk3WkRxjpSEOrdTHnhmt5bWMujxr8QFtrtamvRbHyYYY5eQZ9
coOOdDdZRxp4GinrSENfBTxrjtCRdhT97diDXswLX+PsZuAbmj2j2OubPF9a
66tW64JattS1aNVK1zI8PDEoOFj7pv6mYaZZqY40+ynkf/0MOtKyLvmnso40
9J/Q1w69OvRgYSE24vvlLs4038lJ4e7lxIznlTcNDqaQNm2odWQktevUScyZ
jurWjTrGxOj5Pu3r/g34Jewfo5eYl6YpL5ytEbHPwqJUR1oj60gbNH+hJQY8
fWWkIw39J8zoQK8MFs7kYM8QZzbxGJyF+vveHcVexzBXGrPKganmoaHUqm1b
ahsVBRxRZ42GuvXuTZp+/ahn//7ilu8T+yReXl4qlwYNVG5eXmoPLy+Nh6+v
xot9Hf+exIBmzRLVLVromoaE6MJr19aDK2HfGP1T4EzY6wN+evDCOQhD3tdd
xhTiHnpCZ8v6rCuNdKShfYgzODhL/ousIY1bg9Y5et5X1Kqh+CwTmgFTTWQ/
FRoRIWGqa1fq2qsX9RowgPoPG0aDR4+moePG0fAJEyh+zBhqx48JZZ8GDGIe
dev27alNhw5i3jme3y46Wvi69ry6NG0qeDfiGubBIqeD/g7O/6GGDu1oY21y
A6bmMn9CD/tqV0mfFXhCz9WvjRsK7cNTHo0pxctd9LefFTrSjQjaw8Db93Vd
lT1CExliHzCFxVxK4KNDly7CP/UdPJiGMJZGTZpE46dOpY9nzqSETz6hhFmz
aBLfxsXHC38WxfiL7t6dOsXGirnUMT17iufH9u1LPdi39Ro4kIa0jRAahuBI
OJs1k+Ma/BD0nDADBjP5DLNeoM2K2Adejrl9a10lHwU/hL1moVnt7Ulp/r70
oHUrymgWJOa/pPF9V7086JKnm5iJhplGpn5/31XzCQhIhJ/ieCW4VDRzKMS6
QaNG0WitVuBo+vz5NPuLL+izpUtp/rJlNO+rr2jul1/ShOnThR8bNHKkwB/m
nI+YOJFGJyTQ2MmTacK0afTxjBkCh7NGDBecB30IOO+H2Z3oTU8SHKkOfc1c
u6c8Pwg53yxHSe8ejwemgBH08KEeCl3XjOZNKat9BL1AP3tMJyoICxXncaCr
Ar1XnKM4zvhTOFbZG3wV+FSzkBDhp+Bz4FsQ6yYyZmYwnoClxStX0rJvv6Wv
N26kld9/T4m8VmzYIPA1fd48mrlwIc36/PPfYG/hihX0eWIiLV61ipasXk1L
164VsQn+BlwI+zBH5FgGrBzg+wy53xRZ5wkzgzbLfgqYOinmN7gLv5QV3JxK
0Bszfy7RxPFU3LUzPQ8KFLoX0CeAvgrwt0TRKC9z8/LzUxs4OuIZeNSw8eNp
Esc74GQR42LZunW0ZssW2rRrF23dt4+26nS0efdu+m7nTlrN9y9fv74Ub99s
3iweu/aHH2jdjz/Shp9+oo07dtD3/NhN/JzL7EPQL3XV20P0DuMMDfpc0n2l
uUPgWxPYVyE+GrR4MEMhWcYU9plv8HPu8WPzcY5L051o+hSp3s64KmkaWKoj
DY1y6ELxZapM/T6/a+YbGKgx5H3d+/QRXBwc6tPFi4WfSfzuO4GPHw8coOTT
pynt4UM6f+sW7Tl2jH4+dIh+2L+ftjDWfmCsbePHbE9Oph2//ip+tvPIEdp9
9CjtOX5cPH7fyZN0r3WY0GjKhr44f/5PggLoKXOj5+x78hgnw2QNTdQ2hQ4P
x8d9sjb5RWj+Qkean5ujbkKF0DVEXww076GlKe/jYH8QOtK5/Ljr3u7Kno4J
jHM/DTCF+NePOfi4KVPoE45piHsrN20Svgb+af+pU3T97l2C5RUU0Mnr1yk5
JYX2MmZ0/LMDZ8/Sr+fO0eGLF+lYaiqd4p+n3LxJqffvU1pmJqU/fUp38/Ko
cHg8lcDH4HwDNHuhoYBzDujJY2x8UstZnIdA/gf+hXPMmMWHXO9OQBN6Fh5K
he0iqJgxVNKxndQbgznF4FjQJ5c1xNDb/jzAj655uyv5oAmsRatWGtQ74avA
qabMmUMLli8XcQ0xDH4K/gZ4uZeTI3CVX1hI59LT6fjVq3TowgXKKi6mXL7/
Ka/n+DmvF7wKeBXyKuZVQrJNnSxpJwAHmAPbvYuY0yEwERZCs2s4iRi4wkjv
F7oLVzj2ZTOeXjAuaexo6Xfg+YiBmLmGvnZoyBjpSEO37ribMk/BFBYYGKju
xL6qN3N15G/gVEvXrKFvt20Tce0w4wZ+5/zt25T54oXACPBz+d49SuF4eOLa
NSpkXOUx1nL555nPn1NGbi6lZ2eTnv3U9UeP6ArHzsvsty7xc54O7C/pE+Kz
N+gTBgWULmh4oF6F+ifq6Ac4Bp6W9X5zoccK/EBLevwYyddBq3zKJKLYGCLM
KzLSkVZ6+0xrXXr00PcbNowmzpghcjn4KnDyXzi2PWB8ZOfnU1ZBgcHjCJ90
nTFzKSODzty4QecYcxf56wscJ8/fuSMwiPuAO6yzjEs8DiuXYx5iVBHzH/Dr
5+BY/r767Ca+epxzSJDnCQFX2JNJljUOMUc9F2eZgR9wdMTO6EiiyLYSx4oI
k3qRjfxVqpeHxtTv7btsHbt21aD+hDonagPfJCWJvO/o5ctUUFgosFRYUiIW
4tlDxllaVpbgTsDK8StXhN8C5xLciuPjr+fP649euKA/cv687ueDBxOZ3ydu
3LlTo4vtqklu0ECNOVLr/iD/H2FnqzXMqdpqjCtvzOrzpSJgC+e5kAsCQ3+k
I80+kHMDZf+mHFj/YcN0qC0AV6gdgKuDj19h7Nx79owymHcL7s1f6znOAVeI
a0cuX9ZPnDlTM2/ZMvXMefNUf8drme6gEnq/qJnul+MgNFnv+3mjZ0/4utJY
+nsdacbUM6Wvr9xYdGysCv4KcXDV5s2idrD3xAk6fOmS4FfA0FXmSoh/WOBM
p9LS9KuTktRv4vXMdXLQos6OfBB7NpjNdwdzkplnlWr9gpsZ60jzyvLz0b6J
16PY61tsXJxq+vz5etTFwa92Hj4sageIccj/wKHA18GjOPbpk3Q61Zt8PZjJ
t6G2qw4a5aiJYt8PM/OyZY1y+K1iuZ8dOtLKDIXybZNnz9auYO6O+vquI0cE
f+d4J/jT0dRUPeNNW5avZ4mLvUqaXVtfd97DTZ/m7aG/7eOpv+Pjqbvh7Zmo
1BIqlo1JSFDNWbJEs3zjRs2apCTBoUz9mhRTTDHFFFPs77L/BhCCL/M=
               "], {{0, 0}, {150, 110}}, {0, 255}, ColorFunction -> 
               RGBColor], {
              Method -> {"ShrinkWrap" -> True}, ImageSize -> 165, 
               ImageSize -> {150, 110}, PlotRange -> {{0, 150}, {0, 110}}}], 
             ImageSizeAction -> "ShrinkToFit", ImageSize -> 400], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show bonds only", "input" -> 
         "3DStructure:ChemicalData__Show bonds only"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show space filling model", "input" -> 
         "3DStructure:ChemicalData__Show space filling model"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Basic properties", "scanner" -> "Data", "id" -> 
     "Basic:ChemicalData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"SOLV-DB"}], "\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n    ", 
         XMLElement["datasource", {}, {"CRCHandbook"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"SulfuricAcid\"], \
{EntityProperty[\"Chemical\", \"MolarMass\"], EntityProperty[\"Chemical\", \
\"Phase\"], EntityProperty[\"Chemical\", \"MeltingPoint\"], \
EntityProperty[\"Chemical\", \"BoilingPoint\"], EntityProperty[\"Chemical\", \
\"Density\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"molar mass\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["98.07", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "98.07", "SRString" -> "98.07"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"mol\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"phase\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"liquid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Liquid"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"melting point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["10.371", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "10.371", "SRString" -> "10.371"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"boiling point\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["279.6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "279.6", "SRString" -> "279.6"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.8305", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.8305", "SRString" -> "1.8305"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"solubility in water\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\"very soluble\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step", "input" -> 
         "Basic:ChemicalData__Step-by-step", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {
            "short" -> "g/cm^3", "long" -> "grams per cubic centimeter"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "g/mol", "long" -> "grams per mole"}, {}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Liquid properties (at STP)", "scanner" -> "Data", "id" -> 
     "LiquidProperties:ChemicalData", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CRCHandbook"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.8305", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.8305", "SRString" -> "1.8305"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"g\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["\"cm\"", "3"]}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"vapor pressure\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"6", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "-5"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6", "\[Times]", 
                    SuperscriptBox["10", "-5"]}], "SRString" -> 
                    "6 times 10 to the negative 5"], SyntaxForm -> CenterDot],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"mmHg\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"dynamic viscosity\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.021", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.021", "SRString" -> "0.021"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"Pa\"", "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", "\"s\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"at \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["25", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "25", "SRString" -> "25"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"surface tension\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.0735", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.0735", "SRString" -> "0.0735"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{
                    "\"N\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"m\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"refractive index\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.41827", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.41827", "SRString" -> "1.41827"]]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "1.41827"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Thermodynamic properties", "scanner" -> "Data", "id" -> 
     "Thermodynamics:ChemicalData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n    ", 
         XMLElement["microsource", {}, {"ElementData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n    ", 
         XMLElement["datasource", {}, {"WebElements"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"specific heat capacity \"", 
                    SubscriptBox["c", "p"]}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"liquid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Liquid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.416", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.416", "SRString" -> "1.416"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"J\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"\"(\"", "\[InvisibleSpace]", "\"g\"", 
                    "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", "\"K\"", "\[InvisibleSpace]", 
                    "\")\""}]}], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"specific free energy of formation \"", 
                    SubscriptBox["\"\[CapitalDelta]\"", "f"], "G", 
                    "\"\[Degree]\""}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"liquid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Liquid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["7.036", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "7.036", "SRString" -> "7.036"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    TemplateBox[{"\"specific heat of formation \"", 
                    SubscriptBox["\"\[CapitalDelta]\"", "f"], "H", 
                    "\"\[Degree]\""}, "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"aqueous\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Aqueous"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["9.269", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "9.269", "SRString" -> "9.269"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"\[SpanFromAbove]", 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"liquid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Liquid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["8.3", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8.3", "SRString" -> "8.3"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    
                    TemplateBox[{
                    "\"specific entropy \"", "S", "\"\[Degree]\""}, 
                    "RowDefault"], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"aqueous\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Aqueous"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.2039", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.2039", "SRString" -> "0.2039"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"J\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"\"(\"", "\[InvisibleSpace]", "\"g\"", 
                    "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", "\"K\"", "\[InvisibleSpace]", 
                    "\")\""}]}], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"\[SpanFromAbove]", 
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"liquid\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"MatterPhase", "Liquid"}]], Identity], 
                    TraditionalForm], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.601", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.601", "SRString" -> "1.601"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"J\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", 
                    
                    RowBox[{"\"(\"", "\[InvisibleSpace]", "\"g\"", 
                    "\[InvisibleSpace]", "\"\[ThinSpace]\"", 
                    "\[InvisibleSpace]", "\"K\"", "\[InvisibleSpace]", 
                    "\")\""}]}], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    PaneBox[
                    TagBox["\"specific heat of vaporization\"", Identity], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.57", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.57", "SRString" -> "0.57"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[SpanFromLeft]"}, {
                    TagBox[
                    PaneBox[
                    TagBox["\"specific heat of fusion\"", Identity], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.1092", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.1092", "SRString" -> "0.1092"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"kJ\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"g\""}], FontFamily -> "Roboto", 
                    FontSize -> Smaller]}], Identity], #& , SyntaxForm -> 
                    Dot], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[SpanFromLeft]"}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at STP\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "Thermodynamics:ChemicalData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "3"}, {
           XMLElement[
           "unit", {
            "short" -> "J/(g K)", "long" -> "joules per gram kelvin"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "J/(g K)", "long" -> 
             "joules per gram kelvin difference"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "kJ/g", "long" -> "kilojoules per gram"}, {}]}]}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Chemical identifiers", "scanner" -> "Data", "id" -> 
     "ChemicalIdentifiers:ChemicalData", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"PubChem"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"SulfuricAcid\"], \
{EntityProperty[\"Chemical\", \"CASNumber\"], EntityProperty[\"Chemical\", \
\"BeilsteinNumber\"], EntityProperty[\"Chemical\", \"CIDNumber\"], \
EntityProperty[\"Chemical\", \"SMILES\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"CAS number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"7664-93-9\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"Beilstein number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"2037554\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem CID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"1118\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"PubChem SID number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"24859176\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"SMILES identifier\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"OS(=O)(=O)O\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ChemicalIdentifiers:ChemicalData__More"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "NFPA label", "scanner" -> "Data", "id" -> 
     "NFPALabel:ChemicalData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Chemical\", \"SulfuricAcid\"][EntityProperty[\"Chemical\", \
\"NFPALabel\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{
                InsetBox[
                 GraphicsBox[{
                   EdgeForm[{
                    Thickness[0.009], 
                    GrayLevel[0]}], 
                   RGBColor[1, 0.87, 0], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{
                    0.7071067811865475, -0.7071067811865475}, {
                    0.7071067811865475, 0.7071067811865475}}, {0, 0}}], 
                   RGBColor[0.9, 0.25, 0.1], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {
                    0, -1}], {{{-0.7071067811865475, -0.7071067811865475}, {
                    0.7071067811865475, -0.7071067811865475}}, {0, 0}}], 
                   RGBColor[0.1, 0.37, 0.9], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{-0.7071067811865475, 
                    0.7071067811865475}, {-0.7071067811865475, \
-0.7071067811865475}}, {0, 0}}], 
                   GrayLevel[1], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    RectangleBox[{0, 0}], {0, -1}], {{{0.7071067811865475, 
                    0.7071067811865475}, {-0.7071067811865475, 
                    0.7071067811865475}}, {0, 0}}], 
                   GrayLevel[0], 
                   InsetBox[
                    FormBox["2", TraditionalForm], 
                    
                    NCache[{2^Rational[-1, 2], -0.05}, {
                    0.7071067811865475, -0.05}]], 
                   GrayLevel[1], 
                   InsetBox[
                    FormBox["0", TraditionalForm], {0, 0.6821067811865474}], 
                   InsetBox[
                    FormBox["3", TraditionalForm], 
                    
                    NCache[{-2^
                    Rational[-1, 2], -0.05}, {-0.7071067811865475, -0.05}]], 
                   GrayLevel[0], 
                   InsetBox[
                    FormBox[
                    StyleBox[
                    StyleBox[
                    "\"W\"", 
                    FontVariations -> {
                    CalculateUtilities`DataPaclets`\
CalculateExpandedChemicalData`Private`StrikeThrough -> True}, StripOnInput -> 
                    False], FontSize -> Scaled[0.18], StripOnInput -> False], 
                    TraditionalForm], {0, -0.7571067811865475}]}, 
                  PlotRange -> {{-1.5, 1.5}, {-1.5, 1.5}}, ImageSize -> 167, 
                  BaseStyle -> {
                   FontFamily -> "Times", FontSize -> Scaled[0.24]}, 
                  BaselinePosition -> Center], {87.675, -87.675}, 
                 ImageScaled[{0.5, 0.5}], {167, 167.}]}}, {}}, {
             ImageSize -> {40}, ImageSize -> {187.35, 187.35}, 
              PlotRangePadding -> {6, 5}, ContentSelectable -> True}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Table", "input" -> 
         "NFPALabel:ChemicalData__Table"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Toxicity properties", "scanner" -> "Data", "id" -> 
     "ToxicityProperties:ChemicalData", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"MacmillansChemicalAndPhysicalData"}], 
         "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Chemical\", \"SulfuricAcid\"], \
{EntityProperty[\"Chemical\", \"OdorType\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"odor\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"odorless\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"threshold limit value\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.05", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.05", "SRString" -> "0.05"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"ppmv\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ToxicityProperties:ChemicalData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "1"}, {
           XMLElement[
           "unit", {
            "short" -> "ppmv", "long" -> 
             "parts per million by volume"}, {}]}]}]}], 
     XMLElement["definitions", {"count" -> "1"}, {
       XMLElement[
       "definition", {
        "word" -> "threshold limit value", "desc" -> 
         "the allowable airborne concentration in parts per million by \
volume, the level that an average person can be repeatedly exposed to without \
adverse effects"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Ion equivalents", "scanner" -> "Data", "id" -> 
     "IonProperties:ChemicalData", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n    ", 
         XMLElement["microsource", {}, {"ChemicalIntermediateData"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TemplateBox[{
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\"H\""}, "RowDefault"], 
                    TemplateBox[{"\"\"", "\"+\""}, "RowDefault"]}, 
                    "Superscript", SyntaxForm -> SuperscriptBox], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\" \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"hydrogen cation\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], "2"}, {
                 TemplateBox[{
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\"S\"", 
                    SubscriptBox["\"O\"", "4"]}, "RowDefault"], 
                    TemplateBox[{"\"2\"", "\"-\""}, "RowDefault"]}, 
                    "Superscript", SyntaxForm -> SuperscriptBox], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\" \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"sulfate anion\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], "1"}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, "."}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "3"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
ChemicalDataSourceInformationNotes.html", "text" -> "Chemical data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
ChemicalIntermediateDataSourceInformationNotes.html", "text" -> 
        "Chemical intermediate data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
ElementDataSourceInformationNotes.html", "text" -> "Element data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "Chemical,ChemicalIntermediate,Element",
     "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.5060000000000002",
     "parsetiming" -> "0.328", "parsetimedout" -> "false", "recalculate" -> 
    "", "id" -> "MSP9791h525ff24bc4c3b800003ig34348f45836h2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa9801h525ff24bc4c3b800004096ga9338d651521494138648170584556", "version" -> 
    "2.6", "inputstring" -> "H2SO4"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 20, 57, 47.2286837`9.426780702587804}, "Line" -> 
    77, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = "H2SO4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{660., {852., 858.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.880288667355304*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"a71bfc6e-5dab-447e-be3c-c2c635e4b13f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", "\"\<Venus, Earth, Mars\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8802889501260324`*^9, 3.880288960184263*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"404c75db-df3a-4108-b790-dbe138c0567e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Venus, Earth, Mars", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Entity[\"Planet\", \"Venus\"], Entity[\"Planet\", \"Earth\"], \
Entity[\"Planet\", \"Mars\"]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                FormBox[
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"planet\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
                StyleBox[
                 RowBox[{"\[NoBreak]", 
                   PaneBox[
                   "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                FormBox[
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"planet\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
                StyleBox[
                 RowBox[{"\[NoBreak]", 
                   PaneBox[
                   "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                FormBox[
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"planet\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm]}],
               PolynomialForm[#, TraditionalOrder -> False]& ], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Orbital properties", "scanner" -> "Data", "id" -> 
     "BasicPlanetOrbitalPropertiesEntityTriggered:PlanetData", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, \
{EntityProperty[\"Planet\", \"DistanceFromEarth\"], \
EntityProperty[\"Planet\", \"AverageDistanceFromEarth\"], \
EntityProperty[\"Planet\", \"DistanceFromSun\"], EntityProperty[\"Planet\", \
\"Apoapsis\"], EntityProperty[\"Planet\", \"Periapsis\"], \
EntityProperty[\"Planet\", \"OrbitPeriod\"]}, \
\"PropertyEntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"current distance from Earth\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.645", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.645", "SRString" -> "1.645"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["13.68", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "13.68", "SRString" -> "13.68"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light seconds\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.5723", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.5723", "SRString" -> "0.5723"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4.76", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.76", "SRString" -> "4.76"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"average distance from Earth\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.14", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.14", "SRString" -> "1.14"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["9.45", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "9.45", "SRString" -> "9.45"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0", "SRString" -> "0"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light seconds\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.7", "SRString" -> "1.7"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["14.1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "14.1", "SRString" -> "14.1"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"current distance from Sun\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.7281", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.7281", "SRString" -> "0.7281"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6.055", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6.055", "SRString" -> "6.055"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.9841", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.9841", "SRString" -> "0.9841"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["8.184", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8.184", "SRString" -> "8.184"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.547", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.547", "SRString" -> "1.547"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["12.86", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "12.86", "SRString" -> "12.86"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"light minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"largest distance from Sun\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.0894185", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.0894185", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "1.0894185 times 10 to the 8"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.7282313", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.7282313", "SRString" -> "0.7282313"]],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.52097701", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.52097701", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "1.52097701 times 10 to the 8"], SyntaxForm -> CenterDot],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.01671033", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.01671033", "SRString" -> 
                    "1.01671033"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"2.4922873", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.4922873", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "2.4922873 times 10 to the 8"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.66599116", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.66599116", "SRString" -> 
                    "1.66599116"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"smallest distance from Sun\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.07476", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.07476", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "1.07476 times 10 to the 8"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.7184327", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.7184327", "SRString" -> "0.7184327"]],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.47098074", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.47098074", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "1.47098074 times 10 to the 8"], SyntaxForm -> CenterDot],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.98328989", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.98328989", "SRString" -> 
                    "0.98328989"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"2.06644545", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "8"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.06644545", "\[Times]", 
                    SuperscriptBox["10", "8"]}], "SRString" -> 
                    "2.06644545 times 10 to the 8"], SyntaxForm -> CenterDot],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.38133346", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.38133346", "SRString" -> 
                    "1.38133346"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"orbital period\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["224.7008", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "224.7008", "SRString" -> "224.7008"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"days\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["365.25636", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "365.25636", "SRString" -> "365.25636"]],
                     "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"days\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.8808476", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.8808476", "SRString" -> "1.8808476"]],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"a\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "BasicPlanetOrbitalPropertiesEntityTriggered:PlanetData__Show \
non-metric"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "BasicPlanetOrbitalPropertiesEntityTriggered:PlanetData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "3"}, {
           XMLElement["unit", {"short" -> "a", "long" -> "Julian years"}, {}], 
           XMLElement[
           "unit", {"short" -> "au", "long" -> "astronomical units"}, {}], 
           XMLElement[
           "unit", {"short" -> "km", "long" -> "kilometers"}, {}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {
    "title" -> "Physical properties", "scanner" -> "Data", "id" -> 
     "BasicPlanetPhysicalProperties:PlanetData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, \
{EntityProperty[\"Planet\", \"EquatorialRadius\"], EntityProperty[\"Planet\", \
\"Mass\"], EntityProperty[\"Planet\", \"RotationPeriod\"], \
EntityProperty[\"Planet\", \"MoonCount\"], EntityProperty[\"Planet\", \
\"Age\"]}, \"PropertyEntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"equatorial radius\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6050", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6050", "SRString" -> "6050"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.949", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.949", "SRString" -> "0.949"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    StyleBox["\"a\"", Italic, StripOnInput -> False], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["6378.137", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "6378.137", "SRString" -> "6378.137"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3396", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "3396", "SRString" -> "3396"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.5325", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.5325", "SRString" -> "0.5325"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    StyleBox["\"a\"", Italic, StripOnInput -> False], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"mass\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"4.867", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "24"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"4.867", "\[Times]", 
                    SuperscriptBox["10", "24"]}], "SRString" -> 
                    "4.867 times 10 to the 24"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"kg\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.815", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.815", "SRString" -> "0.815"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    SubscriptBox[
                    StyleBox["\"M\"", Italic, StripOnInput -> False], 
                    "\"\[Earth]\""], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5.97", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "24"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"5.97", "\[Times]", 
                    SuperscriptBox["10", "24"]}], "SRString" -> 
                    "5.97 times 10 to the 24"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"kg\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"6.417", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "23"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6.417", "\[Times]", 
                    SuperscriptBox["10", "23"]}], "SRString" -> 
                    "6.417 times 10 to the 23"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"kg\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False]}, {
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.1074", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.1074", "SRString" -> "0.1074"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    SubscriptBox[
                    StyleBox["\"M\"", Italic, StripOnInput -> False], 
                    "\"\[Earth]\""], FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   BaselinePosition -> 1, DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"rotation period\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["243.018", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "243.018", "SRString" -> "243.018"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"days\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"sidereal, retrograde\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["23.934472", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "23.934472", "SRString" -> "23.934472"]],
                     "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"h\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"sidereal\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["24.6229622", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "24.6229622", "SRString" -> 
                    "24.6229622"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"h\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"sidereal\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"number of moons\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    RowBox[{
                    TagBox["0", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"moons\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"moon\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"moons\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"age\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.5", "SRString" -> "4.5"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"billion\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4.54", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.54", "SRString" -> "4.54"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"billion\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.5", "SRString" -> "4.5"]], 
                    "\[ThickSpace]", 
                    TagBox[
                    StyleBox[
                    "\"billion\"", {
                    ShowStringCharacters -> False, FontFamily -> "Roboto", 
                    FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 1000000000& , AutoDelete -> True]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"yr\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "BasicPlanetPhysicalProperties:PlanetData__Show non-metric"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "BasicPlanetPhysicalProperties:PlanetData__More"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "6"}, {
           XMLElement[
           "unit", {"short" -> "a", "long" -> "Earth equatorial radii"}, {}], 
           XMLElement["unit", {"short" -> "h", "long" -> "hours"}, {}], 
           XMLElement["unit", {"short" -> "kg", "long" -> "kilograms"}, {}], 
           XMLElement["unit", {"short" -> "km", "long" -> "kilometers"}, {}], 
           XMLElement[
           "unit", {"short" -> "M_\[Earth]", "long" -> "Earth masses"}, {}], 
           XMLElement[
           "unit", {"short" -> "yr", "long" -> "years"}, {}]}]}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Symbols", "scanner" -> "Data", "id" -> 
     "PlanetGlyph:PlanetData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 StyleBox[
                  TagBox[
                   TagBox["\"\[Venus]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`CharacterData, "U+2640"}]], 
                   Identity], FontFamily -> "Code2000"], 
                 StyleBox[
                  TagBox[
                   TagBox["\"\[CirclePlus]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`CharacterData, "U+2295"}]], 
                   Identity], FontFamily -> "Code2000"], 
                 StyleBox[
                  TagBox[
                   TagBox["\"\[Mars]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`CharacterData, "U+2642"}]], 
                   Identity], FontFamily -> "Code2000"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Known satellites", "scanner" -> "Data", "id" -> 
     "NaturalSatellites:PlanetData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Venus"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, EntityProperty[\
\"Planet\", \"Satellites\"], \"EntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"none\"", "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              $CellContext`TagBoxWrapper["Missing" -> "None"]], 
             TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Earth"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, EntityProperty[\
\"Planet\", \"Satellites\"], \"EntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              TagBox["\"Moon\"", 
               $CellContext`TagBoxWrapper[
               "Entity" -> {PlanetaryMoonData, "Moon"}]], Identity], 
             TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Mars"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, EntityProperty[\
\"Planet\", \"Satellites\"], \"EntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"Phobos\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {PlanetaryMoonData, "Phobos"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Deimos\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {PlanetaryMoonData, "Deimos"}]], Identity], 
                TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Atmosphere", "scanner" -> "Data", "id" -> 
     "PlanetAtmospheres:PlanetData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, \
{EntityProperty[\"Planet\", \"AtmosphericPressure\"], EntityProperty[\"Planet\
\", \"MinimumTemperature\"], EntityProperty[\"Planet\", \
\"AverageTemperature\"], EntityProperty[\"Planet\", \"MaximumTemperature\"]}, \
\"PropertyEntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"atmospheric pressure\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["90", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "90", "SRString" -> "90"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"bar\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.01325", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.01325", "SRString" -> "1.01325"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"bar\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.0064", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.0064", "SRString" -> "0.0064"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"bar\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"minimum temperature\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["460", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "460", "SRString" -> "460"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["89.3", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "89.3", "SRString" -> "89.3"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["87", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "87", "SRString" -> "87"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"average temperature\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["460", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "460", "SRString" -> "460"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["14", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "14", "SRString" -> "14"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["47", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "47", "SRString" -> "47"]]}], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"maximum temperature\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["460", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "460", "SRString" -> "460"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["71", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "71", "SRString" -> "71"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    TagBox["5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "5", "SRString" -> "5"]]}], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", FontFamily -> "Roboto", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"at surface\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["subpod", {"title" -> "Major constituents"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"ChemicalData"}], "\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"\"\"", 
                 TagBox[
                  TagBox["\"Venus\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlanetData, "Venus"}]], Identity], 
                 TagBox[
                  TagBox["\"Earth\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlanetData, "Earth"}]], Identity], 
                 TagBox[
                  TagBox["\"Mars\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {PlanetData, "Mars"}]], Identity]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"carbon dioxide\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "CarbonDioxide"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "CarbonDioxide", "SpokenName"]]], Identity],
                     "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TemplateBox[{"\"C\"", 
                    SubscriptBox["\"O\"", "2"]}, "RowDefault"], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["96.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "96.5", "SRString" -> "96.5"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.038", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.038", "SRString" -> "0.038"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["95.32", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "95.32", "SRString" -> "95.32"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"nitrogen\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "MolecularNitrogen"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "MolecularNitrogen", "SpokenName"]]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    SubscriptBox["\"N\"", "2"], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "3.5", "SRString" -> "3.5"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["78.084", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "78.084", "SRString" -> "78.084"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.7", "SRString" -> "2.7"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"oxygen\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "MolecularOxygen"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "MolecularOxygen", "SpokenName"]]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    SubscriptBox["\"O\"", "2"], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 FormBox[
                  TagBox["\"\"", 
                   $CellContext`TagBoxWrapper["Missing" -> "NotAvailable"]], 
                  TraditionalForm], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["20.948", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20.948", "SRString" -> "20.948"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.13", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.13", "SRString" -> "0.13"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"argon\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Argon"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Argon", "SpokenName"]]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    "\"Ar\"", ScriptBaselineShifts -> {0.5, 0.75}, 
                    StripOnInput -> False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.007", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.007", "SRString" -> "0.007"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.934", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.934", "SRString" -> "0.934"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.6", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.6", "SRString" -> "1.6"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TagBox["\"water\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {ChemicalData, "Water"}, 
                    "SRString" :> $CellContext`GeneralData[
                    ChemicalData, "Water", "SpokenName"]]], Identity], 
                    "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TemplateBox[{
                    SubscriptBox["\"H\"", "2"], "\"O\""}, "RowDefault"], 
                    ScriptBaselineShifts -> {0.5, 0.75}, StripOnInput -> 
                    False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.002", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.002", "SRString" -> "0.002"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1", "SRString" -> "1"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.021", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.021", "SRString" -> "0.021"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, 
                 "Rows" -> {{Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             TagBox[
              Cell[
               TextData[{
                 StyleBox[
                  Cell[
                   BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"components may not add up to 100% due to uncertainty, \
variability, and round-off\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                  FontFamily -> "Roboto", FontSize -> 10, 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}]], 
              $CellContext`TagBoxWrapper["Label"]], 
             BaseStyle -> {LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Use Fahrenheit", "input" -> 
         "PlanetAtmospheres:PlanetData__Use Fahrenheit"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show minor constituents", "input" -> 
         "PlanetAtmospheres:PlanetData__Show minor constituents"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Physical size comparison", "scanner" -> "Data", "id" -> 
     "SizeComparison:PlanetData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 GraphicsBox[{
                   RGBColor[0.85, 0.85, 0.85], 
                   EdgeForm[
                    GrayLevel[0.5]], 
                   DiskBox[{0, 0}, 6.0518*^6]}, ImageSize -> 
                  104.48863349285509`], 
                 GraphicsBox[{
                   RGBColor[0.85, 0.85, 0.85], 
                   EdgeForm[
                    GrayLevel[0.5]], 
                   DiskBox[{0, 0}, 6.371008766666667*^6]}, ImageSize -> 110.], 
                 GraphicsBox[{
                   RGBColor[0.85, 0.85, 0.85], 
                   EdgeForm[
                    GrayLevel[0.5]], 
                   DiskBox[{0, 0}, 3.3895266666666665`*^6]}, ImageSize -> 
                  58.522589905084786`], "\"\""}, {
                 TagBox[
                  GridBox[{{
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm]], TextAlignment -> Left], 
                    TextCell[
                    $CellContext`GrayText[
                    $CellContext`PopupLink[
                    $CellContext`TaggedForm[
                    "Venus", "Entity" -> {PlanetData, "Venus"}], "Venus", 
                    "Planet" -> "Venus"], BaseStyle -> "Caption"], 
                    TextAlignment -> Left]]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm]], TextAlignment -> Left], 
                    TextCell[
                    $CellContext`GrayText[
                    $CellContext`PopupLink[
                    $CellContext`TaggedForm[
                    "Earth", "Entity" -> {PlanetData, "Earth"}], "Earth", 
                    "Planet" -> "Earth"], BaseStyle -> "Caption"], 
                    TextAlignment -> Left]]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], 
                 TagBox[
                  GridBox[{{
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    StyleBox[
                    TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], TraditionalForm]], TextAlignment -> Left], 
                    TextCell[
                    $CellContext`GrayText[
                    $CellContext`PopupLink[
                    $CellContext`TaggedForm[
                    "Mars", "Entity" -> {PlanetData, "Mars"}], "Mars", 
                    "Planet" -> "Mars"], BaseStyle -> "Caption"], 
                    TextAlignment -> Left]]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   DefaultBaseStyle -> "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"], "\"\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Bottom, Top}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{3, Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{2}}}, FrameStyle -> 
               GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Current solar system configuration", "scanner" -> 
     "Data", "id" -> "SolarSystemConfiguration:PlanetData", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n    ", 
         XMLElement["microsource", {}, {"MinorPlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"NationalSpaceScienceDataCenter"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{{
                 EdgeForm[
                  Directive[
                   Thickness[0.007], 
                   GrayLevel[
                    NCache[
                    Rational[191, 255], 0.7490196078431373]]]], {}, 
                 EdgeForm[
                  Directive[
                   AbsoluteThickness[2], 
                   RGBColor[1, 0.8, 0.6]]], {
                  AbsoluteThickness[2], 
                  RGBColor[1, 0.8, 0.6], 
                  
                  LineBox[{{-2.8327291277419993`, -2.8327291277419993`}, {
                   2.8327291277419993`, -2.8327291277419993`}, {
                   2.8327291277419993`, 
                   2.8327291277419993`}, {-2.8327291277419993`, 
                   2.8327291277419993`}, {-2.8327291277419993`, \
-2.8327291277419993`}}]}}, 
                AbsoluteThickness[1], 
                GrayLevel[0.85], {{
                  LineBox[CompressedData["
1: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
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1:eJxdVnk01AsbnlsoXUJokWspWZISXUul1xJFUnHrs2UrtF0lkqUr3KKiXJLt
aiEVNSJa5NJLMiqUNctMw8yYzcz8fkNxI/H5/v3+eM57nvOc95znj+ec59EN
OukePI9CoRTO4X/Xqy6oYiDqA+xLNTELKCTx9JtNsUeuvYMoSdh4Co/Ew49D
ClQK3sD4wN+/3VeS4srcLOF1B4R03/ixljVSPHVl0wIVh2fAsgpaSv1Vit1D
Vdc1ztyHrwK5c7YgxYR0bQPh4GmYHxToc9Feip68Zbt21BUiaa5xLGZOrykb
ZwTyK7GPUGL8YiFFZt/blU6CWgwo+BwUpS9FG41nDY/DGjH9XPC6y8pS1GX3
EL6Bb3GfeUN9nYDEklUzWdYubSjjIbCWLZ7j7xe6PFTtwPG1BcPzPUhke3y3
DIzrQvd3WTX94wR6j+667EbvwSCXHUmP0gh8MsxyTDLrw3n3AuuLlhEYWbOH
r5QwgH3GoQ8k2RKMzjB9vriRgT5bImVxkQRDEmX086eY+PsOU1O3CPGc76pl
wswhXGA+QXxqF6Ejw7ZbUshC+4wth/JWi/CtX+NuaSkb9XRsyf7jI2iknbP7
0kMOuscprWSVCpGhcO7K3rvD6Pd48Oz3zwKMT8po513nIuNLb2LMQgE+61xh
KI7j4cn0XQnlRnyMlk5MyfjwUW33mcPjdjyMD+mw6jcVILW5/v79fVys8aTH
qP0QYPja8lWrvIZRrldXJwSFKPc4ePSdJwctvf3PJp4dQU7uV/v5+9g4Rbfv
+mWNCNUVQiws7FnYekObOtEswsSA4oq2dUO4SW3qZYu/GH/8/dfhsFVMbJPy
FQPFYlyzED2bBunIW19tdP53Cfpeiim5kNmPJsMD6l/YEnT/3CTO2tKLfSnn
z1xzJXBZgXUGm96NTv+ycg0eErjz/IOog5GdWDvx6mredwKdnE9mfZNtx0vl
QpM3tiTWbzDe6LG6BSuPThunxZAot+i6YocpDTnx2lr0eyR6V09T/SwaMN6R
nXy7icQkfYod73g1dp1ZxWjtI1FQ4eyhTaNi+57ZVJ9BEhPk9A688szAmbRP
szv753JS8S1Znp4NrVLnmzk0Er9yllnePF8Ossq7m9wekPhpYslPs/UvYfjx
lo7YOBKdgrpdTOkNYM+YVDRxmPPHFSXN+0CDgOfaz+JmCAw3360x70UL+Kaa
DyeWEWh08VK4tks78FvGM/z3Esh8zSnlPemED/KNidZ8Cc4ewmKOSg+4/lD+
1fq0BDsmug7pH+2FvF0K9LRRMVIcm71fP++HvckHt4UGi7FlNLX1wyQduDc0
n8y2iXC7pq1B6EYm6MVMTWQYi1A70Lx8//ohCP9WauIXP4I2q6m6ATYsuFPw
V1UJTYg3cjmSUEc2jPHeKdTICJGStJIu48QB9/AUGtNKgIZc3Vsd24Yh0KHf
M/QQH+PHXX86sYELPc4jciUXeFi8H34+s4wH0zF1dd8KuPjiULBexgQPTr+O
Hn1KHcadbzS3HGnlg/u5XTFbnnIwlHeWdy9XAM0FM0eJKjaymtNTJr2FsDLM
hjSjsuZyfeDoUtURSF5+f3X4zSFkOwwxq+pH4OK5Qx8NlAexz0A54OohERg2
Lzyp0s/A/LyS4qDvIki6fmw2PnsAp7NL6/5NEUNWrh37N+c+bA2eXKcuL4FH
gQ8fxI314G/mrt9T4iVw7Khn5WBmFxbstG/VFUigQOw0cMq4AxPYT6XVjgTQ
ry/X3B7bhj6Ra88a5hDwJX+E25HxFhM+Hd+8l0EA74Lmwrjbjfj11iZCTZ0E
bUdKQ4hLHRoWTRoF2JEQaXmHyXGuwhbvhnCdQBIYm1Pt65OKcKxmkY1zJAkJ
trvedAYfBaUy/N4ZS4Jnmm1BYfk94O/duOKfOb2GckU2fegpvKRp/pgfRALT
+OD2CNYreK9bveiZPQl1DrP7HY+/AQN2882BpSQU/qzz55eD78BH85VsMpMA
Q9edRu1OH0BxKze+LY+AI4MmWeMZHTCrmmfUupOAoiM6SdTJLvCtzJgtFElA
Qy68K8/rE5ww394ckSSB8Em5v9oq+kDhmp/scUUJbPoYudFnZgDYaofFz9LE
YHV/P8Xb7jME64W7pFDEoJ9tdIobPQhnTU3OLD0qAqsYWu3iziFQ0fxifps2
AvdCPGJUWSxwjbUqCVwxAobCnjF1IRvWy9tsKgoUwuXS0rEyIQd8DysElN4W
wNacaxui2MNwJIdR29jFB6ZC8RmFLi7wGN00uxkeqB9c16byDw9ionc2ndXm
QV+s/J21+XzQsjhdWmfJBaaU83nmpACeV9SJwnYMgwZHorV5qxDiVKmhI24c
CAnc1JQ6IwTlnCCLTDc25AyHaz54PgKSxNGUFicWeIfsj3Y4LALt8aC4Gcsh
WKdjtk9zgRiWXrcXGTsyIeuWgv/oLTGohF0hZhQZYBI3VZlsLAHrgWr2/pZ+
cHr5/kMxVQKnvCPM1ON74WqYpGb5KgJCyjFqjUEPWC3J1HiaSoBxmPnKiOZO
uJ/41Wa3kADffYUUwr8dNBM7zHAzCVUWnVuXcFpAYD3dKTxPgqBLyzFyigZL
vi7ueFJNwvrHybpjC16Dg7xZI4VLguzLocRZjRogQ6duBM2TQmcY/4ihRgWs
SMi3nfxZCsp/mjrtcMyF5ZJLubZKUkio+EPtNCMdy1Mj3S0VpPC0uSyCokLF
bJv1hcy5/4elxRFpKtUYnO9/LJJHgkPvjRN+8g243dot6k4NCVqvhiyUZGhY
FKJQ5Z5EQq7dtzDWxHustzXzLrQhwTndS441+BFr1Z0uPxAToF51jX/NrxN3
HFhoeTGdgPdSofYBWjeuz+rR99cnQJTRpOGh34vUlNUDfk8kUKc30H/jj36c
7NFKqDSVgPh0W/vGFjpWKJ/ipBWL4YV2pv22xUx01NlwYI2iGJavuesmWjWE
F+YrFrw4JgL1aItjV61Y2JFU2/ln3QiYby5n5OxgI8XgrucH2RFILeeV3N4z
17vhjCeDDkKYyNXK3rp3GCu/5x2XiRaA1rSel7wzFxvaRD/SivgQqbC39q41
D3/tnn7U1siD/BP2NKouH31l2oO0GFwoiz0y+JYiwE7X1OwB0TAAXXvi9icB
Vsr5aQV+4cDBH7GFn4uEaGCgoqT2hQ29zEz7jcEjGPdtT5aniAVUoZee2y8i
5BVVv81mDEG/NydP9H5uP2RcWhFxbRA+blNd2fS7GPl0k5e+//kMGRWP/PNl
JWhbku78Xo0OY2XU6A2ZEvQoC1l3p7kPGs9N811VCTwW9XGUduoTuLjseY6X
5noo/o/ptSrdkOnvmOI1RqDPTyf0aks7IGryxSPpHhL/f//9Fzplgp4=
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
PWPZXQobhz4c+r5/jPn//++/DfTC0Q==
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
9uYI8P//338VtLK1
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
                   "]], {
                   Arrowheads[0.03]}}, {
                  LineBox[CompressedData["
1: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
IRrXTimQVv41+PCDZNLYMIX/v//+CwGHh70=
                   "]], {
                   Arrowheads[0.03]}}}, {{
                  RGBColor[1, 0.85, 0.2], {
                   TagBox[
                    TooltipBox[
                    DiskBox[{0, 0}, 0], 
                    StyleBox["\"Sun\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Sun", 12], "Tooltip"]& ], {}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{15.378017565675341`, -30.819339746063427`}, 
                    0.06942185342709799], 
                    StyleBox["\"Pluto\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Pluto", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Pluto\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    15.378017565675341`, -30.673553853866522`}]}}}, {
                  RGBColor[1, 0, 0], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.0723404185807399, 0.9813906060567478}, 
                    0.06942185342709799], 
                    StyleBox["\"Earth\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Earth", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], {}}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{4.855535158703765, 0.9583565685627025}, 
                    0.06942185342709799], 
                    StyleBox["\"Jupiter\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Jupiter", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], {}}}}, {
                  RGBColor[1, 0, 0], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.24326534513396292`, 1.5270444332192104`}, 
                    0.06942185342709799], 
                    StyleBox["\"Mars\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Mars", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], {}}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.3605984176359105, -0.0713808508378173}, 
                    0.06942185342709799], 
                    StyleBox["\"Mercury\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Mercury", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], {}}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{29.77899519271123, -3.1400396105684063`}, 
                    0.06942185342709799], 
                    StyleBox["\"Neptune\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Neptune", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Neptune\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    29.77899519271123, -2.9942537183715006`}]}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{8.153640435213399, -5.538732171472405}, 
                    0.06942185342709799], 
                    StyleBox["\"Saturn\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Saturn", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], {}}}}, {
                  RGBColor[1, 0.6, 0.2], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{13.09775988459798, 14.715939142720806`}, 
                    0.06942185342709799], 
                    StyleBox["\"Uranus\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Uranus", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Uranus\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {13.09775988459798, 
                    14.861725034917713`}]}}}, {
                  RGBColor[1, 0, 0], {
                   TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.3449637442231064, -0.6405410187732846}, 
                    0.06942185342709799], 
                    StyleBox["\"Venus\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Venus", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], {}}}}}}, {
                RGBColor[1, 0.6, 0.2], {}}, 
               GrayLevel[0.85], 
               AbsoluteThickness[1], 
               Dashing[{Small, Small}], 
               
               LineBox[{{2.8327291277419993`, 2.8327291277419993`}, {-54.24, 
                54.24}}], 
               
               LineBox[{{
                2.8327291277419993`, -2.8327291277419993`}, {-54.24, \
-171.76}}]}, 
              InsetBox[
               GraphicsBox[{{
                  RGBColor[1, 0.6, 0.2], {}}, {
                  AbsoluteThickness[1], 
                  GrayLevel[0.85], {{
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{14.212637437387627`, -31.09072401029399}, {
                    14.227266358537163`, -31.087567297584915`}, {
                    14.24189265108876, -31.084404841206}, {
                    14.256516313105891`, -31.08123664341335}, {
                    14.271137342654331`, -31.078062706463342`}, {
                    14.285755737801356`, -31.074883032612743`}, {
                    14.300371496616235`, -31.071697624118627`}, {
                    14.314984617170087`, -31.068506483238377`}, {
                    14.329595097536112`, -31.065309612229704`}}]}}, {
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{0.9215079359063135, 0.3807967310990326}, {
                    0.8838572843886807, 0.45844946583111035`}, {
                    0.8395864054893389, 0.5326678356744957}, {
                    0.7890008134704252, 0.6028793675141473}, {
                    0.7324570627191811, 0.6685376931775413}, {
                    0.6703606859237474, 0.7291273816213825}, {
                    0.6031636261160674, 0.7841686385217544}, {
                    0.5313611647427409, 0.8332218122443901}, {
                    0.4554883565107822, 0.8758916434524292}}]}}, {
                    LineBox[CompressedData["
1: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
PWPZXQobhz4c+r5/jPn//++/DfTC0Q==
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{4.955814579956052, 0.038672547745993664`}, {
                    4.954894333109766, 0.07822670389307744}, {
                    4.953672595913054, 0.11777609836446214`}, {
                    4.952149363168847, 0.15731832292438863`}, {
                    4.950324650639526, 0.19685096858515957`}, {
                    4.9481984950656095`, 0.2363716258164414}, {
                    4.945770954182022, 0.27587788475332015`}, {
                    4.943042106731781, 0.3153673354066865}, {
                    4.9400120524771935`, 0.35483756787348303`}}]}}, {
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{1.0726788585810079`, 0.9831381699908822}, {
                    1.0267616237610777`, 1.0395125395280698`}, {
                    0.9784091393341654, 1.0934220036230755`}, {
                    0.9277651142018629, 1.144771171966279}, {
                    0.8749756687506524, 1.1934737536703888`}, {
                    0.8201887244121394, 1.2394524204688335`}, {
                    0.763553430750657, 1.2826386315250058`}, {
                    0.7052196314425772, 1.3229724253405317`}, {
                    0.6453373698586347, 1.3604021840327265`}}]}}, {
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{-0.39217573509914067`, -0.03991221417613231}, \
{-0.38520965276154623`, -0.1693634044310115}, {-0.3401602830017684, \
-0.28244390788799667`}, {-0.2659654197306338, -0.3715901413613966}, \
{-0.17111666663434563`, -0.43207161089928614`}, {-0.06367861358983212, \
-0.46087784221513145`}, {0.04837411823534921, -0.45613845514995255`}, {
                    0.15668748195333923`, -0.4169540388080795}, {
                    0.25198906249862474`, -0.3436271115980039}}]}}, {
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{29.804135791583, -2.9741828507027304`}, {
                    29.805584879297523`, -2.9583561254594417`}, {
                    29.807025615505708`, -2.942528572100062}, {
                    29.80845799970591, -2.9267001950493547`}, {
                    29.809882031398853`, -2.910870998732604}, {
                    29.811297710087633`, -2.8950409875753045`}, {
                    29.81270503527768, -2.8792101660034026`}, {
                    29.81410400647682, -2.8633785384431056`}, {
                    29.815494623195235`, -2.847546109320962}}]}}, {
                    LineBox[CompressedData["
1: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
9uYI8P//338VtLK1
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{7.690967939036172, -6.230186154569774}, {
                    7.706976838621519, -6.208535821830365}, {
                    7.72292649283186, -6.186837774154087}, {
                    7.738816758674374, -6.165092162025795}, {
                    7.754647493468476, -6.143299136362314}, {
                    7.770418554846707, -6.121458848512571}, {
                    7.786129800756519, -6.099571450256791}, {
                    7.801781089460907, -6.077637093807029}, {
                    7.817372279540056, -6.0556559318064735`}}]}}, {
                    LineBox[CompressedData["
1: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
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{13.53652814164483, 14.364928798538637`}, {
                    13.522056344955882`, 14.377566690929807`}, {
                    13.507571383091637`, 14.390190577885313`}, {
                    13.493073268728773`, 14.402800445581644`}, {
                    13.478562014558442`, 14.415396280205021`}, {
                    13.464037633286313`, 14.427978067951338`}, {
                    13.449500137632818`, 14.44054579502604}, {
                    13.434949540332793`, 14.453099447644336`}, {
                    13.420385854135937`, 14.46563901203087}}]}}, {
                    LineBox[CompressedData["
1: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
IRrXTimQVv41+PCDZNLYMIX/v//+CwGHh70=
                    "]], {
                    Arrowheads[0.045], 
                    
                    ArrowBox[{{-0.647835891704893, -0.3169207557511671}, \
{-0.597880117951802, -0.40483182069386714`}, {-0.5362213985580073, \
-0.48481980518201606`}, {-0.46409603917442893`, -0.5553457317729026}, \
{-0.3829371804588375, -0.6150634468681384}, {-0.29434490842590316`, \
-0.6628434969800263}, {-0.2000538459407551, -0.6977923571370329}, \
{-0.1018989367580736, -0.7192668571630365}, {-0.0017801054863849886`, \
-0.726883755261171}}]}}}, {{
                    RGBColor[1, 0.85, 0.2], {
                    TagBox[
                    TooltipBox[
                    DiskBox[{0, 0}, 0], 
                    StyleBox["\"Sun\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Sun", 12], "Tooltip"]& ], {}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{15.378017565675341`, -30.819339746063427`}, 
                    0.06942185342709799], 
                    StyleBox["\"Pluto\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Pluto", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Pluto\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    15.378017565675341`, -30.673553853866522`}]}}}, {
                    RGBColor[1, 0, 0], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.0723404185807399, 0.9813906060567478}, 
                    0.06942185342709799], 
                    StyleBox["\"Earth\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Earth", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Earth\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {0.0723404185807399, 
                    1.1271764982536536`}]}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    DiskBox[{4.855535158703765, 0.9583565685627025}, 
                    0.06942185342709799], 
                    StyleBox["\"Jupiter\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Jupiter", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Jupiter\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {4.855535158703765, 
                    1.1041424607596082`}]}}}, {
                    RGBColor[1, 0, 0], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.24326534513396292`, 1.5270444332192104`}, 
                    0.06942185342709799], 
                    StyleBox["\"Mars\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Mars", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Mars\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {0.24326534513396292`, 
                    1.672830325416116}]}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.3605984176359105, -0.0713808508378173}, 
                    0.06942185342709799], 
                    StyleBox["\"Mercury\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Mercury", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], {}}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{29.77899519271123, -3.1400396105684063`}, 
                    0.06942185342709799], 
                    StyleBox["\"Neptune\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Neptune", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Neptune\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    29.77899519271123, -2.9942537183715006`}]}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{8.153640435213399, -5.538732171472405}, 
                    0.06942185342709799], 
                    StyleBox["\"Saturn\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Saturn", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Saturn\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    8.153640435213399, -5.392946279275499}]}}}, {
                    RGBColor[1, 0.6, 0.2], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{13.09775988459798, 14.715939142720806`}, 
                    0.06942185342709799], 
                    StyleBox["\"Uranus\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Uranus", 12], "Tooltip"]& ], {
                    GrayLevel[0.4], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Uranus\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {13.09775988459798, 
                    14.861725034917713`}]}}}, {
                    RGBColor[1, 0, 0], {
                    TagBox[
                    TooltipBox[
                    
                    DiskBox[{0.3449637442231064, -0.6405410187732846}, 
                    0.06942185342709799], 
                    StyleBox["\"Venus\"", 12, StripOnInput -> False], 
                    LabelStyle -> "TextStyling"], Annotation[#, 
                    Style["Venus", 12], "Tooltip"]& ], {
                    RGBColor[1, 0, 0], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    "\"Venus\"", BaseStyle -> "Caption", StripOnInput -> 
                    False], TraditionalForm], {
                    0.3449637442231064, -0.4947551265763789}]}}}}, {
                   RGBColor[0.9, 0.42, 0.17], 
                   Thickness[0.01]}}}, BaseStyle -> "Caption", Frame -> True, 
                FrameTicks -> None, FrameStyle -> RGBColor[1, 0.8, 0.6], 
                ImageSize -> 165., PlotRange -> 4.249093691612999, Background -> 
                None], {-54.24, 54.24}, {4.249093691612999, 
               4.249093691612999}, {226., 226.}]}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, ImageSize -> 550, 
              ImageSize -> {550, Automatic}, 
              PlotRange -> {{-293.8, 45.2}, {-180.8, 67.80000000000001}}, 
              PlotRangePadding -> 15, Background -> None}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Hide arrows", "input" -> 
         "SolarSystemConfiguration:PlanetData__Hide arrows"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Zoom in", "input" -> 
         "SolarSystemConfiguration:PlanetData__Zoom in"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Zoom out", "input" -> 
         "SolarSystemConfiguration:PlanetData__Zoom out"}, {}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Current equatorial locations", "scanner" -> "Data", 
     "id" -> "Location:PlanetData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[{Entity[\"Planet\", \"Venus\"], \
Entity[\"Planet\", \"Earth\"], Entity[\"Planet\", \"Mars\"]}, \
{EntityProperty[\"Planet\", \"RightAscension\"], EntityProperty[\"Planet\", \
\"Declination\"]}, \"PropertyEntityAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"right ascension\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"\"18\"", 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"h\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{"\"41\"", 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"m\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{
                    TagBox["46.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "46.4", "SRString" -> "46.4"]], 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"s\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}]}], AutoSpacing -> False], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"\"4\"", 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"h\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{"\"43\"", 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"m\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{
                    TagBox["18.9", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "18.9", "SRString" -> "18.9"]], 
                    StyleBox[
                    SuperscriptBox["\[Null]", "\"s\""], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}]}], AutoSpacing -> 
                  False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"declination\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{"-", 
                    RowBox[{"\"24\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{"\"5\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"'\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{
                    TagBox["20", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20", "SRString" -> "20"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\\\"\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}]}], AutoSpacing -> False], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"\"24\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], 
                    FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{"\"52\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"'\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}], "\[InvisibleSpace]", 
                    TagBox["  ", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
                    RowBox[{
                    TagBox["51.3", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "51.3", "SRString" -> "51.3"]], 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"\[InvisibleSpace]", "\"\\\"\""}], FontFamily -> 
                    "Roboto", FontSize -> Smaller]}]}], AutoSpacing -> 
                  False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show decimal", "input" -> 
         "Location:PlanetData__Show decimal"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "3"}, {
           XMLElement[
           "unit", {
            "short" -> "^h", "long" -> "hours of right ascension"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "^m", "long" -> "minutes of right ascension"}, {}], 
           XMLElement[
           "unit", {
            "short" -> "^s", "long" -> 
             "seconds of right ascension"}, {}]}]}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Images", "scanner" -> "Data", "id" -> 
     "Image:PlanetData", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], 
                    TraditionalForm], FontColor -> GrayLevel[0.3], 
                    StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], 
                    TraditionalForm], FontColor -> GrayLevel[0.3], 
                    StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    StyleBox[
                    FormBox[
                    TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], 
                    TraditionalForm], FontColor -> GrayLevel[0.3], 
                    StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    TagBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzsvQV0Hde5/i2WmcLM2DTUpE0aRtuxJVmSxczMzMwWMzMzS0fMzMzMbMbo
e/aMJMtO0tv8b2+/dq3MerMzOqTj+c3zwia9JKvFp8jCxMSkdwANn4zRN7q6
Mib8J/CDgKaeipKmgvxZTX0FJQXdT2RZ8WDAzn/k/D/tYP6d9k+9+YGDZc+Y
f8OYHrA/jt93/F6CzLvvevhTfuXRveMPgv8pxx5EVnLlmfYjYL7PiGl/+8fx
n3b8T6pk2W3/0NR/1bFH8XeH0vuf8A+e/OP4Vx6/I2SyUPZPEGT+g+C/8/gt
D7nvcWa2+8b0axB/jeYfBP9dx0PVwd6V30+WbZ/9BkH68X3HHwT/9wcz869f
QmbquP/j/YyUGCCxM++c7z3FQt7ESijvvHe/Qll3KDOzMhNj3v+xfxz/qoON
jY2F5eFMknn3IBGOmbBj3TUOFsKRjVLmQ2ojXpWFlYUFH8hG4buvUIogDZRp
N2r+cfzrD4KMOphZqcvM8itekVz6h6oLvJCFaQ/YPk/L9rCb3fHJv3Csfxz/
8oMAovITFholM+0U8RMbKzMbdXLf3TKT8z2CrLsQoURWtgO/IPiHF/0XH0Rx
+2MfLUNWdiYWTiYWXH92ymivyULHtj3b0yKexksPMDNxsjBxsBI3e7/w33Ge
99PaB4PtH8f/+/Fw3vLwZSXIoEOaHwfF6BBNijo5SLX0CR7hpIxjv+QI8t0E
9Q/H+b8/Hk47kFnQ8Y6cE4fHwc7OyQHjOMB58ADbCU6mJw4xv3CS440nDr3z
9JH3nzv28YvHP3np+NdvPfHlm498+eojn79+8rNXT+GRj547/O4zR1576vAz
jxx45BDzMU6mwxxMBzmYOTlYODjYWNh2ctU/CP6eg+VX7EF8O+kHGxMnB/Mh
TqajB5kePcr6wmOH//zKE1988MrZT9+SOP2+Cs9HRuLf2Cmf89DhDzASjrSU
irWVSXZWSnJSTHZUTHFRTnNTheGRaEflABtFBwNxPbnzsrxf8Hz95y/+/Nyf
nj/28uOHTh5kAtNDHEycbEwkgLI+mAjt+8LM/8+dq//N98Ze2k/9tFuFsXHu
6yqhyjgWDvL4bvcX5MbByXL4EPtjJw+8+vSxT956nOezVxS53rMQ/8xD7Ydo
U94sR/ESH8WqINWGCO3WWIOORMPeFNP+NHPYYIZlXzo5Gci0HMm1Hcu3hw0X
OA7kO/Tm2XVkWjfEG5UEaWa4yUWYC/noXNC88BHvpy99+NLR50+xnDrCdOgQ
E/sB5gfSVqiUiRgraamgTN90D1B+8D7c+cfv69bb13f0X5spPaQ4UpwRcBRB
qqxGVGM+dJjj+BGA43jtuRPffPSK2LmPrNW4/c1E072Uq6P0ulLBxXw012qq
yHau1HGxynWl1n2l3nMN1ui91ey70eyLk5VGr9UGn9Um3/UW/7XWgI3WgPUW
3+UGz6X6Syu1botVzgvlzrMlThP5DkNZtm0JFiXB+jEOCraq3KI/ffDpO0+9
8CS+A9NBTkqVzHRGhBqSE0Z9293aknXHqFyL9WF89LG/Y3Y31P7XENyJLA8P
mzIz38/zWXfrAA52Viju8UcOvf78yS/ef06G60MnjfMprnIV4Vpd6WZDBdaT
ZU4ztR4LLcFL3VGrgwmXx9OuTqRcn0q5OZN2Yzbt1mz67YXMuws5dxdz7yzk
3FrMoVvYzaWcmwvZt+ezt+dyfp7OujeWcnMw/lpv5NXOsK3WoI0Gv83GwIUK
j/Eit8Fcp6YEyywPZVfV7xXOvfnX1zifP8V08gDTyUMs+HrUl2dnYT3AwsrJ
ykpNcviNztVf6W3duw7/HeT2jvvUWJjoCpx5L8rhZzbmnRzyODvTC49w/u3t
J0TOvm+rxRvvrlYTazqQazdV7DBfbne52f1Gl+/N/uAbw1E3p5NvzGddXy64
vV56a6347gbj3lbZz1fKtq9UbF+r2r5Rs32zdvt61fbNmu1btZTVbd+sJg/e
qN2+WrN9pWZ7q3p7q3J7s3x7o2R7tWB7Ke/nyZTrA9FrrYFLdb7z1V6zlR5j
hc6tqZZJnkpG8t9988GTzz/CfPIw05HDHJyc7A/1pbOyMrOyU31AuxFyfy/f
gxwfjPX/BcfuuADFi3aUe/8ouiuMnWL32uOsP330rAb/h5GW/IwARShupMB2
qtRpqdptq9n7Rk/gtZ6A28Ph9yZif55N3F7O2F7L2V7Nvread2+zBPi2r1QR
dtdqiF3ftZt127cbtu80bt9u2r5dT9o7zdt327fvdlKGk9bt240/36z9+UbN
z1cryA2wVX53pfD6ZMbWcNJqd/Rcc+hgpV9PmR8jwc5en//M3198+QnWR48w
HTvIysFCd7RSdcz+qRn72D1UkD5wWf5rRpyJzyGRjkpiWJnud13S9fVhVqaX
Hj18+uMX9MU+j7YRrg5XGUrTmS8wXC61XK2022pwu9bmda3d90qX352RqJ8n
42B3J2K3ZxK3F1K251O2l9LvzGfeWsy7t1Tw81rx9mrxvdUiIIDh5B4eWS/d
3izbsa3y7ctVEODPV+ruXav/+Wbjz7ebt+81b2+3UtZMKEOk16HTKnJLrJXe
mcu7NV2wMZg23xE7Vh9Wm+EUYCsjfObdN54++Pgx1kOcLHSvAil2WMi/ipWd
/Jsf6mn/bSXSYfE//GDZ7TFmpju1mKkRIA5WpoNszM8+cuzv77wiz/O5n5FQ
ka9ie6z6WLrGdLb6KsNgq9Jis8Z6q85xo8Flo8lts9Xrcof/jd6wW/0RN/tC
7w5G3BsKv9cfeqsv+PZw9K3h2HujCduTyduTKWh/nkiC3R1LuDOecG886d5E
Mjzk9lTq9nQasdm07ZnUe9Opd2YzKPo5t1fybq8VQct31hkE9BXau1K4YasV
22vl24tFt8bSrw8krXRENaU7hDnInfnkhTefPXKQnSLFui8v/fW5cL9Q4v3E
5j//oP4t++L6AXam4weY3nv5Kf5vP7RSvBBtK8fwVW4IU+iOkR5OkZ3KVpkr
0Fwo0l9gGC2XWyxX2azUOGw0uK7Vu11u8bra6n252fN6q8+tDv877b7Euvxv
dfnd7va/2xt4ry/oDpxttz/9452+wDu9wXf7QsD654Gw7cHw7aHQ7cGQnwcD
fx4MvjcSdnc08tZo1K2JuNtTSdcnE6+MJlyfSL47l3lvPmt7IXt7OW97qWB7
BdJmbK8UbS/kbk+nb0+k3BpKWuuK6a8I8LKQ+O6j5546xXTsEBMH+25f+K90
lbM9BPEBJf7HHHtDPw/1ehFvycrMsls3sbMzPf/kkS/ef0Fd8Esffb4sF+ly
H5mmENn2COneWJnxTLWJPO2JIoMZhvE8w2Sx1Gyt0mK9yhq2Vmm1VeNwrcHl
ar3rlTpiV+vcrzVcwiObNbZbtXZXGxzRXq6zh+HF5PV19pu1dhs1tlcbnWCX
60l7pcXhaqv9tTan6x2uN3s87/b73xkMut0fdGsAFnJjIOT6YMiNodCbw2F3
xyO2p+O2Z1O2Z9K3ZzJ/nky7O5q8PUGE/PNE8u2R+KW20NZcVwvVs288w37i
INOpY0d3eulIdcFOJQAcxKg6d8+v3if4n5rM3B8hpYPfvuGeU0c533n5yYvf
fWAhdybCXLDQU7I+WBrsBhMVxtJUx9PVZnL1poqMZ0rNZsvMZ0tM5hiG88WG
i8UGkORqifFamdlGuflqqfkyw3yp2GyRYbnIMF8pMVliGNKGV8Lok9l8Hbxr
rkh/tlBvHp9AfRROFkthektlhsvlRmuV5lu1NlfqHS7XOl5vdL3e7Ha9zf1G
p+f1Ts+rXZ43en1uDfrf6Au4A6c9mnB3LPH2cOKd0YQ7w3E3BsJA/M5IxOW+
8Lnm8IxgU77v3n/qCMdRdlJgcLAz7wx7EY7sdCbAtCvDhyH+hx+7X5qNlemZ
Uwe//vMLcmf+4qp0NsVOuMRLrDFMoi1KvCtGfDhVYSpLYypTeybXYDJXd7rA
YK7YeG73muPiL5YYLZcY4bKvlBoulOjvPFhK4SjWW2LozxfqzORpTuVoTmZr
wKZztegT+hFIm7aRNGXyYJbGZKbGZLr6bIb2Yo7hSq7xSp7ZQpbRQq7JSrHl
arntWpX9ep3TVpPb9Q4PAL3Z6XOrO/haZ/DljuDrPeE3ByNvDobeGQ3d6PRc
6/BebQ9a607sKggykT7/56ePPHaY6QDbbr0EiOwHCUQ2zv0EWf9T0f3KYAz1
pTkOMr3wxJEfPnxJl+8zL6XTCUZchQ4XKjx5mkMF2mNEOuPE+pJlh1OVRlPU
JtK1R9PURzPVx7M1x7M1JrLUJ7JUp3LUp3M1ZvO1EB9nCjWnCzTQzhVrz5Xo
zDMgNN0VhsFCgd5MjtZcns50tuZEhhoY4cfJTPWZHO3ZXG3CK1N9OltrLE1l
PFUVNpGsMp6oNJGoOpOkPpeiTdtsms5Mpt5MtuF0tuFUrtFcsflihdVqpc1G
jf1VuOsW7yvNPtfa/anSxu9yp9f1gYArff5rHb7T1d4rzZFzVZEJzupfvvPo
syeZHj1GenJIx+CBg/dnWP33ENwby0P4O3iQ+fUXT3F//rqx2BdR+lyFdhdr
Ll1sDRBsDhbsiBXvTpHtTVPsS1caSlOhHSkIDqerjqapjqarjKYqjqbJT2Yo
zWQrT2UrwSazVcaylcdz1Mbz1EdyNUaz1cFrNltrJktrOlNzIU8PhpOpDA20
E2lqM1k6czk6dLuQZzCbrT2XpTmfrbWQpTWXoQHDyWK2NmwhS3suE5+jM52l
N5mlO5apM55jMJVvOJ1nOFtouFJitlFhs1lpC397tcX9Sov7tS7ftXaPrR7/
xUb3pXqPKy2Bi+WXZsq8KmItBb599aVTTI8codal0NH/4KH9BB9MZv6Djv0R
kD45eoj9g9eeEDv9nqPKuThLoRJ38UY/sa5QseF4mYEEmf4UucF05cEsteEc
jfFcTbg+OL3pHG3aAU5mQ0rEZnM05vM0kKOi0MCDECaRZ47mGCxLA5hmMzRh
uP5LuXrLefrzWdoz6RrwkDPpWnOZOgvZevNZujCcLGTrLOfqreTprebrrxTo
o10r0l8vJO1SnvZSni5ugMV8/YV8w7lc/dkcg1l8WoHhbJ7ufL4eDM8uF5ms
l1uuVdkiQ77Z7bfW5I5KB0kv6tatOueFcsdRxqW2bFc5nndfeYzpyVMsbGyk
m/eXXW3U8Z+VizLtS0fp4+jRo+++8pzc9+9dkvsuyUY03128zE+8Lli8JUKi
J056KEVxOFlxJFVlLF1tLEt9Ml97qlhvqlALQW2hUGsuX4OOaxOZGnCqoxBU
phakAcMJiZjZunM5ekRZ2TqLuTq4+LDFHN2VfAMYIC7l6AIW3a7mG6BdzNZZ
yTVcyDZYyjVazjOGJEF8MV9vOV8HtllitF5ssFagB1vP113J0VpI15hLVVvI
0Z7L0YaXXi42WioyXCwwms8zmM7SWS4yWyg0Wa+0hY/dqHe83OK6Wu+w0eS6
VO02WODYnOGkL/PNS48znThC9ST+CkGWfZM6/t2g7ncePfidWJnpwocF5cOR
g2xvv/KUyI8fu0h/nWzMVegiXOQuXBkk1hwr25Wk2Ad8KcqjqSpTWZoITyTe
5WlNFetMM3QXi3XmC9TnSUmoi4xlDpVFoeF0gdF0njFsNs9wOkd/Jlt/Pld/
qcBotcBwPld3PldnkQhEF05yqcBgvcQUj9M0IUmcbzFM14uM13BSYrFaYLpW
YLFSaIa3Q25LBfpLhbqw1UK9xVx4V43lbM3VbC3YSobWcgbxt9OZJKoSDRbo
gyDeCPqL+YbLhYZQ61KxESle6qzX6u2WaqBN59UGn9FSt5ZcJwOF755/lOnx
E2y/iHoPjof+Ww+WvUl8TLtjKTvOnQyKsrMycSLxPHaY40+vnhI/82dn5W/j
zc4VOPFU+YhCfc0RUt0JCv2pSv3JisPpKmMZqvCWM3naSPiR9s8xDOZL9ZGc
IGMhuWWh9mSuFh5fLjNFUrpUajZfbIyQBKa4aLD5Av2ZXB1c2NlcHdgc5esW
Cw1WGMYbpWYrRUa4wgAKIygLDYFyrdAIKDeKTdYYJnjBSpHheonJRrnJZoXp
lSrzrVLTzRITuNZZqC9DczlTbz5DB2/BK2eIDPUhQ3z+WqkpfbJUZLBQaDBf
qIeWZMv4nmVmi9X2i7XOi7WO4+U2nXm2dho/Pn+K6dQRJjb2nR4bqieYjZXu
gHtolt1vHP/ES34HQeadwQR62gPTXm8SM0WQjYnj+MHDb7/8BO83b1rJfBZt
9lOuC0+lj2BjiHhrhHRXnBzJWLI0kGrCc9KGoAZS0/k6sCmU87nq4zkqU/nI
ObWmKLgoHGYKdBdLjJdKTXCVVivM16ssNqotN2ustmqtNyosVnFJGcZgOpev
hzAKjoC4ChYlhBQkiRYECcRi4/ViI0IKpWWpKfCtk5cZLhfrLxcarBYbbVJq
Xc4zhK3mmaBdKzTBu/BefCYMjhQtCKI+XS0zWSk1XqYqHZyvlZuulFvMllqO
FRov11hvNDrMVzv2Ftjba3M9fYzpyAEmNjZysVhYOeluxgemAfz7CDJRM8FY
Wej1v7v49mbVcrJzvPzUo9yfvWMq9W2YCU+2i0C5t2BdoEhLuFRnjHxfkhLy
TJJ+5GiCDmwyTwPIwGu2SAew6EdgQDZH1eP0vb3AMAK+tUqLy3W2V+rtwA4Q
0V6pt73V5HStzu5Kjc3VWtsr1dYo+WFblZYABCKwNVz5IsMFKlCuQiy5Omjx
4Drha7xKohuyFG28AOcEKN4C3REPbLiSD0dtDNsoNltjQNdQLrkZ6LuCvkno
u4X+pZuVlgvllotV1ivVtstVdhOFpnOVLl35jjYa5195nP3R4wepi8a+d70e
hvjvIkgNK1DBmXnnZ3qKECcH85OPHfnqw5cNhL4K0b+Q6YiyXaQxRBLq645T
HExVRU5C44PowAjIAA7ecq5Yl9TmJUYIfPMMPdTsOIfRtfxKuRl0B0cKlOtV
luC4XGayVGq8Vml+uY4CV2NzudoaHO80O99tcbnZ4HAVQKusaIjABCMSKzTY
AM0C/XWKFE2Q1iAqSlCmX4+QCn+LAIrcdSmXcMQJIOJ8MUefCoJ6IEiLGpKE
QZLgCO+6VmaGb7hebTNbZLZUZj3PMBvJ0Z9g2PUVuFqqcD96gOnU8UM7vmu3
n+oBQv8mgg9/Gj1mBHyPP3rg43efUeT7W4gOb769WJW3dEu4bE+sQl+8whAq
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
EkozFgZJMRZKNhJMMhQ4py8Qo8UbqnY8RO1EiMZJb9pxF+oRW9nDlpKH9AT3
qhz/TmLPxmPbVu/ctGYF94J57KzsLIyTiS256ssyg4mVzhxJCiPJRv9XOegc
NR//CPeFdQYzG528iLhRLCwzWJmwImEOKzMo47yZkEjO4pg9Z95cDg6OpUsW
rl+7aPs3K3dvX31g1zqeA1tO/rhF6OAWCu/3NP5dKvw71QV26or+YCS+z1Ti
gLnUwdMyh8zE95uI7jUW2WMosk9HcLcq3w4az/dKp3ZLHtt+at/mQzvW7v5m
5db1i9eunL9k8SxOzplMMxk/BF0z6KQuzEgMwkiOa2SYrDCZ1m30lzumoGQg
hpAy4yB2VqIBhOkjXiOi2hiEedYs1llzWWbOnTlnLgQ/HIvnoSyazb2MY+lS
juVL525YsxBQ2LJmPsj29Qt2bube/dWSPV8vO7B1xd5NS3avX7Rr3eJdG7i/
X7twy3LODUvmrFkyd+XiOQs42SA4mTOXbeYsFkY2Jvr6JRMZaDET9fAIGTm5
gw01kD7dmImRXq/7l7Ggnx7TQh368u9UtjuVSDJ9lJV8QPTzHvPf+JMPrzN/
Jp+8c9qHT/v8j78q02/IX1IFP0aAgQwPPvQLME277Uy/gebHZ/pnfvh0OgqM
dPmtDc3JmSkM9P8by9QS9G981y88FX8jSLdFDFPrG4yfbG1/UZi+cJ5q+Zla
JGH+EHXQY8gPE1J+C9APzo4ewBAlSqQwfPGdf8Xj05xx2sLNlw3a9PD1Mygn
hZHpw10lVekT2/lxOcGXPpz4LtPgm47gp48B82Qy+H/NF37prvzem5k+ckzT
EGSYnMjGOM2wMn5+wz+yupPCOHlmZJqm0V/4lp8r4jRT8CX54lPxf+r4JxD8
2NN9/Px/8T5/5puYvozjR570C9+H4WMoGb784R//Wz7H9P/a8Vue67ePD7fi
t//w05D14xv4pfv5D/yPv+hbP/ntb8Wf/8jz+V96/EEEp+UI0/7849tF+jVc
ipy2kPUbAcnn5vE3/vcfe9IpH0p/75f87Kcg/mVTic+OL9iiL+ng53r3u8c/
rCS//6T9zgP5N3x/H38ffx9/H38ffx9/H38ff/T4f5e/Uj0=
                    "], {{0, 150}, {150, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
                    Interleaving -> True], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {150, 150}, 
                    PlotRange -> {{0, 150}, {0, 150}}], Annotation[#, 
                    Association[
                    "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset100/7ad/\
7ad6588b8df309ac736dc1e9f45007ee_v001s.jpg", "Dimensions" -> {150, 150}, 
                    "Source" -> 
                    "http://nssdc.gsfc.nasa.gov/photo_gallery/photogallery-\
venus.html", "Popup" -> 
                    "hset100/7ad/7ad6588b8df309ac736dc1e9f45007ee_v001ms.jpg"]\
, "Image"]& ], 
                    TagBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzsvQdcW/e5/8+2nTRJb3vb295fb8ftTpvpDO9ts/eeArRYGkhCoMHQYEhI
AgEaCElog7YEArH3BuO9Hcd2nKTZo22adIT/I2G7dkbHr03b/+vX8/rm5CCE
xnmfz/N8Pmf5e4WEJExQQEAAeSvMkgoqD5JIBbTkL8MPqXhyMRaPRkXiKWgs
mrSjMBgelN7+z7f8rzcFfWp8agq8Z/yVU2BAUGBAyJ0R9GfH3/59/t+b/gKC
f8P0KUYBnzkPuDP/9/T3mD4J9H4J/uW4/xoif726/z19/vRJVd5f5f4Szf6V
cv4bqvS/p8+a7qUW8qlxt/r9JcM/fYJO4J8c/57+PtMnQNxL8N71/afY3Ufw
3uk+XkGfmv97+vtMn0/qz2joz8nrExU45FPzf09/n+lvIfX5BO8Fd3fcZff3
d8L/L0yBgcGfWHuBoLTge2QDpTPkzor1PxgY9EcqwSEBQf5fBgcH3vOaf3zy
pm7vQgzy/bXvHYICgjfnmz9u/iow8F+rjP6rfZ7PmaC1hYaEhPlR3pk2V35w
QGhY4CamzR8D7rALCvojX98sOOju8t1HgoLue71gH7OguxzvLgQH3S/Vz1pp
/z9Zk/+cCfDBuKtBkBIoDmAFBgfcq5zbC8EBwaFB/prn001gUAjQDQreEhS2
LTTswYDgrZvLMA8I9D0pKCQYXsf3rOBPIggLCwm4+/Ig82DfVvFP5PRFbCSB
gf+IqgJreRMfLPxRNvc3ML9OgkCEwVu2+tD46IT6RtA23wjYHA/6x50fAx8I
CH7A/5xg/4v4XwHeJTg0OCQM5rel6q/Jd9R317z+E6a/76reZBfknwK/4Akq
W3Dg7Te6/fZBgcGhIb5SGbYlICQ0IDgsMGRbYNiXAgK3+McDASEPhWz96tYv
feOrX//hD3/y/HM7ow4cTgmPyoURFZsXn4SMTUAcPpb6/K7IJ5858KNHt3/z
2z948MtfD976cEDIA75XCPCNoNAHfIIFSYcE+9ohaD90s0f+M6e/kdq9y7BK
g/1T0Bc8QREMCwmFNwrw63DLli1hW/0rNmxLYNg2/wr36Wvrw//9w589fywm
i0jmsuulXWq327M4MXVudv7q9OzlialLg0OnYHiHT4+MnRkdPzs8eto3Jk7b
PXO2/lmlvp/b3EWsbMzHUI9GZz/25P4HH/k/waH/4X9x2CrgI0Ad3uoru58z
fdHr4W8n+AmaQXcI/rXf6E//1We8jq8HBUJX2ro1DPCFhIT4upuve23Z9vB/
/u+PnkrJwrAaZSbrxNj0uRPnX1tcuzk+c9E9sG7onZUqBnhCSyPfLGhxNDVb
lN0TJvNSt24aFvQ9c0bzgko/bvesu0bOWPvWlPrxbtOUw7Nu61tT60aFbb00
Rmt6VulT2w898h/fDgh8CGgGBm4LDg7d/GAh/umv/Tp/dv38YwgG+OXw5z5J
yF/wuQLuDJ/WQoJC/evHt4rubuyhoaHwW9j+wx54cLPBPfSVbzz21C48qVqh
sY3Pnjl++uWl4zcWVm8ANa1xSqkZB0CASaOf6ZB4GhpNgmarsmu0Wz2hkA2q
u0Z6DLPd6nGpxGM2zy8uvXLm4q8X19+YmL0xNHnVM3zB6jqu752H19H3zGh0
o6ruIVmni1OvKEBWbd8R85Wv/Sgw8CHgGBS8NThoy+2PevuLfLHTF0Qw6H5N
+andGYFhd5d9jexuD/GxCvWrOCAsNBAaWrA/dMH/Hwz7EgguNGQbeAmfB90S
Aj70j9Vy25e//9jObFSFuNPW45xze48vn3j50rVfza9cn52/dvzEL2689Pv5
5VdGxq93dk3z+Q4229DMNytknu7OgT7znLl7yKYZ6unqt3Z7DYo+RZu5tVkn
a7dYTNNux/KZM2/NL14fmbgwNX9F1zMuU/Zp9WNO15rZstCtn9IaZo3WVbl2
qkFoQaE5Tz8dtWXrt4KDvgwoYdOCtbF1m29vXhjw9Nuezb4J69s3hypyZ9y3
fu4bfka3n/O5BP+O+D6ToP997rC7O+4Q3ITo/xg+vxcUdPuoUJAv7AX4n+pL
0KHBsEJCgqFkfukhn1EJBpRbtj7yzV2H4mnsdo110uhckmnHhNL+Vll/n/fs
6TPvwJp3OpeFQqNAYGJzumtqdFSqkkZTVTOVYpFVpx5WtFkkzfpuca9V6R6x
TvUbvEPWSYu6z6h0K9p6+HWdwnqV3TzV17/UIbVanLOugdU+7/HR8fODgyfH
xi5OT704MHjO7TmnMc6rdDNq7VSr2MlgtIdH5Dzy8LeCgh4AMQbcgw++bWho
8KYqw8LCAv0b6L8+wTvv89kE7/0YYNZ9BdPXQULB320J9o3gTa8eEhi6JQxe
G2xDSMiXwJ88/J/fTUkv6dIMugbXB8cvaHvnWY09UuWEe/D8yPhVm321Sz4g
aja1i81ctpzfpBGLzMrOIalkwGFf83hOGnXjGuVAZ4e1Q6A3yB0WldupGXBp
B80Kp1XdZ9cO2A3DA+ZJjdQha+tVyB0KpVsg7mkWm6EPGnumQJuDfatu63yf
bWHMuz7kWR0ZWne4Fo2WKZ1hVNbp4PG7U1Kx3/zGj3wtMsC3WcJ3Cw3zJdbN
iuT3zfdq8I/TXY/9x5XzTyJ4//RnCMIUGrK5hwoc5paQoC1B8MX9e65CwoJ9
Z3kEBYZshZq5desDX09Ow/bap/s8x622pR7rEriRVsnA0OjV4bEX1o6/OTF6
2W1fsvdM9zvm58bOjAwsD3uWhvqXPY6lUe9pp22xrbUXmAqbtUKeRt5utulG
HLohk9zZ2+lQifQ2VZ9RblO16gwys0s/YNMPmg1DbudcZ5ermqVg1av5fIOs
w9nRajbrx40ar7dvyW2bcrtmhkbX+7yro1PnLbbZLtVgW5uNxZalJKO/9rXv
hQQ/6JPgnQoTEhIGX+Nfn+CdT/J59eGTtQKeDM1tC6gtYIt/ZwsID4zmFoh4
EBOgW4Zse2jXwegOhWVq5pJGM2K1zk9NXdUbpuyOlZHhi3196+Mj59aWbqzM
XJobWl+ZOL06dWp+aHm8b2ZhdHVp8uSppSuzoydd1slOqZXX0FXP6Wzmdcsk
1jahoaVRrWw19SgcUE57O21WpdOitFs7e+xdPS6dc9Izp5KazKZhpcKlVHoU
Cg+Xq2lqMtTWdvH4prYOu1BsYdZ1cnndLRJr39D64MiZHusCv7lHIDQDbjZb
cexI5pcf+U5AAFSPrQGBoZtHo+7nsLm/NejuuHfLD/SPfzxBv4cM/jQv/6b4
GQThyQ+EbtsSBJKDmAcJ4cGAEP8+Lmh5AaE/f2IHp17s8S7oTcNSqaPPtXTh
3Bs3Xvz1iy/8+vVffHz5/FsnV28sTJwZtk8vj655TYMTtpGlwbm1kaVT0+vn
5k+fnDm1MrY61T/n0PebdX1atZtWKcjOKS8tYwFKbq2Uz+7USqymTrtZ6dB1
GHViLeAbNQ841OYh2xBsBv2WUYlI02ef7bPP2XqnPe41MllIIAqKcU2EihYO
36DQDTs8a5PzL4xOX+kfPtPcYmPUKqto8tq67nquHodrfObp8LDQr0KKDNuy
LSQs9FMo/gUJhm4OaGqb4y7BT0P0PcFnV8I2DwKAkfPZzoCQsLCHtz30DSyO
ZjKPQClzWadhrC1f++X7G6+/+uGLL7xx4czN1bmzsyOrF9auLo0srwwtTPR6
hrWOeevgycHZc+MrZydWp22j/Wr7tNXr0Vh7ZAadzKiQGltEGjKlKS4BHRuL
rmG2tQp1nWITlyFStxt0EpO1297TZXYb+z29gzAfto70Gz1DlmGYa9r0OkmP
lK8WNaga67ukcmejQCdVD0wv3ZxZflnQ7qysUZhdayrdZDVbV8MygHei09Vs
jo7NVmdk4r75f34CEMFJf2ID9q23oIC741+K4F2I9xL8NESf4YQKGgzFM8S3
GzMgZNu2/3jssZ0SudnpXnA5FsaHTy9NXLhy6rXf/3rjxuXXjy+eG/fOep1j
L5y+fmr25NLQ7InRxbWByePu8TMDk6fcY7NG57xpYM09NWcemeodHNfaRzTm
PrXZ1KlXSnWqLnOzQFOIoqVn4rHFNRXkJi6ro4kraRd2qaXGQevwyuSJ4zOn
AZ9T6xjqHfBobCMGV5+yt7dDY2jTWJRWS7dLq3JYesdHxk5RmW0Ajlmvw+Kb
MxDMknIRntJBq9bUcXtYHDOLZaRQpGRKG5erpNFFe/ZFBwQ+AB3jE5bAp75/
JYJ3pbc57tIM2CTlD+shPqH5FgICN3c++/Yhb93mT+ghD+QV4h3Oabd9YcC5
Oj10zutYBoIX165P9c3OuKeXx47DuLr+4rnF8/1a53iPZ9kxvmz1numfmjc4
JxSmRZP7hH181Ta20DM82u2YN7rme+3jJodbazVrbW2tKjZH0ql0Krr7I6Pz
9+xPQqKoguYuaYeWVd08NjjzzsvvjjhG1qdXXzp9dW1wpq/L6JZpHB0qvUDq
UBg9BqfXNtJvG5O06XPziHHJ2PC4omOJuOQcRnJOdVoeG1fRmVPYUMXsZjf2
VLPUJKq4gtaGJ/JojA5mjSwPQXnwwf8KDX0oCFKSnyOsiiC/z7mfji83brbO
fzrBuxDDfFEXAtHWTRnCPGRznz+4zwe3hfjghv7nf32X29Du6l+wWWYGXWuT
ntPzQ+e95lmHxjtqm1zzLp2dXH9h9cqL69dXh1atneZx0+CMZWhC51o2D06o
TKs97hWDc05jmdPY5gxuUOKoyjyqNAwrtU65xizX9KrNXTKjUKAUQ8szDtVy
ZWUEdkp6UX5huUxqkMsNrUL52ZUzZxdPLnqnx6wDk+aBQb8G3areIVOfuavX
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
++LS8MkZ18KAwTvtmpn3zDnUVpPEOOYYPTG9PumemO6fsnfb3EanRW3Ry00S
oaK1SVJDZcEAHRGKyRUEGpPKrq9tplO5FeW1uOJKJAJXWkzFoMq5HDGYFjSW
gi2uQGPJKNBfaUVNdb2guR2yg5Av0WusWpW1vUUl5MmoeAanktVQWVNXXtVS
16iXdhs79WqpvorC3rsnJh9JzccwS8n8iARsYgYJKmFltYTMEBUROeHxqGwk
HcxnbAoxOokQlYiHLgnz+DQy+JmoRFwuqq6MLJSpvF3dQ4JWs6jNLmi1tort
ZEprTl4FjtQQGZ8bEPQliMUBwbC6wnzbv98l3Nkl8o8j6DtW63vfIAh7/rwH
GxIEh63wjMAHtvgONwQHRcQmD3jmvP3rYDs9hom5vqVxy8RQz8iSd2V2YMFj
8g6YvfPDi2PuSY/Za9M6rRpHU52wmdMmaOhgVvGIZdUkfHVZEbWsmFKEJWDQ
OGRBGRZNQiJhmVyQj0ejSLgyOqIAX4ZnnD3/0tLKBWpVPY3RVIgqF4gUYDg7
OtTSjm4GjdvM62DV8kXN0g6xUiZWiXlSEau5pZZHRuJqSQwQeGMtH+rqkcPJ
0XEFO/YmH4lBFhZzSLT2qMTS2OTSlCxSTEpxQgYuOZuYVUgDGR6LLc7HcoHd
7kOInQdyMxDMlOwqwJqDrIVC2ijqNVqmLLbZbu2IuM3B4eq49XowqLkFdASG
diAiNSD4waAtD/oOqIWEbAXD/sfDBP84ggH+Ku47Rggbz+Zps77dC8GBkDC2
+s79e/r5vW7XxNjwWr9l3m2YmnAuzHqWZ92Lk67Zcce0S+9xGwbmh5ZH7BMu
44BGYlR26GFwawR1NF5VOYtMqEMVkLBocjGWUoQpx6KJJUVkKI+ALzenpAhb
iSmqLECSAF96JqahSWJzjLv7ZxRKa0kZo6KywemekHTotFo7r7FDwJe1CBUN
XHFHq1ohNVhMHrXcJBd1ClnN3Cq2kCPSyPXD/ZNMehMin3Q0Ku/5/Sk7j2Qd
jsUk51KTMsmJmUQYByPzj8SjjyZgnj+YlZhNSUXQ4zPAgpbHpVMgFT6zNysb
xYKKGpNKgh+p1Z1KzfDI5Lnp2asu93FRi53BVLDqdQh0bR4KIFY98exBCPu+
c1nB6QX7ZPiJQ05fNMFA/+kRAaG+cyc2T4/fPJsLHg/xNcGQ7/zvz3rMg1Pj
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
EPvU7PnJuYvQ+MJjkXgKn1bTYbXPzM5d1BuGeizjq+s3btz69eUX3ob5+7/e
eP+XG6+/+buZ2XNkSkNlFd87tHLl6ru3Xv7o5vVfj42fknS5SXQxiBogpmWX
5xbQswsY+VhOfEZlVDIpraC2ANcIGkSWQrioyi3A/fyJZ/y7kYM255sEb5+G
8cUQhAgREhC8JcyH77s/es4+sCbXTjW1evgt3kqGtpKuolcriRQxo1bR2NxL
rGgjUdtHJq4MjpyjVct7bfNXXvwQ1FeM57bJrCfPvXbxhfcGRtZbJWaeSAcu
sQjHsjtmZ2YvvHTrA1hXF6+9+e4HG7/5w4bJNlJCrIlORAC+PBSxntcxPDY/
Mb1069W3j5+8NDq+7OwbnZpdUamMQFAuU/X3DTkdnvGxme7uHovFU8cWme3D
A0OLUAMPR+UeisgrxDLA7jKrxaVlNSCrk2deWTp+3Tt2MjyuIC61KAtBttim
z5z9hURqMdvGwTW1yXv15mGR2HD85Es3X/7w1NmXgfvg8Jp3aM3dt3Dx0huv
v/EHYEpjtnQbR9sUTkwZt5ajJFFb0rOpRfgmArUNX9UO0QOiJTilfCwrG0nP
Q8GgxCdlfu3r/+07jTYo7PbwH7n4gggGBW1eJhDqvx72YbDWRscqW+Dkivqo
NXoiRcHi9pRTJJRKqdG8oNZNEijiCppUoR4FPcLgNGrquKp8NANVXGtxzq6e
vNXnXRWIjZXMVmQRs6y8vqKq+YVr76+uXRseXbnywuuw2l2DM6+98weLa+JY
TFZMUl5qNraO25KVixkanVk7fvo3H/7ho99vXLj0slxhkncZoIpqdT2Kzu6z
Zy4BxJHh6Z4e9/Tsibfe+8P1W+92dtthjT23NwGBoVVVty6tXiUQ2c/tCBe0
aACiVGkrIbDxFU21DZ1AUKKwK1Suckqjrnfo6s33x2ZOk6qaUMXMY5E5+Ugq
jshh1rQ73HPrJ156/Y2NV1796NbLvzl77tVmUTc0a1BxJaOjSWC0u9cU6uEC
LKukvJlaLatid8Vm+vbt5KFrUaX1/mOIVYVo/BNPPgPJevP6Ed/hgsDgTRl+
QQThVbZsA71ve/L5qL7Ri4CP3mghV2txFZ3MOiOJosDj26TSEY1+httk5IvM
9JquSoYcymlOPqME34jE1tFrJaJ288TsBadnSa0fpNAERaU1oAiVpp9M5c0v
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
DP65szeXlk6/9NJbE9Mr5y/dBNtZzeSfPXPDZh3V6/qGhxa61bYeYx8kvhev
vfL+e7959ZU3JifmXrr5+muvvv/OWx/+8pd/eOmld6AJghFSaZzQ9QAfBHlk
MY3J6oCsF5PoO0EiPav40JFEIqm2RazKyy+rbxIvr52DdOnqmyzDVwPBAlSF
yTpRVs7NQpCOxiD2Hs5MzSXloulABwT44yeO7TuWCwSPxaGjkooBHwRDyPIx
KcWA6WfbI+LTilukZqiNSVm4UnITVNfweBR0yXwME4vjQNhsEhmgigI+Xc84
uILmNmM+lp5ZSI5LL8pAEJKzMT/fvtt3ow8/wWD/uJ/gZ7iUT5jUuw8E3i2w
Ib5rqJ/ffWRu5bK2ZxHYsRpsArG3nudo7fBaHcf7vWeVmlHv6Nm3399Q6kby
UDWsJkNsSjm3ubdRbKvj65dOvNYqdx44llfP062ffbt/+ExhETspg1RZLSmn
8mGljU2snjr1wsWLN41GO5nM6O3tYzDq6+vFy8vnjIY+WlXDgGfGahmamFh5
5ZV33333ww8/+vjqlevewbFfvvvR5Us33nrjA0B/8uRVYUsXmM/6JhlIj9+q
wZHqkSXMuNQi0AUUxqj4wtTs0ud2RvBFCrmyB1mER5cQ9b2O0+dftDrGW9r0
SalF+w+lgk0FiCUEdlwqNiUbDzkC8EGggHgIBKEJQgk9EIGAErr3aA4ABQEe
iSkAUmBKj8bmN7XqO7UecaeNye08GJn3xK6E5DwKxHw0jgvtA+zcxOwlwAfG
xmCeBILJWbjkbHxyDi6zsDwlB7v7UNQDj3z170nQt0PUtysGXUw5e+mtdvkE
t9lLrzViccJe++qt1zZefGlj9cSby8df945eZDdoI2MxeIoA6ECQVxtn8FXi
TBSdWNWSXUAjUVve+eXGjVc36puNkfHFhyMLKhjtwjYTu17a55keGZr/zQcf
LyyuZWTmqdWm/v7xhoY28JlcjphawSGT6gQCeUeHemBg/M03f/Xxxsa5s5c+
/M3vf/3+Rxt/2Hjv7Y+mJ1ekUl1NnQDkTKU1NQpVFDo/H0vLLqSAu4DeBGkd
3EVkXMGhiIwmkUKq0NfzRek5+ZFxKYLWTod7St7loFYJ8/Ira7nyC1ffXVq/
1uucrqpr33s0C8LCkztin9qZAMhAgDDAiIIGN087hLwP7EBotY1KBJaekkOI
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
Ccjuyr/GQkbZ
                    "], {{0, 150}, {150, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
                    Interleaving -> True], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {150, 150}, 
                    PlotRange -> {{0, 150}, {0, 150}}], Annotation[#, 
                    Association[
                    "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset100/bfd/\
bfd2f0b50d1c55361012d905487ee181_v001s.jpg", "Dimensions" -> {150, 150}, 
                    "Source" -> 
                    "http://www.nasa.gov/multimedia/imagegallery/image_\
feature_329.html", "Popup" -> 
                    "hset100/bfd/bfd2f0b50d1c55361012d905487ee181_v001ms.jpg"]\
, "Image"]& ], 
                    TagBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJzsvQd4G1W+/+2SQmjL0usunQWWEhJCSEKKHXfLaiONZkajGY26XCV3W7as
ZlXLstx773Gc3iAECCW9E0IJJIQeIPSakPc3klNoe3fv5e5y/y/n+e7Z8Vjk
sf3x91fOORrfwmQL1FERERG5F8AkkBcuMhrlxcLL4ANRVq5Ok6VSJmXlqTQq
42wmGm42TPyPvf6/M6J+UZH/ikL/yeTzNCmkn/+zk378qT/GbzJ+meC/BPHH
dH4EKPK8+cf//h/jtxq/SvBf/GlPvDLyx4o+b/4xzT/GbzV+G4I/ofZz/YTs
H+O3Hr/CLvJnP/p/AsCv/Ud/gPvfHL8FwX+G0B8U/23jn/ZP5Pmv/zXo534l
/qhk/l3jnw5/5xE8j9FP50kRkT8pVv8Yv/2IjIyMioqC+Rc+dUYhHpG/4DO4
d67WPOu46InGJDI6MmoSO5+58+/9zv5fHr+KLDQmrn9mxzCyqNCrwnP4Pss3
Kgpohe6Em4uon/cX7Av+Td/f//sjTJA10HmK+Eex85fbjfDrJ4UWAib9uBOE
D6dERbKKZNdrpkRMvOCP8duOs+x+fGdihAIo6ycIhhHRkyKiokPRNCzIcdGh
34Qz9M+Ms/E2+gzKSX8Q/N8ZP8cXuvsTRYFjWV5RkyOip4Q0mdWkqRGT4Dqa
/WzUea+JDFUvkRP1TGQoF0ZHRUwOBdY/CP5W4xetFxWqQSDwTblg8tSLL5h2
ycUXXnbpJVdccfFVV150xVUXX33Nn667/rLrb/jTdTdccu31F19zHWjaNdeD
Lrz2BtAFV90w+fJroy65ImLaJRGTL2T5AtCoM0DDHccf4zcdQC06OnLKlEnT
pk295JKLLr3skqtvuObav1z/l9v+estdt91x7913PvD3e2Y8dO/DM++f/ej9
c+Y8MGfefXPn3T9vwQOPLZy+MHZ6bMKMhLTpibywHohPu2dR0h2Pxtw887Fr
75l52S13T7nqxoiL/xwx5eKIydMioi9ggf7/vhz9hUbtlzu4n5XuP35Z1BTW
ZZdcfulV1199w8033nzHLbfffced99519wP33TPjwfsfmTl9zsMPzZ0987E5
jyx8bHbsgscS4uclJs5JTHo0MWVOKm8RIkkmFRxlBl+Xz9UVgXj6YhBHk5ek
MCbIMhZJ1PMQelYq9uBi7p1z4q65++Ep194acdHlbPhlg23U2TD7k6/xV7/m
X3vN/6kRqvqiQjqvoT5bGEaHS/iJTZ9IVlFgMfhpTbwMXjB1UvQlF1901ZXX
3HbLTXffcfuDf7/3kRkPzn34occemTF/1oz5s2cunD8rJmbO4tgFiXExKfFx
3IQkYUqqOC1FzEsWI4kSCVeuIrIL5EUVdGmlosynr6jXmRs0ZXWq0qCyrFZV
HlSYglRJFZ7vwvKcSLY1TWdKVBQswDNnpMnvjUOu/fuMKdfdFHHBRRGTJodp
Qo3ElkOhimny2eYSvvRJ0eeK2tC3EN7Sij63sfULhfHvfPwjgvDNR59rq9ny
IUQw/BrIbpMvmnbZ1Vde9de/3HT3XXfMmHH/vHnTF82fFR87NzV+QVrSQm5i
LC8JFMdLTUWFXIkoVcTjYQgux0ECQozKaXlmZnqJOdfuK/I2F/rajSBvtyk4
YgoMl1YPFVb1g/L9fbne3mxPZ6azI93ZrrW3MJYGsrRWUuDnZztT9OXxCsNs
Efm3RYnX3PtQ9JU3REyZFsqVUdGTJ4W/IfiVO7dwEBU5Uc6eIRj9E4LnjBz1
f2UJ/czu6o9u/Sg8hsbZT0ZHR194MZQhV95466133z/9wTlzH4mNnZ/KWZjG
jeULEkTiZImEg2FpuISHY0AKl2MYJZIyErmaopQyiQyXMowqMyfXZDNVBqz+
Dmt1j7VmwF435mpa4W1b42pZEZatcdzasNTSMGquHTUFB03B4eLgUH6gP8fX
neHt0rs7VI42xtqMmQJIoYdvtCVq82cJZH99ZNHk6/8aMXkqa0lWk86ymzQp
6tx3d15vMvF7+rPcce5Tv/PxKyuWZ29Enlk9iZoUOe2iC668+oqb/nrjnffc
/eCsmY8uil2QlBzL5SYiSAqGp0lJAU2LGUbM0GAxTMGQCkquxJRqTKEmaYWU
lNNKXYax2FxWWe2u7fS3jNS0LQu0Lq9tX1ff/Xhd5+O1nev97av8nSuru1ZV
dazwtI67msecTUscjaP2hhFLw3BZ7VBhsL8wOFgQHDQE+jOrerJrRpSuLqI8
iBS5uNnlcYrMBznCvzwyN+rqayKmTmEJToqOnDwpvNpzdnvxbFN5jlHkhDF/
wvf3TjDyJ1/5uUMRU6OmnCvWoyImTYv+09V/uu7m6+645/b7Z9z36PzZixIX
JfLTIEKC3QQyKU+KCylSzMhQBSWWkyhNSORSqZxgFARFS0gKpxSMPju3xOL2
1HUFO5bWdS5vHdjQNrgR1DG8qXv4qba+9Q3dq+u6V9R1LwcFO8cDbUu8TUPu
hgFn40BlQ7+tvreitsdU211e31/WOFBc159X06uvbFPb21T2JsZaQ5Z50CJz
anrWQin5YCLE1bujLrssYvKkUMCEtBA1NTL6bNb4EcGzP4czpdD/JYJnv+wJ
guGKZVJoTYuNn1MunHbZVX++/pbrb7n3trum/23m3JnzYufGpC5O4CdBNcLB
hVwC5VGAjwB8EiWNKskwQUJOkkqSUVKMUq7PyjZZHE5/g6+uu7ZtrG1wfevQ
4x2jT3YMb2wdWNc+sLZjcE1H/+r2wZUNPUvre0YbukZq2wcDTb2++g53TRur
2nZHsNVW01JR01wRbDPXthVXt+R5GjNtNemW6nSLX22upErN0qJiNM/IzdAk
ysn5wrR75j58+U3XRUxhIbLrABP4zkH8KcH/cx6M+LkHJ509Kjb1wj9dee0N
1996+6333nP3zAfvmzPj/rkPPRIzb0FyTAw3cTE/OQ7hJIj5SRJRCiFJJSRp
JM6jpAIZjshIlJGRagWTrs3IzytzuLzBpkBjZ337EDDqGNnQOri2fWhD15In
ukfWd42s6RpZ1T60tLlnuLlnsKG7v66zt7atO9jSHqhvrgrUe6uDII+/xlMd
dFbX2P3VFp+/3FdV4vEUVTpNlc4iS0WeudRQXqgryZHn69FMOlUpjpdyY8TJ
sUjy3JRFdzx4z4VXXMZWzmdOUv1knXzi5/CTFYmJCud3P370nUSF2E2NiJh2
6VU33XTnfffOnHvvrDl3PTzrntmzH5g/d0bMgtnx8Qs4nFihIE6EJOI4h6L4
CoVYqxVr9UR6uiwzR56dozbkZxaVFFntZrfXHWx017X46tsCzT31HYOtvUu7
h1f1j20A9Qytau9b2tY72tE/2to7UN/eWdvWWt3U6Kuv8wUDvkB1VZXX66l0
u+xel81hLXM5KlyuCkdlucVeWm4vKXOUlNuLKqx5paaMwhJNXrEqI59W5Urp
bAmWLhKphTwFL1WWFocmPcaJeXDB7Bvuum3KZX/60ZLOz34A5zH8ne4gn9vo
CW/hhQLF5PB+ONsyQT81NWLqpVfcfPe9j8ZMj0l9KJZz3/z4++bHPbQ48dEU
7nwekiChk0klV54uVGWLtUY8o4AylCryzZpiR0a5K89eU+quM3kayz0NjupW
d0NnVUtPVUtXfddAY1d/W+9w3+CS/oHRocGxkeHxoYHRgb7h3p7Brq6eltb2
mvoGb7XfVeV0+51ev8PjtXmc5W5HidtS4DQbHaZMZ3m2szzTUZ5uK9dby3Tl
Jo2pRFFeQhYVSnKNQoNRkJMnzMgVaAxcRRaP1KdhOi6i5nGZtEQydT6S8GD8
nDvnzpx23dURU6dGREdFTJkcDj7hn8Ok0B5kKGye6X+jpvw+CZ5tDcLlGcSU
C6LD7URURPSUyZddfc0d99+/MHUOj5wvZuYjcriYwyMWCKVxqDyJ0KTJs/ma
fDSjjDTa5AVOValbbw7k2IJ5zqYib0t5dac12GOp6bYFup11/b7m4WDHSF33
cNvgGBitr394aGB4sLt3uLNrrLt7uKNtoLW5t7mxp6mhtSFY6/d4XRZXZYnT
UeSw5jrM2Y7yDFdZurNE4yxSeEuV/nJVtVnlNzO+MtpTRrpN0spSwm5CK0qF
5cXCsiJBaSG/uJBfkMszGHkZBr4mRyjPQoh0PqISJFOpiySJc/mL71kw++q7
74i4cHIoXUCJFhX6ziOnRIV3SqKmRMLdyROHAX62yPMfHOe779zNsAfZjVT2
/6ddft21dz5wfwwnBtMsprPiFbkJTG683JikMKYqctMUeQJNkTjTjBtsdKFb
ZfJrzTXp1mCWo9HobMp1tRZ528oC3ZZgn61uoLJ+yNsyFuxc1tS3qn1gdf/o
2qGhFUsGx5YPDi3paB9tqhtvrRtr9I3UuYfqnaDeWnubz1znLAzY86qsOe5y
fWWJ0l2iqCpVVJfSVSXSGhNZV0E1W+kmK9lokTZa8CYr0WiXVldgAStRbZH6
yjGPCXWXil0lqL1QZC4QFeeJjQaRPlNAa/mogiOgUjiy1Hg8bVbygltn3Dvt
2j+HS5nIaBZTaK+L7T0mR0z53RL8+R56aKWFTXyRky65+Kq/3DlzwYOLuY8h
zGIqZxFtjFMWJWpKU/TlvAwLP8MizKhAc+xEnktW5GZMVSpzQGMJ6mxAsD7H
2Vjoay/2d0K1b28ccLeMVHUsre1d2TywFsrOrsH1gyPrhwaWLx1cumpoaFlH
y1iDf2mdc2mtdSxQPhYsA43UlPb7Cjrdxna3odWZ1WTXNVpVzVZFi03RZmfa
rFS7TdbhILsdZE+lrLdSCupzEr0usr2S7HDJOyrpFqu00YyxKsNrSzF3PmI1
CE1Z/Dw9V6+GdJ2AEosFRHwKlgiZMU6UOH3RrIuvuyy80x/eT44+o3AdPrFg
83sqRs/GT/YAw8RiE3ypF0VMvfLyG+65c0bsfD69mEhnfccUxjKF8erSJF0F
J93Gy6oUZjvRXK+s2E+XeBmTV2X2a63V6Y5gtrshv6q5KNBWXtdtaeyrbOl3
tw/5Ooaqu0dr+5Y2DayEZqGtd01nz8qujtHBrsGlPT2jLbWDta4hf9lodfHS
QMHSQN7SauOSqqwRb8awJ33QpYOZvXBr+p2KkOSDTnrEIx90SQcricFKbNiJ
gwYdkgEbNuigBirpfpusp4LoKse6zXiXCW8vldQVIFVGxGUQ2HNEpgyBQcXR
UfFyKlEoiUlBYxOQmDjBoodjZ13xl6tDuKJDBerkSdAynjlAxXrz94Qv4jyC
55lxcsSF115x+6wHFwnncJkYSWY8lZ8C4FSlCaqyJJ01LE66g5/tFuf5qdJa
hSkA+DSWgN5ek+WqN1Y1Fde0m+q6TMHOiobuEMEBlmDPcLB3rKFvvKFnWbBt
qLa5P1jf1ljf1NFQ21btbPeW9fqLhwIFS2ryxgOGcX/mUp9u3Ktb5tOOOZjl
btUKn2a5Vz3uZpa45Uvc1KhLNuIiBuziPisyaBWNOCSjDsmIHR2yiEct2EgF
PmxGh8rF/eWiXpOopxTpKhE15vOqDVxPDteTiwDEUj0vT51i0KRpVGm4LIEv
XpiCLAKIM2MevubW6yMuYJdSwxAn8IU2N39v4+cEp1165dV3PXLvYjxWaoyn
Cx9DsxYReQmK0iSlOVlVkaqvBKXoHNwsjygvICmsJUvrlWW1mrKgriKYYYPg
2ZznbYXgWVrTWRbotNb3uluHfR0j/o7RQPdoXc94fe8SX2uXq6HR09DgqgnV
mR6ry17kd+Q1e/I7vcb+KsOIL2eJN2OpR7/MrV3l1qx0yNc6qbUe+Ro3vcpN
rfLQK3wUaIkTH7KJByzIkFU0asfGbKyW2iTjNvFSq4iVTTxcIegxcTtL0jpK
+Q0FHF9OkiMzyZqVUqJPMioWGxSJedq0PD0/U8PVaLioND6OtyAeiXskYd7V
t90YedGFIWYTiS/q930AAEIozBdddNHNd903YzEyH9Elygs5atNCSU6MND+e
Lk7RmAEiV+8QZLoEOR68KEiXN1HmJnlZPVNaozbVpFfUQwED1Qukv9JAtznY
DRmwsmnA2z7saxv2tfR7mnq9jb2exk5nfb0j6HXVVjmqK21us8VWUFGW4bZk
VVfo6i3aVou6264etCuHHQpw3zI7tc5JPe4i1zmlrNzkBi+1vopeXyVb45Ou
cEnG7WhYwGvMKhq3IWsqxesqRetc6Fo3Om4T9JemdBcn9pg4A3a0zSSsyU9z
GzhlIYJGTVJJttCoTCrS8wx6nkKeDBCTxTEL0xY8mjT/8r9eG3HR1NDpjuiz
fdZ/ZE3mF4/8nfepiV+zCy648JZbb5+zIJaDytOkOh6dnUZlJ0tzEkgj0ExR
mVJUUMDY8QI/UKNNdXCB5Xqk+V6m0KcxVWdb6g2VjdBBFLibSqraygMdltpO
W11HZV27o7bNWQdqcdU2O2tqwXqVVQ6Hx+bxWTwuk8NsqCzVeUvUVcV0bbGs
2STtKif6LMSITTruIJdXSsFTa134age6sYra4MQ3eoinq2RPeohNXumTIB/x
uBff4MPXeSSrPaI1LmSjG93oEm/yYo+7xRtc6JpK0WqbYK0TXWUXr3FTA2Zx
ICvJpIwxKmKyNMnpyoSyLL4pnVukS83Vc/TqFFy6OFk4fyFn3rykBVfdfhPb
XESHCtJQapzyy83+f2yECUL9ecklf7r55ltnPvzoosVJHIGEh9ECqSqNUCZK
VAm4NkmWncLkIellSKYFM1ayxWe+EyQvckH3pyt1Z1uq8+y1Rnsw21JlsFUX
uxsqalot1U3WmiZHoMFeXWv3B2xVfpu3yuqqtDsrbI4Sm63Q7Sj2OfK9FVlV
Jm1NmbKpXNFmpnoqSMA3ZJEssUogJC6zo2tc6AYPttImXF+JrrWLNrpxFp8b
3+jENrqxp3zSTVX4Rq9kvQd53Cd+yo895RJtrSafdoufcAo3+/EnveINDuEz
VcQGu2i9XbLSjncVC1wZCSWaeIM2KVMZZ5THVqSn2nIEpsy0vPTUdE2yRBqb
JFiQIIqfnTj/8ltujJgcDf1+ZNQk6BCjfx8Ez530Yz+ImDrtgpv+cvOD02fM
e2xRTGxCfHJKqkDAEaFJQtFigShBTCYTimSZhqvI4KuyhJockc6IZ+Yx+SZ9
mS27wllgcxdX+spcfpgL7b4iR1W5t9Ze0wjsKmvqndVBR1W1w+t1uF0OZ6XN
UWGx5FvMObayTHup3lWq9ZlU/hJ5dRHWVEq0l6HdofJjxIyMWZDlVmSVHVlR
wV1j5a13iDZ68U0+8gkInlYBhMo1lRJwFlysd7JeA+uttfHHSxLXlac+Uyl4
zodu9omfdAM79IVqKQDd7MXX20RPuGVjVkl9KJaaslJMmalFisX2TI49M61M
n2w28oqMApUyEUFjuJKEBGHCvKSYaVf9ObT5FM2W6/85ahE/C6dsGRM6aXDV
NVffc+99M2bOenTO/EUxi2PjYhI5Ccm81AROSjw3LVWMpklJDkkmY1KY+RSN
MAyp02lyDZnFhTmlhYUVZcXmkKwWk8NudrorXJ4Kt8vqctncTqvTZrWbLVaT
1Vpiqyi2mfPsZem2UrW1gK4w4PZczFuABQolgTxuYz63rZDTU8wZKE1bUsZd
buGvsSEA7lkf8YwHfcqLPuFiE9xISXJL+mN9RUnjFYKh4pS+vPilpamrKvhr
LYIVJSnj+XHPOZFnHNxtfsnzVeKNlbwnHJwnndxtNdLNbnSDlb+hEh018dqL
0hqK+ZU5Ka48vjeX7zXwLLqEMvViSxanJDNFr4hn6AQxFi/AU5KRpEdj506+
dNp/9B3eE4cqz904EwWiJ0/68xWX33rnHdMfnvXwo3PmLliYkJSYlLw4jZvA
FaSk8ZO5SJqIQDGKEMkIoRQV0Ti7x6eQytWUJlORnqXSZcizclRZWUqYjbnp
BYXZRaV5oMKS3HJzcXl5QXmpsaw4q7wow1KcYS3W2wvVViNhNaAVGfwKXbIj
M6Umn9dSImwtSusq4UDVMVqWOm5OW2Xlg6Eer0SerBSCoZ62pz3nFoGPwG79
hfEN+rm9xUlLKoQ9BUldhrhVFmRtOX91UerKvMSnKgRbKgXPWFI229M2V3K3
V2PLixc20Xc94+S+4BW94EXhHxk3ccDgw3ZJ0JgSLOA2l0lAwQK+OzvZlp5Q
oo7NVcYatCnQ9StUPBGWzMdSH3zkgTNbNP+RevTHBM+eD4mKvPLqq+64+2/3
PzR91py5oQiamJyawuOniEQcMcoHSQiEpHAZTeAURjKETIlTDEYzKMOIlSpU
rUTVCkSnFqVr0Uw9lpUuzcogszNpY44i36AqLtCU5ClLDLTJQFmMlCOPrsyT
uYy4VZdi1yc5tIkOTWxVelxzQWpvWdpgGWdpRdpya9paO3eDg/+kk/+0S7jZ
I3reI95Vhe72S/bXUTvrqOcCsrGy1E7Dwq68OD8zo8sQu6yM91y1fHtAebBB
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
oN7A1vqWp/AOVzdd/akbWebE6InSwmPFHU8OHH6p/9ALw4demDjy0vTtr0zf
9f2ZY6/MHHt56ugL4wefGN378ODiqa6p2/ODu7LdM7muyXR5OJXrymbzsWg4
4HG67Ca7ReuyaR0WpVkrtBlE9cX7TIuO4zbjLjPXqmOY1FSjmg5m1bPBdAoK
mFkL38Mwa+kmDU2vagcz62k2E9tphSKCiDvJpFOQcJExNxnzCqIBUSQgDvjF
4Zg6mjRpTcTnv/TpNeubLgw3LOvMxoSlNa3NLZcB9X4SbHp7GH/rn3PJKPOF
nsCVeIumQdY/rGub1l7d1HLttZ++nq1JpseO9+1+cujQSyNHfjB+10/G73ht
8q7XZ078bObET2ZPvA40h/Y+0TV/pnv2nuzgvmhlNtOzPVmZjBeGQslyJF0O
J3KheNYfSXgC4UAkGoqE48lYEmqTkMcfcPh8tkTCF4m4/H6zy6H2uNR2q8yo
F6gUXLWSZzIIdVrM6ZC4XVKXS+TxiEIBeTSiiEWVyagqGlSkYtp0XBeLaMNh
td+nDIS0qawnELJs3PydD1y7/pIB2TUt77vIfO/bRau/1ywTrHfaNF5sWdfU
enXT2o98/PMbhbZqefb+4YMvAb7Ro69O3/3j3ff/dumB3+6+7435k68N73sS
PHHh2HPzR58YXTwFiXJ8x91Ti8cWDp7adejU/N67p3cdHZ3ZOzK9e2Hp9r1H
7l5cOrpz6dDsjt2jEzMT09vndu7etXtpfsfC9Ozk6MRg70Ctf6gbrj391aHR
vsGR7uGx7pGJrrHJ6sS26raZ6vRsdW6uumtX346F3m1T5eHRbE9vorsvNTRS
jqU8bF7nh//u2nVXtNRTXtO6devquw7+GRc7vJ/tgj82JpNfGNnfcNW6+n+6
tWn9teCMTes/8ekvd0gcPdmxkxA5p44+N3H4mZk7vzd/9/cnjz49c8ezc3c+
s+PYM0snntt97Inddz16+PQzd933wtnHXgO7+/4X7zzzzB33PHnnqSfPPPjS
/Y9+//T55x947OUnnnvt4cdfevLZV5945gdPPvP98w89+fRz8OULjz/z/FPP
v/jIk8+ce/CR+x9+7P5HHjl17uzJM/ecOH33PWdP3HP6rrvuPnj46OKBQwu7
90zt2Dk2MzswOzvU25/nk4yPfvxDFw8xXBQJm/+I3SP/O7bV3m9UVqwSXNu6
MpN8bVNj1mLTuuuamj/U1PKxT31xC0cRSvcvTew/P3XwwW2HHgGbu+NxsJlD
Dy4ee/zg6WePnHvu7oe+f9cDLwC7kw+8ePf9L9z78Ev3PfaD+x9/9cEnXgWC
px549vyjLz32zKuPPPXK48+9+tizP3jquR8+9uz3wZ59+fXnX/3pcz/42WPP
v/rAky+CnX3k6fOPPXPfo0+cfvDhu06fOnD7kd0Hlnbv37Nn7+LuPQuTk4Px
WJBOa//Yxz/SQNaCtqxD289fCC/v20DDf0FbJbi+oWNXV+VccQXacmNNo8e3
MXNjDYjVDzStuRbsyr/97Dc3cTTOVLp3rjy+VJnYPzB/58D87eN7TsweODN/
5Oye4w/tvOPs3rvOHb73/JFTD9x+5qE7Tj14+OTZI/ecO3D81NF7z95+z9nb
7z197Ox9d5w6c+zsuZP3nT/76OMnzz9x8vzTd9/35Mn7n73n/HP3PvD82Ude
OnH/U/Di0XseWDp6cm7p8LaFPVMLi0NTM+XuPq1e99Wvfnn9evjLVzeFuESB
wIur+340Dkj6S2srIXRZxC6vyrnQpdNyofYHtbquuaXRF7x+zdprkF5dc/VH
P/2Fb29mi3Qea6gUKY4UBub6tu0bnjs8tvPIyMKBgZnF0YU9Y3NLkzv3Tu8+
sH3v4R0H75jbdwhsfv/hhf0H9915bPHQkV2Hj+44cHDv7cf333Vm5+F75vaf
2Hn4FFzHFg6DjcwdHJ0/MDS7d3T70uC2ndnagN7hvWFzx0c++Q9oAlDruub6
oQ9r165v5PXWtesb5V7TygTaZYJ/iQAv+sRe0pvUslLyr2u5qAuu8Rwa9S/a
D7XRTQd6b0NTy9XXfvSfPv+1m26jYgKtzRxIuuKFaL4nURrM1EYz5bFcbazQ
PVHsmSz1TmWro5X+6Ur/VLlvsnGtDmyrDU53D89Wh7aB9Y7Pjc/vBVj5ntFE
dSBc6I7mu3WOIBUXfeEb37n6Ix9rWr+hqRV1R7esuwp96lAFtPwpW7fuipWU
d+H/0vKOm2b9929vS/cX/uXCLg1N9QHi1uWFUav9dY1pcEivXoE4orU2VzWt
2dB0xQc/+NFP/f0/f+FrN27Z1MHjklq51m20R83OuNWd9IQKYE5/2h3M+iIF
hy/lDee90UIwXnZHsq5wwhmKW31hsycoN1hpmOBbt2397Je+et3HPtW04RqU
4QAQmivSikJ8c/OFAYU1a9H5KfUPIVpxUIfYvLL5J5ol1Hy5HXj/+7e3Alyd
m3HRq/Xb5pZluzA+tTzwsdqVt2Y1FF9ia1o3XHHVtR/6yMc+8Y+f+eznvvj5
f7v+S9d/89++9q0vf/3bq/bFr33zi1/5+he+fP2nPvOZ//GpT137t3+7/gMf
gDKgvk7oImtubmp+S6/XW2cEXfZ/934W6H/m9rZ9Tetbnq7apc9nVeS0XPJM
3j6xqvWSLy9+zmsuuja31ENxw1Z+Y/Mle0MsO09ryzuS+IN4/r8hePFCqtUn
+bZP+1u98jL/snJ/Sa9jfbldc6PVAxvCVF/FVZf4LejFeqJquXh+5iX6/20A
3qGX6a3fsNLe0Un/+7fmlVXhl46OXXDDlarwoq6b1XZZjhfr2MsgrjeE8uLq
rOHc9XO9V3/xZb3mLb/lrQTf9hlb/QV/wQRXi4hlfO9E5ZLnc5nn8I40V71v
zZpLn+Tlbc3y+vSLDPlt61u+560bEbzD33CZf/hLaxfPLriorXmH6zu3t8TS
d/51KxTqHtewi19vgQJhxZovGkd5y3U1Vl/2b/j/iWDTO/ndRSyWs+SaPzIK
XZoRL7jLu3r3ZR/vu3/nZX3zcpu9vC0L/IW0y7G71FafSeu77xv2x2B6i12K
+PICpvlyP7jcLqjfi7Z5eYftev4iCf4J7f9lGXBxjP1r+2v7a/tr+2v7a/tr
+2v7a3tv2v8BCE9MgQ==
                    "], {{0, 150}, {150, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
                    Interleaving -> True], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {150, 150}, 
                    PlotRange -> {{0, 150}, {0, 150}}], Annotation[#, 
                    Association[
                    "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset100/fbe/\
fbe8c8a2ada56f9512fc3edf557843f4_v001s.jpg", "Dimensions" -> {150, 150}, 
                    "Source" -> 
                    "http://hubblesite.org/newscenter/archive/releases/2001/\
24/image/a/", "Popup" -> 
                    "hset100/fbe/fbe8c8a2ada56f9512fc3edf557843f4_v001ms.jpg"]\
, "Image"]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}, {1, 3} -> {Center, Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Probes", "scanner" -> "Data", "id" -> 
     "Probes:PlanetData", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Venus"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"Venera 1\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Venera1"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Mariner 2\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Mariner2Venus"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Zond 1\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Zond1"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Venera 2\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Venera2"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Venera 3\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Venera3"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Mars"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"Mars 1\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Mars1"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Mariner 3\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Mariner3Mars"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Mariner 4\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Mariner4Mars"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Zond 2\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Zond2"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Mariner 6\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {DeepSpaceProbeData, "Mariner6Mars"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Probes:PlanetData__More"}, {}]}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Current sky positions from Brest", "scanner" -> "Data",
      "id" -> "SkyMap:PlanetData", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n    ", 
         XMLElement["microsource", {}, {"PlanetaryMoonData"}], "\n    ", 
         XMLElement["microsource", {}, {"StarData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{
                 GrayLevel[0.9], {}}, 
                RGBColor[0.6, 0.4, 0.2], 
                Thickness[0.003], {
                 
                 LineBox[{{0.26516573005575944`, -0.5503025616311126}, {
                  0.15706051089582643`, -0.5289885493269645}, {
                  0.05172829859082894, -0.4994744656708172}, \
{-0.05058856549920483, -0.4623252147102639}, {-0.14964215568310743`, \
-0.41796118597005294`}, {-0.2451600844690223, -0.3666808163859726}, \
{-0.33682781654714317`, -0.3086766769424767}, {-0.42427000452405206`, \
-0.24404657822584863`}, {-0.5070287892508173, -0.17280086860173022`}, \
{-0.5845367782853227, -0.0948669606814186}, {-0.6560818381447184, \
-0.010092211346932606`}, {-0.7207598398989711, 
                  0.08175328813872651}, {-0.7774099581950026, 
                  0.18097144111325075`}, {-0.8245248781734444, 
                  0.28792374255105696`}, {-0.8601251934369248, 
                  0.4030030020712738}, {-0.8744000480867866, 
                  0.48520568412357384`}}], 
                 
                 LineBox[{{0.8775232405885798, -0.4795341095552199}, {
                  0.835441888378998, -0.49901195658965936`}, {
                  0.7191263181626315, -0.5351251709740524}, {
                  0.603242385266632, -0.5564947046234852}, {
                  0.4886095254483809, -0.5651509297093867}, {
                  0.3757844404319047, -0.5626760600210973}, {
                  0.26516573005575944`, -0.5503025616311126}}]}, {}, 
                GrayLevel[0.37], 
                Thickness[0.00114], {{
                  
                  LineBox[{{-0.08355686158747261, -0.10318302517457567`}, {
                   0.031038651517826574`, -0.18265657049762424`}, {
                   0.10697731255828269`, -0.22887646917150675`}, {
                   0.1853297845116418, -0.23431072515372292`}, {
                   0.10874218398659251`, -0.19646297468930898`}, {
                   0.058174495084233065`, -0.14884389741603848`}, \
{-0.026994163506949446`, -0.03812487781619364}}]}, {{}}, {{}}, {
                  
                  LineBox[{{0.8720849242208851, -0.3615487119225855}, {
                   0.7317923435012867, -0.41357925392045325`}, {
                   0.6125054908361817, -0.41746670354696985`}, {
                   0.5701473314188911, -0.45554079744205406`}, {
                   0.5443179697697823, -0.45108782386351093`}, {
                   0.5253353742802449, -0.4617579072211899}, {
                   0.4207245594639753, -0.5777747864175461}, {
                   0.49292292869524923`, -0.5698459604317021}, {
                   0.52199009637577, -0.6384995353334508}, {
                   0.5022205746322443, -0.6676433013978477}, {
                   0.4593211769483914, -0.7466542371058534}}], 
                  
                  LineBox[{{0.6125054908361817, -0.41746670354696985`}, {
                   0.6050988578058614, -0.5212935138208507}, {
                   0.6539958049565877, -0.576303655018734}}]}, {{
                   
                   LineBox[{{0.9998106433002769, 0.019459638832379306`}, {
                    0.9686053814009025, 0.025006793055972514`}, {
                    0.8888008458757799, 0.189946696476537}, {
                    0.8675029011138344, 0.03146654575300534}, {
                    0.8755267153116576, 0.0011936520315845836`}, {
                    0.8885158903878795, -0.03676399776421047}, {
                    0.9116144983096747, -0.16118456215716906`}, {
                    0.9376665351976524, -0.08455491017277489}, {
                    0.9686053814009025, 0.025006793055972514`}}]}, 
                  
                  LineBox[{{0.8888008458757799, 0.189946696476537}, {
                   0.881266014729079, 0.21855691468233546`}}]}, {{}, {}, {}}, {
                  
                  LineBox[{{-0.08369402949779513, -0.3610340084079355}, \
{-0.08549180573556082, -0.3439573760847929}, {-0.11632757136095197`, \
-0.31076460448480064`}, {-0.21864647137806834`, -0.24695649726298696`}}]}, {
                  
                  LineBox[{{-0.5558374483697229, -0.03236151982070724}, \
{-0.4697459945591561, -0.040384773826424636`}, {-0.4278904103037921, 
                   0.04893278000490772}, {-0.401480419509632, 
                   0.0653746226752897}, {-0.40501983221191534`, 
                   0.10543624746355107`}, {-0.4663550559854458, 
                   0.1651726027580328}, {-0.5376643441257273, 
                   0.1063485005805601}, {-0.5558374483697229, \
-0.03236151982070724}}]}, {{
                   
                   LineBox[{{0.2374712444280053, 0.9713945686845354}, {
                    0.22780046558857067`, 0.9547268939672666}, {
                    0.3014359280050398, 0.8955138203304697}, {
                    0.3809315859230749, 0.92460322671194}}]}}, {{}}, {
                  
                  LineBox[{{-0.31839627034048035`, 
                   0.1457460160176494}, {-0.2700576254564975, 
                   0.20773114803159015`}, {-0.212293354395647, 
                   0.24640650564136854`}, {-0.12597286402522828`, 
                   0.24941609451603022`}, {-0.16943831525064645`, 
                   0.12587817670883486`}}]}, {{
                   
                   LineBox[{{-0.9516788407986551, 
                    0.30709507318765017`}, {-0.8673038004516551, 
                    0.44011963432998163`}, {-0.8260140012234332, 
                    0.4495366776910458}, {-0.7336086879862997, 
                    0.48509452135371767`}}]}, {
                   
                   LineBox[{{-0.8673038004516551, 
                    0.44011963432998163`}, {-0.8941945493614728, 
                    0.4476785765392763}}]}}, {
                  
                  LineBox[{{-0.09246785682496557, 
                   0.9886465770793686}, {-0.15409065282352882`, 
                   0.9419958507060489}}]}, {{}, {}}, {
                  
                  LineBox[{{-0.9753619570261359, 
                   0.10876460816335119`}, {-0.929056727239849, 
                   0.09546834120934551}}]}, {{
                   
                   LineBox[{{0.7931304069982006, -0.6090518512367142}, {
                    0.720606026724526, -0.5702970031200773}, {
                    0.7993524762451112, -0.5314692676157972}, {
                    0.8500217328435798, -0.5019693770365653}, {
                    0.8922303258261872, -0.45158060817100615`}}]}}, {{}}, {
                  
                  LineBox[{{0.10457293169415832`, 0.09200148051417043}, {
                   0.06534498890611556, 0.05400642805766831}, {
                   0.03619818166800296, 
                   0.09724289077116732}, {-0.0034911324281921936`, 
                   0.09018556121510939}, {-0.03849535086557276, 
                   0.13050763960929318`}}]}, {{}, {}, {}, {}}, {
                  
                  LineBox[{{0.23716659358543232`, 0.14683149833621856`}, {
                   0.2632904335109853, 0.14723708223493115`}, {
                   0.25958853686965966`, 0.1615661149397981}, {
                   0.16418830321722497`, 0.20448051627711242`}, {
                   0.06205284933732096, 0.2960956422917733}, {
                   0.19054297062846284`, 0.29654543199247263`}, {
                   0.2717411507914425, 0.2491555997909141}, {
                   0.30212879877642396`, 0.2808085297252463}, {
                   0.29905758409729605`, 0.3056632441645303}}], 
                  
                  LineBox[{{0.25958853686965966`, 0.1615661149397981}, {
                   0.2717411507914425, 0.2491555997909141}}]}, {
                  
                  LineBox[{{-0.09458712996505038, -0.6907661991974637}, \
{-0.002436430982857468, -0.6700283818536302}, {
                   0.0493606753940375, -0.6913811225983273}, {
                   0.2127559928918295, -0.6606650981225507}, {
                   0.13639184615507055`, -0.7729288813718481}, \
{-0.07104603103524999, -0.7545196359545253}, {-0.09458712996505038, \
-0.6907661991974637}, {-0.18901707174618027`, -0.5745824483398774}, \
{-0.24232016047353663`, -0.5513617983514268}, {-0.24989462804196672`, \
-0.5164966913650453}, {-0.19591763943606946`, -0.4676196714100611}, \
{-0.24297548859064527`, -0.4390360224937024}, {-0.2888027163660639, \
-0.4414107358913678}, {-0.3065410648099267, -0.4927650869615716}, \
{-0.24989462804196672`, -0.5164966913650453}}]}, {{}}, {{}}, {{}, {}}, {{}}, \
{{}}, {{}}, {{}}, {{}, {}}, {{}, {}}, {
                  
                  LineBox[{{0.46923418398147454`, 0.17731113667398452`}, {
                   0.5381878927670718, 0.17761810145759335`}, {
                   0.616499605845355, 0.1980756659624984}, {
                   0.7149971177799027, 0.21485581604013257`}}], 
                  
                  LineBox[{{0.5565372335854918, -0.003523582249416244}, {
                   0.5674113598980649, 0.08148519569469487}, {
                   0.5381878927670718, 0.17761810145759335`}, {
                   0.5182001122611144, 0.2822609270331252}, {
                   0.46581456677635313`, 0.322980480274956}, {
                   0.4452398484917069, 0.34768415732809815`}, {
                   0.43593191060764397`, 0.3694255646439001}}]}, {
                  
                  LineBox[{{0.7765879187500297, -0.09310783811339607}, {
                   0.7428428322562202, -0.07162555926274115}, {
                   0.7286125300563184, -0.06403127714081105}, {
                   0.7133402377525088, -0.07885618745891876}, {
                   0.727592427335049, -0.08140971767082991}, {
                   0.7428428322562202, -0.07162555926274115}}]}, {{}, {}}, {
                  
                  LineBox[{{-0.12489291996255339`, 
                   0.6189977435199286}, {-0.05652477193721084, 
                   0.6392202504202161}, {0.06070081781317221, 
                   0.6999423993968529}, {0.20980964783165768`, 
                   0.705163508398338}, {0.2646840787988463, 
                   0.6687430637151689}, {0.2618555755555098, 
                   0.6231832749962399}, {0.254844001083485, 
                   0.5502638520281711}, {0.19870522201968852`, 
                   0.49344465163347684`}, {0.20237458937737648`, 
                   0.45944208882034054`}, {0.1991116658689653, 
                   0.4144865491502161}, {0.23212373304485037`, 
                   0.3797442689529187}, {0.26721930807320354`, 
                   0.4096207939480381}, {0.383355251056102, 
                   0.515222396932499}, {0.3916800023460397, 
                   0.5533219475734583}, {0.4246665933554881, 
                   0.5627207252211833}, {0.4500832245414644, 
                   0.5148705990370264}, {0.383355251056102, 
                   0.515222396932499}}]}, {
                  
                  LineBox[{{0.7204225662728251, -0.2579655799641834}, {
                   0.6939352489798796, -0.25625172917341693`}, {
                   0.6953139129987949, -0.2041571818149201}, {
                   0.7041756504085102, -0.1937658624341707}, {
                   0.7204225662728251, -0.2579655799641834}}]}, {{
                   
                   LineBox[{{-0.727127199245744, -0.4628764783242785}, \
{-0.7092325844925061, -0.422289940713952}, {-0.6671035264065357, \
-0.4548361359210082}, {-0.6106396072180788, -0.4595172402862898}, \
{-0.5471828524863436, -0.5372981629787639}, {-0.518248157078955, \
-0.633176734039626}, {-0.47703238519715724`, -0.631333693302463}, \
{-0.4632946175833365, -0.6078201477493407}, {-0.4293951395417926, \
-0.6158084659582425}, {-0.30943370241559665`, -0.6428051664293782}, \
{-0.28072324546283683`, -0.7598664509699813}, {-0.3426363747290634, \
-0.8055613124861013}, {-0.30244071696956765`, -0.7835869268590635}, \
{-0.44839159519401073`, -0.7554250115200937}, {-0.493802405100828, \
-0.7608594060870882}, {-0.5179389575843831, -0.7694988796480021}, \
{-0.5384619824033714, -0.7551811647316518}, {-0.6291425692565191, \
-0.7772899250275318}}]}}, {
                  
                  LineBox[{{-0.37722310974242423`, -0.8602242680928924}, \
{-0.2975605874859434, -0.9149322269704611}, {-0.14334481975350968`, \
-0.8988243418849602}}]}, {
                  
                  LineBox[{{-0.822635925780779, 
                   0.008586398846182543}, {-0.7794252704640147, 
                   0.019685621672162375`}, {-0.7784826339646991, 
                   0.1284609319288959}, {-0.7821472753855456, 
                   0.1853392273594238}, {-0.7761055892340097, 
                   0.2737762152046117}, {-0.7355190975338085, 
                   0.2974669135918211}, {-0.6856781272611492, 
                   0.28897557375017785`}, {-0.68347436211933, 
                   0.2738282512681464}, {-0.6864788858869275, 
                   0.21735306193401108`}, {-0.7083746187737864, 
                   0.11009964015452185`}, {-0.7020614334080504, 
                   0.03571029894569386}, {-0.6890660132706132, 
                   0.01606331594481289}}]}, {{}, {}}, {
                  
                  LineBox[{{0.40944794226654413`, 0.7464982613709729}, {
                   0.41320521549225775`, 0.7180128873369056}, {
                   0.4786417620241627, 0.7070164214211466}, {
                   0.5329096393294872, 0.6996263658753074}, {
                   0.5998964220844382, 0.6218342808710515}, {
                   0.6558715054581085, 0.6699749998037121}, {
                   0.618793372472138, 0.7246019271237084}, {
                   0.5329096393294872, 0.6996263658753074}}], 
                  
                  LineBox[{{0.5998964220844382, 0.6218342808710515}, {
                   0.6042870914240508, 0.598541703027708}, {
                   0.6257168525974848, 0.5117146330767837}, {
                   0.5073371286657865, 0.5537846070111786}}], 
                  
                  LineBox[{{0.6558715054581085, 0.6699749998037121}, {
                   0.7520215709446018, 0.6240618805431871}, {
                   0.7505953860836564, 0.5730089562839328}, {
                   0.7407141844238704, 0.5248835215520006}, {
                   0.7266977487456312, 0.49290698763073787`}, {
                   0.7357709300415584, 0.4614261485917953}}], {
                   
                   LineBox[{{0.618793372472138, 0.7246019271237084}, {
                    0.6637750079415303, 
                    0.747932308990741}}]}, {}}, {{}}, {{}}, {{}}, {{}, {}}, {
                  
                  LineBox[{{0.3915387513123229, -0.034684136012008274`}, {
                   0.38290111683969424`, -0.01285692923129631}, {
                   0.3271698171790306, 0.04365898616080771}, {
                   0.3027720099377163, 0.06768269396403122}, {
                   0.3027720099377163, 0.06768269396403122}, {
                   0.2876696718259803, 0.06827479607970137}, {
                   0.28595118892035054`, 0.09459195486631998}}]}, {{
                   
                   LineBox[{{-0.7312247164649888, 
                    0.6821366534871857}, {-0.7092462787206054, 
                    0.6948393409902326}, {-0.7080118747336465, 
                    0.70620052763797}}]}}, {
                  
                  LineBox[{{-0.4906299332141484, 
                   0.8412964145671389}, {-0.5175659995349274, 
                   0.7672131299250783}, {-0.5709643301782426, 
                   0.7206223229485593}}]}, {{
                   
                   LineBox[{{-0.7525274318093138, -0.6382226207408304}, \
{-0.8135859602663993, -0.58144465364934}}], 
                   
                   LineBox[{{-0.8221853745520242, -0.569219825614628}, \
{-0.8278271326408412, -0.5266458879754659}, {-0.8606122977429602, \
-0.4567983368749583}, {-0.8670985453259538, -0.4463387797706323}, \
{-0.8854929685802247, -0.42618589939244517`}}]}, 
                  
                  LineBox[{{-0.8278271326408412, -0.5266458879754659}, \
{-0.762488898519639, -0.5462367830375136}}], {}}, {{}, {}}, {{}, {}}, {
                  
                  LineBox[{{-0.6405264351325831, 
                   0.5944801041297222}, {-0.6122397165186156, 
                   0.5878512597489665}, {-0.5636505166806043, 
                   0.5406311934568416}, {-0.5608578513691986, 
                   0.4521479911152161}, {-0.4836717154543634, 
                   0.3499318413905878}, {-0.3676438970467963, 
                   0.3365536554854827}, {-0.34269814950094274`, 
                   0.28717797994566474`}}]}, {
                  
                  LineBox[{{0.6154067357964902, 0.4095586473548558}, {
                   0.6288762686051618, 0.385893036342973}, {
                   0.6352290289837408, 0.358471464433824}, {
                   0.6829610589735068, 0.32811995037643943`}, {
                   0.6781598258383031, 0.3551962163212409}, {
                   0.6288762686051618, 0.385893036342973}}], 
                  
                  LineBox[{{0.6048735788093652, 0.3937209745806591}, {
                   0.6154067357964902, 0.4095586473548558}, {
                   0.6476815651057367, 0.4462917439106266}}]}, {{}}, {{}}, {{
                   
                   LineBox[{{-0.8974300558364575, -0.28143362856301696`}, \
{-0.9368244860558569, -0.2521613718471003}, {-0.9838555096140389, \
-0.043957422537173954`}, {-0.9990208348593369, -0.04424219159301851}}]}, 
                  
                  LineBox[{{-0.9838555096140389, -0.043957422537173954`}, \
{-0.9142149864538408, -0.08852342881565835}, {-0.8479267379430594, \
-0.13456666343244286`}, {-0.8460815529080616, -0.08073657578113902}}]}, {{}, \
{}}, {{}}, {{}}, {{}, {}, {}}, {
                  
                  LineBox[{{-0.765259406454765, -0.17851319710742752`}, \
{-0.7048925019965756, -0.20364763904902522`}, {-0.7001302389188849, \
-0.25818214744682577`}, {-0.7538717755532277, -0.3167411308872646}, \
{-0.7408975658023315, -0.44557654676111247`}, {-0.8420298110534677, \
-0.39063717777433365`}, {-0.7854988236591296, -0.3156404421332213}, \
{-0.765259406454765, -0.17851319710742752`}, {-0.7873742505297228, \
-0.36663128181606885`}, {-0.7514652999616978, -0.06814014511010423}, \
{-0.6896482171039516, -0.031352615504595595`}}], 
                  
                  LineBox[{{-0.7001302389188849, -0.25818214744682577`}, \
{-0.6060501701327221, -0.32069148496406163`}, {-0.598696260703315, \
-0.29823835098226736`}, {-0.6034082236296666, -0.27702107980955115`}}], 
                  
                  LineBox[{{-0.6060501701327221, -0.32069148496406163`}, \
{-0.6160805480470639, -0.3330869588339939}, {-0.6388188260200057, \
-0.362553062516174}, {-0.6539004765910477, -0.36266592381400015`}}], 
                  
                  LineBox[{{-0.7514652999616978, -0.06814014511010423}, \
{-0.7386559710824127, -0.07355460844942449}, {-0.6709554220135663, \
-0.05199812235596625}}]}, {{}}, {
                  
                  LineBox[{{0.1853297845116418, -0.23431072515372292`}, {
                   0.20038340894573262`, -0.39023990737884745`}, {
                   0.38968637447849447`, -0.33088360935057104`}, {
                   0.44954181959509915`, -0.34152482807760004`}, {
                   0.46891058579009653`, -0.34909915014559983`}, {
                   0.5732916194824557, -0.3523207256015612}, {
                   0.6238289711004514, -0.26601844484715215`}}], 
                  
                  LineBox[{{0.38968637447849447`, -0.33088360935057104`}, {
                   0.3424714904537271, -0.19157669081254217`}, {
                   0.37934548094918435`, -0.14515271879003094`}, {
                   0.4838731017304977, -0.14491031239006452`}, {
                   0.5293105074850271, -0.10495612438814872`}}], 
                  
                  LineBox[{{0.3424714904537271, -0.19157669081254217`}, {
                   0.3897502889428811, -0.2125077666582276}, {
                   0.40263296153913186`, -0.2191455945626285}, {
                   0.5810031373711244, -0.18818197204168993`}, {
                   0.6148264669442903, -0.1202801000686753}}], 
                  
                  LineBox[{{0.3424714904537271, -0.19157669081254217`}, {
                   0.1853297845116418, -0.23431072515372292`}}]}, {
                  
                  LineBox[{{-0.3277182868195352, -0.14564499965134695`}, \
{-0.3277182868195352, -0.14564499965134695`}, {-0.3417742785249468, \
-0.09325909831020704}, {-0.31785562442009435`, -0.051465561558896554`}, \
{-0.2512655026397884, 0.012988715349125496`}, {-0.21064629924933137`, 
                   0.019391494710505733`}, {-0.16420851582273444`, 
                   0.0447685997049646}, {-0.13406143249928684`, 
                   0.06272521184451726}, {-0.03581877821291745, \
-0.014654006206699084`}}], 
                  
                  LineBox[{{-0.21064629924933137`, 
                   0.019391494710505733`}, {-0.20542421936208974`, \
-0.04370220298720582}, {-0.21726090924382996`, -0.08614231664781563}, \
{-0.21860949565662907`, -0.11091446066369151`}, {-0.18970058810327425`, \
-0.12629803749416563`}}]}, {{}}, {{}}, {
                  LineBox[CompressedData["
1:eJwBQQG+/iFib1JlAgAAABMAAAACAAAA7nnON5JXnT9X/lSqEUTPv1GsAgXY
94M/4oDO+fOr0b99VtoMrKiZP7J0b+fvjtO/sJHBYwoWmL+t37JTByLav7pg
nOgxELG/NmC12dpr3r8m9Oo8+zW/v5QOYCNvWeG/J2kg1s29rL/G28x8Y4ng
v/TQC9SpwJW/yBhJ2jxX4L/9qFbnhbavP2LzsFWkV9+/oYn1vt4Buz9dzUf9
01nfv17LY5oYYNA/8O7Hly1N3r9s3E60OUHUP8pZz3sMNd6/5qn45INt1j83
VUikqPfcv77FqYNtCdg/enrmEHAv3b+1eQrTev3YP53n9z8Rd96/5JP7YdVm
1z+v7Tv0mEbgvy0Tl0/NWtQ/XtsNtOSH4L97y8WCqEnTP+QhRt27CeC/bNxO
tDlB1D/KWc97DDXev0tusB0=
                   "]]}, {{
                   
                   LineBox[{{0.5034249021173782, -0.8348523039428212}, {
                    0.5076477756229147, -0.8615647021002584}}], 
                   
                   LineBox[{{0.6507632226447847, -0.7592807307267677}, {
                    0.6492518419275213, -0.7596385878204757}, {
                    0.5605013213993286, -0.7847201250567729}, {
                    0.5034249021173782, -0.8348523039428212}}]}}, {{}}, {{}}, \
{{}}, {
                  
                  LineBox[{{0.7530317415462179, 0.061254122203773395`}, {
                   0.7670188010296216, 0.07428045368583437}, {
                   0.7839879276300279, 0.09849991034000803}, {
                   0.8106660014827208, 0.10751139594834473`}}], 
                  
                  LineBox[{{0.7839879276300279, 0.09849991034000803}, {
                   0.8066567166737884, 
                   0.11473113919686191`}}]}, {{}, {}, {}, {}, {}}, {{}, {}}, {{
                   
                   LineBox[{{0.41664256384627985`, -0.9090703900092658}, {
                    0.4305837954013578, -0.889328390539453}, {
                    0.32752002703342276`, -0.8605818935899384}, {
                    0.08592460612036587, -0.9032233011264428}}]}}, {{}, {}}, \
{{}}, {{}}, {
                  
                  LineBox[{{-0.3616176890669962, -0.4171164439685436}, \
{-0.3664125317388736, -0.40692105580903587`}, {-0.4504547265683086, \
-0.33702873624330487`}, {-0.48737218018752054`, -0.27638126760775245`}, \
{-0.48630362930183424`, -0.2513418563271168}, {-0.4921262112273536, \
-0.2254806264995358}, {-0.5034594831957703, -0.16495470561982775`}, \
{-0.5558374483697229, -0.03236151982070724}}], 
                  
                  LineBox[{{-0.48737218018752054`, -0.27638126760775245`}, \
{-0.5086032114866026, -0.26033759635829246`}, {-0.5234179792607658, \
-0.2420785813590204}, {-0.6322087617839338, -0.08022229202927954}}]}, {{}}, {
                  
                  LineBox[{{-0.10648889635017125`, -0.18251757525208603`}, \
{-0.12620472596714932`, -0.19221941101047188`}, {-0.07376132695163921, \
-0.24705914250130048`}}]}, {{}}, {{}}, {
                  LineBox[{{0.061243144743516956`, 0.8693550510838715}, {
                   0.0013457512898335815`, 
                   0.8106051988336652}, {-0.05983755858749113, 
                   0.7949896204267981}, {-0.13139463941535928`, 
                   0.7661808086227475}, {-0.19037526288086604`, 
                   0.783307030009397}, {-0.2604398299218314, 
                   0.7052522959740206}, {-0.2124211034426986, 
                   0.6647923303515422}, {-0.13139463941535928`, 
                   0.7661808086227475}}], 
                  
                  LineBox[{{-0.2124211034426986, 
                   0.6647923303515422}, {-0.28854888597609685`, 
                   0.5540253812756946}, {-0.3453458306581765, 
                   0.4768833159788802}, {-0.3183966018712193, 
                   0.5964732979047674}, {-0.2604398299218314, 
                   0.7052522959740206}}], 
                  
                  LineBox[{{-0.3183966018712193, 
                   0.5964732979047674}, {-0.41863915399377294`, 
                   0.5948289217559571}, {-0.4873647537525172, 
                   0.5353713841263433}, {-0.49552978597645725`, 
                   0.5453069866593043}}], {
                   
                   LineBox[{{-0.19037526288086604`, 
                    0.783307030009397}, {-0.245038129790001, 
                    0.8309014501596873}, {-0.42923704434706267`, 
                    0.9031918731699249}}]}, 
                  
                  LineBox[{{-0.245038129790001, 
                   0.8309014501596873}, {-0.35177730316228795`, 
                   0.8064635699362064}, {-0.33863473345035205`, 
                   0.8951872735475136}, {-0.4660516523674581, 
                   0.714961223045185}}]}, {
                  
                  LineBox[{{-0.0025861480412191756`, 0.4130729882981803}, {
                   0.036362520570985664`, 0.4381425636561202}, {
                   0.0751689393504236, 0.4751966980389862}, {
                   0.08757314862263754, 0.5293530516236855}, {
                   0.0748796672554358, 0.5825803936569179}, {
                   0.11358300287145792`, 0.5928865256631057}, {
                   0.12233352172289076`, 0.5309773650581229}, {
                   0.08757314862263754, 
                   0.5293530516236855}}]}, {{}}, {{}, {}, {}, {}}, {{}}, {
                  
                  LineBox[{{0.7303013358825675, 0.1258216015114422}, {
                   0.7517722651995358, 0.19800994004349548`}, {
                   0.7982498033321822, 0.2115354048168739}}]}}, 
                RGBColor[0.1538, 0.44126, 1.], {{}, {}, 
                 
                 DiskBox[{0.05054082677769686, 0.06633756247209212}, 
                  0.0109124], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.4921262112273536, -0.2254806264995358}, 
                  0.0106982], {}, {}, 
                 
                 DiskBox[{0.8720849242208851, -0.3615487119225855}, 
                  0.0099332], 
                 
                 DiskBox[{0.7149971177799027, 0.21485581604013257`}, 
                  0.011769199999999999`], {}, 
                 
                 DiskBox[{-0.3700907734124103, -0.22857219418551647`}, 
                  0.012778999999999999`], 
                 
                 DiskBox[{-0.5234179792607658, -0.2420785813590204}, 
                  0.0188378], 
                 
                 DiskBox[{0.2717411507914425, 0.2491555997909141}, 
                  0.014002999999999998`], 
                 
                 DiskBox[{0.19054297062846284`, 0.29654543199247263`}, 
                  0.011616199999999998`], 
                 
                 DiskBox[{0.20038340894573262`, -0.39023990737884745`}, 
                  0.0128402], {}, 
                 
                 DiskBox[{-0.21726090924382996`, -0.08614231664781563}, 
                  0.0151046], {}, 
                 
                 DiskBox[{-0.7794252704640147, 0.019685621672162375`}, 
                  0.015594199999999999`], 
                 
                 DiskBox[{-0.05983755858749113, 0.7949896204267981}, 
                  0.016114399999999997`], 
                 
                 DiskBox[{0.061243144743516956`, 0.8693550510838715}, 
                  0.015839], 
                 
                 DiskBox[{0.38678847472600536`, 0.8820568769307305}, 
                  0.0083114], {}, 
                 
                 DiskBox[{-0.08355686158747261, -0.10318302517457567`}, 
                  0.015073999999999999`], {}, 
                 
                 DiskBox[{-0.5558374483697229, -0.03236151982070724}, 
                  0.016451], 
                 
                 DiskBox[{-0.7696546196680211, -0.31756675209809593`}, 
                  0.0163286], 
                 
                 DiskBox[{-0.7854988236591296, -0.3156404421332213}, 
                  0.0161756], 
                 
                 DiskBox[{-0.09254505781059678, 0.9886752922258955}, 
                  0.004333399999999998], {}, {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.212293354395647, 0.24640650564136854`}, 
                  0.0084644], {}, {}, {}, 
                 
                 DiskBox[{0.7286125300563184, -0.06403127714081105}, 
                  0.009963799999999998], {}, 
                 
                 DiskBox[{-0.37722310974242423`, -0.8602242680928924}, 
                  0.009871999999999999], {}, {}, {}, 
                 
                 DiskBox[{0.2876696718259803, 0.06827479607970137}, 
                  0.0099944], {}, 
                 
                 DiskBox[{-0.6405264351325831, 0.5944801041297222}, 
                  0.011891599999999999`], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.12191744076967889`, -0.542167252628547}, 
                  0.0098108], {}, {}, 
                 
                 DiskBox[{0.8066567166737884, 0.11473113919686191`}, 
                  0.0080666], 
                 
                 DiskBox[{0.08592460612036587, -0.9032233011264428}, 
                  0.008342], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.7517722651995358, 0.19800994004349548`}, 
                  0.007913599999999998], {}, {}, 
                 
                 DiskBox[{0.1853297845116418, -0.23431072515372292`}, 
                  0.0151658], 
                 
                 DiskBox[{0.06205284933732096, 0.2960956422917733}, 
                  0.0116774], 
                 
                 DiskBox[{0.24172111795682946`, 0.39315637931170233`}, 
                  0.007209799999999999], 
                 
                 DiskBox[{0.8885158903878795, -0.03676399776421047}, 
                  0.010147399999999999`], {}, 
                 
                 DiskBox[{0.8755267153116576, 0.0011936520315845836`}, 
                  0.019174399999999998`], 
                 
                 DiskBox[{0.26721930807320354`, 0.4096207939480381}, 
                  0.0121058], {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.784147889937765, 
                    0.6205739977683167}, {-0.7818490093290211, 
                    0.6126186978627982}, {-0.7738937094235027, 
                    0.614917578471542}, {-0.7659384095179842, 
                    0.6172164590802859}, {-0.768237290126728, 
                    0.6251717589858043}, {-0.7698551277048842, 
                    0.6307703025046356}, {-0.7756711779258748, 
                    0.6311372463538225}, {-0.7799095339318198, 
                    0.6258556220610696}, {-0.784147889937765, 
                    0.6205739977683167}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 5.981057106550642, 5.981057106550642, 
                    5.981057106550642}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.7761925900322465, 0.6228728783770605}, 
                    0.008280799999999998, {3.4229040787252463`, 
                    7.790973558816627}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.7756711779258748, 
                    0.6311372463538227}, {-0.779945301612501, 
                    0.6258843246260064}, {-0.784147889937765, 
                    0.6205739977683168}, {-0.7799095339318198, 
                    0.6258556220610697}, {-0.7756711779258748, 
                    0.6311372463538227}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000458613199672`, 1.0000458613199672`, 
                    1.0000458613199672`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {2.458574170065768, 
                    2.4721181602965183`}]]}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.44227255261459064`, 
                    0.8968806995380011}, {-0.4330953412515037, 
                    0.8911479710465037}, {-0.4273626127600062, 
                    0.9003251824095906}, {-0.4260689402812804, 
                    0.9023961518946244}, {-0.4257900382071053, 
                    0.9048219954021851}, {-0.43403129541084795`, 
                    0.9008513474700931}, {-0.44227255261459064`, 
                    0.8968806995380011}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 3], 
                    Rational[1, 3], 
                    Rational[2, 3], 
                    Rational[2, 3], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 2.10184880244012, 2.10184880244012, 
                    2.10184880244012}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.43653982412309317`, 0.9060579109010881}, 
                    0.010820599999999998`, {4.154027013851161, 
                    6.168716731001536}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.4257900382071051, 
                    0.9048219954021851}, {-0.4340676200841315, 
                    0.9009267409525904}, {-0.44227255261459086`, 
                    0.896880699538001}, {-0.43403129541084795`, 
                    0.900851347470093}, {-0.4257900382071051, 
                    0.9048219954021851}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000083691368958, 1.000083691368958, 
                    1.000083691368958}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {2.010631175342959, 
                    2.0289272623301513`}]]}, 
                 
                 DiskBox[{0.4246665933554881, 0.5627207252211833}, 
                  0.0129626], {}, 
                 
                 DiskBox[{0.6050988578058614, -0.5212935138208507}, 
                  0.008739799999999999], 
                 
                 DiskBox[{-0.30244071696956765`, -0.7835869268590635}, 
                  0.010177999999999998`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.8278271326408412, -0.5266458879754659}, 
                  0.013605199999999998`], 
                 
                 DiskBox[{0.378635457407448, 0.600317631120998}, 
                  0.006475399999999999], {}, 
                 
                 DiskBox[{-0.8673038004516551, 0.44011963432998163`}, 
                  0.0094436], 
                 
                 DiskBox[{-0.8260140012234332, 0.4495366776910458}, 
                  0.007240399999999999], {}, 
                 
                 DiskBox[{-0.3277182868195352, -0.14564499965134695`}, 
                  0.0097802], {}, {}, {}, 
                 
                 DiskBox[{-0.30943370241559665`, -0.6428051664293782}, 
                  0.009596599999999999], 
                 
                 DiskBox[{0.5732916194824557, -0.3523207256015612}, 
                  0.010728799999999998`], 
                 
                 DiskBox[{-0.09458712996505038, -0.6907661991974637}, 
                  0.010055599999999998`], 
                 
                 DiskBox[{-0.5471828524863436, -0.5372981629787639}, 
                  0.0091376], 
                 
                 DiskBox[{-0.7001302389188849, -0.25818214744682577`}, 
                  0.0164816], {}, 
                 
                 DiskBox[{0.714906016397203, 0.21479766870648617`}, 
                  0.005863399999999998], {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.2700576254564975, 0.20773114803159015`}, 
                  0.009168199999999998], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.6939352489798796, -0.25625172917341693`}, 
                  0.005710399999999997], 
                 
                 DiskBox[{-0.2975605874859434, -0.9149322269704611}, 
                  0.007883], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.28595118892035054`, 0.09459195486631998}, 
                  0.007974799999999999], 
                 
                 DiskBox[{-0.5175659995349274, 0.7672131299250783}, 
                  0.008648], {}, {}, {}, 
                 
                 DiskBox[{-0.9368244860558569, -0.2521613718471003}, 
                  0.0099944], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.42866453924650516`, -0.4550847783841679}, 
                  0.007791199999999998], {}, {}, 
                 
                 DiskBox[{0.8106660014827208, 0.10751139594834473`}, 
                  0.0080666], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.10648889635017125`, -0.18251757525208603`}, 
                  0.01232], {}, {}, 
                 
                 DiskBox[{-0.765259406454765, -0.17851319710742752`}, 
                  0.020123], 
                 
                 DiskBox[{-0.294684865828045, -0.3123372054084264}, 
                  0.008189], {}, 
                 
                 DiskBox[{-0.40501983221191534`, 0.10543624746355107`}, 
                  0.0212552], 
                 
                 DiskBox[{0.10457293169415832`, 0.09200148051417043}, 
                  0.0145232], 
                 
                 DiskBox[{-0.6856781272611492, 0.28897557375017785`}, 
                  0.016665199999999998`], 
                 
                 DiskBox[{-0.6856779599647783, 0.2889868241102714}, 
                  0.012778999999999999`], {}, 
                 
                 DiskBox[{-0.15409065282352882`, 0.9419958507060489}, 
                  0.008525599999999998], {}, {}, 
                 
                 DiskBox[{-0.6709554220135663, -0.05199812235596625}, 
                  0.0080666], {}, {}, {}, 
                 DiskBox[{-0.6896482171039516, -0.031352615504595595`}, 
                  0.0073016], {}, {}, 
                 
                 DiskBox[{-0.031957707177376005`, -0.08507836068557982}, 
                  0.0061694], 
                 
                 DiskBox[{0.41591008222893516`, -0.5994828378056539}, 
                  0.0064142], 
                 
                 DiskBox[{0.862160656334011, 0.053876586806513034`}, 
                  0.005343199999999999], 
                 
                 DiskBox[{-0.5396361676061616, 0.012403449510785374`}, 
                  0.007087399999999999], {}, 
                 
                 DiskBox[{-0.7561367220410373, 0.39724445871701314`}, 
                  0.0058022], {}, {}, 
                 
                 DiskBox[{-0.015152855488759666`, 0.07930942467458013}, 
                  0.0071792], {}, 
                 
                 DiskBox[{-0.08840983647519247, -0.6950844218887133}, 
                  0.007240399999999999], 
                 DiskBox[{0.6444558083930884, 0.19713443572819417`}, 0], 
                 
                 DiskBox[{0.20237458937737648`, 0.45944208882034054`}, 
                  0.010636999999999999`], {}, 
                 
                 DiskBox[{-0.7459683498157852, 0.34962011046477337`}, 
                  0.006383599999999998], 
                 
                 DiskBox[{0.40423730557499843`, 0.7924269202732488}, 
                  0.007424], {}, {}, {}, {}, 
                 
                 DiskBox[{0.18758655709622912`, -0.33554025358854417`}, 
                  0.006842599999999999], {}, 
                 
                 DiskBox[{0.03224833959853754, -0.3448295702804642}, 
                  0.007240399999999999], {}, {}, 
                 
                 DiskBox[{-0.4447816487887201, -0.1673815928752692}, 
                  0.005037199999999999], 
                 
                 DiskBox[{-0.245038129790001, 0.8309014501596873}, 
                  0.0102086], {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.10362824749978919`, 
                    0.9946160999702963}, {-0.1095977703907169, 
                    0.9834557092954728}, {-0.09843737971589328, 
                    0.977486186404545}, {-0.08727698904106965, 
                    0.9715166635136173}, {-0.08130746615014195, 
                    0.982677054188441}, {-0.07735857787806089, 
                    0.9900597440035067}, {-0.0826080031416411, 
                    0.9965821179496203}, {-0.09311812532071514, 
                    0.9955991089599583}, {-0.10362824749978919`, 
                    0.9946160999702963}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 5.750372332297978, 5.750372332297978, 
                    5.750372332297978}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.09246785682496557, 0.9886465770793686}, 
                    0.012656599999999999`, {2.650428247150063, 
                    6.960866584064849}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.0826080031416412, 
                    0.9965821179496201}, {-0.09312850253428588, 
                    0.9957100599112246}, {-0.10362824749978916`, 
                    0.9946160999702962}, {-0.09311812532071519, 
                    0.9955991089599582}, {-0.0826080031416412, 
                    0.9965821179496201}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000111441392693, 1.000111441392693, 
                    1.000111441392693}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {1.653498573598338, 
                    1.6746109504369873`}]]}, {}, 
                 
                 DiskBox[{-0.7092325844925061, -0.422289940713952}, 
                  0.0129932], {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9989574431159243, 
                    0.04565114284763153}, {-0.9938811662196153, 
                    0.04362526125385567}, {-0.9918552846258395, 
                    0.048701538150164626`}, {-0.9898294030320637, 
                    0.05377781504647359}, {-0.9949056799283726, 
                    0.05580369664024946}, {-0.9966380825844753, 
                    0.05649507788790338}, {-0.9984317157229918, 
                    0.05598311386876283}, {-0.998694579419458, 
                    0.05081712835819718}, {-0.9989574431159243, 
                    0.04565114284763153}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 4.465872490092496, 4.465872490092496, 
                    4.465872490092496}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.9969315615221485, 0.050727419743940495`}, 
                    0.0054655999999999975`, {4.332668989398187, 
                    8.132022212804358}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9984317157229918, 
                    0.05598311386876276}, {-0.998721301709581, 
                    0.050818488083257424`}, {-0.9989574431159243, 
                    0.04565114284763153}, {-0.9986945794194579, 
                    0.05081712835819714}, {-0.9984317157229918, 
                    0.05598311386876276}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000026757219548, 1.000026757219548, 
                    1.000026757219548}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {3.0855802555374177`, 
                    3.095925639485542}]]}, {}, {}, 
                 
                 DiskBox[{0.634575089996354, 0.36074511361181133`}, 
                  0.004425200000000001], 
                 
                 DiskBox[{-0.48630362930183424`, -0.2513418563271168}, 
                  0.009963799999999998], {}, {}, 
                 
                 DiskBox[{-0.9856392702873664, 0.06845832897096253}, 
                  0.0043945999999999985`], {}, {}, 
                 DiskBox[{0.6352290289837408, 0.358471464433824}, 0.0085868], 
                 
                 DiskBox[{-0.4896515838283139, -0.2506425221239313}, 
                  0.006812], {}, 
                 
                 DiskBox[{-0.986421549901858, 0.07302796699944517}, 
                  0.003660199999999999], 
                 
                 DiskBox[{-0.4907441320161448, -0.24342357264876074`}, 
                  0.008342], 
                 
                 DiskBox[{0.10697731255828269`, -0.22887646917150675`}, 
                  0.011493799999999998`], {}, 
                 
                 DiskBox[{0.9686053814009025, 0.025006793055972514`}, 
                  0.0112184], {}, 
                 
                 DiskBox[{-0.3765567028572838, 0.23058332871846746`}, 
                  0.010116799999999999`], {}, {}, {}, 
                 
                 DiskBox[{0.23716659358543232`, 0.14683149833621856`}, 
                  0.009045799999999998], 
                 
                 DiskBox[{-0.24232016047353663`, -0.5513617983514268}, 
                  0.0090152], {}, {}, {}, {}, {}, {}, 
                 DiskBox[{0.5182001122611144, 0.2822609270331252}, 0.0127484], 
                 
                 DiskBox[{0.727592427335049, -0.08140971767082991}, 
                  0.0079442], {}, 
                 
                 DiskBox[{0.6953139129987949, -0.2041571818149201}, 
                  0.0078218], 
                 
                 DiskBox[{-0.4803261817938494, -0.8693588947903249}, 
                  0.006230599999999999], {}, {}, {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.9838555096140389, -0.043957422537173954`}, 
                  0.008800999999999998], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.2512655026397884, 0.012988715349125496`}, 
                  0.012289399999999999`], {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.5103010858811071, -0.859995814959912}, {
                    0.5029764709608656, -0.8586555958555147}, {
                    0.5005632984337884, -0.8656999389286603}, {
                    0.5054321921574477, -0.8628478769442861}, {
                    0.5103010858811071, -0.859995814959912}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.7413788595762085`, 1.7413788595762085`, 
                    1.7413788595762085`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0.5087445622970359, -0.8685025851068143}, 
                    0.008648, {1.3898235606571017`, 2.8115532872487132`}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.5005632984337886, -0.8656999389286602}, {
                    0.5054482858247862, -0.8628753512265155}, {
                    0.510301085881107, -0.8599958149599118}, {
                    0.5054321921574478, -0.862847876944286}, {
                    0.5005632984337886, -0.8656999389286602}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000318413974973`, 1.0000318413974973`, 
                    1.0000318413974973`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-1.0465469879692457`, -1.035261471304526}]]}, 
                 
                 DiskBox[{0.10549728548134009`, -0.4898576711122667}, 
                  0.007913599999999998], {}, {}, 
                 
                 DiskBox[{0.7919725070751745, 0.09797242682064446}, 
                  0.010239199999999999`], 
                 
                 DiskBox[{0.32752002703342276`, -0.8605818935899384}, 
                  0.0074546000000000005`], {}, {}, {}, 
                 
                 DiskBox[{-0.12495391320278239`, -0.1881690980270357}, 
                  0.0066896], {}, {}, {}, {}, 
                 
                 DiskBox[{0.46923418398147454`, 0.17731113667398452`}, 
                  0.017675], 
                 
                 DiskBox[{0.720606026724526, -0.5702970031200773}, 
                  0.012778999999999999`], {}, 
                 
                 DiskBox[{0.13639184615507055`, -0.7729288813718481}, 
                  0.0152576], 
                 
                 DiskBox[{-0.4873647537525172, 0.5353713841263433}, 
                  0.011952799999999998`], {}, 
                 
                 DiskBox[{-0.2124211034426986, 0.6647923303515422}, 
                  0.0159614], 
                 
                 DiskBox[{0.19870522201968852`, 0.49344465163347684`}, 
                  0.007515799999999998], 
                 
                 DiskBox[{0.20980964783165768`, 0.705163508398338}, 
                  0.0114326], 
                 
                 DiskBox[{0.6238289711004514, -0.26601844484715215`}, 
                  0.0142172], {}, 
                 
                 DiskBox[{0.6041892471666569, 0.3940080157242092}, 
                  0.007209799999999999], {}, 
                 
                 DiskBox[{0.6048735788093652, 0.3937209745806591}, 
                  0.0074546000000000005`], 
                 
                 DiskBox[{0.11095970026033204`, -0.2457451044701586}, 
                  0.008219599999999999], {}, {}, 
                 
                 DiskBox[{0.881266014729079, 0.21855691468233546`}, 
                  0.0091988], 
                 
                 DiskBox[{-0.2575377351550489, -0.3049844599665017}, 
                  0.007332199999999999], 
                 
                 DiskBox[{-0.8504174684833575, 0.4313158941109623}, 
                  0.0022526000000000004`], 
                 
                 DiskBox[{-0.9174051599512139, 0.09944981548407267}, 
                  0.006230599999999999], 
                 
                 DiskBox[{0.7598124435340703, -0.5937709735156147}, 
                  0.0076994], {}, 
                 
                 DiskBox[{0.2632904335109853, 0.14723708223493115`}, 
                  0.0087092], 
                 
                 DiskBox[{-0.25677482152618175`, -0.68780884924113}, 
                  0.006720199999999999], {}, {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.5674113598980649, 0.08148519569469487}, 
                  0.013911199999999999`], 
                 
                 DiskBox[{0.7765879187500297, -0.09310783811339607}, 
                  0.009168199999999998], {}, 
                 
                 DiskBox[{0.7671535385820707, -0.23020775419929407`}, 
                  0.0052819999999999985`], 
                 
                 DiskBox[{-0.4293951395417926, -0.6158084659582425}, 
                  0.010116799999999999`], 
                 
                 DiskBox[{-0.3411956718933058, -0.857445500453215}, 
                  0.0035071999999999985`], {}, 
                 
                 DiskBox[{0.6558715054581085, 0.6699749998037121}, 
                  0.009504799999999999], {}, {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.7510088438478539, 
                    0.6602921447831329}, {-0.7389353525980136, 
                    0.6574140224299262}, {-0.7360572302448068, 
                    0.6694875136797666}, {-0.7352068096863482, 
                    0.673054959365248}, {-0.7364318798627172, 
                    0.6765117044973166}, {-0.7437203618552856, 
                    0.6684019246402247}, {-0.7510088438478539, 
                    0.6602921447831329}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 3], 
                    Rational[1, 3], 
                    Rational[2, 3], 
                    Rational[2, 3], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 2.1746139720615516`, 2.1746139720615516`, 
                    2.1746139720615516`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.7481307214946472, 0.6723656360329733}, 
                    0.012411799999999999`, {4.478372921919182, 
                    6.623774481315036}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.7364318798627171, 
                    0.6765117044973167}, {-0.7438087936539879, 
                    0.6684814007275874}, {-0.751008843847854, 
                    0.660292144783133}, {-0.7437203618552856, 
                    0.6684019246402249}, {-0.7364318798627171, 
                    0.6765117044973167}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000118904635718, 1.000118904635718, 
                    1.000118904635718}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {2.3985771399648126`, 
                    2.420384956089819}]]}, 
                 
                 DiskBox[{-0.7525274318093138, -0.6382226207408304}, 
                  0.011738599999999998`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.8479267379430594, -0.13456666343244286`}, 
                  0.0080666], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.31785562442009435`, -0.051465561558896554`}, 
                  0.012625999999999998`], {}, 
                 
                 DiskBox[{0.5605013213993286, -0.7847201250567729}, 
                  0.0087092], 
                 
                 DiskBox[{0.06193941544491286, -0.48972423904688445`}, 
                  0.0084338], {}, {}, 
                 
                 DiskBox[{0.8254786187124435, 0.11021571046019027`}, 
                  0.004149799999999999], {}, 
                 
                 DiskBox[{-0.07768972358620543, -0.8556794151086715}, 
                  0.005312600000000001], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.09358408638540158, -0.20342866123950512`}, 
                  0.0046700000000000005`], {}, {}, 
                 DiskBox[{0.0751689393504236, 0.4751966980389862}, 
                  0.008617399999999999], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.29112047066155944`, -0.951859215202681}, 
                  0.0015794000000000016`], {}, {}, {}, {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.2969992963005227, -0.9548776979262812}, \
{-0.2959051175924584, -0.9516746300227208}, {-0.2991081854960188, \
-0.9505804513146565}, {-0.3023112533995792, -0.9494862726065922}, \
{-0.3034054321076435, -0.9526893405101526}, {-0.3034319630251745, \
-0.9527670063701893}, {-0.30345469859706736`, -0.9528458668112924}, \
{-0.30022699744879505`, -0.9538617823687867}, {-0.2969992963005227, \
-0.9548776979262812}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 4.002351732991232, 4.002351732991232, 
                    4.002351732991232}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.3002023642040831, -0.9537835192182169}, 
                    0.0033848000000000003`, {-0.32917500746724243`, 
                    2.8609028153173015`}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.3034546985970674, -0.9528458668112924}, \
{-0.3002304351290461, -0.9538727043439567}, {-0.29699929630052274`, \
-0.9548776979262813}, {-0.3002269974487951, -0.9538617823687868}, \
{-0.3034546985970674, -0.9528458668112924}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000114502702298`, 1.0000114502702298`, 
                    1.0000114502702298`}, SplineDegree -> 2]], 
                   DiskSegment[{0, 0}, 
                    1, {-1.8791125615426139`, -1.8723449377869135`}]]}, {}, \
{}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.2980477544953854, -0.9545509604207931}, \
{-0.2951148321295526, -0.950838519197555}, {-0.2988272733527907, \
-0.9479055968317223}, {-0.3025397145760288, -0.9449726744658895}, \
{-0.3054726369418616, -0.9486851156891276}, {-0.30658181387272737`, \
-0.9500890922177874}, {-0.30648437493462977`, -0.9518756893213155}, \
{-0.30226606471500755`, -0.9532133248710543}, {-0.2980477544953854, \
-0.9545509604207931}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 4.572084937400072, 4.572084937400072, 
                    4.572084937400072}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.3017601957186235, -0.9516180380549604}, 
                    0.004731199999999998, {-0.6686291248154907, 
                    3.1960775174285283`}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.30648437493462977`, \
-0.9518756893213154}, {-0.30227198423119805`, -0.9532319924039607}, \
{-0.2980477544953853, -0.954550960420793}, {-0.3022660647150075, \
-0.9532133248710541}, {-0.30648437493462977`, -0.9518756893213154}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000195837934904`, 1.0000195837934904`, 
                    1.0000195837934904`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-1.8822937864022076`, -1.873443128164341}]]}, 
                 
                 DiskBox[{0.06929697768121375, -0.31621067956172366`}, 
                  0.008035999999999998], {}, {}, 
                 
                 DiskBox[{0.5253353742802449, -0.4617579072211899}, 
                  0.0091376], 
                 
                 DiskBox[{0.9376665351976524, -0.08455491017277489}, 
                  0.0096578], {}, 
                 
                 DiskBox[{-0.13423760807677343`, -0.3335852852308255}, 
                  0.0054962], 
                 
                 DiskBox[{-0.4278904103037921, 0.04893278000490772}, 
                  0.011769199999999999`], 
                 
                 DiskBox[{-0.8395848659740419, 0.4083895092302009}, 
                  0.005190199999999999], 
                 
                 DiskBox[{-0.9433282701010043, 0.08594585867581057}, 
                  0.005526800000000002], {}, {}, 
                 
                 DiskBox[{0.30212879877642396`, 0.2808085297252463}, 
                  0.011065399999999998`], 
                 
                 DiskBox[{0.0493606753940375, -0.6913811225983273}, 
                  0.0109124], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.616499605845355, 0.1980756659624984}, 
                  0.009596599999999999], 
                 
                 DiskBox[{0.7619610854779004, -0.07792315955140094}, 
                  0.0050066], 
                 
                 DiskBox[{0.2618555755555098, 0.6231832749962399}, 
                  0.013146199999999999`], {}, 
                 
                 DiskBox[{0.5329096393294872, 0.6996263658753074}, 
                  0.010851199999999998`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.8854929685802247, -0.42618589939244517`}, 
                  0.010147399999999999`], {}, {}, 
                 
                 DiskBox[{0.6021562416385605, 0.32100883126168356`}, 
                  0.0079442], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7440720404907729, -0.35705937485916167`}, 
                  0.011248999999999999`], {}, 
                 
                 DiskBox[{-0.13406143249928684`, 0.06272521184451726}, 
                  0.009963799999999998], {}, {}, 
                 
                 DiskBox[{-0.023521578158026635`, -0.40832694219306626`}, 
                  0.0104228], {}, {}, 
                 
                 DiskBox[{0.7530317415462179, 0.061254122203773395`}, 
                  0.0059246], {}, {}, 
                 
                 DiskBox[{0.19214321870701476`, -0.9358839962528258}, 
                  0.006628399999999998], {}, {}, {}, {}, 
                 DiskBox[{0.12233352172289076`, 0.5309773650581229}, 
                  0.006352999999999999], {}, {}, 
                 
                 DiskBox[{0.4500832245414644, 0.5148705990370264}, 
                  0.014645599999999998`], 
                 
                 DiskBox[{0.5034249021173782, -0.8348523039428212}, 
                  0.0179504], {}, {}, {}, {}, 
                 
                 DiskBox[{0.7133624377071781, -0.07883256007375052}, 
                  0.005741], 
                 
                 DiskBox[{-0.29987849524490595`, -0.8248144785295907}, 
                  0.0027116000000000015`], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.7133402377525088, -0.07885618745891876}, 
                  0.0084338], 
                 
                 DiskBox[{-0.3007328800127226, -0.8633600055185757}, 
                  0.0050066], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.22780046558857067`, 0.9547268939672666}, 
                  0.0121976], 
                 
                 DiskBox[{-0.12597286402522828`, 0.24941609451603022`}, 
                  0.0074546000000000005`], {}, 
                 
                 DiskBox[{-0.9241994473105002, 0.10464720167567788`}, 
                  0.0082502], {}, {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.7041756504085102, -0.1937658624341707}, 
                  0.007117999999999999], {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, 
                 
                 DiskBox[{-0.8974300558364575, -0.28143362856301696`}, 
                  0.009290599999999998], {}, {}, {}, 
                 
                 DiskBox[{-0.16420851582273444`, 0.0447685997049646}, 
                  0.012595399999999998`], {}, {}, {}, 
                 
                 DiskBox[{0.390471178145073, -0.4760172962847891}, 
                  0.010177999999999998`], {}, {}, 
                 
                 DiskBox[{0.7670188010296216, 0.07428045368583437}, 
                  0.010759399999999999`], 
                 
                 DiskBox[{0.4305837954013578, -0.889328390539453}, 
                  0.0080054], {}, {}, {}, 
                 
                 DiskBox[{-0.48737218018752054`, -0.27638126760775245`}, 
                  0.010331], 
                 
                 DiskBox[{-0.12620472596714932`, -0.19221941101047188`}, 
                  0.009168199999999998], {}, {}, 
                 
                 DiskBox[{-0.12489291996255339`, 0.6189977435199286}, 
                  0.0098108], {}, 
                 
                 DiskBox[{-0.929056727239849, 0.09546834120934551}, 
                  0.012656599999999999`], 
                 
                 DiskBox[{0.383355251056102, 0.515222396932499}, 
                  0.010086199999999998`], {}, {}, 
                 
                 DiskBox[{-0.11632757136095197`, -0.31076460448480064`}, 
                  0.0153494], 
                 
                 DiskBox[{-0.7028534477675719, -0.1982773493177931}, 
                  0.011126599999999999`], 
                 
                 DiskBox[{0.46891058579009653`, -0.34909915014559983`}, 
                  0.011065399999999998`], 
                 
                 DiskBox[{-0.7336086879862997, 0.48509452135371767`}, 
                  0.009168199999999998], 
                 
                 DiskBox[{0.4452398484917069, 0.34768415732809815`}, 
                  0.0039662], 
                 
                 DiskBox[{-0.2531837060977482, -0.8949052128418679}, 
                  0.0039355999999999974`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7335544362871809, 0.48501297976420527`}, 
                  0.0013652000000000004`], 
                 
                 DiskBox[{0.4512644885636379, 0.34138802086122205`}, 
                  0.0099944], 
                 
                 DiskBox[{-0.2606401315142287, -0.895510957059364}, 
                  0.0036296], {}, {}, {}, {}, 
                 
                 DiskBox[{0.20938391489217267`, -0.06131418066053418}, 
                  0.0083726], {}, {}, 
                 DiskBox[{0.6539958049565877, -0.576303655018734}, 0.0083726], 
                 
                 DiskBox[{0.9866159557689124, -0.05931010211724581}, 
                  0.008158399999999998], {}, 
                 
                 DiskBox[{-0.09555471453135463, -0.3764176970029134}, 
                  0.0059246], 
                 
                 DiskBox[{-0.4697459945591561, -0.040384773826424636`}, 
                  0.013268599999999998`], 
                 
                 DiskBox[{0.1241479146442236, 0.8342980837276299}, 
                  0.006964999999999999], {}, 
                 
                 DiskBox[{0.7993524762451112, -0.5314692676157972}, 
                  0.008403199999999998], 
                 
                 DiskBox[{-0.07030296946065519, 0.17838049670587208`}, 
                  0.007852399999999999], {}, 
                 
                 DiskBox[{0.16418830321722497`, 0.20448051627711242`}, 
                  0.01079], 
                 
                 DiskBox[{0.2127559928918295, -0.6606650981225507}, 
                  0.010606399999999998`], {}, {}, {}, {}, 
                 
                 DiskBox[{0.7666804596308852, -0.10405466514390152`}, 
                  0.0049148], {}, 
                 
                 DiskBox[{-0.7250274625885564, 0.24078549962520623`}, 
                  0.0099332], {}, 
                 
                 DiskBox[{0.5073371286657865, 0.5537846070111786}, 
                  0.0098108], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7473933427003824, -0.4941031154942411}, 
                  0.007883], {}, 
                 
                 DiskBox[{0.6400070513406574, 0.32256243716085065`}, 
                  0.005434999999999999], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7906793312565469, -0.3738888878150508}, 
                  0.013023799999999999`], {}, 
                 
                 DiskBox[{0.4838731017304977, -0.14491031239006452`}, 
                  0.009963799999999998], 
                 
                 DiskBox[{-0.18634271712070075`, 0.0063107014214325895`}, 
                  0.009107], {}, {}, {}, 
                 
                 DiskBox[{0.31648104294021695`, -0.4719878396112135}, 
                  0.008862199999999999], {}, {}, 
                 
                 DiskBox[{0.2147878029862309, -0.8879982122112474}, 
                  0.0056492], {}, 
                 
                 DiskBox[{-0.5575368848218558, -0.1432213272166617}, 
                  0.007362799999999999], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.24989462804196672`, -0.5164966913650453}, 
                  0.010881799999999999`], {}, 
                 
                 DiskBox[{0.11645679388905177`, 0.8313987009450784}, 
                  0.0012427999999999988`], 
                 
                 DiskBox[{-0.3599282747504108, -0.48532001848572576`}, 
                  0.0066896], {}, {}, {}, {}, 
                 
                 DiskBox[{0.2569285507234792, -0.8710207330356907}, 
                  0.0049148], 
                 
                 DiskBox[{-0.46854152840555124`, -0.19785597179271697`}, 
                  0.008617399999999999], {}, {}, 
                 
                 DiskBox[{0.11649417735839368`, 0.8313663382417761}, 
                  0.007638199999999998], 
                 
                 DiskBox[{-0.3644952318035461, -0.4801922912429849}, 
                  0.004057999999999999], {}, {}, {}, {}, 
                 DiskBox[{0.24922187010539038`, -0.8700227396032139}, 
                  0.004945399999999999], 
                 
                 DiskBox[{-0.4691358988291473, -0.1987618915218739}, 
                  0.0053738000000000015`], {}, 
                 
                 DiskBox[{0.20117084911473201`, -0.051543380072729815`}, 
                  0.008800999999999998], 
                 
                 DiskBox[{0.5305956032362575, -0.5117311599432652}, 
                  0.006077599999999999], {}, {}, 
                 
                 DiskBox[{-0.11570590859236894`, -0.3199907310157477}, 
                  0.006108199999999999], 
                 
                 DiskBox[{-0.6286079386768314, 0.07681730133850165}, 
                  0.008280799999999998], {}, {}, 
                 DiskBox[{0.740859000160999, -0.5964448023851913}, 0.0070568], 
                 
                 DiskBox[{0.06358170258865227, 0.12593080525710443`}, 
                  0.008739799999999999], {}, 
                 
                 DiskBox[{0.14260763807905477`, 0.3873774533812814}, 
                  0.008097199999999999], {}, {}, 
                 
                 DiskBox[{0.47052676444712355`, 0.8376548394829512}, 
                  0.006842599999999999], {}, {}, 
                 
                 DiskBox[{0.43593191060764397`, 0.3694255646439001}, 
                  0.009871999999999999], 
                 
                 DiskBox[{0.7734583335389313, -0.12040104974342276`}, 
                  0.005985799999999998], {}, 
                 
                 DiskBox[{-0.05652477193721084, 0.6392202504202161}, 
                  0.009718999999999998], {}, 
                 
                 DiskBox[{-0.20543500396089634`, -0.8309467453973587}, 
                  0.005618599999999998], 
                 
                 DiskBox[{-0.7761055892340097, 0.2737762152046117}, 
                  0.0105758], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7417969542156432, 0.6021762482661314}, 
                  0.0078218], 
                 
                 DiskBox[{-0.7537062492268973, -0.5053271207895473}, 
                  0.008158399999999998], {}, 
                 
                 DiskBox[{0.6476815651057367, 0.4462917439106266}, 
                  0.0082502], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.5293105074850271, -0.10495612438814872`}, 
                  0.0088316], 
                 
                 DiskBox[{-0.20542421936208974`, -0.04370220298720582}, 
                  0.0099026], {}, {}, 
                 
                 DiskBox[{0.3656514603483727, -0.5086178560445002}, 
                  0.006352999999999999], {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, 
                 
                 DiskBox[{0.7204225662728251, -0.2579655799641834}, 
                  0.009504799999999999], 
                 
                 DiskBox[{0.0748796672554358, 0.5825803936569179}, 
                  0.0151658], {}, {}, 
                 
                 DiskBox[{0.21714286685038056`, 0.22322651565414217`}, 
                  0.0084644], 
                 
                 DiskBox[{-0.24170589734576153`, -0.9486261945239955}, 
                  0.003415399999999999], {}, {}, {}, 
                 
                 DiskBox[{-0.2550554277540787, -0.9460400739504705}, 
                  0.0038131999999999992`], {}, {}, {}, 
                 
                 DiskBox[{0.1984772890317791, -0.027065435574642503`}, 
                  0.009841399999999998], 
                 
                 DiskBox[{0.49292292869524923`, -0.5698459604317021}, 
                  0.010086199999999998`], {}, {}, 
                 
                 DiskBox[{-0.0917754852011876, -0.3121687236332936}, 
                  0.006842599999999999], 
                 
                 DiskBox[{-0.4558200993150896, 0.05855108815095832}, 
                  0.007148599999999998], 
                 
                 DiskBox[{0.14527782709424764`, 0.8896905970387718}, 
                  0.0087092], 
                 
                 DiskBox[{-0.7949057053449985, 0.3845534197182668}, 
                  0.0033848000000000003`], {}, 
                 
                 DiskBox[{0.7086977727640987, -0.5114532285153809}, 
                  0.004455799999999999], 
                 
                 DiskBox[{0.08263325595553699, 0.03413412461584668}, 
                  0.006995599999999999], {}, 
                 
                 DiskBox[{0.24985518465773604`, 0.17166036238804386`}, 
                  0.006047], 
                 
                 DiskBox[{-0.2888027163660639, -0.4414107358913678}, 
                  0.007087399999999999], {}, {}, 
                 
                 DiskBox[{0.4569172756810564, 0.8138880326535903}, 
                  0.004884200000000002], {}, {}, 
                 
                 DiskBox[{0.5434025405350343, 0.09952660527196082}, 
                  0.007638199999999998], {}, 
                 
                 DiskBox[{-0.727127199245744, -0.4628764783242785}, 
                  0.008494999999999999], 
                 
                 DiskBox[{-0.8357472759863654, 0.1374681297160946}, 
                  0.0105452], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7736160363063623, -0.4955134689852291}, 
                  0.0083726], {}, {}, 
                 
                 DiskBox[{0.6888126614818842, 0.3225675716647171}, 
                  0.006383599999999998], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.40263296153913186`, -0.2191455945626285}, 
                  0.009351799999999999], 
                 
                 DiskBox[{-0.2743684762989373, 0.060284666352834436`}, 
                  0.008494999999999999], {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.6533338929691, -0.757069893931756}, {
                    0.6507651990803804, -0.7529878428901773}, {
                    0.6466831480388017, -0.7555565367788969}, {
                    0.6426010969972229, -0.7581252306676165}, {
                    0.6451697908859425, -0.7622072817091953}, {
                    0.6455463191427778, -0.7628056432227055}, {
                    0.6460787370182387, -0.7632707681897148}, {
                    0.6497063149936694, -0.7601703310607355}, {
                    0.6533338929691, -0.757069893931756}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 4.085946942936182, 4.085946942936182, 
                    4.085946942936182}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0.6492518419275213, -0.7596385878204757}, 
                    0.004822999999999997, {0.5616607623954892, 
                    3.994347433087659}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.6460787370182388, -0.7632707681897148}, {
                    0.649721110463821, -0.7601876420783195}, {
                    0.6533338929691002, -0.757069893931756}, {
                    0.6497063149936695, -0.7601703310607355}, {
                    0.6460787370182388, -0.7632707681897148}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000227725509359`, 1.0000227725509359`, 
                    1.0000227725509359`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-0.8683605790266871, -0.8588165326697511}]]}, 
                 
                 DiskBox[{0.3180421139953065, -0.5165885464365194}, 
                  0.0077605999999999994`], {}, {}, 
                 
                 DiskBox[{-0.4504547265683086, -0.33702873624330487`}, 
                  0.011065399999999998`], {}, 
                 
                 DiskBox[{0.009826520063229056, 0.4264589733933855}, 
                  0.0021913999999999996`], {}, 
                 
                 DiskBox[{0.7505953860836564, 0.5730089562839328}, 
                  0.006199999999999999], 
                 
                 DiskBox[{-0.401480419509632, 0.0653746226752897}, 
                  0.0122282], {}, 
                 
                 DiskBox[{0.38968637447849447`, -0.33088360935057104`}, 
                  0.013880599999999998`], 
                 
                 DiskBox[{0.37934548094918435`, -0.14515271879003094`}, 
                  0.012534199999999999`], 
                 
                 DiskBox[{-0.7083746187737864, 0.11009964015452185`}, 
                  0.012136399999999999`], 
                 
                 DiskBox[{-0.13139463941535928`, 0.7661808086227475}, 
                  0.0113408], 
                 
                 DiskBox[{-0.7784826339646991, 0.1284609319288959}, 
                  0.0092294], 
                 DiskBox[{-0.4663550559854458, 0.1651726027580328}, 0.015686], 
                 
                 DiskBox[{-0.3065410648099267, -0.4927650869615716}, 
                  0.0137276], {}, 
                 
                 DiskBox[{-0.3417742785249468, -0.09325909831020704}, 
                  0.0093212], 
                 
                 DiskBox[{-0.2604398299218314, 0.7052522959740206}, 
                  0.0143396], 
                 
                 DiskBox[{-0.08369402949779513, -0.3610340084079355}, 
                  0.009627199999999999], {}, {}, 
                 
                 DiskBox[{-0.7538717755532277, -0.3167411308872646}, 
                  0.014615], 
                 
                 DiskBox[{-0.1818995996758764, -0.5992555512525382}, 
                  0.0017017999999999998`], 
                 DiskBox[{0.031038651517826574`, -0.18265657049762424`}, 
                  0.0151658], 
                 
                 DiskBox[{-0.21064629924933137`, 0.019391494710505733`}, 
                  0.016022599999999998`], {}, 
                 
                 DiskBox[{0.0013457512898335815`, 0.8106051988336652}, 
                  0.014676199999999999`], 
                 
                 DiskBox[{0.00137359970230388, 0.8106444769686748}, 
                  0.009412999999999998], 
                 
                 DiskBox[{-0.07376132695163921, -0.24705914250130048`}, 
                  0.011034799999999999`], 
                 
                 DiskBox[{-0.807680610163292, 0.33156360233464816`}, 
                  0.0032623999999999986`], {}, {}, 
                 
                 DiskBox[{0.5099172362394933, -0.07387402513713974}, 
                  0.0077605999999999994`], {}, {}, {}, {}, 
                 
                 DiskBox[{0.3871211730208395, 0.8822374083237918}, 
                  3.500000000000031*^-6], {}, {}, 
                 
                 DiskBox[{0.5099193813623271, -0.073867539726732}, 
                  0.0028645999999999984`], {}, {}, {}, {}, 
                 
                 DiskBox[{0.058174495084233065`, -0.14884389741603848`}, 
                  0.0096884], 
                 
                 DiskBox[{0.8560213590127638, -0.3674958950253781}, 
                  0.007026199999999998], 
                 
                 DiskBox[{0.9161522920232001, 0.038839546084819807`}, 
                  0.007883], {}, 
                 
                 DiskBox[{-0.2159487437248752, -0.33148217524540885`}, 
                  0.0039355999999999974`], 
                 
                 DiskBox[{-0.45955177940020825`, 0.035099028643678004`}, 
                  0.006750799999999998], {}, 
                 
                 DiskBox[{0.694316142359114, -0.5500500496796478}, 
                  0.005955199999999999], 
                 
                 DiskBox[{0.023978392067397426`, 0.031741160782340155`}, 
                  0.005679799999999999], {}, 
                 
                 DiskBox[{0.2837037773184035, 0.19398165420324648`}, 
                  0.008556199999999998], 
                 
                 DiskBox[{-0.24297548859064527`, -0.4390360224937024}, 
                  0.0084338], {}, {}, 
                 
                 DiskBox[{0.39887508971468977`, 0.8493838700098857}, 
                  0.005771600000000002], 
                 DiskBox[{0.378629844098824, 0.6003130608450988}, 0.0042722], 
                 
                 DiskBox[{-0.6372990880528608, -0.4427000698981857}, 
                  0.0092294], 
                 
                 DiskBox[{-0.1725175484142385, -0.9122161891597531}, 
                  0.0053738000000000015`], 
                 
                 DiskBox[{0.7407141844238704, 0.5248835215520006}, 
                  0.011034799999999999`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.762488898519639, -0.5462367830375136}, 
                  0.0114326], {}, {}, 
                 
                 DiskBox[{0.6060190213944276, 0.44336821255553305`}, 
                  0.005863399999999998], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7873742505297228, -0.36663128181606885`}, 
                  0.0088928], 
                 
                 DiskBox[{-0.29882544305519554`, 0.049875984709863215`}, 
                  0.0088928], {}, {}, {}, 
                 
                 DiskBox[{-0.021242765013952572`, -0.510649134005484}, 
                  0.0066896], 
                 
                 DiskBox[{0.3557844272271384, -0.9005171611292776}, 
                  0.0052819999999999985`], {}, 
                 
                 DiskBox[{-0.5050012625599162, -0.3554850060112147}, 
                  0.0084338], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3453458306581765, 0.4768833159788802}, 
                  0.011248999999999999`], {}, 
                 
                 DiskBox[{0.7436988945056775, -0.5641625952861664}, 
                  0.0102086], {}, 
                 
                 DiskBox[{-0.03849535086557276, 0.13050763960929318`}, 
                  0.011248999999999999`], 
                 
                 DiskBox[{0.3014359280050398, 0.8955138203304697}, 
                  0.010820599999999998`], {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.8123830013003976, -0.5831242227846122}, \
{-0.8033011532023413, -0.5739609178631426}, {-0.812464458123811, \
-0.5648790697650862}, {-0.8188064767611447, -0.5585934282424126}, \
{-0.8269232208138094, -0.5623148467530585}, {-0.8196531110571036, \
-0.5727195347688354}, {-0.8123830013003976, -0.5831242227846122}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 3], 
                    Rational[1, 3], 
                    Rational[2, 3], 
                    Rational[2, 3], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 2.9580336124263327`, 2.9580336124263327`, 
                    2.9580336124263327`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.8215463062218673, -0.5740423746865558}, 
                    0.012901399999999999`, {-0.7809336197390785, 
                    2.000685270851479}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.8269232208138094, -0.5623148467530587}, \
{-0.8197851883117924, -0.5728118216434153}, {-0.8123830013003975, \
-0.5831242227846124}, {-0.8196531110571034, -0.5727195347688355}, \
{-0.8269232208138094, -0.5623148467530587}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0001611379898487`, 1.0001611379898487`, 
                    1.0001611379898487`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-2.5444101602078355`, -2.5190234958593503`}]]}, 
                 
                 DiskBox[{0.37162471373604944`, 0.844135829682596}, 
                  0.006077599999999999], {}, {}, 
                 
                 DiskBox[{0.5582032114495584, 0.7700073751305496}, 
                  0.005587999999999999], 
                 
                 DiskBox[{0.39158184537972224`, 0.5533948578208657}, 
                  0.0065366], {}, 
                 
                 DiskBox[{0.6847356054820994, 0.353644611005834}, 
                  0.0033542000000000016`], {}, 
                 
                 DiskBox[{0.37304443885644806`, 0.8421052247019359}, 
                  0.006261199999999998], {}, {}, 
                 
                 DiskBox[{0.5595754866872851, 0.7700328423076114}, 
                  0.004975999999999998], 
                 
                 DiskBox[{0.3916800023460397, 0.5533219475734583}, 
                  0.006628399999999998], {}, 
                 
                 DiskBox[{0.6877864615306324, 0.35216477925285034`}, 
                  0.005526800000000002], {}, {}, 
                 DiskBox[{0.07040266520160125, -0.11881660301947077`}, 
                  0.007638199999999998], 
                 
                 DiskBox[{0.8185078372206767, -0.4361877180180895}, 
                  0.007729999999999999], 
                 
                 DiskBox[{0.9915016544332812, -0.007417039349543919}, 
                  0.0073016], 
                 
                 DiskBox[{-0.2023914477687348, -0.3122360225057893}, 
                  0.004822999999999997], 
                 
                 DiskBox[{-0.5095211028345003, 0.10628038586704636`}, 
                  0.009351799999999999], 
                 
                 DiskBox[{-0.7809312702717057, 0.5259265664306885}, 
                  0.004822999999999997], {}, 
                 
                 DiskBox[{0.060144096765234085`, -0.009241248383282791}, 
                  0.006505999999999998], {}, 
                 
                 DiskBox[{0.26223308290833924`, 0.21090491865964922`}, 
                  0.008494999999999999], 
                 
                 DiskBox[{-0.2234561371270568, -0.49502372101864994`}, 
                  0.006597799999999999], {}, 
                 
                 DiskBox[{0.4889183620799473, 0.1186211882446122}, 
                  0.0094436], {}, 
                 
                 DiskBox[{-0.6106396072180788, -0.4595172402862898}, 
                  0.009474199999999999], 
                 
                 DiskBox[{-0.14334481975350968`, -0.8988243418849602}, 
                  0.0071792], 
                 
                 DiskBox[{-0.6257763151971414, 0.03089443397481338}, 
                  0.008862199999999999], {}, 
                 
                 DiskBox[{0.7151484788819353, 0.4929095946632348}, 
                  0.0080054], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7719450400205073, -0.4841105146614585}, 
                  0.005312600000000001], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7386559710824127, -0.07355460844942449}, 
                  0.007974799999999999], {}, 
                 
                 DiskBox[{0.5906103335225477, -0.3572310974773621}, 
                  0.006628399999999998], 
                 
                 DiskBox[{-0.28128229882006, -0.03809100341392091}, 
                  0.009963799999999998], {}, {}, 
                 
                 DiskBox[{-0.0561355899701133, -0.5167710721497023}, 
                  0.007883], {}, {}, 
                 
                 DiskBox[{-0.4812458822784844, -0.404966882688052}, 
                  0.0095354], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.35023973524439445`, -0.6947787651980644}, 
                  0.0062918], 
                 
                 DiskBox[{0.8984465882468078, 0.1301720151189715}, 
                  0.005343199999999999], 
                 
                 DiskBox[{-0.7732823199886657, 0.3296026155279824}, 
                  0.0035378000000000007`], 
                 
                 DiskBox[{0.4441098303330419, 0.22182218722798047`}, 
                  0.006383599999999998], {}, 
                 
                 DiskBox[{-0.44260137734337895`, -0.24909481001145728`}, 
                  0.004639399999999998], 
                 
                 DiskBox[{0.3407599119110146, -0.7008315496513436}, 
                  0.0077605999999999994`], 
                 
                 DiskBox[{0.8964804092418017, 0.12287550005867695`}, 
                  0.0030481999999999974`], 
                 
                 DiskBox[{-0.7771451220901526, 0.33044692311209034`}, 
                  0.0021607999999999974`], 
                 
                 DiskBox[{0.4403191582234691, 0.22148113603736247`}, 
                  0.0048536], {}, 
                 
                 DiskBox[{-0.45785638044367954`, -0.22756790609670458`}, 
                  0.0064142], 
                 
                 DiskBox[{-0.008529293104741086, -0.07453023582286959}, 
                  0.006720199999999999], 
                 
                 DiskBox[{-0.44081498808719916`, 0.007513564776057885}, 
                  0.0064142], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.03340184738294496, 0.18608479694233843`}, 
                  0.0062918], 
                 
                 DiskBox[{0.23560434231416438`, 0.5092178051373359}, 
                  0.0069038], 
                 
                 DiskBox[{-0.6671035264065357, -0.4548361359210082}, 
                  0.008158399999999998], 
                 
                 DiskBox[{-0.2452057055585225, -0.8755021712415928}, 
                  0.006322399999999999], 
                 
                 DiskBox[{-0.7400780677885682, 0.15185481552997498`}, 
                  0.005587999999999999], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7478373368559261, -0.25141177096643214`}, 
                  0.007729999999999999], {}, 
                 
                 DiskBox[{-0.22841200296388858`, -0.0981676106125021}, 
                  0.007393399999999998], {}, 
                 DiskBox[{0.25586524083262485`, -0.4734605772243716}, 
                  0.009168199999999998], {}, {}, 
                 
                 DiskBox[{-0.3967459057047733, 0.7877697344585548}, 
                  0.007240399999999999], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.5758996850605589, -0.23770301290100943`}, 
                  0.007087399999999999], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.5599555045393003, -0.5417883748364675}, 
                  0.0079442], {}, 
                 
                 DiskBox[{-0.5892610066541716, -0.2385581136993507}, 
                  0.0090764], 
                 
                 DiskBox[{0.28154861140860493`, -0.041185481417527314`}, 
                  0.0104228], 
                 
                 DiskBox[{0.6266759912168905, -0.4340324273316391}, 
                  0.006995599999999999], 
                 
                 DiskBox[{0.8615243149074597, 0.015258458304069479`}, 
                  0.005832799999999999], 
                 
                 DiskBox[{-0.2317164712433522, -0.3818433482421916}, 
                  0.0038131999999999992`], 
                 
                 DiskBox[{-0.4063219592169083, 0.179220016298023}, 
                  0.004792399999999999], {}, 
                 
                 DiskBox[{0.07114302021419426, -0.03796447515522105}, 
                  0.007791199999999998], 
                 
                 DiskBox[{0.12585201679019511`, 0.20740668386963945`}, 
                  0.006964999999999999], {}, {}, 
                 
                 DiskBox[{0.3667297736452429, 0.425134354554204}, 
                  0.007332199999999999], 
                 
                 DiskBox[{-0.6573832326987378, 0.3149519994154322}, 
                  0.0065366], {}, 
                 
                 DiskBox[{0.7357709300415584, 0.4614261485917953}, 
                  0.009749599999999999], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.38657778312928565`, -0.15307202298907072`}, 
                  0.006812], 
                 
                 DiskBox[{-0.06665336541152814, -0.47533293972583424`}, 
                  0.0084644], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3616176890669962, -0.4171164439685436}, 
                  0.0104534], {}, {}, {}, 
                 
                 DiskBox[{-0.19037526288086604`, 0.783307030009397}, 
                  0.014125399999999998`], 
                 DiskBox[{0.11358300287145792`, 0.5928865256631057}, 0.01232], 
                 DiskBox[{-0.7480864027021201, 0.41967380306729585`}, 
                  0.004425200000000001], 
                 
                 DiskBox[{0.13138127036856598`, -0.6908742371909171}, 
                  0.0069038], {}, 
                 
                 DiskBox[{-0.7048925019965756, -0.20364763904902522`}, 
                  0.0080666], {}, 
                 
                 DiskBox[{-0.7598258784097213, 0.416981445262778}, 
                  0.0022220000000000018`], 
                 
                 DiskBox[{0.11147847366732695`, -0.6929801994066661}, 
                  0.005679799999999999], {}, {}, 
                 
                 DiskBox[{-0.7110151148352553, -0.2011173503628028}, 
                  0.008984599999999999], {}, 
                 
                 DiskBox[{0.0918795566429608, -0.7013296163307143}, 
                  0.005129000000000002], {}, 
                 
                 DiskBox[{0.0828008364432692, -0.7031511499167504}, 
                  0.004302799999999999], 
                 
                 DiskBox[{0.026029183753583283`, -0.05359762838892343}, 
                  0.0084644], 
                 
                 DiskBox[{0.4207245594639753, -0.5777747864175461}, 
                  0.0085868], 
                 
                 DiskBox[{0.8439813689410665, 0.009380521490447727}, 
                  0.005343199999999999], 
                 
                 DiskBox[{-0.5133658274017265, 0.02347482205786733}, 
                  0.005955199999999999], 
                 
                 DiskBox[{0.39227115141313323`, 0.8349073970598095}, 
                  0.005434999999999999], {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.8270770348869764, -0.5620885858675368}, {
                    0.8244309954840492, -0.5634872825906034}, {
                    0.8240888041221904, -0.5664606278643363}, {
                    0.8255829195045834, -0.5642746068659366}, {
                    0.8270770348869764, -0.5620885858675368}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.2776764256438564`, 1.2776764256438564`, 
                    1.2776764256438564`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0.8297313596102324, -0.5671100088036688}, 
                    0.005679799999999999, {2.0570613787735685`, 
                    3.027010435595029}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.8240888041221904, -0.5664606278643363}, {
                    0.8255887077636335, -0.5642785630616411}, {
                    0.8270770348869764, -0.5620885858675367}, {
                    0.8255829195045834, -0.5642746068659364}, {
                    0.8240888041221904, -0.5664606278643363}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000070111177368`, 1.0000070111177368`, 
                    1.0000070111177368`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-0.6022045917496255, -0.5969089010613633}]]}, 
                 
                 DiskBox[{0.004704334701626606, 0.06793355509979125}, 
                  0.006352999999999999], {}, 
                 
                 DiskBox[{0.6838869529093099, 0.20659456177800978`}, 
                  0.0071792], 
                 
                 DiskBox[{0.21893233309608895`, 0.4616594002899317}, 
                  0.0085868], {}, 
                 
                 DiskBox[{-0.2243888483835193, -0.941308593544112}, 
                  0.0058022], 
                 
                 DiskBox[{-0.7541153011135783, 0.314493356922828}, 
                  0.0062918], {}, 
                 
                 DiskBox[{0.40944794226654413`, 0.7464982613709729}, 
                  0.008556199999999998], {}, {}, {}, 
                 
                 DiskBox[{0.2495388913620612, -0.3331859516601141}, 
                  0.0060164], 
                 
                 DiskBox[{-0.03581877821291745, -0.014654006206699084`}, 
                  0.0092294], {}, 
                 
                 DiskBox[{0.02505749538848655, -0.305599189768894}, 
                  0.007209799999999999], {}, {}, 
                 
                 DiskBox[{-0.4307329863162381, -0.15281337611293294`}, 
                  0.0062918], 
                 
                 DiskBox[{-0.37274205780847053`, 0.6197694132865279}, 
                  0.007577], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.34746643924881493`, 0.13273095742663296`}, 
                  0.007148599999999998], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.6034082236296666, -0.27702107980955115`}, 
                  0.0073016], 
                 
                 DiskBox[{0.432552639505697, -0.07013163079677977}, 
                  0.004425200000000001], 
                 
                 DiskBox[{-0.2909679865754948, 0.4845039147824796}, 
                  0.0042722], {}, {}, 
                 
                 DiskBox[{0.356379112286318, 0.11063398787051983`}, 
                  0.008556199999999998], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.598696260703315, -0.29823835098226736`}, 
                  0.008189], 
                 
                 DiskBox[{0.43104024364554955`, -0.07117095873422488}, 
                  0.008403199999999998], 
                 
                 DiskBox[{-0.2989318619795562, 0.4867297838930795}, 
                  0.007393399999999998], 
                 
                 DiskBox[{-0.6060501701327221, -0.32069148496406163`}, 
                  0.011738599999999998`], 
                 
                 DiskBox[{-0.6160805480470639, -0.3330869588339939}, 
                  0.010239199999999999`], 
                 
                 DiskBox[{-0.6388188260200057, -0.362553062516174}, 
                  0.010147399999999999`], 
                 
                 DiskBox[{-0.6539004765910477, -0.36266592381400015`}, 
                  0.0078218], 
                 
                 DiskBox[{0.10874218398659251`, -0.19646297468930898`}, 
                  0.008219599999999999], 
                 DiskBox[{0.5498498705695081, -0.4299960458421887}, 0.006812], 
                 
                 DiskBox[{0.852757203489969, 0.03528615628509285}, 
                  0.0039049999999999987`], {}, 
                 
                 DiskBox[{-0.24031144766774376`, -0.3548603958799778}, 
                  0.0054044], 
                 
                 DiskBox[{-0.4574743978040928, 0.17310041526792608`}, 
                  0.008342], {}, {}, 
                 
                 DiskBox[{0.07528964654213323, -0.05155941170737763}, 
                  0.006352999999999999], {}, 
                 
                 DiskBox[{0.09281122850067089, 0.28319653071708845`}, 
                  0.0080054], 
                 
                 DiskBox[{-0.27383389707173844`, -0.7072947195486483}, 
                  0.008525599999999998], {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.4819027729884417, 0.8762246957179707}, {
                    0.479184770232897, 0.8726938863687065}, {
                    0.4827155795821612, 0.8699758836131618}, {
                    0.4862463889314254, 0.8672578808576171}, {
                    0.4889643916869701, 0.8707886902068813}, {
                    0.4893718951168688, 0.8713180557188215}, {
                    0.48960623803216535`, 0.8719436516656283}, {
                    0.4857545055103035, 0.8740841736917995}, {
                    0.4819027729884417, 0.8762246957179707}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 4], 
                    Rational[1, 4], 
                    Rational[1, 2], 
                    Rational[1, 2], 
                    Rational[3, 4], 
                    Rational[3, 4], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 4.0899130526947705`, 
                    4.0899130526947705`, 4.0899130526947705`}, SplineDegree -> 
                    2]], 
                   
                   DiskSegment[{0.4854335823377059, 0.873506692962426}, 
                    0.004455799999999999, {2.485542044679542, 
                    5.92477283433688}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.48960623803216546`, 
                    0.8719436516656283}, {0.48576393791801686`, 
                    0.8741011467063746}, {0.4819027729884418, 
                    0.8762246957179707}, {0.4857545055103037, 
                    0.8740841736917995}, {0.48960623803216546`, 
                    0.8719436516656283}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000019418055018, 1.000019418055018, 
                    1.000019418055018}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {1.05915822221777, 
                    1.0679713496190655`}]]}, 
                 
                 DiskBox[{0.28974449001557656`, 0.39692934008773145`}, 
                  0.007424], 
                 
                 DiskBox[{-0.47703238519715724`, -0.631333693302463}, 
                  0.0079442], 
                 
                 DiskBox[{-0.1320444523824435, -0.9075822862698979}, 
                  0.0051596], 
                 
                 DiskBox[{-0.6744761732189473, 0.3312198054510865}, 
                  0.005771600000000002], 
                 DiskBox[{0.5998964220844382, 0.6218342808710515}, 
                  0.011830399999999998`], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.2026335578126086, -0.1065289881733396}, 
                  0.0071792], {}, {}, 
                 
                 DiskBox[{-0.04070883375105457, -0.443415435839497}, 
                  0.004547599999999999], {}, {}, {}, 
                 
                 DiskBox[{-0.06551758954145358, -0.9371343020061123}, 
                  0.005434999999999999], {}, 
                 
                 DiskBox[{-0.5089372112708856, -0.27584245514805644`}, 
                  0.007148599999999998], {}, {}, 
                 
                 DiskBox[{-0.0025861480412191756`, 0.4130729882981803}, 
                  0.015471799999999999`], {}, 
                 
                 DiskBox[{-0.7355190975338085, 0.2974669135918211}, 
                  0.0180116], {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.994711722197906, 
                    0.1027063275659085}, {-0.9886534416004634, 
                    0.08335656239413834}, {-0.9693036764286932, 
                    0.08941484299158103}, {-0.9499539112569231, 
                    0.09547312358902373}, {-0.9560121918543658, 
                    0.11482288876079388`}, {-0.9620704724518084, 
                    0.13417265393256406`}, {-0.9814202376235787, 
                    0.12811437333512135`}, {-0.9889457787369145, 
                    0.12575817731375077`}, {-0.9929018589883031, 
                    0.11893653104732776`}, {-0.9938067905931046, 
                    0.11082142930661813`}, {-0.994711722197906, 
                    0.1027063275659085}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 5], 
                    Rational[1, 5], 
                    Rational[2, 5], 
                    Rational[2, 5], 
                    Rational[3, 5], 
                    Rational[3, 5], 
                    Rational[4, 5], 
                    Rational[4, 5], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 8, 8, 9.210079921343308, 
                    9.210079921343308, 9.210079921343308}, SplineDegree -> 
                    2]], 
                   
                   DiskSegment[{-0.9753619570261359, 0.10876460816335119`}, 
                    0.020276, {3.445017887831722, 8.899246226689007}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9929018589883031, 
                    0.11893653104732768`}, {-0.9938730558640662, 
                    0.11082881868261235`}, {-0.9947117221979063, 
                    0.10270632756590849`}, {-0.9938067905931046, 
                    0.11082142930661809`}, {-0.9929018589883031, 
                    0.11893653104732768`}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000666782231604`, 1.0000666782231604`, 
                    1.0000666782231604`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {3.0223739116877413`, 
                    3.0387048956534017`}]]}, 
                 
                 DiskBox[{-0.6890660132706132, 0.01606331594481289}, 
                  0.011371399999999999`], 
                 
                 DiskBox[{0.4214897031730213, -0.6139561512072271}, 
                  0.008494999999999999], 
                 
                 DiskBox[{-0.44769020832295414`, 0.2380710799904916}, 
                  0.006444799999999999], 
                 
                 DiskBox[{0.19862529592278055`, 0.4933896449836434}, 
                  0.0037213999999999997`], {}, 
                 
                 DiskBox[{-0.7236418195189697, -0.30846937901476446`}, 
                  0.0065366], 
                 
                 DiskBox[{0.04774851746099666, -0.3392764518636614}, 
                  0.005190199999999999], 
                 
                 DiskBox[{0.04771809273137636, -0.3393641042910232}, 
                  0.004517], 
                 
                 DiskBox[{0.4151422111275496, -0.6171307514881421}, 
                  0.0080054], 
                 DiskBox[{-0.5299425529937829, 0.2223831368798302}, 0.006812], 
                 
                 DiskBox[{0.20468768994212452`, 0.48274909136425564`}, 
                  0.004884200000000002], {}, 
                 
                 DiskBox[{-0.7224430135062542, -0.29010334488917366`}, 
                  0.0074546000000000005`], 
                 
                 DiskBox[{0.04190454894772356, -0.3477275671885844}, 
                  0.0044864000000000015`], 
                 
                 DiskBox[{0.4124502619407259, -0.6230913199049195}, 
                  0.006230599999999999], 
                 DiskBox[{-0.5561093705040445, 0.2047284122138298}, 
                  0.0051596], 
                 
                 DiskBox[{0.03719314599983251, -0.359950852193269}, 
                  0.004455799999999999], 
                 
                 DiskBox[{-0.5117625409127377, 0.24226669666417205`}, 
                  0.006077599999999999], 
                 
                 DiskBox[{-0.524625277616706, 0.24384336417093072`}, 
                  0.0054655999999999975`], 
                 
                 DiskBox[{-0.46947395425603305`, 0.27509344622458404`}, 
                  0.005526800000000002], 
                 
                 DiskBox[{-0.5468259204677959, 0.2413791585127354}, 
                  0.006230599999999999], 
                 
                 DiskBox[{-0.5841105321701517, 0.22833907518659283`}, 
                  0.0017323999999999985`], 
                 
                 DiskBox[{-0.5025007903072203, 0.27826765193044656`}, 
                  0.0035990000000000015`], 
                 
                 DiskBox[{0.18330383019781396`, -0.03296842639890829}, 
                  0.0062918], 
                 
                 DiskBox[{0.8454572329941834, 0.06113998771998687}, 
                  0.0023749999999999986`], {}, 
                 
                 DiskBox[{-0.7750580892553628, 0.3596491861094413}, 
                  0.0039662], {}, 
                 
                 DiskBox[{-0.0027686294823824147`, 0.1779025513840072}, 
                  0.0070568], {}, {}, 
                 
                 DiskBox[{0.4315854717742426, 0.29966316128346016`}, 
                  0.006475399999999999], 
                 
                 DiskBox[{-0.6985949633562079, -0.45906574415908835`}, 
                  0.006812], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.2210757697351717, -0.27091163486942865`}, 
                  0.007332199999999999], 
                 
                 DiskBox[{-0.23855117611314094`, 0.011665620727751855`}, 
                  0.008280799999999998], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3928892908962136, -0.15350771535292226`}, 
                  0.0055574000000000005`], 
                 
                 DiskBox[{-0.35177730316228795`, 0.8064635699362064}, 
                  0.01232], {}, {}, 
                 
                 DiskBox[{-0.4632946175833365, -0.6078201477493407}, 
                  0.010728799999999998`], {
                  InterpretationBox[
                   FilledCurveBox[
                    BSplineCurve[{{-0.718868593792971, 
                    0.6951459881622827}, {-0.7191752409650211, 
                    0.6855236730899171}, {-0.7095529258926555, 
                    0.685217025917867}, {-0.69993061082029, 
                    0.684910378745817}, {-0.6996239636482399, 
                    0.6945326938181825}, {-0.6993173164761898, 
                    0.704155008890548}, {-0.7089396315485553, 
                    0.7044616560625981}, {-0.7093451432575961, 
                    0.7044745790460876}, {-0.7097503044185896, 
                    0.7044533379704574}, {-0.7143094491057802, 
                    0.69979966306637}, {-0.718868593792971, 
                    0.6951459881622827}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 5], 
                    Rational[1, 5], 
                    Rational[2, 5], 
                    Rational[2, 5], 
                    Rational[3, 5], 
                    Rational[3, 5], 
                    Rational[4, 5], 
                    Rational[4, 5], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 4, 4, 8, 8, 8.014208153424121, 
                    8.014208153424121, 8.014208153424121}, SplineDegree -> 
                    2]], 
                   
                   DiskSegment[{-0.7092462787206054, 0.6948393409902326}, 
                    0.009627199999999999, {3.109735099186195, 
                    7.906359920106418}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.7097503044185894, 
                    0.7044533379704575}, {-0.7143397674644971, 
                    0.6998293655674941}, {-0.7188685937929709, 
                    0.6951459881622828}, {-0.7143094491057801, 
                    0.6997996630663701}, {-0.7097503044185894, 
                    0.7044533379704575}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000424442918332`, 1.0000424442918332`, 
                    1.0000424442918332`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {2.3599400198451983`, 
                    2.3729696922678283`}]]}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7367054184256767, 0.5024309217997591}, 
                  0.0032623999999999986`], 
                 DiskBox[{0.09049774269853728, 0.3288089225903557}, 
                  0.003660199999999999], 
                 
                 DiskBox[{-0.323276318456863, -0.6251939944374301}, 
                  0.0039049999999999987`], {}, 
                 
                 DiskBox[{-0.2560699034230971, -0.34056715160344536`}, 
                  0.0038744], 
                 
                 DiskBox[{-0.7404010697491489, 0.5111477797946976}, 
                  0.0054962], 
                 
                 DiskBox[{0.08886529427917857, 0.3280202950162617}, 
                  0.004822999999999997], 
                 
                 DiskBox[{-0.3283197151528108, -0.6242012740052508}, 
                  0.005220799999999998], {}, 
                 
                 DiskBox[{-0.2585238715764246, -0.3434778861825183}, 
                  0.004425200000000001], 
                 
                 DiskBox[{-0.3333105493911048, -0.6219549724780269}, 
                  0.0054044], 
                 
                 DiskBox[{0.13667905364915367`, -0.14346263709773416`}, 
                  0.005710399999999997], 
                 
                 DiskBox[{0.5948521633521822, -0.5270183320019305}, 
                  0.005129000000000002], 
                 
                 DiskBox[{0.7807168768720748, -0.00588191079617572}, 
                  0.006383599999999998], 
                 
                 DiskBox[{-0.44609704256686283`, 0.07756033195036952}, 
                  0.005526800000000002], {}, {}, 
                 
                 DiskBox[{0.13065697142477684`, 0.08052341884034614}, 
                  0.0076994], {}, 
                 
                 DiskBox[{-0.21148778971598223`, -0.7000615146682915}, 
                  0.0065672000000000005`], 
                 DiskBox[{0.5187482169091916, 0.8272055609283133}, 0.0050066], 
                 
                 DiskBox[{0.40280779393806143`, 0.09605885074121094}, 
                  0.0093212], 
                 DiskBox[{0.2561046514732933, 0.3573619088976547}, 0.0076994], 
                 
                 DiskBox[{-0.5000101307566405, -0.8424555784019988}, 
                  0.0046088], 
                 
                 DiskBox[{-0.68347436211933, 0.2738282512681464}, 
                  0.0087704], {}, 
                 
                 DiskBox[{0.6042870914240508, 0.598541703027708}, 
                  0.008800999999999998], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.6882737207783087, -0.32105081542117825`}, 
                  0.007852399999999999], {}, 
                 
                 DiskBox[{0.4380294308646016, -0.38924937309393}, 
                  0.006475399999999999], 
                 
                 DiskBox[{-0.21860949565662907`, -0.11091446066369151`}, 
                  0.0113408], {}, 
                 
                 DiskBox[{-0.008216036117564638, -0.366049504742512}, 
                  0.005129000000000002], {}, {}, {}, 
                 
                 DiskBox[{-0.5266005779523817, -0.2630395119304887}, 
                  0.007270999999999998], {}, {}, 
                 
                 DiskBox[{-0.251639857701682, 0.5054310763849067}, 
                  0.006995599999999999], {}, 
                 
                 DiskBox[{-0.7408975658023315, -0.44557654676111247`}, 
                  0.020949199999999998`], {}, {}, 
                 
                 DiskBox[{0.7428428322562202, -0.07162555926274115}, 
                  0.010361599999999999`], 
                 
                 DiskBox[{-0.0034911324281921936`, 0.09018556121510939}, 
                  0.013360399999999998`], {}, {}, 
                 
                 DiskBox[{0.5701473314188911, -0.45554079744205406`}, 
                  0.0096884], 
                 
                 DiskBox[{0.3897502889428811, -0.2125077666582276}, 
                  0.010759399999999999`], 
                 
                 DiskBox[{0.6125054908361817, -0.41746670354696985`}, 
                  0.012472999999999998`], 
                 
                 DiskBox[{0.7317923435012867, -0.41357925392045325`}, 
                  0.012625999999999998`], 
                 
                 DiskBox[{0.5381878927670718, 0.17761810145759335`}, 
                  0.014676199999999999`], 
                 
                 DiskBox[{-0.8420298110534677, -0.39063717777433365`}, 
                  0.0151658], 
                 
                 DiskBox[{0.7520215709446018, 0.6240618805431871}, 
                  0.011952799999999998`], 
                 
                 DiskBox[{0.3424714904537271, -0.19157669081254217`}, 
                  0.0140336], {}, 
                 
                 DiskBox[{0.06534498890611556, 0.05400642805766831}, 
                  0.014645599999999998`], 
                 
                 DiskBox[{0.6781598258383031, 0.3551962163212409}, 
                  0.010728799999999998`], 
                 
                 DiskBox[{-0.08549180573556082, -0.3439573760847929}, 
                  0.013421599999999999`], 
                 DiskBox[{-0.6844974794101639, 0.5109673838850393}, 
                  0.004149799999999999], 
                 
                 DiskBox[{0.5421773554024769, 0.78983983612908}, 
                  0.0018578599999999994`], {}, 
                 
                 DiskBox[{-0.5349788715750624, -0.24428783376961918`}, 
                  0.005955199999999999], 
                 
                 DiskBox[{-0.25786516633378437`, 0.5139199692800556}, 
                  0.005741], 
                 
                 DiskBox[{-0.6767887996896981, 0.5243754664059677}, 
                  0.0048536], 
                 
                 DiskBox[{0.5421808461094496, 0.7898150330398428}, 
                  0.004517], {}, 
                 
                 DiskBox[{-0.5346702852466735, -0.2428418389842388}, 
                  0.007209799999999999], 
                 
                 DiskBox[{-0.25393522419242254`, 0.5152596162808453}, 
                  0.006812], 
                 
                 DiskBox[{-0.6815321299572802, 0.5312612482041712}, 
                  0.0054962], 
                 
                 DiskBox[{0.14528334075041222`, -0.1551665843728728}, 
                  0.0076994], 
                 
                 DiskBox[{0.5697218612366084, -0.5759308586046008}, 
                  0.006750799999999998], 
                 
                 DiskBox[{0.9255779747747462, 0.003058973798808235}, 
                  0.0056492], {}, 
                 
                 DiskBox[{-0.2516882042863259, -0.37952563871525363`}, 
                  0.0046088], 
                 
                 DiskBox[{-0.48568873853334144`, 0.04393690246329647}, 
                  0.0061388], {}, {}, {}, 
                 
                 DiskBox[{0.12988747368551468`, 0.05976892641644227}, 
                  0.0065672000000000005`], {}, 
                 
                 DiskBox[{-0.23427472611967523`, -0.7299899617874832}, 
                  0.006995599999999999], {}, 
                 DiskBox[{0.476325773513975, 0.068998363194738}, 0.0085868], 
                 
                 DiskBox[{-0.49497442494455257`, -0.8339515045283249}, 
                  0.003415399999999999], 
                 
                 DiskBox[{-0.7246584813478836, 0.29648658231985564`}, 
                  0.008556199999999998], 
                 
                 DiskBox[{0.4786417620241627, 0.7070164214211466}, 
                  0.008648], {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7835700694598524, -0.3278128725645714}, 
                  0.009963799999999998], {}, 
                 
                 DiskBox[{0.4424297338157449, -0.3744753617047139}, 
                  0.005710399999999997], 
                 
                 DiskBox[{-0.22956947875031986`, 0.004851452385942462}, 
                  0.008158399999999998], {}, 
                 
                 DiskBox[{0.04933135848606945, -0.22415140703141265`}, 
                  0.0046700000000000005`], {}, {}, 
                 
                 DiskBox[{0.07251488633358695, -0.9282469738014363}, 
                  0.0046700000000000005`], {}, {}, {}, 
                 
                 DiskBox[{0.5022205746322443, -0.6676433013978477}, 
                  0.011493799999999998`], {}, 
                 
                 DiskBox[{0.6829610589735068, 0.32811995037643943`}, 
                  0.011555], {}, 
                 
                 DiskBox[{-0.49552978597645725`, 0.5453069866593043}, 
                  0.0105758], 
                 
                 DiskBox[{-0.33863473345035205`, 0.8951872735475136}, 
                  0.012136399999999999`], 
                 
                 DiskBox[{-0.4660516523674581, 0.714961223045185}, 
                  0.010942999999999998`], 
                 
                 DiskBox[{0.8675029011138344, 0.03146654575300534}, 
                  0.013176799999999999`], {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9625039605596238, 
                    0.27126762782727687`}, {-0.9562614888298852, 
                    0.27606559178397866`}, {-0.9589863217349461, 
                    0.2834523500083889}, {-0.9607451411472849, 
                    0.2773599889178329}, {-0.9625039605596238, 
                    0.27126762782727687`}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.5416173707107614`, 1.5416173707107614`, 
                    1.5416173707107614`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.9690234065055691, 0.2797498626623836}, 
                    0.0106982, {5.367688221935082, 6.6365803915102015`}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9589863217349462, 
                    0.2834523500083888}, {-0.9607837745601102, 
                    0.27737114209727054`}, {-0.9625039605596238, 
                    0.27126762782727704`}, {-0.960745141147285, 
                    0.27735998891783287`}, {-0.9589863217349462, 
                    0.2834523500083888}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.000040211926317, 1.000040211926317, 
                    1.000040211926317}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {2.8542004506955485`, 
                    2.8668828555701493`}]]}, 
                 DiskBox[{0.52199009637577, -0.6384995353334508}, 0.0041192], 
                 
                 DiskBox[{-0.31536003659028733`, -0.28806459885857527`}, 
                  0.0053738000000000015`], 
                 
                 DiskBox[{-0.28072324546283683`, -0.7598664509699813}, 
                  0.0078218], {}, {}, {}, {}, {}, {}, 
                 DiskBox[{0.5150337371800363, -0.6354611521968584}, 0.009107], 
                 
                 DiskBox[{-0.3206184037991302, -0.2909908869826334}, 
                  0.005894], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3426363747290634, -0.8055613124861013}, 
                  0.0090152], {}, {}, 
                 
                 DiskBox[{-0.4000829514934591, -0.7702586250739731}, 
                  0.010331], 
                 
                 DiskBox[{-0.44839159519401073`, -0.7554250115200937}, 
                  0.0084644], {}, 
                 
                 DiskBox[{-0.493802405100828, -0.7608594060870882}, 
                  0.0085868], {}, 
                 
                 DiskBox[{-0.49699894504531933`, -0.7673922641727534}, 
                  0.0054655999999999975`], {}, 
                 
                 DiskBox[{-0.5179389575843831, -0.7694988796480021}, 
                  0.0073016], {}, 
                 
                 DiskBox[{-0.5384619824033714, -0.7551811647316518}, 
                  0.007362799999999999], 
                 
                 DiskBox[{-0.03670311609025958, -0.12721913838601273`}, 
                  0.006322399999999999], 
                 
                 DiskBox[{0.8649430651333643, -0.054060686065756425`}, 
                  0.004639399999999998], 
                 
                 DiskBox[{-0.5061537371284615, 0.1023122254077852}, 
                  0.0076994], {}, 
                 DiskBox[{-0.711172800364659, 0.5529492010554672}, 
                  0.0049148], {}, {}, 
                 
                 DiskBox[{0.1365805725041928, 0.09623063878432596}, 
                  0.0065672000000000005`], {}, 
                 
                 DiskBox[{-0.07104603103524999, -0.7545196359545253}, 
                  0.010820599999999998`], 
                 
                 DiskBox[{0.5006893264609572, 0.791687706517915}, 
                  0.007026199999999998], 
                 
                 DiskBox[{0.491226288998966, 0.06194482668677838}, 
                  0.010055599999999998`], 
                 DiskBox[{0.1991116658689653, 0.4144865491502161}, 0.007883], 
                 
                 DiskBox[{-0.4686679268663484, -0.8248574542821165}, 
                  0.0031094000000000017`], 
                 
                 DiskBox[{-0.6864788858869275, 0.21735306193401108`}, 
                  0.0080054], 
                 
                 DiskBox[{0.41320521549225775`, 0.7180128873369056}, 
                  0.0095354], {}, {}, {}, 
                 
                 DiskBox[{-0.7444248929754462, -0.42325105504037225`}, 
                  0.010514599999999999`], {}, 
                 
                 DiskBox[{0.3185986790574926, -0.25544064463652016`}, 
                  0.007485199999999999], 
                 
                 DiskBox[{-0.15037336563663817`, 0.031077215283331076`}, 
                  0.009474199999999999], {}, {}, 
                 
                 DiskBox[{0.0286543699800123, -0.2442648011874435}, 
                  0.0076994], {}, {}, {}, 
                 
                 DiskBox[{-0.044718982474624115`, -0.9108558915138316}, 
                  0.004088599999999998], 
                 
                 DiskBox[{-0.5034594831957703, -0.16495470561982775`}, 
                  0.0084338], 
                 
                 DiskBox[{-0.2955963259234329, 0.5268625821495121}, 
                  0.007209799999999999], {}, 
                 
                 DiskBox[{-0.820610616382596, 0.3304068825506467}, 
                  0.0052819999999999985`], 
                 
                 DiskBox[{-0.7020614334080504, 0.03571029894569386}, 
                  0.012717799999999998`], {}, {}, 
                 
                 DiskBox[{-0.7877811187842366, -0.36811750699841994`}, 
                  0.006261199999999998], 
                 
                 DiskBox[{-0.7878220098592233, -0.3681212239441317}, 
                  0.0058022], 
                 DiskBox[{-0.7878456049060136, -0.36807055577291625`}, 
                  0.0009674000000000002], {}, 
                 
                 DiskBox[{-0.5079424650671898, -0.2595044672509894}, 
                  0.009749599999999999], {}, {}, 
                 
                 DiskBox[{-0.7882396012717756, -0.36819113884959787`}, 
                  0.006261199999999998], {}, {}, 
                 
                 DiskBox[{-0.5086032114866026, -0.26033759635829246`}, 
                  0.011096], 
                 
                 DiskBox[{0.14383406897385492`, -0.13381224270497466`}, 
                  0.007393399999999998], {}, {}, 
                 
                 DiskBox[{0.9116144983096747, -0.16118456215716906`}, 
                  0.011585599999999998`], {}, 
                 
                 DiskBox[{-0.1505078611979494, -0.3458371817215378}, 
                  0.004425200000000001], 
                 
                 DiskBox[{-0.5376643441257273, 0.1063485005805601}, 
                  0.013390999999999998`], 
                 
                 DiskBox[{0.14247096788726069`, 0.8234866969026959}, 
                  0.0091376], 
                 
                 DiskBox[{-0.8682981688451097, 0.3927598777955424}, 
                  0.005190199999999999], {}, 
                 
                 DiskBox[{0.8500217328435798, -0.5019693770365653}, 
                  0.0090152], {}, 
                 
                 DiskBox[{0.01935848434394069, 0.034077720835226054`}, 
                  0.008219599999999999], 
                 
                 DiskBox[{0.29905758409729605`, 0.3056632441645303}, 
                  0.008617399999999999], 
                 
                 DiskBox[{-0.002436430982857468, -0.6700283818536302}, 
                  0.010483999999999999`], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.46581456677635313`, 0.322980480274956}, 
                  0.0077605999999999994`], 
                 
                 DiskBox[{0.7502920311839757, -0.08708851568081874}, 
                  0.004088599999999998], {}, 
                 DiskBox[{0.2646840787988463, 0.6687430637151689}, 0.0092294], 
                 
                 DiskBox[{-0.6304986284396387, 0.19644189137732343`}, 
                  0.010483999999999999`], {}, 
                 
                 DiskBox[{0.6257168525974848, 0.5117146330767837}, 
                  0.0096884], {}, {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9098052001535216, \
-0.41503553796465514`}, {-0.9068499100134508, -0.4084592566273034}, \
{-0.9134261913508025, -0.40550396648723264`}, {-0.9138181711983423, \
-0.4053278161495089}, {-0.9142283002537618, -0.4051994755859362}, \
{-0.9120167502036417, -0.4101175067752957}, {-0.9098052001535216, \
-0.41503553796465514`}}, SplineKnots -> {0, 0, 0, 
                    Rational[1, 3], 
                    Rational[1, 3], 
                    Rational[2, 3], 
                    Rational[2, 3], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 2.0071055337457047`, 2.0071055337457047`, 
                    2.0071055337457047`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{-0.9163814814908733, -0.41208024782458436`}, 
                    0.007209799999999999, {-0.4223433798732483, 
                    1.2675222537649207`}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{-0.9142283002537617, \
-0.40519947558593633`}, {-0.9120432705836391, -0.4101294325125378}, \
{-0.9098052001535214, -0.415035537964655}, {-0.9120167502036415, \
-0.4101175067752957}, {-0.9142283002537617, -0.40519947558593633`}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000290788299575`, 1.0000290788299575`, 
                    1.0000290788299575`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-2.72439564339368, -2.713610789894234}]]}, {}, {}, 
                 
                 DiskBox[{0.6125091575545131, 0.3099934247339592}, 
                  0.008189], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.14498646633136703`, -0.01198235555095261}, 
                  0.008954], {}, {}, {}, 
                 
                 DiskBox[{0.35043427811129246`, -0.45261589091508675`}, 
                  0.0084338], {}, {}, 
                 
                 DiskBox[{0.7374496396902198, 0.056548089337357055`}, 
                  0.0015794000000000016`], {}, 
                 
                 DiskBox[{0.24751705365593413`, -0.9533424148553903}, 
                  0.0054655999999999975`], {}, {}, 
                 
                 DiskBox[{-0.41863915399377294`, 0.5948289217559571}, 
                  0.0117998], 
                 
                 DiskBox[{0.0837917787335447, 0.5378918723485161}, 
                  0.006199999999999999], {}, {}, 
                 
                 DiskBox[{0.06070081781317221, 0.6999423993968529}, 
                  0.010269799999999999`], 
                 
                 DiskBox[{0.03619818166800296, 0.09724289077116732}, 
                  0.014921], 
                 
                 DiskBox[{0.23212373304485037`, 0.3797442689529187}, 
                  0.009749599999999999], {}, 
                 DiskBox[{-0.7947940760893607, 0.420577071832245}, 0.0040274], 
                 
                 DiskBox[{0.04053190691637921, 0.07817951760865914}, 
                  0.006720199999999999], {}, {}, {}, 
                 
                 DiskBox[{-0.7946831666983204, 0.42549938931207426`}, 
                  0.0020690000000000014`], 
                 
                 DiskBox[{0.03793205961464184, 0.0802531351086138}, 
                  0.007362799999999999], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.028292532693561682`, -0.11842430658270077`}, 
                  0.008954], 
                 
                 DiskBox[{0.5750970370973103, -0.700411690703318}, 
                  0.0055574000000000005`], 
                 
                 DiskBox[{0.8951814698375857, 0.0046231534011755586`}, 
                  0.0034766], 
                 
                 DiskBox[{-0.5251046201403752, 0.09054020247217108}, 
                  0.0070568], {}, {}, {}, 
                 
                 DiskBox[{-0.12691277445326715`, -0.8082785321941928}, 
                  0.009290599999999998], {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.598451446544974, 0.8011590766684404}, {
                    0.59926391761344, 0.7997086984305335}, {
                    0.6008840818985837, 0.7993361746605092}, {
                    0.5996677642217788, 0.8002476256644748}, {
                    0.598451446544974, 0.8011590766684404}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.196320758998781, 1.196320758998781, 
                    1.196320758998781}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0.6017248396446655, 0.8029927619235734}, 
                    0.0037519999999999984`, {3.6522170416355255`, 
                    4.486387430570778}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.6008840818985838, 0.7993361746605092}, {
                    0.5996691495604317, 0.8002494743781023}, {
                    0.5984514465449741, 0.8011590766684407}, {
                    0.5996677642217789, 0.8002476256644749}, {
                    0.6008840818985838, 0.7993361746605092}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000023101769604`, 1.0000023101769604`, 
                    1.0000023101769604`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 1, {0.926189657053836, 
                    0.929229507972881}]]}, 
                 
                 DiskBox[{0.5116989185706237, 0.029026428723697612`}, 
                  0.0080054], 
                 
                 DiskBox[{0.2235812269698908, 0.4311265664836171}, 
                  0.006750799999999998], 
                 
                 DiskBox[{-0.7424844868069416, 0.2639250089227951}, 
                  0.0090764], {}, 
                 
                 DiskBox[{0.3875288014398781, 0.7509429867792446}, 
                  0.0070568], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7871460660973976, -0.3981644784855727}, 
                  0.007362799999999999], {}, 
                 
                 DiskBox[{0.30788590330322096`, -0.2636308261151211}, 
                  0.007974799999999999], {}, {}, 
                 
                 DiskBox[{0.009750068333536673, -0.27612018008404793`}, 
                  0.006995599999999999], {}, {}, {}, 
                 
                 DiskBox[{-0.46802397896008324`, -0.19107175497653164`}, 
                  0.008403199999999998], 
                 
                 DiskBox[{-0.3183966018712193, 0.5964732979047674}, 
                  0.0099332], {}, 
                 
                 DiskBox[{0.6154067357964902, 0.4095586473548558}, 
                  0.0214082], {}, 
                 DiskBox[{-0.7821472753855456, 0.1853392273594238}, 
                  0.01079], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.1499619115256106, -0.47055605037232395`}, 
                  0.008158399999999998], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.19591763943606946`, -0.4676196714100611}, 
                  0.008342], {}, {}, {}, 
                 
                 DiskBox[{0.0018572441836750286`, -0.07323284751286337}, 
                  0.006597799999999999], 
                 
                 DiskBox[{0.7228778263506184, -0.45281869209961656`}, 
                  0.0071792], 
                 
                 DiskBox[{0.8730622272952329, -0.013166334918343412`}, 
                  0.007087399999999999], 
                 
                 DiskBox[{-0.18292634742993083`, -0.4455228052809064}, 
                  0.004731199999999998], 
                 
                 DiskBox[{-0.3587369168371134, 0.23358329928648616`}, 
                  0.006322399999999999], {}, 
                 
                 DiskBox[{-0.8078287823206146, 0.5426094763950653}, 
                  0.005710399999999997], 
                 
                 DiskBox[{0.07259526321384399, -0.012730607301813536`}, 
                  0.006812], {}, 
                 
                 DiskBox[{0.5920907453561022, 0.7814619829686447}, 
                  0.006628399999999998], 
                 
                 DiskBox[{0.4547060975615619, 0.1272466511327978}, 
                  0.010116799999999999`], 
                 
                 DiskBox[{-0.5742373783956717, -0.4842991136709109}, 
                  0.005679799999999999], 
                 
                 DiskBox[{-0.822635925780779, 0.008586398846182543}, 
                  0.011248999999999999`], {}, 
                 
                 DiskBox[{0.7266977487456312, 0.49290698763073787`}, 
                  0.010177999999999998`], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.7514652999616978, -0.06814014511010423}, 
                  0.007883], {}, 
                 
                 DiskBox[{0.44954181959509915`, -0.34152482807760004`}, 
                  0.008648], {}, 
                 
                 DiskBox[{-0.09500279977128251, -0.539891934803116}, 
                  0.007393399999999998], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3664125317388736, -0.40692105580903587`}, 
                  0.010086199999999998`], {}, {}, {}, {}, {}, {}, 
                 DiskBox[{0.036362520570985664`, 0.4381425636561202}, 
                  0.008189], 
                 
                 DiskBox[{-0.518248157078955, -0.633176734039626}, 
                  0.012411799999999999`], {}, 
                 
                 DiskBox[{0.5443179697697823, -0.45108782386351093`}, 
                  0.010331], 
                 
                 DiskBox[{0.4318777856336953, 0.8574823700188282}, 
                  0.0073016], {}, 
                 
                 DiskBox[{0.6288762686051618, 0.385893036342973}, 
                  0.008219599999999999], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.8685719467289916, 0.32220376407509044`}, 
                  0.007209799999999999], 
                 
                 DiskBox[{0.6289975940082025, 0.385777682168303}, 
                  0.0039662], {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.09457558054299992, -0.30436029626835454`}, 
                  0.0090152], {}, 
                 
                 DiskBox[{0.8888008458757799, 0.189946696476537}, 
                  0.012350599999999998`], {}, 
                 
                 DiskBox[{-0.2993201488237263, -0.29505571757830107`}, 
                  0.006597799999999999], 
                 
                 DiskBox[{-0.42283437184297223`, 0.0414814633324534}, 
                  0.0102086], {}, {}, {}, {
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.7984174711382639, -0.6021042615537439}, {
                    0.7884596842139739, -0.602450368488721}, {
                    0.7888057911489512, -0.6124081554130111}, {
                    0.7888394087798379, -0.6133753628608817}, {
                    0.7890585331413731, -0.6143180212860309}, {
                    0.7937380021398185, -0.6082111414198873}, {
                    0.7984174711382639, -0.6021042615537439}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 3], 
                    Rational[1, 3], 
                    Rational[2, 3], 
                    Rational[2, 3], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 2, 2, 2.0188687704808235`, 2.0188687704808235`, 
                    2.0188687704808235`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0.7987635780732412, -0.6120620484780338}, 
                    0.009963799999999998, {1.6055397556140902`, 
                    3.369990131960843}]], 
                  EdgeForm[None], 
                  InterpretationBox[
                   FilledCurveBox[
                    
                    BSplineCurve[{{0.7890585331413732, -0.614318021286031}, {
                    0.7937849873938936, -0.6082471444270936}, {
                    0.7984174711382642, -0.602104261553744}, {
                    0.7937380021398188, -0.6082111414198875}, {
                    0.7890585331413732, -0.614318021286031}}, 
                    SplineKnots -> {0, 0, 0, 
                    Rational[1, 2], 
                    Rational[1, 2], 1, 1, 1}, 
                    SplineWeights -> {
                    1, 1, 1.0000591949156374`, 1.0000591949156374`, 
                    1.0000591949156374`}, SplineDegree -> 2]], 
                   
                   DiskSegment[{0, 0}, 
                    1, {-0.6615213812092816, -0.646134038395371}]]}, 
                 
                 DiskBox[{0.07549996733290844, 0.02583484097133451}, 
                  0.0102086], {}, 
                 
                 DiskBox[{0.25958853686965966`, 0.1615661149397981}, 
                  0.011126599999999999`], {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{0.5565372335854918, -0.003523582249416244}, 
                  0.0116774], 
                 
                 DiskBox[{0.7465616166300726, -0.06529067212970764}, 
                  0.0073016], {}, 
                 DiskBox[{0.254844001083485, 0.5502638520281711}, 0.0117998], 
                 
                 DiskBox[{-0.37279859737826654`, -0.6255823827359611}, 
                  0.006812], 
                 
                 DiskBox[{-0.3336677812949984, -0.8264754379112769}, 
                  0.004088599999999998], {}, 
                 
                 DiskBox[{0.618793372472138, 0.7246019271237084}, 
                  0.012901399999999999`], {}, {}, {}, {}, 
                 
                 DiskBox[{-0.8606122977429602, -0.4567983368749583}, 
                  0.010636999999999999`], {}, {}, {}, {}, {}, {}, {}, {}, 
                 
                 DiskBox[{-0.3508368854988051, -0.13908388090448456`}, 
                  0.012778999999999999`], {}, {}, 
                 
                 DiskBox[{0.592841292281938, -0.7607458021523189}, 
                  0.0018242000000000015`], 
                 
                 DiskBox[{0.02917645835582542, -0.4945609972417828}, 
                  0.0055574000000000005`], 
                 
                 DiskBox[{0.029106268675444868`, -0.4945307552896609}, 
                  0.0017935999999999994`], {}, 
                 
                 DiskBox[{0.7839879276300279, 0.09849991034000803}, 
                  0.0061694], 
                 
                 DiskBox[{0.2812317736163989, -0.886949706501283}, 
                  0.006077599999999999], {}, {}, 
                 
                 DiskBox[{-0.6322087617839338, -0.08022229202927954}, 
                  0.012411799999999999`], {}, {}, {}, 
                 
                 DiskBox[{0.08757314862263754, 0.5293530516236855}, 
                  0.0083726], {}, {}, {}, {}, {}, {}}, {
                 RGBColor[0.5, 0., 0.5], {
                  TagBox[
                   TooltipBox[
                    
                    DiskBox[{0.26359548897006263`, -0.5660963062366866}, 
                    0.0290594548264866], "\"Jupiter\"", LabelStyle -> 
                    "TextStyling"], Annotation[#, "Jupiter", "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{}, "\"Mercury\"", LabelStyle -> "TextStyling"],
                    Annotation[#, "Mercury", "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    
                    DiskBox[{0.7548996352461601, -0.5430606012263757}, 
                    0.0196533938227861], "\"Saturn\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Saturn", "Tooltip"]& ]}}, {}, {}, 
                RGBColor[1, 0, 0], {}, {}, {}, {{
                  
                  DiskBox[{-0.4945885226916217, -0.14378981333779958`}, 
                   0.026548376052188575`], 
                  GrayLevel[0], 
                  InsetBox[
                   FormBox[
                    StyleBox[
                    "\"Mars\"", {
                    FontSize -> 12, FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], 
                    TraditionalForm], {-0.41344217696901914`, \
-0.12019844926610915`}]}}, {
                 RGBColor[1, 0, 0], {}}, 
                GrayLevel[0], {
                 RGBColor[0.84, 0.84, 0.84], 
                 Thickness[0.008], 
                 CircleBox[{0, 0}, 1]}, {}}, {GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, ImageSize -> {377.3}, 
                Background -> None, PlotRange -> {{-1, 1}, {-1, 1}}, 
                PlotRangePadding -> 0.03, ImageSize -> 512}], 
              StyleBox["\"S\"", {FontSize -> 13, 
                GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox["\"E\"", {FontSize -> 13, 
                GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox["\"N\"", {FontSize -> 13, 
                GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox["\"W\"", {FontSize -> 13, 
                GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{"", 
                  ItemBox[#4, DefaultBaseStyle -> "LabeledLabel"], ""}, {
                  ItemBox[#3, DefaultBaseStyle -> "LabeledLabel"], 
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline, ImageMargins -> 5], DefaultBaseStyle -> 
                    "Labeled"], "SkipImageSizeLevel"], 
                  ItemBox[#5, DefaultBaseStyle -> "LabeledLabel"]}, {"", 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"], ""}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {2, 2}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", 
                  RowBox[{"{", 
                    RowBox[{#2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
                  StyleBox[
                  "All", FontFamily -> "Roboto", FontSize -> -1 + Inherited], 
                  ",", 
                  RowBox[{
                    StyleBox[
                    "FrameMargins", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "5"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Local sidereal time"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{"\"1\"", 
                 StyleBox[
                  SuperscriptBox["\[Null]", "\"h\""], FontFamily -> "Roboto", 
                  FontSize -> Smaller]}], "\[InvisibleSpace]", 
               TagBox["  ", 
                $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
               RowBox[{"\"23\"", 
                 StyleBox[
                  SuperscriptBox["\[Null]", "\"m\""], FontFamily -> "Roboto", 
                  FontSize -> Smaller]}], "\[InvisibleSpace]", 
               TagBox["  ", 
                $CellContext`TagBoxWrapper["StringBoxes" -> " "]], 
               RowBox[{
                 TagBox["17.56", 
                  $CellContext`TagBoxWrapper[
                  "StringBoxes" -> "17.56", "SRString" -> "17.56"]], 
                 StyleBox[
                  SuperscriptBox["\[Null]", "\"s\""], FontFamily -> "Roboto", 
                  FontSize -> Smaller]}]}], AutoSpacing -> False], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show mesh", "input" -> 
         "SkyMap:PlanetData__Show mesh"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show decimal", "input" -> 
         "SkyMap:PlanetData__Show decimal"}, {}]}]}], Typeset`pod13$$ = 
   XMLElement[
   "pod", {"title" -> "Distances", "scanner" -> "Data", "id" -> 
     "AstroDistances:PlanetData", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PlanetData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"AllensAstrophysicalQuantities"}], 
         "\n    ", 
         XMLElement["datasource", {}, {"AstronomicalAlgorithms"}], "\n    ", 
         XMLElement[
         "datasource", {}, {
          "PlanetaryTheoriesInRectangularAndSphericalVariables"}], "\n    ", 
         XMLElement["datasource", {}, {"SolarSystemDynamics"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"distance\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"light time\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 TagBox[
                  PaneBox[
                   TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], "\" \""}, 
                    "RowDefault"], 
                    StyleBox["\"to\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{"\" \"", 
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity]}, 
                    "RowDefault"]}, "RowDefault"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.645", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.645", "SRString" -> "1.645"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["13.68", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "13.68", "SRString" -> "13.68"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"min\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], "\" \""}, 
                    "RowDefault"], 
                    StyleBox["\"to\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{"\" \"", 
                    TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity]}, 
                    "RowDefault"]}, "RowDefault"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.5723", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.5723", "SRString" -> "0.5723"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"au\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4.76", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.76", "SRString" -> "4.76"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], FontFamily -> "Roboto", FontSize -> Smaller], 
                    "\[InvisibleSpace]", "\[ThickSpace]", "\[InvisibleSpace]", 
                    StyleBox[
                    "\"min\"", FontFamily -> "Roboto", FontSize -> Smaller]}],
                     Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                   Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, {Right}}, "Rows" -> {{Right}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {None, None}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show all distances", "input" -> 
         "AstroDistances:PlanetData__Show all distances"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {"short" -> "au", "long" -> "astronomical units"}, {}], 
           XMLElement[
           "unit", {"short" -> "min", "long" -> "minutes"}, {}]}]}]}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Wikipedia summary", "scanner" -> "Data", "id" -> 
     "WikipediaSummary:PlanetData", "position" -> "1400", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Venus"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 InterpretationBox[
                  Cell[
                  "Venus is the second planet from the Sun and is named after \
the Roman goddess of love and beauty. As the brightest natural object in \
Earth's night sky after the Moon, Venus can cast shadows and can be visible \
to the naked eye in broad daylight. Venus's orbit is smaller than that of \
Earth, but its maximal elongation is 47\[Degree]; thus, at latitudes with a \
day\[Dash]night cycle, it is most readily visible for up to a few hours \
following the start of sunset or before sunrise. Unlike Mercury, which can \
only be observed during twilight, Venus can be seen in a completely dark sky. \
Venus orbits the Sun every 224.7 Earth days, but rotates around its axis in \
243 Earth days. Consequently, it takes longer to rotate about its axis than \
any other planet in the Solar System, and does so in the opposite direction \
to all but Uranus. This means that the Sun rises from its western horizon and \
sets in its east. This retrograde rotation creates a synodic day of only 117 \
Earth days. Venus does not have any moons, a distinction it shares only with \
Mercury among the planets in the Solar System.", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
                   "Roboto", FontSize -> 12, LineSpacing -> {1, 3}], 
                  TextCell[
                  "Venus is the second planet from the Sun and is named after \
the Roman goddess of love and beauty. As the brightest natural object in \
Earth's night sky after the Moon, Venus can cast shadows and can be visible \
to the naked eye in broad daylight. Venus's orbit is smaller than that of \
Earth, but its maximal elongation is 47\[Degree]; thus, at latitudes with a \
day\[Dash]night cycle, it is most readily visible for up to a few hours \
following the start of sunset or before sunrise. Unlike Mercury, which can \
only be observed during twilight, Venus can be seen in a completely dark sky. \
Venus orbits the Sun every 224.7 Earth days, but rotates around its axis in \
243 Earth days. Consequently, it takes longer to rotate about its axis than \
any other planet in the Solar System, and does so in the opposite direction \
to all but Uranus. This means that the Sun rises from its western horizon and \
sets in its east. This retrograde rotation creates a synodic day of only 117 \
Earth days. Venus does not have any moons, a distinction it shares only with \
Mercury among the planets in the Solar System.", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
                   "Roboto", FontSize -> 12, LineSpacing -> {1, 3}]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Earth"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 InterpretationBox[
                  Cell[
                  "Earth is the third planet from the Sun and the only \
astronomical object known to harbor life. While large volumes of water can be \
found throughout the Solar System, only Earth sustains liquid surface water. \
About 71% of Earth's surface is made up of the ocean, dwarfing Earth's polar \
ice, lakes, and rivers. The remaining 29% of Earth's surface is land, \
consisting of continents and islands. Earth's surface layer is formed of \
several slowly moving tectonic plates, interacting to produce mountain \
ranges, volcanoes, and earthquakes. Earth's liquid outer core generates the \
magnetic field that shapes Earth's magnetosphere, deflecting destructive \
solar winds.", LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
                   "Roboto", FontSize -> 12, LineSpacing -> {1, 3}], 
                  TextCell[
                  "Earth is the third planet from the Sun and the only \
astronomical object known to harbor life. While large volumes of water can be \
found throughout the Solar System, only Earth sustains liquid surface water. \
About 71% of Earth's surface is made up of the ocean, dwarfing Earth's polar \
ice, lakes, and rivers. The remaining 29% of Earth's surface is land, \
consisting of continents and islands. Earth's surface layer is formed of \
several slowly moving tectonic plates, interacting to produce mountain \
ranges, volcanoes, and earthquakes. Earth's liquid outer core generates the \
magnetic field that shapes Earth's magnetosphere, deflecting destructive \
solar winds.", LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> 
                   "Roboto", FontSize -> 12, LineSpacing -> {1, 3}]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Mars"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 InterpretationBox[
                  Cell[
                  "Mars is the fourth planet from the Sun and the second\
\[Dash]smallest planet in the Solar System, being larger than only Mercury. \
In the English language, Mars is named for the Roman god of war. Mars is a \
terrestrial planet with a thin atmosphere, and has a crust primarily composed \
of elements similar to Earth's crust, as well as a core made of iron and \
nickel. Mars has surface features such as impact craters, valleys, dunes, and \
polar ice caps. It has two small and irregularly shaped moons: Phobos and \
Deimos.", LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> "Roboto",
                    FontSize -> 12, LineSpacing -> {1, 3}], 
                  TextCell[
                  "Mars is the fourth planet from the Sun and the second\
\[Dash]smallest planet in the Solar System, being larger than only Mercury. \
In the English language, Mars is named for the Roman god of war. Mars is a \
terrestrial planet with a thin atmosphere, and has a crust primarily composed \
of elements similar to Earth's crust, as well as a core made of iron and \
nickel. Mars has surface features such as impact craters, valleys, dunes, and \
polar ice caps. It has two small and irregularly shaped moons: Phobos and \
Deimos.", LinebreakAdjustments -> {1, 100, 1, 0, 100}, FontFamily -> "Roboto",
                    FontSize -> 12, LineSpacing -> {1, 3}]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Wikipedia page hits history", "scanner" -> "Data", 
     "id" -> "PopularityPod:WikipediaStatsData", "position" -> "1500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TemplateBox[{
                    GraphicsBox[{
                    GraphicsComplexBox[CompressedData["
1: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
7mdC12QhLO07qyBuZHCvrWYv74oAdDcWnlzSRfxlwdSPc034MKjVrfR3FMmH
NaFTV6/jwdhHeeN2Tfvv/kg/9uUO50HjupA7bZosHtH6Ot+K+PQmxpRzeDXp
H9ZmjImBEPql53wzsmbxtckbbymfOrjU73Izw4PF3vMOboVcPpTxapvhEotd
EF5qpMABOcVrz1NTWayxNP6z4ikHDk47dU+1gEWzSO59B8JbA9tGpi6wp3Bp
rV6a7Eke9NOP4wUnKcx6d9eQJe//BleDVNUgCls9dv7rOZwDHXrOCt2ZFL7c
9HzFqoVlUNUhaHv8hPjxocjT2eeK4E+gkuD0OwoN2tJ3rrUg85d/KXqmNOGf
UbpdY84UgIx+59FHmjTusbwdrX5cBOn03ku2Wwiv3DE/6vG3BHxuaErHHCe8
8iSkeLJ8JYTMrLLJu0jjvmUu/UK1Mkh/mrdX7Sbh96v/4IJFBag4rWp1T6Xx
Y0+jQGOkBN6kyOY9eUQjd6HVPEAhOJ2bI/r1msbvz33/dM8TAGt961L3P+ID
D2v/qEpygPdZYkGyOoOdfVMXm25Nh5oDVxaf30D8tTUw+G6kGGIcr2gv2E/4
WKo658gVETzfpbWp+iyD7mzKV+8dAvh9r3Sfwz0Gl7y/e3bKOA48nnGcM1jN
YG3VYYNzyiI4lCmxkf3IIO+az5Fuss8XWn4nmw8zWLT9wEjzEwGs+HhFLB7L
ouqDQ5pR7znw3w1iRs1k8WEC1do/nQNLu/nH9iE5v1yZJL3yArCc7RJ5YReL
Zz8PdAUv4cH58167pRxY3JjC8/HlCmBUnVKC7SkWk3uSds9MFMGe6+XTZMtI
/xW6G7ZH5UJ4/oGN4/wpVPu4bkjzPB/UL3d5yiRRWGL45cpT1TIIjkdJbT6F
8YvAMXZGEVjOX6ndUkP8cUqG6oIUMahuuvJy4QsKGw+82H1ygQBi9hQnrxyh
0Cu29oDbhWwovC4v0J5NeHZ93ESri8WgsjHH2NGYRo17N8JWygrglHVeiqTl
f/lwLmdpQwUMvmp8WeNLo/FPd6/o4iKYFv35pUwrjZ1Od+p/fBHBilluO+Lk
GDTRuLJq+mQeZI1d+KduBoOpfupl5Q1cSL+smd2zkPCk1TPjt+ZpMM6rYDB4
LfGdidOWsD4ZMPnx5AdvTzAo7X4/wp/sT9D18DmTAhnslQn0cMwrhr6yKXYR
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
aGD6gfjDwe6Pu27Q+FpykciLmBoI6JxiYU3yumf6WaPLpWXwft1qzt4KGnk1
e6dSkpXwN6K0828rjSYiLjlFYjxoW3mG/6SP8GKy0YE7gnKweWdYwftK4/ZT
pk2jM4rgws3PdU0k76c5T9QS2c8B70L6poQseez2XWX0RhFI3dVT6Sb5v/Xt
KbmdqXlgeyOglGfA4MX922xub+fAljiuk5D0Qb65zbzVTyth2MW0fIcjg0eU
gmrEzpaC3U3Z14pHGexMle9OfFoKB569kflH+sLGbsfCFYrVoCF7z/ZPHNmn
WR+SOVrFkFmWs3/ZPQa51zsrDLMKoH2l+IIhLsnr8JgpqkwRPODu/t5M+sSl
MivfwqsM9Nakdwh6yL7OTKznfyuBo40fhR0sgx0f/DtAqRTcSo+dURxjcNLR
KMHBoFIQO2fFfJFm0S33zNypY4Vgv3Gux1tlFot2XXJUJvu3R+nD90/LWfxy
u23nrthCkKgXWRlK+urtngyxPl8u+D51Nra1Y1FG6n6QwSUOXH5XvhM8WZwv
H7qzIp0DO/9KBa0LZPGm7ZHjlxYK4eXJNJ9zl0mfT1/xSEk7H6SaI+XX//99
DT9NzkdoFMCgyqE2jXwWzY+F8dfMKoSU2bY6PqQPlVTGF8/MygM/y+8fC/ZT
eDYz8YJVYSUY/IybtOE44ZHrMmVHvYgPvdNenEH4Tzh4tL/taTFsbnWvGZ9A
odiRFdnxSZWwuPLaoZOEB5darOgylKwFDUagyKmg0Ja+OBS9uArc371570T4
8P5eqxeHV/HAMjRr8pQ3FJbf/Sfeb0D47Yerqfo3CuskhLN1UyuBs2zmzQLC
jxvGHzSWgWrQzqz+ITqbRuM+/60j0yvh49yJjVsJT1p+cP9YcJnM2w2T7DID
Gvs8q2aU9nFhYOvpqzThy5tti3gpX2ogpyvr+iUHGr2KjBT4e2tBaWLwF/Wj
NO6rNtdQJs/XMGblph9MY8S61XN2FAkgSyg2XBRH46u/m1QLXgihqFEQPkJ4
tGy64NuuNzUkj48YPiymsfg3R9S7thj6ZtTBviYaZzu576lor4Dxu6SdLxBe
TZqSoDcoXwYOnlZJsoPkeCtWOUtNyoW+sguvjxB+9fw8dV9HTQmkTLK7UTud
QfM2m0VWk4pBxk51n54q8Y/xn3fFrXsI2R8ZrcMrGfzYoyF9wYIHZ9bdnz3L
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
4rvO7iONYNmqJf17nEDxoKencj6y4RJ7beOYKInpWnpd6iUNYMl3kX90CcPv
NzeMChznQe8G+3Vya0i8WhuY0g71sNZt1POTEYmWXRcvvD7NAdFvT9c/tCLx
YviT9D1/aoGnYpHYdojE+bNeKrdLNoDgsmKzXf4kct5mfqw3aYHvhNIdkSgS
HThLD566z4NGZ62oT9dIVIsZOXnlQSPM10v98zqP6SvP7Uf2/lcJxtyrgj+r
Sfw0jwwmxGqBbyrQPbGdRG3R2pDBEMbn53oe3/+BxKhyoZNBE1wo7vr1d883
Eg+aodEOIzac+vlWca8Qs987pLVvdzP+J7pxwxVpCh8bm3on/CqDY7P32Xuu
olChSN+tzaoYzL3aZpkbUOh3vjTSSYcFs86+MrO3oLD67IabCsk1sNf08cio
I5Pvo2Nrst9VgCXZppTjTaHT8r9KV/KrQEnf7fOVcApvLOJt3bSuDs4O2++I
ukqhFT9P1zmiHG5HtGaUZzP+fNbomfTrUrg0//uP8+UUPjx485r9fRZM8wX0
72lleOza4ry1w5WwI+2yrd0bCqH8jsWID+O/VwWcnT4yfCTBWd7IroSKs58P
ZP/7/aazCumL/CtB3u7Gocg5NL5MXRBzXZwFIolpvzwVaBTWrolW2cCBZwE6
chHaNBZe1V1xSYEFCovZt2VMaJx7L1Hr6iUOKCRtbey3Y3hKPPSFviMb+Cq8
TnZ70HhMTVzXIIsNToZjnOfBjC9smbk51qURYksoWuQSjfUH5SzOTRdD6MIs
lXe3mOOrm+nvVy2FX2/KJjglNN6+88tuqXwZfPi45rh4E+PX1xZ8XONVDFPw
kWt4mMATyvV/1G/WQfiMAz79/gSuyqRXyRs0gqDj6oJ1F5k8u3/x75WrgC54
GBN7ncD35lvT2XMZX93S1Db7AYFXX9vriCYw/N23LHlTDePX02rFzgyPzqYl
xn8+I/Dc6OTlw4Y8uBpluP/2B8aft90+H8PP+O+hlcUl3wjUVNjjEhpUDQ7F
2TdNhEh8vurgawv7OvBMCZ2fsJBE52Bvxb9FNfBYUFWldxWJLh3TXX3u1TCR
pJdtaUCiao5CdJxKOSyvvJtz0oLx5YibCjWmjVBscxuX/fv8YNfCb9kPHkLz
6bd9XG/Gh/csC45Jrwbh992evHDGf/NmrWtPbYCCykNXza6SqGuYct49rgl2
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
ynA=
                    "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl2nfAzXUbx/HbuO2R7D2ySTJL9sree+9RSSQNZDW0qIxKKCuS7JEGMhIV
0jAyKyMpJNk8r8vzx3m+13W935/vfTvnPuf3/Z2egr0Gt3o0aUJCQhKP0qn/
v76eOyHhDY9y6pJm0xITEvKnSkhIn8w8eUJCrpQJCS8Rmwp+b9YpRULCVm5G
bhfucXwJ9oZMOf5neDH+L+o+2J/qwXKXub3lcsk9o07GPyg3z9qD+4dcB24e
s/f5JfRT+Mn4dfjf2utZbBQ/Kf8V/D98rbom9qlsdblt3HvNS8hNVefjpzP/
xPo6Nyd3Arcw9rG6iT134x3tt0Wus/nv5h+bvy5zr8ynWFGZA+re2Gn1ozKX
uL1kfuF2x07x2mO/yl3XP8/Njb3HLY5N5o7SJ8Fe1l/Uf8Ndo6/BXSdbTl+N
/5W9y+Jp1ZPwHPiL+Dn8LmyxvrG9Bup3cTrYbzN/sVlZ/jp9Ef5+dS/uH+o6
3EHc/+R7cp+2JjU7INONd1KmHS+Xvo35LG4xsze5I+MPh/OS/l/lJ7yq+FZ7
3KMv7vmeos4rl8Z8Ije7n/sCr5HsTrP2spu4GbiduL/hH2GTZO7hf4IX5u9T
98ROqR+Ru8jtIfeUNQl3v8xca1feCZm2vGvq52RyYjNlipq/ITNCf0s/QX9B
v0NuNbc6d63cA9gW+5bBUqtfw7Jhz2NnuYWwj/QN7TNA/x2nnb2+5C8yK8Nf
q7+Lf9LjYfxfme74PrwLfhxvg11Vj7dXDvPW9prBLYK9zk3qOakt9w3+DH4T
exH7B1sjW0W/Gb9bX4w7WZ3HHqnM11pftXdW2ee4BbFF6gb2+RZva5+Ncunl
OmK/Yh9iE+XulluDF5Lbq+6BnVA/JHeB203uSWsCd6/MHGtn3u8yrXlX1ONk
smPvyhQ2n0SvJbPD/GnzkTI3sBew89gqmWrYavn7zTdxS5u/ac3NTWm2xvoK
LwtvPO9vfQH8Q/2D9vyG08Z+G+QW6ktzV+sLcn/i/qzvzj2ur60fyP9Hviv/
Z34n/Dd+K/yyeiw3m3kr7nTuXdhEbk2Z7dhT2HXz583Pma+UqWq+Sv5emfuw
L7mlsKKe5zfUucxTmL/Mzcwdx61vnx1mre2znrtAXwpfpS+A/+4xAD8v3wXP
aa/h6lvyP3Fn27Mj/1d+S+4l9RgsK/aOXCHz1+RqyHxt/qT5CJlr2HPYWWyF
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
/5xfE9/Or4Tvj79z/SD+VX2DOKfzU+JD+V34R/UD9T/qN+Az+EXiTBNnC30e
fH6cKfDT/EfxS/x+cX40f51b0rwLdwm3MjaH2wT7CXsVu0PmHfPkcX3waML7
Ca8ZZ1OvWV/139zPuFPtU4P/Nb8i94rHKH4K/ZA4o8V9FX8Nv3P8Pvoj+AD8
B/xd2cJxlpHLbT4vrsXmY61p4vots9A6iPefTF9eCmySTIm4XstUMp8t09j8
R/NXzMfHdVDmbSxZ3IPFPbK+UZzp9I3lfuTXkPuUXx3bxq2A7Yv3q/4R7mX9
SG4i9hi3E/ewvr9+T7ynuNO5d8V5hltUnwufG9c1/BT/Efwiv0+85/BEbCK/
ONY57vv5FfH3477TLAP/LX1S/kZ1Q+5X6srcRtwf5KtzM3kt+qj/wtfJVeN+
JVeee8ljBDe5fjD3omxp7mpuR+4g/SG8H/49/o5sIWyqXE7zOfFZaj7Gmpp7
UmaB9WHevzK9ecmx12SKxfVOpoL5ezKNzH8wf8l8XFz3ZKZhSWQ2qBvEeS4+
c2T2cKvJfMKtim3llcP2yv2qf5j7n/4ZbrI443A7cA/q++p367/gvs0tyJ0S
Zzt9Dnx2fCbhJ/gP4Rf4veLcaP4qt6h5J+4ibnlsFneCWTruVH38B9n16gfj
HKeuFOc47vfyVeHe1jPYWpkHeFtk7uVd9HgwzvLcpHGWifNx3L/yV/Hb83/B
+mC7sMn87Pr3429en8/rOlqdSuY4d6C9/+H2jH9bfL5yy+lnclNwG3L32PdF
bKxMWv4U/FY8N+r6cYaL30luN/cB817WP83XyEyRqcLbLFOWd0z9EPav+imZ
JHGGkWnHPaDvrd8Zn19yb3ELcN/kFtZnw99LvP11XMLv/AH4eX6P+GzGk2Kv
8AtjHeMen38vPoP/glka/mT9zdhfXS/Oa7IV47zG3SVfJc411tPYapn7eZtk
7uEdVQ80v6CuH2f5ZPEk+TuylJRZibWV2W/ey/w782ky+c3fiPOpTFZsVuLt
/8SW8Kw1ZXweyPTnnZPpHp6+g/kCblmzd7mJ/tEN+N/b63k8Nf9N7EZc82Xq
cXfi9+vv4PZQ/8Fdxb2P+yW3DO8fj+HcW/hD3At+Tgn1Cm6b+DzR78N78r+N
exHZfNjrcf9uPjPx9u1LQl4/Y5Q6RbyX5D6w9uOelevGTYK9TCwUTO4e8+ly
D5rvNn/OfExc72TewK5jn6nrxhlOvq7Md9z7zFdyK2MbeXfH9xfxOa8fwD0f
//Y42/Nv8gfyW/P36nvwv4l98Sn8vPxJcZ7WZ8ZnJN5++RKO8fvif2u6Jokn
2+cLt6B5e+58bhnsHag+tgsbj6WUed38WnzOq+vEOU6+QpzjZL7lVsa6W09h
K2Qq8TbIlOad8xjGu4EPiPut+A5CvZzbivsz1p27A5vILRhnGLN3E2//igl5
vAYjozY/yu9j77/4XeLsqp/HvVv/Njc5tx53p73HYaNlUvAn4Vfxdera2HrZ
2nLfcCuZd7OeNF8uMzm+i+CtlynFO6zuj51VPy5zndtfpiX3J3033vZ4buQm
c/NwX4vfTZ8Jn554+/9mkHCE31txht8Z/x2/pZ/Az4+108/ll8bfiuu3WSI+
UX8lPodkauE77Fcx3ov6vz2Gml0z62d23h7F1Mvs2UL+Yf2PeFd7fI2/Gvfj
+ncSb/8nlITcnq8R8fvxDvPnW3v5mX/yO8V9hfpFe+XD5giUMp8mV1fmO/Mx
5s/KJOe9hl2Ozxy5mtztnAr6rtYT3GXcN+P7Be4X3BK8Q+p+2F/qITJXuX1l
ilqXmjeP647MD1gXmW3xGurflMsd5xS5jNjbibdvOxMO+Z+e2GluR+w37g39
C9y8WFv9bH5JfCp/tFky/FX9Jf238T2LvlaczeTLx9mM/7X9y+NL+eXxz/nF
8YPqvtwz8V6OMzv3CrcPt4h1CdZMZo95Z5mv4nwS9+X6t/D/AegYqAg=
                    "]]}]}, {}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwV2Hfc1fMbx/HT1F4alPbeU6W9t3aShvbWUBTaRYhKu4w22lpoWAlNpKJC
lIYS6ZdoSL/n9cd5fK7rer3en3Pu+z73+X6+J3/PoW2HJE0kEkk8iqdOJEp6
TM+VSMzw6KJukyWR2JUhkXgwcyJRJV0isSN9ItEoUyKxOU0iMSptInHL7LmM
icRlbhXuNG527jFsm7UL/zzehp8Mmy6bDVsoV8j8Zbn6cm9jFfmpzL+0viSX
gztJrji2Rd1Ibh/eQe5DuRJyQ7Gb2NvYSrlScu/h+eR+Vg/Czqj7y13ldpZr
LfeJugW/svlP1u3chtxN3NbY9+on7XkTf9Z+f8i9aJ6N+535+9bOMuew1jJJ
sZdlsmILZAqavyTzlnkF7l1mB63TZLLzJsqk8TqK4Zv1DeX2ctrLfRA5fUnu
u/q83P/J/qQfyP1F/4i+H/9/8o/w71dvwxvgG/Hs9m6FndA/Ya9X+Dc4U+z3
O/9bs0f4Z/Wt+Em4L3HvNh/Anc8tgE3jvomVN0tp9qJMNt4EmaLmm9QNZMbg
e/B2Mjtlinv+IfgN/E28hNxWLI/caY++3Ct4J24r7sfq5vaoZP4+t77cO7yR
stfNJste4lbmvsDNyj2KvWftxD+Dt+QnsGmyWbB5cvnNX5RbaV6Om8LsgPUF
may88TJFsI3q+jJf4G1ldkRGX5y3RZ+bd0XupH4A95S+D/dP2Ye5FdXvYfWw
DVg2r7Mldlw/wj4zZf/hTLLXb/wjZg/zf9E/yM+sn4vn07+AJ1c/j98tPw4v
bK931PV4z9jrc7wNdzu3mOd6DL+Or8CLyW3G7ov/AY/e3Mt4R25L7kfqZvao
YH7S+i6/rux67oPYMfXj9vkbn2ifi/H+knseu5t/GHvX2lHuNN5C7o76RblM
2By5vObPy62QKctNZrbfOpWXhTdWphC2QV1X5jO8tcw2mcHm/5gvN18hU1Rm
E5ZL5kd1f+wndS+ZP7gPyXxobcotb/ajdSuvDm8dL6vX3gL/Tj/cntc4E+x3
Qe4b/UPcU/rm3Iz62Xge/VQ8aXy+4Zllx+AF7bNeXYf3tOfZjbfivs8dhP2N
LcOKyGw0zylz0qMn73e8A+9Br+cDdRP5cuZbuLXl1vKGyf5lNl72V24l7lRu
Fu4hbKu1A/9nvBk/g9ksfm79c/x6/OX8Mrwk5vusz/Iz2f8ZfgFsnbq23Kd4
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
OD97TOCl1Y/k1fAaF3ELx5k1/vbcO9gAXum4NnNr6FfG35n7KPei55yBvSpz
N/8N/K54X6g7YfvVreIsENckuU3WmnGWMDtqXcYrzVvIq459ru5qv1P4YHsd
lXnaPAX3Q/N11noyB7Eq8R2HeozMLfV4mTTmI+JaL1OIeznus6wjeP9h/XlJ
vfas+GK5UvEZK1cdWxHfJeqzcF/Xp+RelD2of5i7T98yrqlxjeLmVi/FSsX1
Gctk32rYZ/ou8fks+zNnkL2O8D8wq8s/oK8c93jqZ7g34zuPOJdxU2OPcxfY
p2CcW2Ue59027xf3euZvyJSMOb5Bphq2PN4Tnr8bfgF/Gc8s9xqWQm5vfFcS
16C4HnGbcDeqa8SZwvyIdQm/pOx87gPYbnVn+/yED7TP4bj3lHsKS87fia21
1pHbj98f90rqp+VuqMfKpTIfHmcAmQJxjo37SOtw3r9Y37hnwl6XKRH/XzIP
mC+T6Wr+q/lL5otkMsm8iiWXuRD3I/qO+B59i/jsj+uA3Lw4k8qcNBvA/8Zs
h742f5++UpwN4nerf0r+enw3ox/Dvwsfxr/EH4bf0veJa5ifO7P9X+MXx4bz
1/Gr4kv508wy8hfpk/F/xffrH+J/EdcsffP4DI/Pc34u9WK8BD4Xr2r+qbpT
XCu5P+L97XWIu92sFnevvmJ8nns8g6fUD8Wre23z5PPHmZQ7lHsT680rFn8j
bhX9Em4ebhfuec/1IrZQJgN/IZ6Uv0/dAftc3Sz+R+P/Ve4da/U495gdtr7B
Kx7XZ14VbJf6Yfv9gPez19dxb6OvydujrxC/c4+n8RT6IXEGkctnr4txL24d
wr2B9Yr/JexVexbF1shUNl8s09n8nPkL5gtk0ssswJLInI97CH17/LP4XiHe
1/Eel7tX/TpWLK6/WEa/h8rYJ/qOcY2P71s4fe31VdzHmNXgf6EvH/cK6tHc
a+qecc7iJsce417gPoZf1/eMve27iFsk3kNx/ubej70Rnxme9xH8LP48nk5u
PpaQ2+3RJH6/8bvm3qN+DS/KnRVnMv4Jsz78L+MME+cUj9FmycwGm82Rzes5
f+V+ZB0s/w/Wg5cBW2ivwtgqmUrmr8tM1c/npuXOM7tjtkfdjvupXGPuN7LV
zHOoX8WKxHU19vTz3I99rO9gn+N4b3scjPsQfXXu5/qycXb1HJf0o7hX9T30
o/hJ8UH88/xB+N/67njC3untvYBfKN7XcX7mV8Rfi+/mzNLw5+r/05/Dv9C3
5e+Kc5S+Ef+QPR7As6sX4YXxmXHON/9I3d4+k7nH8F72OsAdjSWLcylWTeYz
8zJxvfd4kpdEP5BXzWuczc3DPRffZ1gH8q/hj3ILmr3Fr6B/lX8fvxP/jOd9
FpvHT82fg9/GP1e3wT6J+2W5r7lVzTfE7z/OMPG3sC7kFYprL68i9qG6nf2+
w3vaa7/MKPOk3K3xP2R9QGY3VjreN/FZoX9S7or+CblEXOvlzvIHYH/pu2F3
uOnsNZ9bAHuTWx5bxJ2iT8Wdrf83snHfom/N/TjOhnFe4n8lXwXPql6AF8Sn
4xXMP1C3tc+kuB/He9hrH3eLWVXup/pScS1WP8H9U92dO5J7R74/9wG/11nq
3HHGlOvPvSrXlZtfv5JbTr8wPnu5D3N/sddkbK7MXfxZ+K24f1G3wj6K+2W5
L7mVzdfH+yjOOfGess7nFYhrLa88tlPdxn5H8e722ivzpHkS7mbz1dYqMruw
knENU4+UuaweIfMft5/ML9x+2P94XeIsHP+b2DxuPmwFtyy2IL470afkvqK/
qT8T9zP6ltwP42wb5yX+Qfn78SzqeXj+uK7i5cx3qFvbZyL3CP6ovfbEWc2s
MvcTfQnuH3E25jzOuS3Xl3Oa05dzhdMZT2M+1355zYdwl3PLYPO5Of3eO+Kn
8Yl4CrmZ2I04G8X9MPcAXknfmLsu3vv2yGw+l5tPblqcJ2UPm3WT/YJbmvsE
N8HdGJ9t1vv5H+PF41qsHiH7u3q43L/cPnKvWO/jnpL5wNqH96fMI7zU2ByZ
PNgymdLm8+K7Bn1y3gz99fhbye3SP8jdGffF3P2yFbFM6jlY3rjWYum9zrLY
dn1L+0yIe25OV3t9HtdYs0r8j/TF4nqmfpx7Sd2NO4x7S74392dub/wytxOe
ynw2N3dci7hLuaWwudyHsFPYeCyZzHTzf8w/Ubcw3yHfWqa2zD5uBWxt/L+a
ZTSbzcsT19w4Q9pjvPkh8y72+Yxbys81kn+HswGvyP8QKxr3MR5DuTfxXtyq
3JnqXPb4ibvT2ov/B/9h7n1mS/gl9XPius3vwP/Z3uOwOfyk/Jfxv/GP1c2x
7XE/LLeXW968kdya+L+N8018jlpncXPHdZdbBtumbmHPr/HO9tstN8L8P/P1
5m/LVJD5ACsic049HLuoHiJzg9tT5iS3J/Y7ryN2Oz5PsFncXNhg/WJ+CXw2
f6xZEv5L+mvxPxT3Zvpm/G3x/tbX5O+xRzk8vfoV/D58atyLmb+vbm6fcXGf
iD9ir0+5j2O3sXVYeZmd5oVlzqqHmV9Qd5V5TOY6t4fMDGvOOHPK9OBdknmI
lzOux3HW4xY3mxVnEr/X9vyf7DUGT/CnYX/FmSnuj/g1+F9wypo15K+Oz564
hpjP5OeSfS7Ol/JfmnWS38UtyR3O/RdfG9dNmXL8HXgh/hn1UOxX9WC5f7jd
457Nei/3B5kd1u6832Q68FJir8jcG9+5yBQzfyXuifV39C/qr+pPxf2lXFPu
e3Evin0uWwZLq56B5YxrNpbO6yyFvadvap+xcY/Iedhen/DXmJXlb9cX5P+i
HsI9r+7CHcT9W/5R7svWe+LsKfMo76JMe9498Z0Fr6h+Zpy7PGc77kn7PI3N
lvkPfwH/X3x+yjbB3pWtZv4Zt7R5A7lV8ZnKTxPXYet07r3cKdyS2LvqJvY8
gHe038dyw8xvma+O671MGZltWAGZ0+rHsHPqgTLXuN1kXrLm4J6Q2W7txrsg
046XApspkyO+K5ApYj5Dpq35j+ZPmc+SuY09j12Jz7i4x7RHY3xr3JNiu/ml
sNTql7F74hqOpfVzlsC26hvbaz/+kH0+4q7Sl+a+r8/PvRqf+frB3LP6zvoB
/L/ku/KP87viv/Lb4snNZ3Czmw/kLuIWxqZz22A/YKOxf82nmv8ZZ5e4p9N/
iv8fgJMBuQ==
                    "]]}]}, {}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1: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
nzG0DLQBtMuyQ2UbxnvcrBPyXeUPxfch75Z6ljkZ6KtkktN/1vfXJ41rtb60
XF7sO/pivLfNqoFdZX5e9UpsWd4ibDVsDezn+nbxHrL3RcwA/En8DlpN/El9
efy/6hnYG+oXsc9j7+X1x35nzpA409CO47rgDsb3CP2meqZZ+/n38lbKJOOt
41WmXeP1o98V12Z6Hvrb6gfpr/I3mFldZqV9hnrNB/lt6HnoK+Qexi6Ua4u/
QOuP/RzbATsTmxe7nXfGWgP/Ob9c/D5+RuPT6/vhJ+K/xQ/GNYjPq/4YvrP5
B+IzyPtPPcOs9PQVcknpb9ArxRkpzhXWvrwkce3m5eZtUD/Ae8vMajIr7JVb
fQv7KrYMfwG2qv2q4z/Tt8F/jemH/wy/TV8d+5m+LLYw9h/9dOw/+hfMGoW/
h98X/7j6KL8Tfz//aXNvqKebsw97D+9V7F28H2l99Al+N30u7FvqovTl2PVm
VcW+au4BXmtaLtpymdK4+fFeop9Qt47PMP8rfl+ZEzLtvdYZ/Dz0rfxqcid4
D8v97WckNp2+D3YC9hJ2ELZ+fN/EmQ7f0ex92Gny6fTL8Uni9+KvxT+K/yHO
Stbn+Hf4Xfk5eetli/DeNK8Kfbl9hsjt57XC56TftC6TK4V9Kf4teMfVreL+
m99H7njcj8pN5+WO8zPvtLWq3HF+mfh91NPk/lKPkEtLf07uG5mBcbaI7x8z
PsF1wO3F9eT9q55qXlr6MpkE/fs4d8k8S7tN60IrJZsD/ya+MH+deZV5y+yR
Q70U+xBvHrYKtgr2mL4l9h2zzmOewx/Db6ZVwR/Tl8b/pZ6K/VM9Czscm4b3
LPaiOQNo9WhHcO1xe3A96P+op5i1l5+Gt1TmjkxP+6/hV6Rf5ffm3eJ1jjO8
/g2zKumXYgdj92FbYrPT/4v7e3xJs+fiW8TZjP4s/ii+LX4aPhduE++UtTL+
KL9UnGvVU2T/iOcecqnpveXGy12Q6x/njPjujWslth32Y2x33t/qyWampr8i
d1tuNb1CnLvi7Gh9hneT10kmO2+dTCHeWjMfpb8ik029BFeCNwdX2V6VsUf1
T8V3sznnML3xn+I/olXCf6p/KP5G+D/0k/G/62fih+JT8Z/B11Ef4rfl745z
utl/qSeZswebircEewv7Ou8R2mVeL/p/9I5xjtavMaeifglukD33Yltgs9IX
Y4ubORvbPM4FtGewn8SzAexUbE7sRt5J66P4T/gl48yrniR7XT1ELiW9l9zX
Mv3ifBHXj/g+x7XB7cJ15f2pnmheSvpimZsyr9HLx5mLfsX6NO8Gr4NMNt4b
MgV5q82sQF8ss4f+FDYL7Ubc+8sUi3OJTCX7VuJ/qn8yrg2YXnJH5D7UV8Qe
0ZeIezfsdf1E7G/6GWYNxt/NfxpfS32A35q/M+6d8V3M/kM/wayP8XfzX8b/
h/+W1lP/r749Pit2LbYAfVmc1cx7hPcy9mNe8zgL0hbJPBjnE5lm2A300/Sn
sYexre07BZ+D/gG/Av4wrzj+Vz+DsCn0PbHj4vkIti+2ZlwD4/sQ38r8HdjO
vN/V481JQV8kd0OuB24Vr1ycveIcb+3B/4ffTi4Lb41c/njGYG55+qI4H9Of
xGai/WtdKPNAnGdkHuV9om4an2N+T5lDce9Izx7ncvrn1kdkDvGKxXlePUHm
l7gfl0lO7yHzpUyfuM7HtTC+U3Atcdvj/l/fiX9dP87M5LyFcv/G97O+u/5v
fVvsQ9jM2NXYfHF/Zl453kJsRvUCbNE418Trx1bEHtE3ieu8/U9ieuAP4t+j
lccf1D8YZ0k/A/jJ9N3j+YN6L7+F/DZeR7N+U4+V221WMt4C7D/YlbyycU7j
daP/RW8jk4n+ukxe+lL+SjPL8hbIDPT6dvGb0TPQ58sViXOMXOP429K6Yw9g
W2EnYbNh3+V9Zi2HP8B/IN5H6vGyP8e9ezz7oneTOy/zHLZaXMvN2IN7CrcV
14H3q3qMeUnp82X+lllBf1jmAv07a1fen7zWMhl5r8nkiXO2mQ/T58cZn940
zpG0f+K5gUzhONfIVOAdVjeK183vJrM/znX0rHFWp5+wlpXZzysa33/xzFw/
Tu6avl88N4qzg1xV9ce85rwtvMew7c36Rf+8WbvMuov/Ev6v+F6jddH/oW+F
z4Bdhc1NfyXOeuaV4b2ETa+eh72fPw37CPaQuiF2PfYEvyt2H7Zl/D8FPwv9
bf7Dcvt4ReR+8tM3niHF+QA7Np5VYZ/FVonzh343/kmzN2Pb8f6nHm1OEvo8
uT/luuNe5ZWJs1vcF1o783/nt5S7l7dSLlecCc0tTZ8X9wj0JnGepP1tnStT
KM4yMuV5B9VPyBznd5HZG9dgeuY414duLSOzl1c4PhvqsTI/xv1wPMOJ84JM
ZfUuXjPepniW4/W2Nedn/ShzEry52D/iO0DfSX9d3yLuj7HpsSuwOXlL4qxn
Xin+XHw69Rz8fXGOwVfEl8Mf0DeIcyP+GKYzfg/+LVpp/B79/fiC8exZPwb/
g356nEHj+YcZnfCV1Dv5Tfkf8dvQr6lHmrMTeyf2N+t37HJe6Tin8TrK/EZ/
SiZHfK5xD+nn4AbYczu2MTYtfTa2YJxb4vqDPUrrhP0Y2wI7DpspzvK8Y9ZS
+I/5hfDX1M/Lfh/3wPG8ANtR7py1d1zT4xxoxg5cE9xGXGveT+oR5t2O/c26
LrOMXkrmC/olaweZX3nNZUqYcQ//Vbns8ZmQK8mbLZdG/SK2QJxf4rOMLYvd
r6+P/ZTfEbsb+6b+Iexu/X3YAvFsWT8aezXuEezbO+6v5DvgK6q38xvzP+TX
xbfi/agfbtYO/K3Y37zf4vemtcf/on8Snw67HJuNvhi7BFuC9yK2v1nb+I3o
qekvyOWP80t8X+A/oXXA7opns9ix2IzYdfFvZC2J38UvGPdh6lGyV+K+Oe5J
4lma3FnrM9gKcY6N/XCNcB/gWvJ+UA8z72bsb9avMkvpD8mcjecO1nYy/+M1
k0nLWyaTNX4fmeL0F2RSqWfh8sW5Jb6T7PUwdp++HvYIvz12J/YNfQnsTn0B
bP54zqsfib2sn2rPXnGOj+dQ8bxDvZXfkP9+nOfp36uHmrMd+1/sbdYv2DO0
ttif9U2xabBLsVnoL8c5DluMNwu7ldeQlpI2UyZvnFniuRJ9r7pu3CPxD/Pb
yeyQae61juFnoK/lF5fbwcsv913cU8Z5MZ7jYMdgz6h7YcvH2Vu/Bf+E2e/F
uVb+Ruwt/z98N/4r+JJxNuNdtLbBX+M3wafmvSKbmbdI7kH6TLkt9CfinEj7
yzpDJk+cU+KZDm+Puo7MIX5bme0ya/TFcNv1+XD54vmufgT2W/0Uc3rGeSue
l+DLqTfzG/Df5dfBP8W7qh9s1jb8v5gZ5v2MP0Vrjf9J3xifCrsEmylee5zh
sA/wZsS9JK8BLQVtukzuOL/E/Sr9Y3XtuN/jH+S3kdkm8zzvXtpq3oMy2+h5
Za6qh8tcUk+O82Vc6+O5g8xp69NxDadtwj2OeyfOtmZspf8T+5tzDdvV77cE
XyLOY/xW+B95jeJ8oV+ALaqfju2H3YR9HJuc/qd1Gj5XnFviPMjbra4ld4Df
Wm5r/B+A3Ghe+ji3x/eU9QG5rfw8clfUw+S+iXvLuEbGM4f43eVOqXviH457
I/1H2PrYt+Nei3dFPdDMv/nTzPtJbjG9uMzn8azL2lLmB15DmZS8xTIZePNl
itCnySRTT8XljHNLXJftVRK7S18z7lnN2Y9phd8S91q0ovgt+tz4vPjL+qH4
i/pJ+G7xPo37dXwZ9Ub+Y/wN/Cfpl9UDzNmC/Sv2N+tH7Mu8YrTPeC1kvqc/
IXM3/WWZe+kL41wnU5g3Ne6LefVpSWlTZHLE+UWmRty70vfRW2I3Y5t5raPw
99BX8YvgN/Ny4S/4mRjnzPj3jXtc/Gj8SXUPemn6h/h65r8V51v5P2NP+R+w
XbCLsA/G+Syez1mfwl/lN8Cn4C2STc+bJ3c/fYrcRvpjcVak/WGdLJM9zi1x
TeTtVFeP5yf8FjKb4pyvL4zbpM+Jy2Pv7/RDsF/rJ5jTJebFPS6+lPoDfl3+
en5tfDPed/p+Zm3G/4GZbN73+OO05vgr+sfxybELsffE5yLOcdhCvMlxP8yr
R0tCmySTLc4uMtXiOQPtKdxH8f8x9hyJTYddwbsf+xEvB/aruKfE/h73s9hR
8X8G6u7Yh+JeWv8+vo7Zb2Kb8r5V9zXn99jXnKtyC+kPxHmM/pX1SZnLvPoy
yXgLZNLx5sjcR58k8wG9LjYR+1snymSNs4tMcd4OddW4T+c3l9koM4KeNs7s
cQ23FpLZyMsukzueE+sHy32p7yR3Pe5v5dbFuVXmOm0i/grtqL4Z/jv9Y7Gn
fFL8fPm08Vk1fza+IH8i/g5tAj5LnE/wxbDb1VXi+QZ2N/ZJ7IfY4bw0tOW8
+2Q+pGeTOR/3kbjf+P8He9xnHg==
                    
                    "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, \
{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1:eJwl2gfcjnX7x/HbziYrhMyURJKRXfaeLaTsvVIaSiJlZe8ksrO3pCQrSSUk
tMjekj2e9/H/v17P9Zy/4/h8vr/77r6u6zyP86y8rXs07p4oISHh4ZQJCXGc
mCwhIV2ShIShiq3q5skTEnar6ydOSFicIiGhIN5W/7pjT/2q9yQknOG2ww4l
TUgobP2lzOPWS2Qe527nVuI+zl2PV+GuxXeqr+LD+UnU/fnj43dRz+A3w3Pp
Debfxo+on5c/hb+s/h3zv4RJ9k/PH4bl5I7B1nG3YS24v2Cd1Q3IS/BC/HbY
Dcde2Fm59vq/yz1kvUGmpPUYmaUyx7CW3JIy3zlWlvmSd009gpuU+w73Xe4P
3KqcCVgRbCY3t/4H+nd4L8id1m9tPVvmDyyp41syOb0H9ITJ1hkshnO3q1vy
96i78Bryl9rrQc5FdXv8pnVv/Bz/Ya8n9HboVdHboL6u/sgeyfzMAfIT1Y+o
P8OfsUcevQ/teRf/R91c5gzeRv1n/H78KfbLyH8AH4Hfzx8LfKH+Dn+Rvxdv
xO+gvsV/RX2e24H7B7eI9Ve8J6zHyi3jHsde5JaS+d7xKZmveE/pr+Pd0B8p
kzw+HzLvyezCqnGT+ntNwovis+J3w1rInlW35f+lTibTj3s/1yFhqv+7l5tX
/yPuDr1W/H16jfnL7F2YcwnviN227oNd4D7i9TW3lL2Xc09wW+GleTsdn+aV
lPua9zT2Be8mNkomhfVAmR/1q3Mn6z+qP1vmWZm82BAsfsmW8uewdjJ/61sm
fKyfiZuPOxLPxR2Hr1d/j79E+hVvwu+kvsN/VV0Nv8jvyP+Tv09dVL2RX1q9
gl+G/wO/Kn8jVpW7HrulP5p3j/W7coO4P2E1uFOwYtic+J30h+on0n9R/rx+
e5k5Mofj93d8G8vlPYh/xGnWmeVGcXNrjI9zgf7Lcvv1u/Kbyi3HHuL+q+6M
37V+Db8k96jXN/wysiu5J7kvxffGzyjL3WVdjfsN77Z6DDcl933uz9yaeDLu
VKw4Npf7nJ+TH28lc0GvQ5xz1Cn03+E7JHzimIWbXzGal8deE3g/YK1lfovz
lswK/Ye5XfTjDeyrX13mX5lO2F8yxaw3YWWtV8mc0n9Z5kmRHx2ryzwhs4lX
DfuSdwcbK5PKerDMx+rH1PO4z3ML6A3jJpY/qn5J9iLeMb7bmH/khOlYVn4B
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

                    "]]}, Annotation[#, "Charting`Private`Tag$3936474#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    LineBox[CompressedData["
1:eJwV2He8z3UUx/EfGdl7771nRppKZZekpIQI2ZWM7L3JKqOSEtJQyR4NI4kQ
2XtLRkbT6nn+uI/vOef1ep/7u5f7+36+v0KtuzXumiSRSJRIlUiU8bUufSJx
d9pEYnHqROIP/cgMicQNfe80icTBjInEk/gE82LmM807ZkoksmNvYsmwxnJn
sRfSJRL7zF/gXjPvwH2eewrvzD2GX9UX0i/nl9Mv4H/Lf0a/mV9bv4RbWj5N
5kRiKDenfjw3FV6Wux6roV6C1cZWY0ftvYyNsucmNln/hl2H8Mb8N7Hi2DtY
DvOJ5snNn7LjN/MWdqyU2Y/lcB2HtZD507WjzGleF5njvMLqFTLl1fO4n8hc
x17hfifTFNsiU8d8qXkZ82EyudQTZLbJpMaruC7AHvFzlpPboL7HfCm3DncN
94r5aPtumU/h97HzMPYUN4fcRLwE/i6eE2sie07fUvaAPqfMeG5L3l+unXjN
zc7wutpzgldEvVKmgvpTme+5z+p/5vbn1jVbxi0rn9b3HM7PrX+Tn4ZTnv8D
dq96GVYX+wY7JnsVG2PXbayvPZP0JfXv6XNFz00h+7Tc7+at5FbJHcRyuU7A
Wsn87dpZ5iyvm8xJXlH1KpmK6vncz2RuYK9yy3ida+Wa4Vvl6mEj+Hnwify0
ZlXj3477KLcCd6P6PvPHzZdzr5mNlU/w+8kfkW3CycmfjJXCZvE78XPjz8ic
N3uRf0if2/xN/ovcf1y7cF8w+433il2neMXUq2UqqT+XuWn+GnedzHPm22QG
yNTHlmPlsJEyedWTZNLhFbk/mt+vfoK7Aq+Hf4sf1/+Jj7Mrib6/PVP0pfXv
8zvjecwm81PacVPfVP4C3pp/GGvN/xfryj+Hvco9jRVXr+FVVn8st5B7C+vO
XS/zPLZdpoH5CvPy5qNk8qkny2yXSY9Xc/0Ue8zvtZLcJvUD5iu59bnfcf8y
H29fUvVU/gA7j2JPc3PJTY33Mny2XF7sWdmL+jb81fwjZnlcJ8Z7Hb8N/z91
N/7v3BK+vuHfxf+Ce9vu1/Gy3A3c5tgv3IF2NMRH8/NzpvAzmFeP/3/8ytyf
XB80a2S2iteA9z3vb2yCPXeoB9pxzPwZ7lvmZc0/kOkiky/+jbA7sWbyl7CX
4j3O/CXudfNXuC245/HXuGfwkupvuVXUX3J/4L6g38EdxH3cbCW3gnw6P9cY
fgH9VH5Gzl38zVhN9WqsIbYWOyH7D/amXcn0g+x5W19O/yE3v34qN5Xsc3EP
MW/LWyN3DMvrOglrK3PD9VWZC7zuMmd5pdTfyVSN+wH3K5mEaw9uOa9zo1wL
fGf8/8bG8gvKvsXPZHY393NubW4V7hb1Q+ZreP/qJ8om5w6WPS7XFM/NnYaV
x+Zwu9pRAH8LT40/L3sZaxd/Q+btuDfNX+O25F7ES/v6nlONs4jzI6el/lfO
YE4js1X2VZQbxy2kfpubOd57uD+bP6x+kvsN/ji+Dj+p/w+fZFcK/RB7pusr
6D/iF4zfPzeN/C1uc9krWPv4t8Lac29h3bmXsNe5v2Fl1Gt51dWfyH3NTeLa
k7tJphW2K16P+WqZSubjZQqrp8n8ws2C14i/dayazFbXWmbf8p7greddN59s
V0r1W9yh9p3AnuXm8XufgVfE58oVivOC7FX9y/Gz6/PJTI57PPdl7m3169xW
5n9we9h1jltWvU7ubvViuZ+4L+p3c4dwG5ut4VaO8wu3iHo6N2v8vXK3xb1X
3Zj7Hd4I34Cf0t/Ap9h1p36YPTP1lfTz+IX107hp5W9zW8S9AusQWawDN6Hv
wb2M9eT+jl3jltOvx2rEvVa/hJ/UtZddm+VaY3vknjL/Ru6uOLvIFFXPkNnB
zYbf4/pFvJfJbI97mNn3vCd5P/Bumk+1K5X6be5w+05izbh5/V7fwSvj8+WK
YC1l/9R35H/DP22W33VKnEn4HflJ8J78K9zyvjbo7+Ev5d7B7c3dwmtjvpc3
1KxJnO983yrYRJli6pky2eP/EfeXeN+Pn5e7Fm+Mb8RP62/hb9mVWj/Cnnf1
d+k/5nfDi8bfBT+dHQmvsZX8X3gn/hmsEz+pvhf/xTiL4L345/E/9RX0P+D3
6pfxf+a/pN/Hf1r/Hbeq3entnsQtrn+HmyN+/9wd8Z6jXoc9hf2I3TZ/2440
6mm+x0h73jOrYraAW0w/g5s+zgVyf5t35n7LPYsVcJ0aZx2ZO7DeMtd4FX1t
NWtrtt/smbhnx33Lrnflc5rdi++UraNejyV8TeOnxUfxT3Gfw/P5eWZxq2Kf
cF/xPYvH/3E8A95a7h+si9xv5l24yfRvcFvHeQLvzb2AV1JvxO5TL+du47bT
H+AOi7NEnCe51ezN4PtO4ZfUv8fPxbmP/ytWV70Ba4Jtin8/2ST66Xal00/X
j7brNP48/325atinciXM3zHPaN4m3vPNu8p8J3MOK+j6VpxfZJJjfWT+4lX2
9aP+fu4K3na8vf4g/qx+rZ3V5abySqln8XbGWS9+165fxplLZpdrPbMfeE/z
fuIlVc+wK716BneMfWew5tz8fg+z5arjn8mVjPs6/z99N/7v+kIyb8eZmtuN
mwLry/2bd5evTfoH4pmF+wv+sv4QPlyumdk63+vuOFvEfUr9PjcP/gB3t3l9
dRPuRvwZfDN+Vn+HfqZdGfRj7fmAf7f+c/6reKn4O+RnsiOJ19aWfx1/hX8e
e4WfUt+P3ybODfgb/ItxhtNX0f+EPxjnfP4Ofgf9Yf5zcV/DHzTbY38Dsx/1
TeW3xP9F+WT6d/gZ9TPjOU3mLP4C/0O5GthCudLxd2ee2bydzA3zV2W+l7mA
FXadFmcRmTux/jL/8vrIXOJVVW82r6n+jLtaJlk8U8qU93PvlOuIH4lnXGy9
XA1smlwZ9Wy5X/l54/94nGni71KuptxedUPzTdzkvt61JxN/vD2/ybbAC3Dn
cO/BvuC+ZkcZfBaeBW8vdxN7Te6ieRF8epxPZFKZD5B5Kc4RvL4yf/Cqqbdg
D8XZTOZXbif9Ue6IOEeYbeDeY09G3386v6z+A34+zkP8fdjj6p+wZ7GfsXOy
KfTv2ZVZP8Gej7j36r+MZ3b9+9yssknjns69hXXnrpW9hBd1nRFnFrnU2EC5
67x+cpd51dU/mz8cz0lxXpJJHs/DMrtkOmPH4vkqzr0y95rPkCmn/lBmFzc/
fr/rojh3yex3fcJsM68ZbysvpXqWXVnU78Tzm33nsJbcgl77XLn78K/kysW9
nn9b/zr/D30xmZnxHMl9nZsGG8S9wbs73sP1teL9npuC25e7m9fF/DhvZJwn
sI2+533YzLjXqufIFMBrcQ+YN4p7FHcL/hy+Ld439Hfq37crq36iPfP49+sX
8bvj5c1m87PZcUfc1+M+oe/Bv4z14KflD+bfxPpjV7Aa6m3mj6gXxnmJm9K1
nz17ZLpiJ+JsHO/F3EfMDmJPmv2sf96e7fEZjno2N5v63Xgu4P+OteIW8nrm
yz2Afy1XIe7h/CR4T/46/hWz4q7vxHsvvyc/HX8I/xb3Hl/b9Y/G3zr3Tm5/
bgXuXm437CR3lHmrOLPbfT/+rlwF9UdyBfFHuYfMG6u3Yql9fSCbHZ8s9zH+
oH4x/rpdFeO9Uj67TDLfqzM/qb4X/yrWi5+eP5R/GxuAXY1nQtl79b9gj8Xf
A3cf9xX9qTi36DdxH7D3vTgHqOfydssVivfzOMfHGUrmsOtTZtt4zXm/xOcz
6g/tyqF+L85z9p3HXuQW9joXyNXEl8hVwj7EcsRnFXJ3qHvLrZe7hpVwfTee
zeV6y2WQGyaXwAZyr3Hvk9thXjueo/nrsFTxvC5XUW6/3Kv46ThLxJld7kFs
llwl9Ty5PfzC+IOui+NsIFdb7oi6ifl2blpfc+zJGZ8H2HNBtjVehPsJ9yFs
KbeHHZXxOXjOOAPE/QjPiA/Hk2D3m+3U14mfVX8Af01/Bh8t38Zss3zNOHfE
uUE9n1sEr8M9Gp9fxZmM+wv+Ar4j7of6dPqP7MoVz0L2fMp/WL8snrfjfZKb
Sz553Oe5yfRvcDfEOQvvw8/EH8FPqh+E/4k/wP3VvG4863M3YKldB9p1UKY7
djbuAeZbZB4ynx1nB/XHMnvj/IzXjGeQOL/4/nXljqmfMd/BbcHdyU2vnmtf
bvWsOJfYeRFrwy0q95lcLXy5XJU4A8R9De8T93x9SZn34jMRbl9uZu5Ibts4
b+CDuX9xH5TbhdVT/2CeBh8kd0jmdfPfZMaYtY2zuszD2AcyVdQLZIrFPQpf
Gj+PzHHXpmZNzXbyWvJ+jc9r1PPsyxNndLs+5z6iX8Htya1qNpebWz6F1/wq
P4W+b/y9Yv34Wfij+Mn0Q7C/sX9ka3J3Y/X1G7HD3B76c9x2+q3cWnFW4VVV
f8LbF+dv/GHXZXE2kznh+qzZr7xWvF3xGY16vl151e/H/d6+S9hL3GJe50K5
R/GVctWw1/gp8X7x2vSlZGbF5zvc/tys3NHc5NhD3D36Btwf9Wm5g7lHeD3N
f+eNNWsfZ3w7H8HmyFRTfypTAm/APRmfWcX5mbsLfxHfjV/QZ9J/bFe+OBPb
8wX/Mf0qfi+8etyv+HnsSOk1duffqe/P/xcbwM/GH8NPoR+K/RNM9mHuXqyh
/iv9Jjyd6xC7jsr1ws7LvRznfLlHzT+Sqa7+TGY/t2TcX12Xx/lM5lR8nmW2
m9eat4eXWb3Arvzq2XGvt+8PrC23uNf8pVxtfHV8LoXNx/LG5xdyqdQD4v92
nMuw0q7vx2dVcgPlssuNlUuJ1eLv0z/O/0mfPj5H4VbiHuP2xi5wx5l3iGcA
ux/D58Y5Q/25XCn8EXxFnNlkTsfnWmbNzPbw2vD28rKoP7GvQJx57PqKW0e/
htubWyPud9x88nf6/j3ifqgfyL8e70n8HPxx8X88ziBmw/B/8f/0j/D340/o
N2PH+W/oL/LH4x3jOYBf2/5M9s/j19Av5JfmPME/gzVX78VewvbFuVc2q/5T
uwrqP4j7k12X8Xb8RXJ1sW/ied18gXl+854yadSD4m80PuvByrjOxgbL5JQZ
L5PKfDjvP96jMgfMG6kXxbkLy+A6TKay13xCrg9+Sa5T/LvHWUT2C36ZOE9w
V8bfNrcR96z6BfN9vGy+PpMtFPdo2Sty7fGvefXMv+W9EecE7BOsANYr7oHq
wfFZT7wHcXNxJ3Dbc1ObjcCvx7+R/jH+QfxJ/c/YSX5f/R/8CXhns538OnZn
9ho/5t+r/5JflvMk/zeshXo/1hbbj12Sza7/3K7C+g/jPcauq/jL/MVy9bHv
4jko7n/mBc17y6RTD4n3m/isByvr+gE2VCa3zJsyacxH8m7wasscMm+s/pq7
FcvoOlzmLq/5lFw//LJcl3i+kauLLZC7T/2V3AF+Ofwx11XxjCnXWO6cuqX5
AW4OXwvtKRLvs/Zck+2Al+Au4TbAvo9nCewNbnp8aHz2oy9n74fcYbw8vInx
nmOWFhvFu8mrI3MYe0q9LT7T4PbXX+G+ye1qtotbz54scZ7h369fxC8fn5Xx
f8daqQ9i7bAD8fwhm1P/hV1F4/3JnqXchvq1cVbUf8YtJJvK3j7cDPph3E2y
ifj8gJ+XP0mdjj8av4XfwOvyj2BN9Iv12/FMriPsOyM3ALsq1818t1x9809l
HlB/LXOQWwGvHc/TcZaTOR+fg5kd4rXnHeTlUn9pVzH1nPg/Yd+fWEfuMpnH
sXVxPox7t3lh874yGdXD4/1SJgle3nVOPOv5WUfI5ZObbJ5erh7/qP5p/pI4
t5lldh3Jr8I/yx+IX4vPx+L3Fp9L2L+YXzHOfdw1cZ/gPs29EJ+bmR/m5fb1
lWzx+HuQ/UuuE76c94T5el6fOCtgC7EiWD+ZTOoRMknjOZCbnztFnYFXHz+m
fwbfEZ8T4IP0f8bnMvo9sg3syer1fM6tqV/CPeT7VOLUjWfmONvJXYzPycyO
8F7mHeLlUS+yr4T6o/i92fk31pm7QqYRtiHOV3HfNi9q3l8ms3pkvK/HWS6e
2Vw/wkbJFJCZapZRZgzvNq+BzHHzpuqlcS7DsriOkqnqtZ+TG4z/FZ95YHvl
GmIL5R5SL5U7HGd6vJ7rt3Fvk2sqd0n9kvlRbl5fX9tTMn4ee/6R7YKX5K7k
Pon9wO0bZwf8S7wYPkAui3qUXLI4/3MLct9SZ+I1xE/on43Pd+LZFR+i/xuf
aFf3eH6Tf9yubL7XF/yH9cv4d8W5iP8H1lZ9DOuAHY5nb9l8+sV2ldLPtWcV
t7F+Y5xL4r7MLS47kJdVPZq3RS45XtF1LjZGppDM22aZZcbyEvE7kjlp3kxm
WZzNsKyuo7FqXud5uaH4P/E8G78Pfi3Z5fwqZvXjmT8+L+E2415WtzM/zsvv
a4lsae482X/luuKluKu5T2E/cvvFWQBfhJfAB8W9Tz1GLkU8f+LzzMfKFJaZ
ZtbBLIvMOF6S+P4yp7Dn4hk4nvu4w/T/cidxe5jt5z7Bze77fxWfRehX8Kty
nuNfwdpHzT+Bd8SP4Ff0BfRL7Sujn2/XGn4T/aa4h+u/5paUT233YG52/di4
p8qm5FR2nY+PkysiN90sq9x4XtL43EbmtPnzMsvjHIZlcx2DXZQZjv0XzyHx
HCrTKM4xMo+qV8oc4VaLs7br97HP63he7qr6ZfOT3E7co/E5hnqZfWXj/xP/
Yzv/w7pxS8t9I/c0/lPcD7HFWClsSNwD1ePktsZ5Lp5VI4/VkhsvV1Ruhnk2
uQncO+KzHrkz5s3lVvD3Ytldx2LV5S7JjcCvx3k/fpf8x2RX8aubNeSujT3c
5tz/AYxnAGI=
                    "]]}, Annotation[#, "Charting`Private`Tag$3936474#2"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    LineBox[CompressedData["
1:eJwV2Xf8TvUbx/HbHtl7hmTP7JlNZaYkkdWQZCSyy96Skb3JSMjKDGkoKbRF
wy8tJNmZv+f1x/fxua73+/W+zu0e53zOUahr79a9kiQSiRppEonWWRKJf3Mm
Ep2yJxLHsyYSOf1tzZVIFM6RSCzOlkjclSeRGMTfinuE/j5uJa02773ciUQp
3iCZ7OpRMnfoo7H3YF/HvoFNR3uDnwxbOm8i8QD+FL81/gve7/jR+gv4Xvq3
+I/QLuA7007o+8v/is8nn0v/Lv5e/SHzl8iksw7Gvyv3KG+/3P30PXKl6YNl
cqhHy1zEJviNrVt4Y2QKy0yjpZeZhUtOf1DmN/ojMj9iD/NKWGfz/pAZw7so
05v+q8zD9LUyjdSbZVJ5reX4z8h8xRuqf1TuoroL/Udsbn/bzCmCX2pOeuwQ
/sPYbdg2vA+wdXhD4vMxeww2Ca0Jdit2LO5e3HTaLFoG7GxcCt5DMr/zHpU5
Qv8TO1Z/CbsD24d2Ctsa29Ax38Y31m/Bl8e0wV/idVWPwv/Ef5l/ip8fn0e/
3byi+mVmbcc/pv8QX1e/F1sm/u24XOqxuEvmJOU/YH2XN06miMwMWkaZObiU
9KYyf9DbyPyEPcoraZ0Tr8ex/5Ibx78s9yJvHb6J7Fb8fbRnsV9jh2Efw15W
P0UfTf8Zm9ffDvli+OXyGehDMa3xO/BteR/hV9Hr8YfF52X+OHwy+oP0bfjx
2KLYmbTZtEzYubhUvGYyf/Iek/mSXoo/l35aZjz9isxOWl/ebzKP8NbLPKB+
V6YCvy32Cv1p9RjsL/wB/N/4d3ut+fQ7zSquX2HOTvzj+o/xq/H1afvwZc2o
gn8Fn0c/Hp8cMwFfDP+GOjN2Hi81tjnuL3pb3M/xHeaVts7jnZGZwLsq81L8
hmUepW+QeVC9TSa1Y1Xkd5P5hveK/nG5q+pn6CexA7G/x3dJvcu8EurP8W+a
mdE6DPuI3C65dvwDcg1478uV470an6N6gtxlfAr+Q9btvD5yE+WKy82iZ5Fr
gT+tfxz/tb4Mdn58L7BnsRN517C76P347+AfMn87vhL9Ofq3+HbYa9ZnaWNp
/8MNwv0Rn4l6tzkl1SvNyMR/Bbtb5gn6JzJraA15+2XK84bL5FNPlEnJb8rf
QZ8kU0JmNm0OLavMfFwaXkuZM7x2Mt/Q/8ZO0v+H3Y3tT/sD2wbbyL9vI76p
fge+MuYJ/H+8bupx+F/5g/l/8gvgC+jfM6+UflWc7/Ht9Z/iG+k/wN4nPwKX
Xz0Jd8WcVPxm1p28yTIlZebQsskswKWlt5I5S39C5pd4T3llrQvie+7Y5+Qm
86/LvczbhG8muxOfhl+F3h3/XXwH9O3x19XP0U9hC/rbI18av1o+M/ZV/qPY
PdgOvIPYt+iN+R+aXYE/Uu5u9eT4/vKb83fRp8iUkplLm0vLLrMQd1ecq2X+
5rWX+Y7+D3aK/gb2PeyAOO9iH8NuxjZX78JW5XfA3qB3V4/H/sYfwv+LX9Br
LaTfa1YZ/Zo4n+Kf1H8W53/9R9iK8lWxo7AF9FPiPeK/hi2NnafOgV3ESxfn
N9w5egfcScf8nlfOupB3XuY13k2ZgfS/ZNrSt8i0UO+WSetY1fjPR5b3pMxN
6/O033FDcadx96j3mVU2rvPYt8zLYh2ObWPGPrmO/ENxLYh9Q3xusq/FMWgt
sLuxL2KnYstg59Pn0XPiF2PTx/lB7h/ek3LH6P9ip+pvYffE/oV2Gvs4trFZ
W/Et9e/hq2M64m/xesS5EP8Hfxj/DL8QvrD+ffPK6dfGuQffSf95XAP0H2Mr
yVfDjsEW0k/F3sV/HVsWu0CdC7uElwFbJvYC2PO8jtj/Oe4P/PLWRfwLcq/z
bssNpp+Raxf7G5lW6j0x34wa/B4yx2IPJ3Pb+gLtT9wruLO4e9X7zSqvPox9
27ys1hHYx8zYL9eZ/0WcO3lj8ffIvo5PR2uJfQ/bFzsNWw67kJ4b2wb7r74T
9rj+Puxi7EXcNPod3N7Y0/DOmvkEb5vMw+q9MjX5nbF36D3VE7F/8V/l/x3f
Iccsov/ArPv06+K8g++iP4xfi29KO4CvbEZ1/Dh8Yf00fHrMdHx5/CL1fHwe
/FJ+RnzZ2BvgL/A740/wLuGn6xP6oXFexbbHNsFux7bW7+PVMq8LNoHtpT7N
G847xyuq/pBeIfZdjrnenGzWkeZ8KNOVdyTOk/RPZKrEPkLmXvV0mauxj+O3
su7hzZC5T2YxLa/MMlwmeluZi/QuMr9if+RViD1xXGO93styM/hJ+MN45+Q6
8HbEHlv9fnzGuNrmvhDfwbgW6bvKJZHrTT+DLebvI31F/AZzsmNHxfGxH2Gf
4h3Fvk1vzv/U7Kr8CXJF1DPkMvJnYitgl6gXYPNhl/MzYx/HXuJ1jf0e/Qp2
pj6pfl9cQ+Pcin0S+4Dj7sQ/qt/Pv9+8p/BJ8X3UZ3kjeP/wCmOL6z/mVdIf
Nesds3JYR5v1sdzTvC/jnEM/KFeNPlGmqHqmzLXY1/Eftu7lvSFTUWYpLb/M
ClyW2BfIXKY/JXMq9pm8italvKsyb/CS8V6ln5fpSN8l00b9QXxfvdY6ZvaU
OR7XQplkMi/S/saNxJ3HlVAfoFeOfSV2o3k5rWPifTTjgNwz/K/i98ubFJ+h
7Bv4zLTW2H3Yl7CzsJWwy+gL6Xfj38Rm5T8hd4X3dFyn6ZX4y+jXZGbRk9Pf
j3N6nHdlOsU+R+Yx9Ye8unH/g02O7as+xyvp7xN9Ff6m+P7zn9V/zV9nViva
Z/LVzarh9U3GF9fPwmeJPTa+Mn65ugB2JS8btlzsA7BXec/EtY33H3a2PoV+
hP4CtnPc22Hfw7bVf8TLoK8X95+OfyL2dXIp5F6i/YMbhfsXV0r9Kb2q+ivs
ZjNzWcfKfCrTjfdNfE/oh2RqxN5BpoR6tsx/sYfjP2J9nzdHporMClpBmVW4
7PQOMtfoz8r8FvtLXmXr8nhtXut1uTn8lPyRvItyXXh75B5Xfxy/N1z9uD+N
80Ls0/Td5FLK9aOfx5b2d1BfDb/FnNzYcfE9xh7EPsf7Frue3pr/Wnx+5s/B
Z6M/St+Pn4utin2TtohWCLsalyP2BzL/8brFOYp+AztXn0q/P84jcc7Fdo37
Vcfdi2+nP8BvEHtufCp8f/Uk/L/80fwLcW3Dl9F/xq+u3xrfHXx3/XfxPus/
x9Y0u2bsI7Cl9HOx12MfF/e41g/48+Sqya2k3SO3BpeT3lHmOv05md+xp3hV
rCt4N2Xm8VLzRtMvyzxF3yfzhPoTeibHbWhmn7h/jr2eTGqZl2kXcGNwF3Fl
1YfoNeLeJO6NzctjHR+/QzMOyT3P/z7ed97r8fnJzsPnoD2G/RDbDzsfWx27
il4Y2wl7Q989vk/6qnGPhb2Fm09PQ/8gzh9x3jXzad77Mu3Vn/IaxX4PmwY7
QD0Ze5E/ln+JXySedeg/59fUb4v3Hd9Dfwy/Ad+G9gW+ltm1Yi+BL6Ofj88Z
1wN8Dfxq9b3xHIiXC9sZd5P+PO4Pc37nVbOu5N2WWcBLyxtLvyrzDH2/TAf1
wTjfOVbjeEYQ5+PY4+t7yKWVG0i/hB2HvRzPPNRf0GvFPVXcR5qZ1zpBrr3c
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
A6Z7Zcs=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3936474#3"]& ]}}], {}}, {
                    GridLines -> Dynamic[
                    Join[{{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, {0, 20000, 40000, 60000, 80000, 
                    100000}}, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], FrameTicks -> {{{{0., 
                    FormBox[
                    TagBox["0", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {20000., 
                    FormBox[
                    TagBox["20000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {40000., 
                    FormBox[
                    TagBox["40000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {60000., 
                    FormBox[
                    TagBox["60000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {80000., 
                    FormBox[
                    TagBox["80000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {5000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {15000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {25000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {35000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {45000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {50000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {55000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {65000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {75000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {20000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {40000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {60000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {80000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {5000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {15000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {25000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {35000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {45000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {50000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {55000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {65000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {75000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{3.3135264*^9, 
                    FormBox[
                    StyleBox["\"2005\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox["\"2010\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox["\"2015\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox["\"2020\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    StyleBox["\"2025\"", 
                    Directive[], {}, StripOnInput -> False], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}}, {{3.3135264*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.3135264*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3450624*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3765984*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4397568*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5028288*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5659872*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6922176*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7552896*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.818448*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.88152*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.913056*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}}}}, ImagePadding -> All, 
                    GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, PlotRangePadding -> None, 
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, 
                    AxesOrigin -> {3.405456*^9, 0}, 
                    FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {20000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {40000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {60000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {80000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {5000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {10000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {15000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {25000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {30000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {35000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {45000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {50000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {55000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {65000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {70000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {75000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {85000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {90000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {95000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {100000., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{3.5*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.6*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.7*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.8*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.4*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.42*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.44*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.46*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.48*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.52*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.54*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.56*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.58*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.62*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.64*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.66*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.68*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.72*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.74*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.76*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.78*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.82*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.84*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.86*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.88*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.9*^9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, DisplayFunction -> 
                    Identity, 
                    PlotRangePadding -> {{None, None}, {None, None}}, 
                    PlotRangeClipping -> True, ImagePadding -> All, 
                    DisplayFunction -> Identity, AspectRatio -> 0.2, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.405456*^9, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> AbsoluteThickness[1], 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, GridLinesStyle -> 
                    GrayLevel[0.9], ImageSize -> Full, 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> PointSize[Medium], 
                    "PointSizeFunction" -> "SmallPointSize", 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                    PlotRange -> {{3.405456*^9, 3.8656224*^9}, {
                    0, 82501.35212979032}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{None, None}, {None, None}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                    Ticks -> {Automatic, Automatic}}], 
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\[NonBreakingSpace]", 
                    GraphicsBox[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, ImageSize -> 
                    NCache[
                    Rational[143, 10], 14.3], 
                    BaselinePosition -> (Center -> Center)}], 
                    StyleBox[
                    TagBox[
                    TagBox["\"Venus\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Venus"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparator"], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TemplateBox[{"\[NonBreakingSpace]", 
                    GraphicsBox[{
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, ImageSize -> 
                    NCache[
                    Rational[143, 10], 14.3], 
                    BaselinePosition -> (Center -> Center)}], 
                    StyleBox[
                    TagBox[
                    TagBox["\"Earth\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Earth"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparator"], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TemplateBox[{"\[NonBreakingSpace]", 
                    GraphicsBox[{
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, ImageSize -> 
                    NCache[
                    Rational[143, 10], 14.3], 
                    BaselinePosition -> (Center -> Center)}], 
                    StyleBox[
                    TagBox[
                    TagBox["\"Mars\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {PlanetData, "Mars"}]], Identity], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparator"]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, "Labeled", DisplayFunction -> (FormBox[
                    GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                   InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", 
                    RowBox[{"{", #2, "}"}], ",", 
                    TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}], "]"}]& )], 
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"in hits per day\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", #2, ",", 
                    TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}], "]"}]& )]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"based on monthly averages of daily hits to English\
\[Hyphen]language page\"", "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,timeseriesdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Log scale", "input" -> 
         "PopularityPod:WikipediaStatsData__Log scale"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False, False}, True}, Typeset`aux6$$ = {
   True, False, {False, False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False}, True}, Typeset`aux12$$ = {
   True, False, {False, False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False, False, False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "2"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
ChemicalDataSourceInformationNotes.html", "text" -> "Chemical data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
PlanetDataSourceInformationNotes.html", "text" -> "Planet data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "15", "datatypes" -> "Chemical,Planet", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "4.931", "parsetiming" -> 
    "0.23900000000000002", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP39341gidigd1df5d17a0000032i8121i7c7763a5", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "6", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa39351gidigd1df5d17a0000015b8b9ha392di2hg7167914177805443390", "version" -> 
    "2.6", "inputstring" -> "Venus, Earth, Mars"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 3, 27.2617574`9.188128764246471}, "Line" -> 
    79, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Venus, Earth, Mars"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{653., {1838., 1844.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.8802889895382214`*^9, 3.880289008134577*^9}},
 CellLabel->"Out[79]=",ExpressionUUID->"2c638315-6262-4bf1-8a90-533e208a03cc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. \:0418\:0435\:0440\:0430\:0440\:0445\:0438\:0447\:0435\:0441\:043a\
\:0438\:0435 \:043e\:0431\:0440\:0430\:0437\:044b", "Subtitle",
 CellChangeTimes->{{3.8802899908116894`*^9, 
  3.8802900035495825`*^9}},ExpressionUUID->"0c518b35-7452-45ab-8ebb-\
4ea3260b5a64"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"WolframAlpha", "[", "\"\<graph{1->2, 2->3}\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"WolframAlpha", "[", "\"\<graph\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.8802900102116933`*^9, 3.8802900191871386`*^9}, 
   3.880290322139615*^9, {3.880290474859689*^9, 3.8802904792261133`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"d7d53429-bd9d-443a-aeac-abacff918887"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph{1->2, 2->3}", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Graph[{1, 2, 3}, {1<->2, 2<->3}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 TagBox[
                  GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{"1", "\[Rule]", "2"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"2", "\[Rule]", "3"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], 
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   ColumnsEqual -> False, RowsEqual -> False, 
                   GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                   AllowScriptLevelChange -> False], 
                  $CellContext`TagBoxWrapper["Separator" -> " | "]], "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"undirected graph\"", 
                    "\[NoBreak]", "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> 
     "ImagePod:GraphData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement["minput", {}, {"Graph[{1, 2, 3}, {1<->2, 2<->3}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             TagBox[
              GraphicsGroupBox[{{{
                  GrayLevel[0.7], 
                  
                  LineBox[{{0., 0.}, {0.4472135954999579, 
                   0.8944271909999159}}]}, {
                  GrayLevel[0.7], 
                  
                  LineBox[{{0.4472135954999579, 0.8944271909999159}, {
                   0.8944271909999159, 0.}}]}}, 
                
                GraphicsComplexBox[{{0., 0.}, {0.4472135954999579, 
                 0.8944271909999159}, {0.8944271909999159, 0.}}, {
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "1", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 1], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "2", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 2], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "3", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 3]}, {}]}, 
               ContentSelectable -> True], 
              Annotation[#, 
               VertexCoordinateRules -> {{0., 0.}, {0.4472135954999579, 
                0.8944271909999159}, {0.8944271909999159, 0.}}]& ], {
             ImageSize -> {150}, FrameTicks -> None, PlotRange -> All, 
              PlotRangePadding -> Scaled[0.1], AspectRatio -> 1, 
              ImageSize -> {200, {250}}}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More images", "input" -> 
         "ImagePod:GraphData__More images"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Canonical graph name", "scanner" -> "Data", "id" -> 
     "CanonicalGraphPod:GraphData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "CanonicalName[ToEntity[CanonicalGraph[Graph[{1, 2, 3}, {1<->2, \
2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              TagBox["\"3\[Hyphen]path graph\"", 
               $CellContext`TagBoxWrapper[
               "Entity" -> {GraphData, {"Path", 3}}]], Identity], 
             TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Basic properties", "scanner" -> "Data", "id" -> 
     "BasicPropertiesPod:GraphData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"vertex count\", \"edge count\", \
\"connected component count\"}, {VertexCount[#1], EdgeCount[#1], \
If[UndirectedGraphQ[#1], Length[ConnectedComponents[#1]], \
Missing[\"NotApplicable\"]]} & [Graph[{1, 2, 3}, {1<->2, 2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"vertex count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["3", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"edge count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["2", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"connected component count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["1", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show lists", "input" -> 
         "BasicPropertiesPod:GraphData__Show lists"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Graph features", "scanner" -> "Data", "id" -> 
     "PropertiesPod:GraphData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Keys[Select[TrueQ][AssociationThread[{\"acyclic\", \"biconnected\", \
\"bipartite\", \"complete\", \"connected\", \"cycle\", \"directed\", \
\"empty\", \"Eulerian\", \"Hamiltonian\", \"identity\", \"nonempty\", \
\"noneulerian\", \"nonhamiltonian\", \"nonplanar\", \"nonsimple\", \"path\", \
\"planar\", \"regular\", \"self\[Hyphen]complementary\", \"simple\", \
\"strongly connected\", \"traceable\", \"tree\", \"undirected\", \
\"untraceable\", \"weakly connected\"}, {AcyclicGraphQ[#1], \
VertexConnectivity[#1] > 1, BipartiteGraphQ[#1], CompleteGraphQ[#1], \
UndirectedGraphQ[#1] && ConnectedGraphQ[#1], PathGraphQ[#1] &&  \
!AcyclicGraphQ[#1], DirectedGraphQ[#1], EmptyGraphQ[#1], EulerianGraphQ[#1], \
HamiltonianGraphQ[#1], EqualTo[1][GroupOrder[GraphAutomorphismGroup[#1]]],  \
!EmptyGraphQ[#1],  !EulerianGraphQ[#1],  !HamiltonianGraphQ[#1],  \
!PlanarGraphQ[#1],  !SimpleGraphQ[#1], PathGraphQ[#1] && AcyclicGraphQ[#1], \
PlanarGraphQ[#1], Length[Union[VertexDegree[#1]]] == 1, IsomorphicGraphQ[#1, \
GraphComplement[#1]], SimpleGraphQ[#1], DirectedGraphQ[#1] && \
ConnectedGraphQ[#1], UnequalTo[{}][FindHamiltonianPath[#1]], TreeGraphQ[#1], \
UndirectedGraphQ[#1], EqualTo[{}][FindHamiltonianPath[#1]], \
DirectedGraphQ[#1] && WeaklyConnectedGraphQ[#1]}]]] & [Graph[{1, 2, 3}, \
{1<->2, 2<->3}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TagBox[
                TagBox["\"acyclic\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Acyclic"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"bipartite\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Bipartite"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"connected\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Connected"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"nonempty\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Nonempty"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"noneulerian\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Noneulerian"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"nonhamiltonian\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Nonhamiltonian"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"path\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Path"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"planar\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Planar"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"simple\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Simple"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"traceable\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Traceable"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"tree\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Tree"}]], Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox[
                TagBox["\"undirected\"", 
                 $CellContext`TagBoxWrapper[
                 "EntityClass" -> {GraphData, "Undirected"}]], Identity]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Graph degrees", "scanner" -> "Data", "id" -> 
     "DegreesPod:GraphData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[Association[\"vertex degrees\" -> VertexDegree[Graph[{1, 2, \
3}, {1<->2, 2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"vertex degrees\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    TemplateBox[{"  ", "\"  \"", "1", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"  ", "\"  \"", "2", "\"vertices\""}, 
                    "RowWithSeparators"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TemplateBox[{"  ", "\"  \"", "2", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"  ", "\"  \"", "1", "\"vertex\""}, 
                    "RowWithSeparators"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Topological properties", "scanner" -> "Data", "id" -> 
     "TopologicalPropertiesPod:GraphData", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"radius\", \"diameter\", \"girth\", \
\"vertex connectivity\", \"edge connectivity\"}, {GraphRadius[#1], \
GraphDiameter[#1], Min[Length /@ FindCycle[#1, Infinity, All]], \
VertexConnectivity[#1], EdgeConnectivity[#1]} & [Graph[{1, 2, 3}, {1<->2, \
2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"radius\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["1", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"diameter\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["2", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"girth\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[Infinity]"}, {
                 TagBox[
                  PaneBox[
                  "\"vertex connectivity\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["1", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"edge connectivity\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["1", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More properties", "input" -> 
         "TopologicalPropertiesPod:GraphData__More properties"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Graph polynomials", "scanner" -> "Data", "id" -> 
     "GraphPolynomialPod:GraphData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Characteristic polynomial"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "CharacteristicPolynomial[AdjacencyMatrix[Graph[{1, 2, 3}, {1<->2, \
2<->3}]], \[FormalX]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", "x"}], " ", 
               RowBox[{"(", 
                 RowBox[{
                   SuperscriptBox["x", "2"], "-", "2"}], ")"}]}], Short], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Rank polynomial"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "With[{n = VertexCount[#1], c = Length[ConnectedComponents[#1]]}, \
\[FormalX]^(n - c) TuttePolynomial[#1, {1 + 1/\[FormalX], \[FormalY] + 1}]] & \
[Graph[{1, 2, 3}, {1<->2, 2<->3}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox[
              RowBox[{"(", 
                RowBox[{"x", "+", "1"}], ")"}], "2"], Short], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Tutte polynomial"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {"TuttePolynomial[Graph[{1, 2, 3}, {1<->2, 2<->3}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["x", "2"], Short], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More polynomials", "input" -> 
         "GraphPolynomialPod:GraphData__More polynomials"}, {}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Coloring properties", "scanner" -> "Data", "id" -> 
     "ColoringPropertiesPod:GraphData", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"chromatic number\", \"edge chromatic \
number\"}, {MinValue[{\[FormalX], ChromaticPolynomial[#1, \[FormalX]] > 0 && \
\[FormalX] > 0}, \[FormalX], Integers], If[EdgeCount[#1] == 0, 0, MinValue[{\
\[FormalX], ChromaticPolynomial[LineGraph[#1], \[FormalX]] > 0 && \[FormalX] \
> 0}, \[FormalX], Integers]]} & [Graph[{1, 2, 3}, {1<->2, 2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"chromatic number\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["2", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"edge chromatic number\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["2", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More properties", "input" -> 
         "ColoringPropertiesPod:GraphData__More properties"}, {}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Spectrum", "scanner" -> "Data", "id" -> 
     "SpectrumPod:GraphData", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Eigenvalues[AdjacencyMatrix[Graph[{1, 2, 3}, {1<->2, 2<->3}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\[ThinSpace]", "\" \"", 
              SuperscriptBox[
               RowBox[{"(", 
                 TagBox[
                  RowBox[{"-", 
                    SqrtBox["2"]}], HoldForm], ")"}], "1"], 
              SuperscriptBox[
               TagBox["0", HoldForm], "1"], 
              SuperscriptBox[
               TagBox[
                SqrtBox["2"], HoldForm], "1"]}, "RowWithSeparators"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "SpectrumPod:GraphData__Approximate form"}, {}]}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {
    "title" -> "Associated matrices", "scanner" -> "Data", "id" -> 
     "AssociatedMatricesPod:GraphData", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Adjacency matrix"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {"AdjacencyMatrix[Graph[{1, 2, 3}, {1<->2, 2<->3}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               
               GridBox[{{"0", "1", "0"}, {"1", "0", "1"}, {"0", "1", "0"}}, 
                RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                Baseline, ColumnAlignments -> Center]}, "Matrix", 
              DisplayFunction -> (
               RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
              InterpretationFunction -> (#& )], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> "Incidence matrix"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {"IncidenceMatrix[Graph[{1, 2, 3}, {1<->2, 2<->3}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               
               GridBox[{{"1", "0"}, {"1", "1"}, {"0", "1"}}, RowSpacings -> 1,
                 ColumnSpacings -> 1, RowAlignments -> Baseline, 
                ColumnAlignments -> Center]}, "Matrix", 
              DisplayFunction -> (
               RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
              InterpretationFunction -> (#& )], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More matrices", "input" -> 
         "AssociatedMatricesPod:GraphData__More matrices"}, {}]}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Graph indices", "scanner" -> "Data", "id" -> 
     "GraphIndicesPod:GraphData", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"stability index\", \"Wiener index\"}, \
{Total[Abs[CoefficientList[CharacteristicPolynomial[AdjacencyMatrix[#1], \
\[FormalX]], \[FormalX]][[1 ;; All ;; 2]]]], Total[GraphDistanceMatrix[#1], \
2]/2} & [Graph[{1, 2, 3}, {1<->2, 2<->3}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"Hosoya index\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["3", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"Kirchhoff index\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["4", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"stability index\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["0", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"Wiener index\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["4", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More indices", "input" -> 
         "GraphIndicesPod:GraphData__More indices"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False, False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
GraphDataSourceInformationNotes.html", "text" -> "Graph data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "12", "datatypes" -> "Graph", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "2.107", "parsetiming" -> "0.318", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP332227bgb9559hbi4h2000056gfbff93e35d665", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa333227bgb9559hbi4h200003ehhd401e00ie25h8884920455003441207", "version" -> 
    "2.6", "inputstring" -> "graph{1->2, 2->3}"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 28, 3.7650677`8.328347770670016}, "Line" -> 
    86, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "graph{1->2, 2->3}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {707., 713.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.880290050520054*^9, 3.8802900783764954`*^9}, 
   3.8802903272429805`*^9, 3.8802904838707867`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"f3afd172-467f-49e8-9bc6-793b3a182dfe"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Entity[\"MathWorld\", \"Graph\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"graph\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {$CellContext`MathWorldData, "Graph"}]], 
               Identity], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Illustration", "scanner" -> "Data", "id" -> 
     "ImagePod:MathWorldData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"Diagram\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              Thickness[0.0029069767441860465`], {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{15.244499999999997`, 235.26300000000003`}, {
                15.244499999999997`, 233.01899999999998`}, {
                13.426200000000001`, 231.201}, {11.181999999999999`, 
                231.201}, {8.937889999999998, 231.201}, {7.1195299999999975`, 
                233.01899999999998`}, {7.1195299999999975`, 
                235.26300000000003`}, {7.1195299999999975`, 
                237.50599999999997`}, {8.937889999999998, 
                239.32599999999994`}, {11.181999999999999`, 
                239.32599999999994`}, {13.426200000000001`, 
                239.32599999999994`}, {15.244499999999997`, 
                237.50599999999997`}, {15.244499999999997`, 
                235.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{49.244499999999995`, 182.26299999999998`}, {
                49.244499999999995`, 180.019}, {47.426199999999994`, 
                178.20100000000002`}, {45.181999999999995`, 
                178.20100000000002`}, {42.9379, 178.20100000000002`}, {
                41.119499999999995`, 180.019}, {41.119499999999995`, 
                182.26299999999998`}, {41.119499999999995`, 
                184.50699999999998`}, {42.9379, 186.32600000000002`}, {
                45.181999999999995`, 186.32600000000002`}, {
                47.426199999999994`, 186.32600000000002`}, {
                49.244499999999995`, 184.50699999999998`}, {
                49.244499999999995`, 182.26299999999998`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{89.24449999999999, 220.26300000000003`}, {
                89.24449999999999, 218.01899999999998`}, {87.4262, 216.201}, {
                85.18199999999999, 216.201}, {82.93790000000001, 216.201}, {
                81.11950000000002, 218.01899999999998`}, {81.11950000000002, 
                220.26300000000003`}, {81.11950000000002, 
                222.50599999999997`}, {82.93790000000001, 
                224.32599999999994`}, {85.18199999999999, 
                224.32599999999994`}, {87.4262, 224.32599999999994`}, {
                89.24449999999999, 222.50599999999997`}, {89.24449999999999, 
                220.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{58.24449999999999, 246.26300000000003`}, {
                58.24449999999999, 244.01899999999998`}, {56.42619999999999, 
                242.201}, {54.18199999999999, 242.201}, {51.937900000000006`, 
                242.201}, {50.119499999999995`, 244.01899999999998`}, {
                50.119499999999995`, 246.26300000000003`}, {
                50.119499999999995`, 248.50599999999997`}, {
                51.937900000000006`, 250.32599999999994`}, {54.18199999999999,
                 250.32599999999994`}, {56.42619999999999, 
                250.32599999999994`}, {58.24449999999999, 
                248.50599999999997`}, {58.24449999999999, 
                246.26300000000003`}}}]}, {
               RGBColor[
               0.024604722168000026`, 0.03147120849600005, 
                0.032234097167999964`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.18199999999999, 246.26300000000003`}, {
                85.18199999999999, 220.26300000000003`}, {11.181999999999999`,
                 235.26300000000003`}, {54.18199999999999, 
                246.26300000000003`}, {45.181999999999995`, 
                182.26299999999998`}}}, CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxtlX1IU1EYxpfo5kJGoIkaTQuZmnb1uo80yizCMkJETKl/DMsSIQ0jEKmz
iSJFOq3U0sJvxLDmJFDMzyIkKIZWCppoEAVJDEQSZyh5z/MK90Z/jPHjec45
79c5d19uUUael0qlurn1k/4/FeVodB1i8v4vHuZtuZQssXAvnnNBi8SLaqEa
3N4K3W2XONH6tg1cWAt9sp30+xIPsvkOsOMB/O5OOXuYukvOg+xMD87LqoS/
zAG96xr8Pb1c16xmwj/thN9loHj7KP5v4v95ANw8Ar9tGLzwzMh5/DV41GFE
/GBf4aWRx/OEdGEA/o1xzmphCP4cYscw9DdjlN8Q2DCmXF9F5zuaEY/+KPJx
PJL4J9tMlNdHa605RFwD/5SZuAp+f5Oyf5/jlRzwDyfE0nm8X8tsPUYZz4Vo
yqdH4h3WV1Hg0WHoS5FUvykFqzf9jAr9R5aRry+JBTf0Qq87Ak7xNW3xLHOm
ctYK2Saun82GnvYUnJ8HvXAO7F0M3e5v5qyzUfynwJU18Luumnl/DI1gd72Z
97O4G37dR/gLRmi/PouCF6qgdyZgfdIdM+9HOO6LT2AFeNoI/xUb/AMi/P23
zDz/Rsp/oRQ8d1DOHlYaI+dltnAA62duw1+C+msmyuE/jfr69N+FPygCfvYQ
us0Av75NwT6jDgVrZ4axf0IExf8eejftvzpL+1M8wi/o6RSvzgv1Skd+Wp2f
hc+jMw7r0/TQW6k+rgRwGNVTSLXw+n09DL+QC33XMfKXg50niV/Q+uP03pTh
vFa6H0Kmhcd7neptD4e/Fvlo0yak+NfYhxCal0Lks+RPvFfBPq4Vk0JPmZL4
D8vfDQ7sh345iOa9SeJ1dnEPzW+1xBtsZ5icPSzXIOdl1hRF81oDDqf5cNXB
rxIpnkYTz3feRP42E6+fhd4L13P4dUnkH4ffnUL94Pcn2OqdQed74E/PofpF
In/HDapHCNiyzdW4r1nnaH899jcl0zy4cL8n0W+17oTEv1mVnt4Ten+36+lO
VrIQKudFtV0FfhdA+3/He14RKHGoRucUeb3Xgqnf9SI/LzxMzh7mGyXnZdYZ
jfX2BpHP/xjV2/4Y/vN8flo09iaR13cljs5rFnm+MTTP8u/nX1RkLpw=
                 "], CompressedData["
1:eJxdlW1IU2EUx2c0txF9CsX0i+1D3paYUrHtutAwYvSGDIShgaQZy0LFSGbY
vWUfHEPMRM3I1DTzpi1NKTejNwsZfoisBLMXiQqWFFhQbQZR9/mfwR4/jPHj
/3/OPec85567oaTSUbZKo9FU//+p/y8ri3XKTkuu8U1EKk8qzVU5WGDmOFQA
fbBR5QVd6Bi4ph2suFW2ykc64RfqoJ/qYnq8IqsckJp6oLvOQp/u5TmjP5at
8gsF8VNrcd43BL3ZBf9DH+JrnPDPDMOvN0OfH4Ff0fJsj5hjeEEnfANPRvUP
4BbG3TrXLLiE2B40s3xM5A8FoC8Or+A7yM+zDDaOQ/cIyHeNn/x5yK+f2F6M
enMCpFM/w8TBTvDzCeIBK573mNhnZfErwPHB2+BPj0gfg38fsesX4pmqGOv1
VVb2/JIG6P5Z+K91gN1pIuOlPnDSuMj8X1GfIWjO5vLx3ODZNcuz/U82y+89
5SOk2Jg+9YCxVu8Ej1K97hob8zvHYjki+RWen2KetOET4GGat3AFuLYb+YaP
gvMwv1p3KfhZtN4icHIb5duG/Pdkw2+/AC63goONKn+RjGbqdwP06m3Un3qV
DfJkFsU7A31+C88TGSv0dIp/DmzaTPG94MFNFJ/yMQnwJ12h/NLoPm/ybJni
WNvxUeXvUh7i6eZWo/6feL4haaON1TeQSfd50MbqabJE5xH+wV3EM+DyHKpH
hv8u6jeEdqgcJycK9L6uhd9rpHm4h/ymsY+0wnGan3XkT+XZ81fkuOedyr+l
wgTw0n3oIu233C6Vw1JyCtXTBD0/lee3abEcJ+tNyEc5L7J+FaRTvi3wP8H9
GZRWkfUrC/VqQxdFVv+BrfR+X4Y/eTvdz2HUIzbjvL8C74eI+TO4T0J3XKJ5
doPro/NbBx7tpvuVcH75aixHpMK+FXyd4rN4AekHvU9h6rdxiOIfQjyHD37n
fpqfW/B3ZPIc/ixyrPeI2Ee074OJ0OdasX+EV9g/I166z2bsr3aJ+rUX+8hb
Rf1OUHm93FtG8RfVffZaWlVE56fp+5VP+pCF3YdjN/az6zS4he4j9nv4DzKQ
MTw=
                 "], CompressedData["
1:eJxd0z9IG1EcB/AYNRdFM2jUGv9GCvVftb1KI5pLzlAMODgc2OIfqk0iiEMd
BKHLS7nRSisOCuIfuDGKSkRc2sWtDg5xEBXUlrbQIFSdPK2xee/7hrsOIXz4
fvndu/feuUNjyrDVYrF0pH/0f39sUAh8keSaY508kcMytXXAzzz6l9lmHYId
KWa7GoLj9+irYfhlRoT11Qh8Y41g3jD1u2h3ltE6UbJNOVnKYbZPvkJfykM+
70W/OR/zY2703Q645tzHPOng8xZ8WP//dmK++pX1o01FyHfv4IJi+KgVzysu
gZPjeJ7rAX+/eXgPFrRV9MVSOPATnnBF5OT2epbulFn/dTlzZq8kszxZifxQ
NjnzzQv0u7gvg8hzKzBf1PA+Nonu/6kgzsFrHmZbfJr6NxlvwfnEPyLveYZ+
fIo6J+oRef4Bdj01WiepZqMvifYY88VP1BnRxQbk4iz6f+pwX8RF9DtqkRfE
+P4/ghOfTbaLZ+Y85MD+hfn8UNBvWH/a7+FgO7+PG/y+BZDvHMBvu8Js/75Z
sH8/OpF/X/Gz/Wl9Dl+NoL9az83PX37I1/8rvb5+nQyUwtoM1pss5PYZfWrb
cZksJG7o93VLqov4+5/ge5sqoV4WEpvU16SxDLmyRH1H+txGp+9jvdkT7Dyq
BEWT2Pld8/NTYsgXPPx81pE72/A8dQu+8CI3fv//ALwKu8c=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQfWNiL2NXmpOD0u2fdRILkh0QfMt6hZUQvlEchH90
PYTf5AtRz74Fwr9kA+LvrPPcAeYzzdKAyGftgsjfEkDlR+1zROLzMm4qdATr
P7AKIv9ICyKf0w3i+zJueuMA5N+su5EPkZ911gHi3ghUvo4LKl/FCqLf6xqE
f90IIr/qOYTvqgexn+snhL9ZEyI/iQ/qPnUI30kDmc/L5FSCKt+0F8R/WbfE
DMJnYoGGZyiYz7DJFcI/U4AcvjvrznQi8yHhDwBX3raW
                 "], CompressedData["
1:eJxV1V1IU2EYB/Bzjq1STEJrmQ2pgfnRp0NlCcY5W0HsQmXghWIUK70QQjvF
wJJ3s4hqkNXKohWVqyAmicxRuUyt6KJBF40MZ7GLQRd5MSpoNUNq5/yfi3Mu
RH48//ec533e1+MWV6+zS+A4zpX7UX7PX73Ex/Ntovlzli2+OiLmzNlq9Y62
KN7jcc+o5hu7UB+KUr0PTj8j98PuCOW98NZxeOks/PAJbB6Gu1/AlpuKJ1lm
SrUg3IJXTKPuDyB/BebMd9CfCf1xsXvIy9Sv7xHyfnJoWbc/vkOw61xssKvr
w+S4AXUb2b/Srr4vPov3yeRCmJcp/x39Cc48PK/1JRzlUV89Rf1wcCn2zwX+
ob8qzFdYon7jz5GP/YWNmDcvhOG9J7H+54jijZ6xLtQd1xUnmKkdLriI/IVm
5H1ueLaR8scU8x55l9ZZdne71j9YvAau6UV+sBpelJEfraL9uZGfq8R+HKdR
76mk/Xj1dpzT2+bD+nfk8GXUz1dp7w/v2V9N872N/GHq79QD5Oe30fpxWN6J
/aciWN9M+x2aRN25G346DbNaOPkGDlngspjib8xUB/d8QP1jPRyg8w5J5BK6
b0103kn0e2MH+i+KYP2gGfnMNZqnCfnkCXjOSPerje5zCfJOq86cXKGzkDLS
3+965IOF8KdS5F0CXG6i+S9LOf9iDZu1ztUr9A7R+Qc5rK+l+blWwRNWOq8i
uB7z4F6vw/w6D9DzNtH9p/vpLMb9Peog5ynO93zdR/k03j+KeQqWhKQ+73gD
3acZSZ1vH52v7z7yj+n+dAwoXmYD6v7WCMF2xX9YpIz6tyLfukGt88Fyxb9Z
Ic1vwSDp5l+QFjV+zy+8FXX17hF4LebNj3nhTppv5pCo6y/QIqr76anTOsuC
dq0TLH6Qvk9MVL835n74zBfk/cP0fWqS1O+VeQL7SY1Iuu+f9v/Bf90Iyr0=

                 "], CompressedData["
1:eJxd001IFGEcx/GZKQo3VyFtdHU1tjcrDx48iAju1qgrdgu0pYLAF0KlPBSJ
Rc/eOqzIVpQrCOEpYYVeSIywDh70IFRE0JoJexBasMNKhzZD2Zzn+wQzHZbl
w+///J6HZ2YC3UPn+wxN087s/uz/lQdj+vNLVujIty2xdLInZDsdbJHeyCmf
tT0SffrHttfIt2DfDnmwjXkrL3M9Gpa5uKb3yvxwO/OhPU5vibd7Xbm4vA/f
UX0/9+N6C4sC/EOdz3OgV+6XbWB9cyF5sJa8witzI17D/hexfiGAY17mE+XM
J9V8qpi+ZZVnt7kfTxFOp/HA/y7F8U1Lrj9xCL8y6PugfM5kv24Tr5/iPL9M
zneV+xXbZeSpPuZv+jjfcD+eULZGmI9VMN/0mLzDT1/9S/o91eR1i+r5/vMn
tz9+dtkIf6E/qfLECvlprGVW6U9WkRev4Q2/07t9lep+VvFtH77SjGOjvE/5
ATw3yfuUuW+7MXprmrzsBfnyMzz9Xa2flzay1a3st0CejbhsDMXdrp1vlf09
75g/ukbeOSutVe7YfiPCM+QJb5vMD065PffQ6a/iyQ3WD6fou9dF3jCIrzex
f07HZoDvK/dI3VeJmj/mdmrTcvi9/nrB9m8xZap8nLzQjzODOCL77+p1ETx+
nNz5/f8FlqTSKQ==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfWNiL+N9XRcHpds/67Kkkx1uTORlXN+GzO9l3H4T
xP9Yd0cTwv+u5gqWP+AGlc+B8I8kQPjT+yH8KRWofIM+VP6f6WA+k38riL+z
7tx8iPz+Aoj8sqVgPoN+DIhvWV+3GiIf7gSRz1oH4Zsro/CZyi+7oMq3u4DN
nzQHwi+3g8g/qoD41/y/M5h/KxLqvvsQvoQDKn+ONjL/Y90ONRD/LOPtpxD5
M0oQ+eRPEP4NebD5TK//QfhPZCD8/UKo4Ysc/gAKb76a
                 "], CompressedData["
1:eJxTTMoPSmViYGAwBmIQfWNiL+OUdDcHpds/67y8kh2Q+VxpIL4v45OZIP7O
ulcNEPmWfxD5V7NAfF4mlSR3IN+y/tUWsDwTz0l3iPxBiHobYw9kPkNNFAqf
cUOlB1j/1v0Q/o0JEHnv3RA+wwoPsP0Pt0HdtxmiPmgDMv9n3bzlyPyddd+m
Qvg9HRD1N9sg/BojiHr3Kgg/5w7IvZL1W3PB/mF80ghxP0saRP6JEoRvkgzh
m3yH+j8RxD/LOOUDhH8uBsL/8xrEv1m3MwJq/kuI/OpQSHjeeeYGtm9uENS9
TyH8E37I/J91Ol6ofBN7iPkGX0B8zvrVZhD5DEGI+yYaQOJjgR6Iz1hfrgWR
9wmEyGepQ91TicznZeqZjyLP8OU4RH8AVP+STxB5GQMIn4UbEn41xhD1IXog
/su6Nkuoe2Mg8lZOUH4hNL5tIemDJRrCPwVxP9MaKwi/Sh8aXwIQ/i+Ie5ju
HAXZ/6tulhTEvU+qoOlLGOo+fWQ+L2PLLzcU+SenIfxZEhD+kcUQ/i9FqP5q
CD9KGzn9c9afskDND6D8AQAw1Xpe
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfWNiL2MIo7uD0u2fdVFZyQ43JvIytiSD+JL113Ih
/ILNEL5JGYjfyyjxEaK+pBnMZzig5wHkW9ZvmQCRn+IL4u+suzMXmf+z7s0q
VP6K9RD9Xzwg6nM2Q+S32EPkLbaB+UwlZhDzWXZC5K9oQOSzdkH5Yqj8kq/u
yHyGLVfcweZ/2wa1fwtEnm8DxH8lU9zB5quthMj3lEP4EQsh/DuxEPVLZkDU
z3GCmFfQB5Fn0YXIr2mB8EVkIfyIarB6phAREP9mXQw0/ES4IeG5qQDCRw5/
AED7tCM=
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxd0ztIW1EABuAkvUotSYYaX6mKsZZqemuslkZ8wPWBYtBixXTQIG2NQyVt
hxShUE44IVOpgxBBND5QHITo4NIWHC8URF3qILjqECnUdkp833P+M5x0OMPH
/9+T84rrzYeBsVsmk8lsjDZjWIzxzT9JrQ09WuVhhtRpoxpzyOLjHr9gttGQ
AtuvuKPJHHjzGn01F35pDvJ+UvjMEuT5b+5PkeeK7AwZyMnKyUIe/z5aZ0K/
1Yr8+z+sz2PD/NpxD++77PDnbfiLHf3QMvrj/9uB+dUfvB+pLUDe/wu+Wwgf
nKJfWAS/smN9zmKxPxe8V4x8y4391JfA1m54wskdDb5Ff6QUuT6F/KQceed0
lunODPo+4UAC+Z0yOLaK9eW2svPfpcoSvOFl7qN6gjlFwk9xP/occn8D+vos
c17EW4+8U9j5RHaGXHlk/yXLjzG/wuc3R+YfIY8tov+nBu9FWUG/rRr5xzVx
/g/h/U3ZtmhMz84Th/ComL80La/fyB04j+5m8R5V8d7akfdq8HufsB8+6oID
/L5SpPEZfHQbedItLO5fqxLr/2l4OEMCJfDWPPKTfOGw7D6681r2Lt1/wXxO
KgrE/juQfy1iXqeDtcxpot5DHr/PfEmGXLKN9+jO9gS/j3c0/gD3lxb3F69B
nvDCiorc0YTfUz3waQty+f9/AzZeyIk=
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0z9IAlEcB3CLhGyLCEoUsiWoIEGLMiQJwvxLCAcRQZTpEEg0iCB376LC
aIoGF6GgQRqkf5CCVERDkULWFEg1NDQk2BJGSkK9+77hbjiOD9/35/f+GRaW
fYFGlUpl+v/oP5V1COoLp637uUqcTr9N7pYgtUbgPqmzpLSKvOJzSXkpQZ0T
4hnqEbF0JuVE0LuRX6P94abCfPlImRsKbql/+gp2vCN3ncMrv25p/rcMq6/Z
I7X3nchdJXsHcmfJdxyuv2D8YgwuxzC+PQq/Gqk7xXRIWg/PPWF9TUHkXAQ2
++Gki61/nnpLUE/AhVk4ZKMukuw0G9+KPMVhPz2jLmm+XR+r1wLfeeWukn6n
0uYxjL8/Sa0RU0PIiwHkO0acR+s6dYMY6UV+mUS+1MPquZc7J9S/FDkf0Lml
/lOsf7sd+6UzwuE5mDeh/c0a9QeJjbB6T5Fbxplv2XlbcT/Cx3Ae9RP9Nhwd
YOe1CNdQD/FoqWskoUW93APb/zZW34bcOb7iVeZcF5zogAd/cL9rBtb/EZ7p
k99/jZgfVr4H+j7+AOKDgL4=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvXqnZ+3RUG8Hpds/66Kykh1W7zxZ83U7iC9Zfy0X
wn/I7gPmm5SB+J61na4+YPUlzWB+jWEziG9Zv2UCRJ51EYi/s+7OXGT+z7o3
q1D5K9ZD9KfOhajP2QyRV50CkbfYBubXPe2CmM+yEyLvWguRz9oF5Wej8p96
ovBrVDUh5n/bBrWfEyLPtwHiv6cvvMHmq62EyP89DeFHLITwfTdBwmfJDIh6
3uneYPMK+iDypY0Q+TUtEH5rIYQfUQ1WX3s0A8S/WRcDDb/WeEj4biqA8JHD
HwCIBMDL
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbd/fx7jvtK+D0u2fdXwuyQ4IPmd9mg2Ef+8SRH6b
KYQv9xDC/6cP4ce9h/DdtCD8PnY/MD9LHcJfp4nM52OqK0KRZ6rb4Qe27w7U
/HW/IfIHgiDy56z8wfwnuVD7okB8y/pp7cj8n3XX5qPKNy0H8xncQkH8nXW3
10Lkxbwh6h9ugpj/zAGi/vl2CN9NByKftQui3owXhc9wbb8fEp+P8V+JH9j8
b6ug7teByPP1gPh+jHxvQOEjWZ9VgBy+QH4EMh8S/gADWapM
                 "], CompressedData["
1:eJxd1G9IE3EYB/C7K5pZriiZOWixihWrJlu2ymCOWQrRLonYi0V7MefsHxcV
CRncBcWoiC36QyA0wrBCakRF9EcW/QEr08AXQQa9UBgldLUw8wxbu/s+L/br
xRgfvs89d7/n97uzRw/uaBU4jgsXf/p/fSrJi6bt/qWfNHnseYu/aGHQxfrD
Vt2P5cwzw3x8F3LvU+S5mO6NSvoRHD+AvPYB6nOH4Mk7cKYP3qcZ5lxvdR+T
O/8gH+xHfn4aTr6DtxVgcQAu42PoN4Drzwql1uShGWw+VGZY8ND9JuYgr3uJ
el+FYS7Qa+RKwgxH7iF3zkN9spuxIF1lrV5GfyvVm1PIp6if6zT6D8OCWYF7
zPS8R2g+/7sStt2GJQuu903hfmp1zH+tqY8z1TRj/2xwmweeuRi+6YbHreh3
4z367byE+Ur74a467I+0F05soPPRpnu2ctFL+xNH/qYW9WKr7q9ywUP7HUN9
1F1qTf5ZU+q8HFmN/uV7kFc4kb+Q4MJK9O84CudXwKHjNB+YD51gLOSSjLn2
67jfE+o/K4s8jOcTEnR+outovSNwehPqP0/D5s0txjxTJszzSz3cIMCTVD+R
x/rnUz/LsG5eKXfR+9GLfjkH5WfoPFppvmF6HxfS+Xcz5jLL2DxUBfdUwo1z
6XxaUP/wtwhX035/0/1LPmcrtSY3O1j/wPx5VRWN+dnXkPPIR2m/1XHR2P9u
Oi/tmmisX/UhTxRQn91Cz/MRuWO9brPQeBf9PatQ7z2J+hG7kfOOUNH9mnxh
EfK/y0Vm/dnvQcbSK9adafh1FRyQ4VNL4LHdsJ/OUzYYNJ7PubbUmhxoYH04
Qt8vBY520DxG4QVXsL5kk2h8T7vuw5lbYun3lvke/wM1PWLt
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvcD9+IE7iYEOSrd/1i2rSHZA8CXrrxVA+CYpEP6s
LAj/SQZE/adUCP9IAYTvFAfitx/4UAfhZ0VB5DMmI/PdD85YiSqftBdi/oJE
CP/YOYg8D9R+rQcgvmV9RR3UfS8g8gl9qPwj85H5O+tEVoDtO+DxFKJ/5jqI
vMI9iPrgzRD3/LgGUc+7A6Le4QzUfbsg6n/sRea7H4hYhMxvPyDWA9H/ehNE
vVE1RP7tYhCf/aBfFsT+91OQw9eyvqkNmQ8JfwADVMjQ
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvcD9+IE3OYEOSrd/1mVdSHJY4N5+oKULme9+QGgx
iH+zjukKiH/8wLRtEHmj22D5g1KnQHzJ+qRHEPk7l0H8l3XfXiHzf9a9+4LM
56xv+gPRf+QciP+x7hFTMlh+yhGIej6OZLC8zH4I/xIXRN4DbP/fuhO8EL7E
Koj8BwGw+gMv5oP43+tKhCHym/og8iLiEH5ZGYR/QRrCt4qD8HsUksH+dwiA
8F8pQeQ7fFD5Am6o/AZLCL9DDsK/oQbhHxGF8A1EIHwGqHvvcEH4Asyo/C/f
k5D4kvUGzyF8DUlI+C+7DeEfMIWoD7sK4a9wgYbXJUj88YQjxx9q/AIA0QD1
KA==
                 "], CompressedData["
1:eJxt1F9IU1EcB/DNFhMKCcqBNErXQktlJFFNJRYuJkR1dzdMxES2BWFFBTHC
xplJ9A/BJIqIhUMGhhAOkXCkdC8FGli91HJma0S1FXvIRONWD+3c73k4V3qQ
8eH7O+f87u9eT4XvrHiiSKfTiYU/+ht1TUsLGcFhea+QniWfg3fmL/VraX2O
Wh9+sdav5qdXkDeUUL+TZg3ugn+TRybqrBTZTL1MTFtRv1DvVuuDldTDUmQ3
9SIJ7kB9yAb3V6M+VI16uRb1oUq3ev6SjeXbqb+RdB1vhfTu0eZDDXCkBr5y
QNtPVTO1UW5soi4L5w8hnxOQZwQ47ocNx1Bf7KFOEV0b9TVpwom8sQP10j54
wo/+q3bCm06x8y04L3KBt0KEHt4JUn4b84nvoraHnw0hbz2Kevso+tGdQf3o
E/QTH0D+XUb9ySmtm99oHcvC9RKb3y94fhL2GkXV3QlqlxzdAI88Rt65Ee4a
Z/0f/L9HhuGact4uebJCVJ8vGYNzFuRN7Hnj2+DFQTWXLlrhwQdsfyvWt9zn
rRDTXd4Jsv8y9q8rFdX5J88hTy/jedMB7H8ziff7tRX5zDiblwjfu6X1XJ/W
bTewXu+Bt1xFbmP+1Iv3f9yD9/WZII+z3NrNvk8vHAjyNsrO89i/hZ33vAv5
2BHYEMD+Jex7jnXi+5918VZI3qn1Qwf6+XEJ9e125NfHkBfbMB8ph//HPiub
7xo6zz9EKOWtEK9+lX/61PXmFfRf+wX3TWQe+39Mqblsfor+B16x/A6b7wxs
7uBduE/2rsrLsH7dS7a+CPnhtyzPC+r5/R/4+y5Folnt/Ufvw39EXIDm
                 "], CompressedData["
1:eJxd1F1IU2EYB/DRRQVRYBdRkcksioIQvCiGpe+yOEnRaocQghpkI8xgFl0o
xZl10ZIK6+IETZfLmXOWs01teqxt0cVKQcgwSMsuIpb2zSg59H3O/wnet4sx
fvyfPc9zznl3rIc8Tvcci8Ui//0Y30Epw2pmnaxwUldmHlSxoORjQzrvDNv3
HW4j237Ai8n5P+GzabjJ9KAyleKtK2vIRZQXJg3Ps49Qv4P3kVeRJ+7Br5/B
809SPgXXnYZvfUa/95fgvLmy6RcBWF0pm/U7bsPLNhm2efs0wxI7slsWrtd7
mLfEPLWib9bDX+l6rA3wAnNfyR44B1sHkE82Yl5HL29d8UdFf+yEW+n3Je3w
Wup/Jgj30PxMC+al/u3nR17p5i0x7wHRFypxfxLNqD8lI98bQL8aB/Z9dx31
ZbvgRzR/tgL1b9tg13Z4Txj1rm3wik54QzmcpOt7bIc3RjDPzeBohJ5nKe1L
bt7MW7KHigWzLatxPQUh1FfnIW9UcZ7VX05z/5wP5y31AS6tR32WztPRauSf
xuFRF5wbMfxcWSKjPpdGvrWc9tUMTyvFNsNZtjNu+Isysx750zD1X0rP+5jo
V130fztvOMxcUZznE01wUQz7Vqiod/Si3uPHPE8/6tVWOr934eEQb11ZFBbz
sS46b33o399N+9xBfaIHLuhG/WAM+3g7kGtx5L9bRGev8c6yhVfxez/lx68g
3x9Hv/GLmL/cdII5fMiHY7RPA92v/52Ayy7DYwOYJ7WjX1RD/3UaHKH3yZsn
qH+YxPm4MY39XqbxvFd9E99//PvxD7G3fic=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbffz2AKTuSEOSrd/1kksSHZA8C3rFVZC+BwzIfyj
6yH8DRMg6tm3QPgRHSD+zjrPHSC+20KbOoh81i6IfEwRKl/GE5nftuCEEkT/
gVUQ+YT/wWD5nG4Qf9kCjwcg/s26G/kQ+T0XIPISEah8HRdUvooVRL/IVQj/
uhFE/shdCN9VD2J/yTMIf7MmRN7iI4SfpQ7hC/xD5rMtFFAJQZHf4AHiv6xb
Ygbhf8iGhmcoODwWnOiB8M8UIIfvzroznch8SPgDAFCoyXQ=
                 "], CompressedData["
1:eJxV1V1IU2EYB/AZIQZeCNVacYg1KGefGlPWKJllwyRkOAkCAzONMKppywrk
XUaYFxFTVhhEnLO01jT7cDmdS1fJSBpdjBkbiXhT6VxhVNagoJ39n4tzLsb4
8fzP+/Gcd+821Z+rblyhUCjq0x/xuzQV4mNna4yajymWeHXCWJoy8Y6rcoe7
RO+xt06IDvE37qJ+04/6YRf8zUf5B3CrF/lcD7zlKZzsh3sfw1e88MkxuPOF
6FG2HMiMJ1iH4ZXjqOt9yDvGMZ9iBOvjJuDoKPIttF5vAPlu8uS8dH8hnluU
+1ISzz8nx5Ko7yfrv2K+SBDzacm5QdTdlF/C+oSeRYxnfgmHE6jnBJAvJ6vG
MF5gAdaiv0KS1hsZQT76BVb64KXXcKkNz8/7Ra+3DzaivibT3zjjjsK2QeQ7
q5DX9cFBA+pOXnSWvWWX1Cl2b7vU31lkK3xNQL69AG64j3y/lvbXh/x0Pvbj
fIh6Uz7qNR65nQNy5z3B81Pkt89Qv66Vnp8s+8EC6q8P+Tpa38AY8rFtcAX1
q2Un9l83ieeraL/DIdSrC+HKKZgVwbPvYM9u+O970QuM08G9EdSjxXCA3q+n
jPyDzts+zL83jvXe3oH1L79BvV2DfGKI+skhP0v9nVbS+XLSeKuRV3VIbeLd
bTILdRfo97sWeaMV/qBCXn0a3sih7jgl+hcrUUudrm+W20Pv39gEF1H/+DPw
kB5WNMPFZZjPbEP/aitovIt0/ul8qs7j/DZUwj2Z9a2yfyqn83Gc+oN+Cp1H
MF5zCZ2nQ+ivld6vzoC8m84PpxX9j7Vl9pctBJWi/zDvBtTV2cib14nu4I0p
S9q/WS71byZpkfX/55zUn/mZsLzu8sN5KtjkgWupv4k7Ftn6Al2WzH6adFKn
mOuA1HEWOUb30yNL5r7RXIYLY8h336L7KQf3lWYI+5kzyO8/6f/Bf4brGWU=

                 "], CompressedData["
1:eJxd1F9IU1EcB/AhZI9l5sSXPGsPvgWWWHJFjdGipkXSjvWg0tZEB2oWIb1c
EaI9FPQQZKA4kRqU5pxWwzb/JYQimCnMdIgozAcrAq9gM6x27vdH3NPDGB++
3/Pn3nvutbiaKz1pJpPJkfqJ/5LkR2advVp2PJ5Ut6ZdZZLnyCtGv2N3EvC1
eeSZ3+GCReExNrwDH44Jf2C2PeFl9dsK+lP7yKfXYeWGU7f3qTvlTRZxC4+o
RzqFA8zhES5qu9Xt1vtfPejf7xF+wB7Wof+sF3mcXPjc6KRa80LOAy/hPjfy
hX7YUQ1vDNB6HN4exH58FfBeCHnuWaM3WWuJ0QGmKVhvm/pPimh+6p86jetb
0B1jwQL0X1H/4Em6P2QlnxyGx4Pwm0m4KgR/mcT98Q1h/nrKLw8jvzmBvHQI
65WPCadbakPw+yj6wUH0ByKwrws+1gEv9WP+Xrr/SxG4ro/6M8b92y2lG8i9
UfjHL+RbtL8OMzfYzsL5sg+c5/r4qVH02znyu28x376H6/vPe4080oj8do9s
/lj27xaMtzqFc9rSOXLNirxJwfqKhv2aLXR+Jmj/mbDtkex4u+yMe8K7as1R
ONGC3J4Fj3iFf6onzDgfmng/OlPPN5vOTxU93xzYf4X2cwjnzX8R5mkYv3YO
PpPE+1Zrg6OaC3mxU7/e+gRyP53PS6uym+KyK2PG8ctq1qI8f/izS9/P2gXM
f30e/XGOvvcT+n8anNL35p///x6l/Bcwfkvs
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQbffzmMJujTAHpds/6671Jjsg829NBfHdFK6rQfgm
cyDy/MoQ/pMFYHnF7dIg/s66Fysh6v/zQuSz1kHUP/8ZisJf/gKZ76Zw92oo
WL/6Koh850GI/MKFIH6bgulaEN+yXnomRL5+NkT+UjeEn94D4R+rhPDPN4L4
N+ukskB8NsWH5RD5bZEQ+bl5EP4sDxD/mUJkKoRfZw6R354A4n+sK9JF5v+s
K9NC5jPWB6lC+AtTQPy/de2KEH5pDkS9qDyE71kC4v+uWywD8c/yWqj/pSHy
/R3IfDZF9y3IfDeFw7cg7tHThKhn/gP1jwuEf1kyDOxfp1jk+LtZt6gUNT5B
8QsAai/rEA==
                 "], CompressedData["
1:eJxd1W1IU1EYB/A5sFIm1sz3Zr60Ss1qJr5MKhUdWPPDKldWgnOKMNBa0Qf7
cJeERVIWZCS+3qtNa5KlECm+oFGCmkRBmfglP0hMFNpMaOJL3vt/gnv7IPLj
/5znnLt77jlRxVfOlMplMpl164//f8IzxlbNGTOiZz3MgqIkQ2Il723cjAvW
7kbuv8m70pYbCMf4nBfy4CA4JYB3JTNPXgmHnwfDhTGoLwqBb2QiHwyHOw1w
jQpePov6CfJJo5DbfCN461ifC8jjIpAbCsTWcabLqDfSeGch+iftEdvDvA+D
TV7wtetmwa69vPuZlhp4KZV3mq22Ec7Xoz6rA86pQH1vn1lYX/kD5AujyKde
SF3+Rmwd1zWC8TtGkN+dRJ49iH7mb5j/Vh/yz7PIh3uk3uiUusOO8Roy20bP
NwMvtmD+nu9waiOsmcZ87qeot35FHvYEnm+HT6XDpW28fWwTqRiv5ng7meJk
5GoW9cokrEfdivp3GuT2FuSOI1JPJIjtYhzx6G9vhZVxlHOol8eiv11Yn5fN
fQB5dQdyCznHIbaO8+6V5uoBOOhf/w9wBa1P9ZGeNxHj0+j3i9Ai9zipXw7c
v0zvOwP1njl6f8fguS9YbyTNZx1DvnMfctPrLV9aZfShyDUN1C8Anrstto7r
r5SYTbfC1YGoL7PAAyGof2yGXeHIY4t4rzCPIsX2MPX7xXYx2QfhAsqnY+l5
yYZ4ONQETx7CesZNGF9xGPl4MXLtUTivifYb9ic71YTvI6wV+fFmOJqFm5tR
n8jB683Yv1m03xNoP11sl/rmM7HTbA2dmC+/CfZ10Puvp/3YhXyoDvPXvEQ+
9JDedzfV3xNbx+VVSvNXJRjfTd/r5GnkyQ3wz0TMP3zfLJzHThW8xtD3rUD9
r6v0+9L5pSjjfYfN/MOf1zPM20LkuW6c565z6GdY5B1qi9fz7mDHfxiF/byR
gvqeT6i3hND7rJO6ahftr1U4UwnXrqH/qBLnrXsduVcAfU+btD7cFzatjM5f
uj/0XmJ7GL1c6sHtJcL4JX/Ur/si96b7yF+B+0slR/8oP9j1W7i/GIvff/fd
Vv1fOH51dQ==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{136.24499999999998`, 235.26300000000003`}, {
                136.24499999999998`, 233.01899999999998`}, {
                134.42600000000002`, 231.201}, {132.182, 231.201}, {
                129.93799999999996`, 231.201}, {128.11999999999998`, 
                233.01899999999998`}, {128.11999999999998`, 
                235.26300000000003`}, {128.11999999999998`, 
                237.50599999999997`}, {129.93799999999996`, 
                239.32599999999994`}, {132.182, 239.32599999999994`}, {
                134.42600000000002`, 239.32599999999994`}, {
                136.24499999999998`, 237.50599999999997`}, {
                136.24499999999998`, 235.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{170.245, 182.26299999999998`}, {170.245, 180.019}, {
                168.426, 178.20100000000002`}, {166.18200000000002`, 
                178.20100000000002`}, {163.938, 178.20100000000002`}, {162.12,
                 180.019}, {162.12, 182.26299999999998`}, {162.12, 
                184.50699999999998`}, {163.938, 186.32600000000002`}, {
                166.18200000000002`, 186.32600000000002`}, {168.426, 
                186.32600000000002`}, {170.245, 184.50699999999998`}, {
                170.245, 182.26299999999998`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{210.245, 220.26300000000003`}, {210.245, 
                218.01899999999998`}, {208.42599999999993`, 216.201}, {
                206.182, 216.201}, {203.93799999999996`, 216.201}, {
                202.11999999999998`, 218.01899999999998`}, {
                202.11999999999998`, 220.26300000000003`}, {
                202.11999999999998`, 222.50599999999997`}, {
                203.93799999999996`, 224.32599999999994`}, {206.182, 
                224.32599999999994`}, {208.42599999999993`, 
                224.32599999999994`}, {210.245, 222.50599999999997`}, {
                210.245, 220.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{179.245, 246.26300000000003`}, {179.245, 
                244.01899999999998`}, {177.426, 242.201}, {
                175.18200000000002`, 242.201}, {172.938, 242.201}, {171.12, 
                244.01899999999998`}, {171.12, 246.26300000000003`}, {171.12, 
                248.50599999999997`}, {172.938, 250.32599999999994`}, {
                175.18200000000002`, 250.32599999999994`}, {177.426, 
                250.32599999999994`}, {179.245, 248.50599999999997`}, {
                179.245, 246.26300000000003`}}}]}, {
               RGBColor[
               0.024604722168000026`, 0.03147120849600005, 
                0.032234097167999964`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{175.18200000000002`, 246.26300000000003`}, {206.182, 
                220.26300000000003`}, {132.182, 235.26300000000003`}, {
                175.18200000000002`, 246.26300000000003`}, {
                166.18200000000002`, 182.26299999999998`}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0z9IQkEcB3ArF9tKh4oajMSyQEl5ZBCKQaFChBREGZSSSSBuWRLvVYTR
kBkUhlBjCS6CKUhRtIVDQzYkLUVLSdQQBBpP6vzecA6Px4fv7+5+3B+ly+9Y
qJdIJPr/j/xHMt/ig3TO3PlU4m02t5l1o4f4VfQ2EWf54jryiAZ5MUYsr6wM
ExuF4jmxvtI/S/Mb1F8FWKfE8EZtPrOD8elrWLWH3H4Bfx1g/ZcM7S+KekeS
dYk/OWOd5X8O4eZd1BdCcJj2MxqEG13ErULaR5wXvXbkUg/yuB42uOHLbtr/
PHFDRaGG75zwp4q4wGenUG9TIU9MYj9Pu7DesQP5BPXtGOsS32ertcGE+X+r
68mEBIfcqkW+r8N5RDniOiGgQW4xIV9S036srOWVewfrlPjhxPhxOv5oEXm7
Dk764DU96reWid/5kBG5YhP5oIX2v033awj3I0nPP8fBsVU4qKXn5YfLauSe
aj9lPtaGfuO0/6Ic9Y8c67wY6anN3zrgWAv8LKfzK+l4GTzdy95/mZAbqH0P
5H38AVR/m3k=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ7bbt818X7QQHpds/66Kykh3ctl3+e8EZxJesv5YL
4Z8Oh/BNykD8z39N0yHqS5pB/M1/55eB+Jb1WyZA5EPqQPyddXfmIvN/1r1Z
hcpfsR6iX6cWoj5nM0T+ThVE3mIbiG/8r6cCYj7LToi8SilEPmsXhL+kAJXv
k4HM3/xXJgFi/rdtEHmRCIg83waI/3gCIOarrYTIX/KA8CMWQvhpThD1S2ZA
1E+zhphX0AeRNzCDyK9pgfBNjCD8iGoQX/gfiwGIf7MuBhp+W3Qh4bmpAMJH
Dn8AsXPLIA==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbbf8s+zhEwkOSrd/1vG5JDsg+Jz1aTYQfvcpiPw2
Uwhf+hyE/08fwl99EcJ304Lwt1+H8LPUIXz7B8h8YbniT8h8Y7nPzIlg++5A
zd8vkgiWPxAEkW9XgfCf5ELks3VAfMv6ae3I/J911+ajyjctB/E3y6pqg/g7
626vhcjP1ICof7gJYj6vGkT98+0Q/lMFiHzWLoh6RUlk/mbZk6zI/Muywp8T
wOZ/WwVR/x/qX74eEP+x7PULIL5kfVYBcvgC+RHIfEj4AwBCZbd0
                 "], CompressedData["
1:eJxd1G1IE3EcB/DNguxhM91St7iL+WIby7z25FzStnwoJdMSLRSya643Rgq9
iXxxeyNGURQVDAqEBjEmrIglPWFDgiyCIoNe5AuhstLIMtO6Ii7vvr8Xd70Y
48P3u9/d/f//nS3a13okT6fTdS5/5O9QaoFJlRyOlE2KwuxYdySU8rKnbFqf
dsq+J9zIyV5gMuXIKx8gN3Cyg/Ghu/CXrch9t9Hf44F/ZeDcLrhHlJ1lDjXI
Pilc+YN8vAH5hb/wT3KTBDsa4Xx9THG4Eb8/k6e2KEys0OYT+THl/ni63tJa
5Mmd6IcMMeV+3tcpeXzQCB+tQe4qQD8QVtvLctu1bqnGfCv1E0Hkv2neVADz
3xjRT/jhYSP6OVqvnv9thicjcG8xft/dhuvNWZAfOEb7x8Kr+uCVDJzqhX9Y
4VFar7bLWN+btH/JbdgfjjxYhf0dV/Z7dfxSJfonOORPfeg7FM8Ikge5VIF+
1K22KHzn1J4Xusox/zXNM7iQD7hhyYn5Hi8874DTPlofB/ozfrW97Lmg2lnm
VgjXu0/z2+uRd7rR99N6RP30f2iGh6rR390OG+vgqx3wpzC8uJ/OO/X3teL5
19O8jibZ+viaCuQGuv4HO3JLFZ1HK60v/d9mTXT+y9TOMjlWm6c3wsNmeLqU
zmcx+mMmsgU5Vyh7UTjLqi0Ke+1af3PC5wuxfrYtcEsR8ne03wUm7P91Oi9u
M55/LoR8ZAP6D+txPzvWIbcHZJvYaT3mezajf22JV/pvbbJfMQc/L/uZKFws
RW6a4jXP/+il1l8fa90/Cj8pgWMj8MAmuDkDR+g81aZ55f5cXrVFoaZW6+Nd
9P6iedF++MVzuCiB57vzkVfep8ksLEm86n2rfR//A/aedLc=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbbf8c+yhZYkOSrd/1i2rSHZA8CXrrxVA+O+WQ/iz
siB8t1UQ9Z9SIXyzdRC+UxyIfznWZyuEnxUFke/Yj8w3jltwClW+9QrE/AWJ
EL75XYg8D9T+l09BfMv6ijoI3+kVRD6hD5V/ZD4yf2edyAoQf3NsxQuI/pnr
IPJPnkDUB2+GuCfgIUQ97w6I+i+3oe7bBVF/4Qoyf3Msw3Fk/uXY+7sh+l9v
gqjP3QyRf7sYxBeO+70KYv/7Kcjha1nf1IbMh4Q/ABGFyCE=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQbbf8c6zXmkQHpds/67IuJDnYLb8cK7Ybmb85NvY4
iH+zjukKiP85Vv4iRN7oNohvHPfwFogvWZ/0CCJ/6D6I/7Lu2ytk/s+6d1+Q
+Zz1TX8g+s3ugvgf6x4xJYPl5W5A1PNxJIPlk65C+Je4IPI/LoD4f+tO8EL4
D05B5D8IJIPde+IoiP+9rkQYIq+7FyIvIg7h82+E8C9IQ/gfl0D4PQrJYP9/
mQvhv1KCyEvMQeXfmYHKnzIJwu+Qg/AdOiH8I6IQ/pt6CJ8B6l6naghfgBmV
/+V7EhJfst7gOYSf0QQJ/2W3IfwtEyDqw65C+BpQ9/BdgsRf1ELk+EONXwAX
Z/YF
                 "], CompressedData["
1:eJxt1F9IU1EcB/C7ShsFElhDn7Ih/SFkkSJNQ272T4hizGES3QteKyiJ/hAr
ejibJmRlmRMqIltcxIXdsqaVMxHNlwL7A+VgRlqOLIcPrhF2M/pz7vc8nBs9
jMuH7++c87vn3J0VyhH3/nmCILj//uizJJSSSg9UifZ3OvGnFJH3h5/Us9Lo
QWqL73latZEvOoa8OIN6Tio6Rf2D3LVRz5fVM9TfiG056ktbUO9dRR2X7Jep
k8S7BvWBi3DTWtQHLqB+MA/1gXNYP+VgeQP1FBlbz1sndYXmXC2G7Y1w/SZz
P6vLqDPl41eps33TO5CLN9n7u2AtBC/YjfrKIHWMCHuo30jrriHfKKO+IAD3
VKP/L+fhpTVs/bNY78YJ3jpx+XlHSE4L9ke7RO30DanI/a2od3aiH4+G+s4n
6EfrR54YRH3DW7O/j5vdPgUXDbD9S8KjfTDR4dMR6nw59xfc8Qh5/W/4UDf8
NEv5rztCcCKNd74cTleM94u2wWULkW9m76sxJ4PUXdISKxxsZftlxfiK67x1
YrvCO0JKajH/YUEx9j96FPnQDPof24f5sz/ifCcrkW94zfbLDef0my32mV3b
i/GWcjjeg9zBvPUxzl8qx3lte4j8Pssnw+z79MDpD3hnyt57mL+CrVd4B3l4
FxwNYf4M9j2vbMf3P7ydt06mt5h9W0Q/w12o3+tEnvUKudWB/SlI4P/YmMvO
d5Z6jriW8daJx/KPvyrG+IkZ9J/3CfeNPY58PKYY56OMoP/ml8jVAba/z+CJ
Nt5xSW0250odxi9+weY/iXznCBtfg/Wb3vP3XYzc+my+/+h9+AeJeHY4
                 "], CompressedData["
1:eJxV0ztIQlEcx3F7EbZegoocbJEeoKBID8oKojB6XROyJNBIKoiGCkHq3Fx0
aSkISri3B0GDQYWpXBrEpnBokYZoimjILYJARajD7wznDiIfvv9z7uE+jP4N
cblap9NZ/3/0f+DqRx4y+wfb3orE6Vwa5N0QoP6QX/qoVVLYQ6/Mohdi1ILy
uU7dIxXuqa3KaZT1LOY7L3gn5HJc258SWJ/MwIcq+vgD7M3g+u8pdr5HzIu3
vItEueKtkt8jWEpj/jUCl88xPxqCg/vUzVJynTovv2yj1wbQGxdh2xLc7mLn
91HXKOEZ+NkLL0xTvxJ1DvPpKfS4G/dTmML1ZBE9Owk/TfIuki6n1jYH9l8R
qfVS3I6e8qAfWPA8an3UVVKwA/1mFX3NxM6zyVtQHLu8E7InivXTbH3dIXqr
BTYcwztWzH+fUX+RSA96+Bq9d5id/47dr368HwbWc3a4/hIOmdnzOoFLJvR8
hLpEYi04b+MW20/A/IiPd16uuLTdPQbHmuCJAba/ka23wfOd/Puvl3Ld2u+B
fh9/Wr6IWQ==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbbf889yNoUkOSrd/1kVlJTvYLb881zYPxJesv5YL
4Vs0QfgmZSD+57mLJkLUlzSD+Jvn8iwE8S3rt0yAyB9cAeLvrLszF5n/s+7N
KlT+ivUQ/TOXQ9TnbIbIey6FyFtsA/GN5/1cBDGfZSdEfuJ8iHzWLghfcDYq
f+ckZP7muZ1dEPO/bYPINzZB5Pk2QPxXWQUxX20lRN6+GMKPWAjhX86BqF8y
A6KeOQ1iXkEfRH5uAkR+TQuEvzAGwo+oBvGF5xVGgfg362Kg4acYAQnPTQUQ
PnL4AwBYFMZ6
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{151.00558374001565`, 
                 155.05987499999998`}, {151.17477319314065`, 
                 155.76299999999998`}, {153.80416772439065`, 
                 155.76299999999998`}, {153.63497827126565`, 
                 155.05987499999998`}, {151.00558374001565`, 
                 155.05987499999998`}}, CompressedData["
1:eJxd019Ik1EcxvGplRg1ovlvK6NVYGpmariozsssqPCiwKigbP7ZKgpMMBIi
PSOCBFlFyMyiZQYllCZ1Z3XflUIYeOGlQTiJkl3oMl2e93suzroY48Pz7Hfe
95wzb0tb/aVMh8NRu/pR3zX9CZFqDvp3TCflPn/QrzwVxdf+Kk+Kc33YuaLs
soa0P6Tof9E+mxGy+z+0/2SG7HzB9q3wyTWmk7J+bVoun+eE7PknovTFBvL4
I/oVG5kfeUDf68TT3bjHSX+qSz///85lfvdd5u/NI9/Ugzfn43a9Xn4B/tbP
fE8h6w3F8EQh+dwA/So3Tr3GHR7lais6Sj+wlXxkjDy+jfz+R9MJ0faJfp32
6c/k64twTOJ1Qu1/liX0+73zKc+I1k7lWXljP+dT3kl+ppr+z9vKOWFfFfm4
tqfSdFKuVJiely/LmS/seRnhWBl5kV7/Vwn3ZbmLfu1u8idhvf/FeP6OaZd1
8V56vjOCg3r+0V7z+RMi+BQfP8Tvr7zQ9+0I+alX+HodfvgGfz+GJwfYnwM1
+OZj8uFSbX3+/l3Yre7XhaRscOO3ej/jLlzWbnpGjLaazrLeX1Vektvz6Fde
Jo8UKC+Jr03Ki3LPFnJvQHlZnveaXr2PpenusM9jTgwGOL9FfX6DjeTPfFg0
keceZL3sZvz7MLn5//8HkDHPww==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbZDzufanc4qD0u2fdRILkh0QfMt6hZUQ/mNHCP/o
egh/uy1EPfsWCL/bEsTfWee5A8Q3rqs1gchn7YLI9+qh8t9KIvMv1x5mg+g/
sAoiz/81GSyf0w3iP65tfgri36y7kQ+R33sXIi8RgcrXcUHlq1hB9L+8D+Ff
N4LIOz6B8F31IPbPfAHhb9aEyP9+C+FnqUP46V+Q+cJ16ewpKPLbwf55WbfE
DMIP14aGZyiIv7n2sDWEf6YAOXx31p3pROZDwh8AtGK/zg==
                 "], CompressedData["
1:eJxV1WtIU2EYB/Ct/JAgVEpmMkIXNue8zObEgplmM2+suSzL1s3jAp2xGmEI
7T1YhPWlQqiIoKALXkZhTTBvmwZ+MJFgZiUS0QeJki4yKodI+Z7/8+GcD2P8
eP7nvTzn3bvUeo/DtUalUtWvfvi3sTnim8xsKNLORdm3MaHI2BzwdeYrbS3k
3im2hLgjviclqF8fRP1KKfyjHx4vg1v6kHdVwNt74YOV8OOn8IP98OkheJud
e4D9GeY2sTvkmCDqy3bkbwYx34lqrE8TgssdyHtpvQMHkO8gjzXK9xfxfW9S
+p4bz78gT7pR30NedmO+8Cjmi5DjRlEPUP5XEOs30Hj2EXic5ls3jHwbOWkI
41nI6YPIz9B6wy+RLycn9sPvD8GF5/H8tLT/LeIzF+qNUn9nmeYIfLcK+as2
5KP74NFdqHdbudWiN0fuKLufKfciC2fAqaXIt+nhjTSePx1WlyE/o8N+9OWo
N+lQv1ahdHel0l+q8PwEucSGenu6/PyoRase41urkT9J6zPT+/9ggC9Tv7zZ
2P+NWjxvo/0OHkbdYYRj6mCWC9uOwj074I9O7q9Mkwc/P476WzM8Qu+zpxi2
eOi8WTD/yims93YW1l9Xi3qbFvka+n34NcjbqL8zicj7d9N4Cci7C+QO+AIm
uU1svZF+v5uQF7Pgd0nI/8yAt2pQ79Rz/2b5KXKv1tOU7qH3L9LzudS/HLpf
AgXwJ5rPXIz52nPQP2cZ6rpcOv90PheycX4bKmCDgTtWnN9L5yON+mPB/h6l
YLxz+ajrk9Hfs/R+W+OR76LzcyaWe4VdlPaXwEIq7iXWl4y6Z0mQ8vbN3NO+
f4vcf1kc9W9qQVD0f3Ze7rVsak5Z7w3DG5LgS69hJ/W35pWgWJ8lKEj7acqT
O8oelsg9y8LH6H6aEKT7RtsKX/iMfMctup+ignRfaQPYz5t45f0n/z/4D1P+
z7k=
                 "], CompressedData["
1:eJxd011IU3EYx/FT64VsG6F1Yrai9SIZBJERVBCrLgIJKaEIEYPt7EZSgyJI
5L+6qIvVhYyQKAoxmjTDIpdk2xlEFiGhF4UgQhZE1C4KjF6Uojz/7xOc08Xh
8OH3/J/n2c45kVhbfWK+YRh75y7nvvXEV3vfeSu6bnJGPd8Ujzque4xLP3Aw
7/hsMjPruKLYJQ79Jv+Qp37/H8ev7B0FnauWeZbOm3Ay6nN7RhUWeHLVuAh/
k37Ti/F6sVqCD8t+ZUstPa/+Eef3+MmrHpJXBiy9764c8xsC1N99gFMB6jvu
U5+V+oP99BuRPH1H5gVxXQ9u/t/LcXuG81UrsK8Pj4o/3aM+ZuIx2e+7yX4n
+X/Vr5XkL59SfzrEfrlhfFXc+4L6VCX1t8fIa8P0uzVO/7I15D2T8nz/+Y3X
tVNu1xQ/TtE/K3nHW/LN2gP2snf0z64mbxCXwm7P9VuFZ+V8ewh/HsKpS7xP
5jM8eJ33qXPU8c7kmV7yxnHykX5svJfz+bjet3xa5j0hTxsJl2uK24JeR0IJ
3T9uU388Qn4kF9e/70a14yF1oI+8sIW8vNvrwbTbE+rmKc5vX0t+8Sj5hoW4
dTfzX5fY14zwfV2R51eqoN4a8Ppyxm1fcfia45+q2yT3d5L7w/jQBXxM9/9i
x87hro3k7u//Lzn27+4=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbZDzee+5rSkOSrd/1mVJJzsY5Fzey3QGmf9575EH
IP7HujuaEL7IF4j8ATcIv4U1Fcw/kgDh2/BB+FMqUPkGfaj8P9NBfON9q7hB
/J115+ZD5NvYIPLLloL4m/cmMYL4lvV1qyHyb35B3bcOwlf5jMw33mdyH00e
7J+ddZPmQPhfdkLkH1VA/KuyCsK/FQl13yIIX8IBlT9HG5n/sW6HGojPvO/s
Yoj8GSWI/PtlEP4NeRBfeJ8g1PwnMhA+23rU8EUOfwAugcL+
                 "], CompressedData["
1:eJxV008ow2Ecx/H5c5nSDjv4k8tIK5TVtIy0JbVMoYkkDuyPkT9JyKbnJ4eF
XCgH86dcSIumGf3agTloCTtMSQ6Skzlq1tTvh6fPc3h2WOvV+/s8v6ffH83Q
pM2Zq1Ao9P8/+q8b+5IaW5zm8pcMsVrtZt4FLup3Kd5JLZLkInp6BD3pp1bL
r0vURiF5Rq2Xt3ZYj2K+8oJ3SEpdZffrGNaHL+G1B/S2CNzziOu/nbPzPWHe
FuSdIXuHvEXyvQnP32H+2QenzjFv8cBT+9QlQnicOiHFV9HzXeiqabjODle4
2fkHqfNkrwt+6Ie7ndTPROzF/KkDPdCN+1nowPV2begROxxr550hNdZs15mw
/9AwtVIIGNCDE+jrOjwPeYY6R5irQj8i6KNadp5l3mrZuME7JHXtYH0nW/97
gF6mg4uO4QU95j/D1B/EZ0T3RtEbmtn5b9j9asL7UcT6rQHOEWFPLXteJ/CP
Fv1+m/qH+EtxXtUK20+NedMs74SUdmf3jgHYXwxbutj+Gra+Fe6r5t9/pXBb
n/090O/jD8XBkoI=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbZDz+e/qrFQHpds/66Kykh0Mci7/NW8G8SXrr+VC
+EbTIXyTMhD/8985yyDqS5pB/M1/2baB+Jb1WyZA5HfvBfF31t2Zi8z/Wfdm
FSp/xXqI/sl7IOpzNkPknXdB5C22gfjG/z5vh5jPshMi370FIp+1C8Ln3oDK
37wcmb/5b/N8iPnftkHkq6dD5Pk2QPxX3A8xX20lRN6yA8KPWAjhn22EqF8y
A6L+bxXEvII+iPz0Uoj8mhYIf3YhhB9RDeIL/8vOB/Fv1sVAw086FxKemwog
fOTwBwDUrst6
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxd088v22EcB/D+wHShmX5L68vztdpCtahVp0JRi5iIGBJLs+GwloODJZMI
l6eJkwiJP2AcXIiIyLLDDk4Oi4i4OO42DmYLo2Oq1Po87+fwdIfv4ZX3+/v5
fr/P83wd7973DRt1Op0+dbWmLkPqcg7GiPp3OFj6LU5rguEg84VrhHv0lvmA
fHDD5iSzom0Lf7pH/7vwa32E9w2V8I0hwnML91S0O0N2nPZlpuV0yRTh88Mu
9JtykGeWo+/JxfyVJ+g7zPBVMTxrRv/CIt7/f1sxf9mO+dX5yN0lsKUAni9D
v8AGn1VhvmrH87a98L4dedZz9L2FsBqAJ1TmWm2zDf2hYuQ73chPNOSrr2TH
yGwP+p3CY73IHxL4iwJnNbH1N2oh8X0bfuZDMpPH/IOO+7A/HXnI+2vRz+Y2
Rf1e5MePYPWZ7DhNemSf0+UqzA/x+/XRRTfyevH8swqcF7uCfqsT+WerWP9y
OMcmW9Emi9LzZgccFvOHnPL7xwj1wC8bcf+0WP+bF8hHG+CxTnitBT5qh099
WJ/6OnhBnMd1l7DY/+BT2MfO19s4HSiEv4r1PFHg9geyD8muQbZR20uy/ytB
H+ej35XA/zZnY06QX5fM17SyCHkgxnxH3zhkp86jK90TfD9+ki1uU/Ra7N/W
H+Qf/XDoErm1Ac8rvYJ/B5DL//8/1QWhjw==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0z1IQlEYBmD7GbJRHfqRQBfBhAolMojEJTCIEAoL74UyJaIobCjNzg0C
CYQgohJBGyVcFEuQgqggwspFiCQixElxCwKloQ7vGY7D5fLwfuecj/OjWVy3
u1tlMpnx/6N/7dC34JjzWLQfdWKzuSy8Oz3UZaHmps6S6h5ylYS8GqFWir9n
1GapekltFDMplt+h3vrCOy0o3przr0+Mv7qFL8rIJ6/hzQrWL2VYfzXU25O8
6yQW550lPyfwaQn1xSCsYP1M+OHDDHW3dLVGXRBq58jbPcgNB7DJBVt2Wf8L
1G1ieAfOO2Gvn7pIsg7U533IEzPYT70P60XtyN+34acp3nVisDXbNI75pQC1
XEoMI3/dR340iPPoDVG3SFt65I/HyFd0rJ8ob6U4G+edFjZSGD/NxqtvkKsH
YdM9HDCivuOZukKCZuRhdr6jVtb/B9uvMdwPE8tzw3BfHvYPsPN6gBs65NUk
dYNEetCvIcbmU6LeGeJdEFSkOV/1wpEueGmZza9h40V4vp+//3IpN9L8Huj7
+AN8LGdH
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQrWT4OfZEfZqD0u2fdVFZyQ5KhpdjQ2aA+JL113Ih
fP81EL5JGYj/OXbnboj6kmYQf3Os8mkQ37J+ywSI/I1LIP7Oujtzkfk/696s
QuWvWA/Rv+EiRH3OZoh8wnmIvMU2EN84TuAsxHyWnRD5FSch8lm7IHyNo6j8
C3uQ+ZtjF2yBmP9tG0R+xhqIPN8GiP8mLIGYr7YSIh82F8KPWAjhv5oGUb9k
BkS91ASIeQV9EPktXRD5NS0Q/o42CD+iGsQXjutoAfFv1sVAw8+iCRKemwog
fOTwBwA6q7e2
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvV7pYrWbbLqD0u2fdXwuyQ4IPmd9mg2EzycPkd9m
CuHPU4Lw/+lD+HpqEL6bFoRvpQPhZ6lD+IdMkPkfq7+5IfMFa8oiIPbdgZrv
lAmRPxAEkeeqhPCf5ELk3zWA+Jb109qR+T/rrs1HlW9aDuJPrF5RD+LvrLu9
FiIvUwtR/3ATxPwJVRD1z7dD+BmlUPftgqhfkovMn1jtE4XM31g9zR1i/rdV
EPVNptDw7AHxD1ZHqYL4kvVZBcjhC+RHIPMh4Q8AYWS2DA==
                 "], CompressedData["
1:eJxd1F1IU2EYB/DNgnTlciaWixZbNmWtD+cys9CxrAvrIkSCvBix5jbESgyk
POusnC0awzZXhqUjlCIXKS0DMyisiCKINroI6yIU7ONitKjoGGN5zv+5OKeL
MX78n72fz16t/URjS45MJmte/PDf47oEY2hzWXQfOPbb9FHLuE7lUXRKveIM
74fs2BPeCWbbOeRVj5CHfLx3eqOTcPt55OYJ1L/1w3/uwtZBuJXjHWZmBZ9m
r/1F3jCEPJSBu8gHsnCMnCt3CH46hN8HcsTm2OQSaZ7MdQjrm6P5fi9HvvE6
6mvzHcJ6XANC7vUr4VQ/csNK1E9FxFZ54mGpk5cwvprq1b3IF2g8exDjzyhR
rw7AMSXqrRfofP53EWy7Ah8vxu/nb2O+VAnymWm6Pw0ceAYvXQcbyD/VsCUK
N13G+Zro/oZrcD/xHthfjfttEJznjVShfsGH/JUZ9THBX9msCXm3D/X2CrE5
9sdWsdOszYjxD9N8+Qbky6h/suUY/wGdR7oMNl6k8ylDfVtAbJWnoFfsMGOO
YL4pGv/9APLmCtRPUv/Yt9P/YQSO7kL9m1FYWQ9rxuAvdfCpO9TvVP/uFvZf
QON9vMFb7lVsQR6i+ef1yAeD1I9qOt+zdJ+rqP87xQ4z1pPS3NgOx4pg9zHq
z2LU17vJJcjjLbx/sUGN2Bx7UC/193K40Inz026Gk07kc3TffS7c/03qlwk3
9p+qRV7divrHe7Ge50eQ63fwTjPuQxjftAn1pftRP6vlfY/5VLfo1xzbtwZ5
f6V0//v0UneslTqjgl+uhj/nwT3r4YQctlA/vcg4hfUZKsXmWOseqTts9H4p
qH+64MYNcOFV7K9mN97T4ftwd5P4vZW+x/8AOb2YsQ==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvV7pYrRrdIaD0u2fdcsqkh0QfMn6awUQfmEMhD8r
C8I/GQdR/ykVwt+ZBOE7xYH4G6PPZ0L4WVEQee4SZL5gjHI9qjxHJ8T8BYkQ
/q6JEHkeqP05s0B8y/qKOgj/6DyIfEIfKv/IfGT+zjqRFSD+xOjfcyD6Z66D
yKfPhKgP3gxxz+WpEPW8OyDqyydA3bcLoj64E5k/Mbq5Gpm/MTqpAKL/9SaI
+g/pEPm3i0H8j9F18RD7309BDl/L+qY2ZD4k/AHtarvE
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvV7pYvTZhAwHpds/67IuJDmsV9oYPTMfmT8x+kE1
iH+zjukKiH8xelErRN7oNogvGJPSD+JL1ic9gsi7TgHxX9Z9e4XM/1n37gsy
n7O+6Q9E/86JIP7HukdMyWD5hT0Q9XwcyWD5p50Q/iUuiHw12P6/dSd4Ifzk
eoj8B4FksHu9q0D873UlwhD5DYUQeRFxCH9SKoR/QRrCL4mE8HsUksH+Lw+C
8F8pQeRnB6Dy431R+eLuEH6HHIR/2BbCPyIK4eebQPgMUPce1YfwBZhR+V++
JyHxJesNnkP4r80g4b/sNoRv7gpRH3YVwl/tAw2vS5D4uxuKHH+o8QsAFO7p
zA==
                 "], CompressedData["
1:eJxt1F9IU1EcB/CtjAJBENqgHsqkUWJyIUhaK7ulzcD+jE0sPdeKayttiNIf
HwrOrHwZFCL2B8o0rJsl1cxGtragMQSlDHrQWJLVw4rCh5b4cKuHOvueh3Oi
h3H58P2dc373nLuzSm/x+hdYLBbv3x97hgvfkNHljWrhtEnb53RV9MffzJOk
fgWzNTi+qCGbX3Qgd+Uxp8jzdcw/6QM78yfi2Mg8T+0rUT9aifq2NcwJYlQw
Z2hbEept2+HOYtTbVNQnSlBvK8P6cwrPtzB/pTPrRZv0XKmc97tgQ4U7tsn9
rN3JnCHzVczLgrNVyJNe/v4eWNHgnH2on/Yxp6iljvkRebwL+eYDqB9xw08b
0H9gK7w0wNd3Yb2ek6JN6mkXHaUF3dgfpZzZGUz2I1/I+3OG0c/bQ6gPx9CP
cgL5twTqc0Oyz1ySXdQLb3rB9+8O/C4OWx/Cp6PM+drAMDz4BPniCHwsAu+Y
+L8HB+DmZ6LztQ0xvN/UbfhlDHk5f18lDmf6mLtIN3ffDb5fcYyvuSbapPYr
oqO07Czm/x7B/k+1IncbqJ85jPl7LuN8P+9HHuvg++WFbx2XnWyVndOC8VYf
fKQZucI9FsD69T6c13gT8iGeNx3l32c1HPKLzhBTx/w1fL3oQeTDe+BaDfPn
8e/5Xh2+/1eVok06WyH7rop+9jaiXnMiv34e+RIF+zPSi//jhdX8fO8z/6Ie
m2iTVlv/8Q89O95voP+SNO4b4yryDyk9ez7pEPrveo3ccYrv7xjsrxWdIA63
nKdLMT53gs9fjHz3JB9fgPU734v3XYre/CLff+w+/AOb5WQ4
                 "], CompressedData["
1:eJxd1FtIk2EYB/A5LSPFslIyRNkHqQvqokIYRoxMcHaaM4JEE4xwLmLQQUrk
i7owDSp2MS/2zspDuoVtzA7TodNRlO0i0ougI0kUNXNkIjmoae/+T/B+XYzx
43ne5/B9L5+m3mo6oVapVFV/f/zfK02y9IJGvfQ2JkdCx/Veycd2FoqeZElF
cDf5DHkd+TP58jicp+Uelj+MiY7JBeRoEeJSkHuOjdD5Y6OIt5HfjMATWfCq
sxTPgc+3wAMS6n2/Btdthd91wl065JcPwJ/KuHUXHwS4bexqpXLfjhrRNna9
XmltA7xA+zRY4LTEvJnOO6dgzRDie63o13dfdEx2eJSOuuA+Ol/SC1uo/qXb
8Dbq/8yJfo/+zedAXF0r2sayjyqdewTPx8+Qv+Ew4pWdqJduwrwzN5HfZIQn
qL/pEPK/dsMrD8DGfuS37odzXfDsPjhI+5WQi93o114Be9z0Pg00L7m3XHSm
01Uq2sbO7cI++T3IT9uBeLsd97lLi/nnr+C+FWvg3ReQH6b7ZGlE/CDdtxd1
sHEt92s5uwr5L1cjvqeU5k3l/iZv13FPs5Zk7jk5sgVxfdyM+hvhJx+VfroE
R9q4Q6w1CfucvgFH1ZjXYEd+PBn9rQ70y1iBfPstur/kcI/omJzRr4xP3aX7
loL6D+/RPGrk+73wFxXyh32Yp+MP5g0MIv5qUemKX6KnWe2COXHeQfE184hX
D6Je6Ic50X9Tws9ZfBbxsI/midDz+t9+uOknPDWEfs2/Uc8TQP2TqdjPTd8T
w3rs9ziI+1GYj/3ej+N9mzcrvwfi93EZkaCKSQ==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3ehwwOvjj0wHpds/6yQWJDsg+Jb1Cish/NvfIPyj
6yH89Z8g6tm3QPjN70D8nXWeO0B8Bu/SlxD5rF0Q+dbHqPyn55D5C7x274bo
P7AKIs++CiKf0w3ib/CqngXi36y7kQ+R3zoJ6t4IVL6OCypfxQqi/+EUCP+6
EUTeciaE76oHsX/iXAh/syZE/vMiqPvUIfz4lcj8B17xe1Dl14P987JuiRmE
7/8A6r5QEL/Ba/cHCP9MAXL47qw704nMh4Q/ANdrweA=
                 "], CompressedData["
1:eJxVlWtIk1EYx7fySisMybSGbrNyVlaGky4sti4SrybilwgUSluxfTEtFLuc
132yT2VGBkWpFWEOpbxg3uZCRCLCGq2yIC1bNymSZbrUzPP+n+B9P4zx4/8/
57mc55xXX1CUa1ukUqkKFn7832nxCP3v7RbD2yD79qjQ4rRUCLXjSjYHOG8X
S/s4e4Qb09AvdEE/NwP+0QHunQOXtsGfPw9edx98QOWQ+E4T+GoI+Fg3eHUo
5072u4ezKvMicYgbeiAU/io34h0Mc0j5afvA1nD4SyjfBxHwVxN3xjtk9XkE
f4KSL+uwvoW4Xwd9N3FAh3heD+KNE2s80F3k/+lG/om0X04vuJfiRfTAX04c
2439TMTGLvifUr7eh/BbiWM6wENLwLtOYf0Tqf44sdkG/YjU32GmPQS+pIb/
fDb8E7M4H88O6PV/OKvFks1yDrKbG+U8wbzrwXEz8DuTwZG0n8sIDs7C70tC
Pfq/0B1J0J3zSq6n+fjPI1K+E+wx8c7F0CuN8vlRi/uSsb85DP7DlF8Knf/r
DeAz1K+STai/UoP12VRvy1LouVvAs8vALBWcEQVu3Ar2Lef8lWnTwPeiob8w
gdvpPButYNMamjcz4k/GIN+aFOSfq4HuNMCfRffDpYU/g/rri4H/9i+6r9Hw
F36Xc4Xg+iJnVWa4n+7vCvjLPoBfxsL/eQQcr4Ve+47zJEvXyXlBX6vkRjr/
MlqfSv1LoveldRv4FcUzWRFP/GiX+pe3H3rCJ+hGms+xMbs0v0cFcOIo50jR
v5fm4w3Nmxn1Xfdhv+J06PohzN8JOt/iQfgbaH5sbs5z7KxU36jQ0c55mrWt
gn68Cf6clZzrhKm7nKeYhvo3UKfs//Nrcn4mDFQp9YZKcFQs+LQIzqP+ZpUp
8zOdRD2ONDkH2a09ch5m3nx6n5hdem8M5eCiGvirr9D71Iz33NCKegYH5e+9
8nvwDz/rxjA=
                 "], CompressedData["
1:eJxd1F1IU2EYB/Cxi90qlYpCoRGKEF7IEKObYbY0py5lQ80P2ErGAjNB2dXR
mhfyeiF4oeIkxirxcyzS7OMkmhG78GNqSUskFQqRLsIGNRHxvOf/IOf1Yhx+
/J/3eZ9zzruT4XhYcV+v0+lKlB+/PjbNsb0Et+nyZlzaDztMgpdhV4rWb1ji
Rbgqgnw7HTauc8ssdAVO3OCeZZ4s7qj0+zvq87ORh3fgWA3s7nMqjjBjLfdb
6ZyPO8SOVF9rb37qVOstdajv9HP72VAd6gcCyD+R855rHZfqX4j58Ch8tRb5
2gR8VAXvBuFFG3wQwjxpd+DDl8h/3dY6wnqLtQ4xaxH2O6D69FvUn+r/3MT9
rakOs2Ah6seovuYGPR9yrIA8A+c9gafmYb0X/jaP5zPoRX8X5ceU35tD3ubF
fpZZ7m1mIL+TUR+k/sH38KAHvtQPf+xA/wA9/4IuuHEcTuvRzq/rbvMhd8tw
2QidL5ovMK11B8tdEB1dwvqFD6jv/4q8dRr9bFuYP2sSuXEHeYtftL1H9PEj
rN/7wp3abrAjt8rIm65j/9gzODkD+QSj+c7DnmbRhQ9E/2jk/ifVX4CLncjN
SfCrBu7/Uk4yzof1rmKf8n5T6PzY6f2mwpmVNE8CzttwOd2fHuvNpXB+HP83
gwWW/zrU/HMR7tf1E3kmnc+yLdFNm6IrNrTro1LSuth/ZtWhzmMuR//qCOpf
21DvXkG9vUH83pz67PdI8Qk+aUNn
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ3ehwoGvLviwHpds/6671Jjsg829NBfEbug7thfBN
5kDk7+2G8J8sAPEZuo12gPg7616shKgP2wiRz1oHUe+1HJW/ah4yv6HLdSpE
v/oqiLx0N0R+4UIQf0HXxwYQ37JeeiZEXqwCIn+pG8LvKoDwj1VC+HbZIP7N
OqksEP9Bl3saRH5bJER+aSKEP8sDxL/QxRwL4deZQ+Q3RYH4H+uKdJH5P+vK
tJD5jPVBqhD+8hgQ/29duyKEPzEBol5UHsKvTgHxf9ctloH4RysT6n9piPy8
PGT+g66qFmR+Q9eO6RD36GlC1EesgPrHBcJ32A7xr1MscvzdrFtUihqfoPgF
AI9T7SE=
                 "], CompressedData["
1:eJxd1X1IE2EcB/BTCEsc1kqns2RaWdtKzZnpNBpqhblI84V0RuVLkpamhrqZ
d5qINcqEME1BrUzLyt4IDc0sguBG9KdIEEEELQLbUGLiS96+v+CuP8b48P09
v+e5u+eeC8kvP1rkyTBMxcpP+G80TPKKoFJD6GcX+9On0CCxXPBXPmkzrN+A
/ItasJlL8YN/hCNX+MNOnTtnv5PTY+H7CnhVAupPBsDrUpGPB8GaDNi6CU7L
RD1Prs7C/N7Bght4UzZyTTDyZYkZW8sx1GfT+NQc9I/eKLaLfa+EvbRwZVWB
20f0gl+xPVb44wHBcVxrN9yYhvrEAdh8CvXPRwvc65NV0P18i3wvJ7WsWWzG
9siK8asnkSvbkCePo9/ldszfMIp8XyfyiWdSLw1KPXAP42c64L47dH3kXz2Y
/8lNOLYbnqH5nB2o921HrmyHUy7Ch+LhK3WC13B8LMbbLYLtbH4M8jMW1Muj
sR67GfXvdiF/YEY+FCE1v1NsBzukRX+1BZZrkKvrUO+pRn+1e30enHMb8lv1
yEvIZk5sxpbTJM3tLbD/v/7X4DJaX1EbXW8UxlfR/QvWI8/opX77YV0/PW8D
6jO66fnp4A83sF4VzXed5lu7BXnLpRWb5lljIPLyGuq3Hj54VmzGpisWu4Gf
zYeb/VBvPQGPBaBelQc7gpCX5gqeY9tUYrvYzjCxHWzydriJ8ik1/IKcroW/
kW07sJ54E8aXhSMfM9F5EwnX19J+60H961q8H8pe5HPk0D54K+2XqNtwlhn7
N5H2+znKc+9KbekXO47rGsR8jbWw9xDtv2rajw+Rv7yA+a2Pke+upOc9TPul
XGzGtnhamg/nYfwwva8JdJ7EdMF8EuafuFrgPo9T4+AFFvmbSNT/Pk/3VwP7
FAvu42vCBE+zI8eR19F57shEP04lOJDTGgU/5ceU2M9Le1AfIaf1BtDznC2R
WKGj/TUP15BbF9B/hL4HzkXkU5T7L2N9f5BzeobO32jUGz3EdrFGT6nHvQrd
4w9HoX7RG/k0fY98ffD9KtKif4gM/rQF9SWy/753K/V/AewLSkg=
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, CompressedData["
1:eJxt0ksoRFEYB/B7TR5TYzFiarKaps6kFFfGY8GwsBCSEZqacobmcsZCmsTk
UeymWcjKwoJbJEs2EjZkgZQplJI8mjIjFqJJFtxz/3dxlMVZ/Pr+ffc73z2u
gVF/2CJJkqwfRT85+qmNN9PUfrjpcjJNlGrWJHqrjttFAxluqyc2zB2iNVZV
9wkZTyA/7VSN/LrGPUcPy7g3ydWO2U+BJ85Fp0niUTTzfH9wy/StHC6wRIy6
5EZ+2xYx+hcZ32Mk6IgY83gLUVdKkWc/YcEhyt5EK1S7hz+LkbdfwzMF3F20
4SJs9Ndk1DdOUXdmMW/nMZx6hn0H8EKGu5VGj+CpfPTLnsOL5nxnt3CSYL6V
F9heBce/zf3XIh+3qYJlOuf661gVbFWQH/PBu27si7XDzIF6yo/9ufJEp8nD
OxNc5gndwZ9t+H/aKVzSiLxm/l9vJfLaGmwvUo33kpyHN5/M/fvh/nr1j7tb
RMt0r4P7hqx2o75kzjfbi/cV7eP+IsEA6q9BuIfCuYPmfUfM+wzBFQxe7lL/
fe/cv6piTTY=
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJ1IGYCYvNOx4RqhWSHrD0lk29wFziYdzImfAfzTSZ3
gPmNCbaKIP4WYR8w3zHBF8wvEVaGqo8F802Ef3FB5FMh8pPnovF5kfhXKl6q
bTTIR+I/VPNVzweb904Zwg9WhMgzaELUH5bLB7tHSA/Ef6pmLANR32kO4a+V
gprnClFviM4XgfCf3k3CzgerV0w4+SYJbN5XMD8xoekbiP9WjUcWol7gN0R9
mQJE/bz/IP5HtQfKUPMYIe731EbmA/1rhso3fIbKX/gaYp8alP/0PUR+xX+I
fX8/QezT+gfhi36DqH/7C8Jf+B2i/uNXVP7WT6j85ncgfqbazm8QfvRLiPzL
LxC+8ROwvLrkZxA/MCHxPkS94Ueoe29Bw+s9Gv8rhO8uh5yeUNMXALKXC+o=

                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxd1F1Ik1EYB/CtZbCELgorsS5mddYHkbuQ0YekRYVXsUFZSHBeS9dGcw4b
ZAtRYtCSGItWDC8komLJGLuYNkYs0LFi6Ir1YS2RslHrwxQSUW/au/8jnHXx
Xvz4P+e85z3neY+mxWZsVSkUCmXhaSo8qwqP3t3AI+0X699cyTOdo71e7zbw
oEN0A//RLXuR6ezwpZuUm+EZn+w5ppNg/wDl52DrY9FK/vap6F4+kpD9me0+
j3r9OPItNtQPvpP9ga1zIs99lP2Sld8QnWcb7opWa+89wPyO93BXCLnvFeqj
UXh+VHaAqVN436kw8nAGecQnWuIVd0pz122MD5DLvMj9K7lH9i6tu2gNT9xC
vUR5og/1GnIrWTeB+knaT/MU8uUQ5gt/g+Mx5Oo5+HqS5l+i+cbgyBqb4Dwr
2yjazPzbbMXvT7xAPrsXuSsOr621Fffz2BC8/RDy4UHaj8NwdkC0hme8pe50
wcEDqI9dhR/WwFOX4do9snXcQ/2ZqkaeMsGmTfCyBA9vlt3IVSZ8T4bG8w7k
lQdRv74bdh/HekZpvxcNsL+f1tuEem9QtJKPPRfdy5+k8b5mI+p3Uj+GTqD+
0ddirlXVIc/laXxNqaPVos1aM51PNIfzriqHpUnUpxWYPzCB811YQv+efQ1b
/+L87Unqp9/w1gxc8R3/R9cn1Fd+oX6dRl6XRZ6Yxft3jFM/LaDe80x0njkD
otXapBfjV8/g/pi+hvxIltZvwXp7iv32k8XOoN/TK/t9EvX7+kQbeNxZmv+i
860ywkMW+M9puOcCPNJM65NwX81z0XnmavsvL95vjdzegvvnqBW5m+azdcje
z++34fv6O+n/t5Ten+L9+g+Pzmu/
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 160.043625, 221.44349999999997`}, {160.043625, 
                 225.49086328124997`}, {157.17692578125, 
                 221.44349999999997`}, {160.043625, 221.44349999999997`}}, {{
                 156.668625, 221.44349999999997`}, {160.420822265625, 
                 226.74037499999997`}, {160.981125, 226.74037499999997`}, {
                 160.981125, 221.44349999999997`}, {162.199875, 
                 221.44349999999997`}, {162.199875, 220.64662499999997`}, {
                 160.981125, 220.64662499999997`}, {160.981125, 
                 218.63099999999997`}, {160.043625, 218.63099999999997`}, {
                 160.043625, 220.64662499999997`}, {156.668625, 
                 220.64662499999997`}, {156.668625, 221.44349999999997`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJ1IGYCYvNOx4RqhjyHKxUv1Taa5zuYdzImfAfzM9UE
wfzGBFtGMF99hhmI75jgywhR72YGUR8LkVf7YgqRT4XKW6PxpU1Q+RsD8pD4
D9V83fPA5r1jhvCDHSHyDJwQ9Yft8sDuEeID8Z+qGdtA1HeKQ/hrraDmqULU
G6LzTSD8p3tzsfPB6hUTTp7JBZv3FcxPTGi6BuK/VeOxhagXuA1RX+YAUT/v
Poj/Ue2BM9S8h7lg93t6I/OB/g1D5Ruy5aPwF3Lng+1Tg/Kf8kPkV9yH8P8K
5YPt07oH4YuKQdS/vQXVLw5R//EqKn/rJVR+87lccHztFIPwo09C5F+KQPjG
R8Dy6pLCIH5gQuJ+iHpDQah7d0Hdz4/GF4Xw3f/lIqUn1PQFAJ4dBuY=
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxV1F9IU1EcB/C1iJhpLGe1/mLhwyCCGwztQeIihhRFpctkNlhba7GUubHN
dcuGOdPwT9KxtnINJkFhPRxqRIU9FIOC1lt/pATRiPChHnopIqHd+/0J5z7c
hw/f386f3zk7OzzBZt9Kg8GwovSdKH3G0pcpVHOnPywHpiMsvblLzhRs/GNA
dLUUDaq+yNJWuDZKeRX8W1EdZ2mzZl5MUL4WftIn2sADw6JlPn9ddZflxjrU
b0lpuWV0I+qPT6jusAxsQx6+o/o0W1UjOsJMu0Qn2ds9GP/5BDxdh/xgGvWz
9bCize9gyf2Yb2oQ+cwB5J8V0RIvU/R5w3n8/j35chx5kfyqW/U4K2g284UY
6jnlC9TPMfIjsvUQ6n9SP/NHkC8NYLyZFnhuBHmyDX7JML7kovFuwk6v6Agz
nhNtZ8UQ9u8ZR///xGj91+B+Bf3cOQRXXkL+pZ/6kYB/JESb+WJc72dhuLUH
9a5OuDkOB+n+3Y6qtvImup++EPJvXvgxrX/JDbd3qK7hvV7sZxG/l6SzyIcx
n2QKwo192nqk5f7/G8T6ij203iGM/+aKaAM/MyZalj6kMN/uqxi/iu7jJ218
g9QyqTrPeqlfv+4ib4vrfTIkOs/stL/ZSZz3iA/mWdT73ViPI4PzveCCH6bh
WifqnzL6v7XCo7fgMgfOsz6L+vJjdN455NnDyD33MX9lE92XB6h/vU90hL2w
i06yrzb0x3gP70doO/qTo/7416M/snbfosxVjv5/X+73aoyXioq28blOXS7F
6HwrTHC7D+5eA8seeL6C1ufGe6WYRUdYg0Wf/63Cfdp7Snt/WG4D8kYar057
D7fyo17s790m5Eaf7v3Uva//AfFtkiY=
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{253.245, 235.26300000000003`}, {253.245, 
                233.01899999999998`}, {251.42599999999993`, 231.201}, {
                249.182, 231.201}, {246.938, 231.201}, {245.12, 
                233.01899999999998`}, {245.12, 235.26300000000003`}, {245.12, 
                237.50599999999997`}, {246.938, 239.32599999999994`}, {
                249.182, 239.32599999999994`}, {251.42599999999993`, 
                239.32599999999994`}, {253.245, 237.50599999999997`}, {
                253.245, 235.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{287.24500000000006`, 182.26299999999998`}, {
                287.24500000000006`, 180.019}, {285.42599999999993`, 
                178.20100000000002`}, {283.18199999999996`, 
                178.20100000000002`}, {280.93800000000005`, 
                178.20100000000002`}, {279.11999999999995`, 180.019}, {
                279.11999999999995`, 182.26299999999998`}, {
                279.11999999999995`, 184.50699999999998`}, {
                280.93800000000005`, 186.32600000000002`}, {
                283.18199999999996`, 186.32600000000002`}, {
                285.42599999999993`, 186.32600000000002`}, {
                287.24500000000006`, 184.50699999999998`}, {
                287.24500000000006`, 182.26299999999998`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{327.245, 220.26300000000003`}, {327.245, 
                218.01899999999998`}, {325.42599999999993`, 216.201}, {
                323.182, 216.201}, {320.938, 216.201}, {319.11999999999995`, 
                218.01899999999998`}, {319.11999999999995`, 
                220.26300000000003`}, {319.11999999999995`, 
                222.50599999999997`}, {320.938, 224.32599999999994`}, {
                323.182, 224.32599999999994`}, {325.42599999999993`, 
                224.32599999999994`}, {327.245, 222.50599999999997`}, {
                327.245, 220.26300000000003`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{296.24500000000006`, 246.26300000000003`}, {
                296.24500000000006`, 244.01899999999998`}, {
                294.42599999999993`, 242.201}, {292.18199999999996`, 
                242.201}, {289.93800000000005`, 242.201}, {
                288.11999999999995`, 244.01899999999998`}, {
                288.11999999999995`, 246.26300000000003`}, {
                288.11999999999995`, 248.50599999999997`}, {
                289.93800000000005`, 250.32599999999994`}, {
                292.18199999999996`, 250.32599999999994`}, {
                294.42599999999993`, 250.32599999999994`}, {
                296.24500000000006`, 248.50599999999997`}, {
                296.24500000000006`, 246.26300000000003`}}}]}, {
               RGBColor[
               0.024604722168000026`, 0.03147120849600005, 
                0.032234097167999964`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{292.18199999999996`, 246.26300000000003`}, {323.182, 
                220.26300000000003`}, {249.182, 235.26300000000003`}, {
                292.18199999999996`, 246.26300000000003`}, {
                283.18199999999996`, 182.26299999999998`}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}}}, CompressedData["
1:eJxd1F9IU1EAx/GlTyampIhlbNqCTIRMPIj9cxjUg0vDgoaCQa0/iDOM2EPM
u+qhpxpBLW0VmkQxIdcMcdM1nYphfxQkopSkoKBGBvaH0iLb2fc+3PVwHz78
fufcc8+59+YfPll7NFmn062IXebYlRS75h0Vom5ds2n97KISjRwxzTucYrdR
6+XStgLpcqd1SLpC7C0itwzQTy6WDirmPvK5LeSXfYne4E10XjuuzWd89Rm8
VUfeU4Mr39rifrlR2iD0z3E0k3xyXGuDiI4l+u6o9C/Fnk0/aZTclYu7RqR/
Ksf0+FTcP5TtRq0XlYxCrVOc1hLcGZH+pDhM+M8QfcsBbAlLv1ZKT0hvFmMh
6TXOj3Zy0yD902fJ8wK2+H40uaVrRHqfLb7/37rop/XST/HST/XRN6j7bfGS
F/bi751al4mrHVrvEb9vMf9atb/pJvmSX3qXOOhh/hnVO9txt189Tzf9xv/d
L71N9FzH+gD3891mvD9I/919cmOI580cYD3uMPnFYfLP6vtnjuCCYex5bNO8
rwbRMMH4xhE8+gS3ROhPPKW/HJ//kJh6xnouhehnTdJPCtBvn6LfoD5f0wty
1w286hXjCy9gZYZ+SQvzLc2q+23lfvY3nP/cPvpf58iry3D2Bzy9g+9vZoH3
p66K7+3eX/Ir9fRbU/leWpvp78/Bx8+Rh/V43JVozzWtg8p5D/6SS17agauz
8YM7uCcDF3Wr552Gi32JDj3Uutz5vp/1V6aTVw2Sr1yNFx6x/uks3Das9nO0
/6PE/9U/2EZEYQ==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV018oQ1EcB/BZXqy9eUG05mU1yopkShspGfkzOyVhYzasZkpRa92r1G3y
gJWXxZKXKYkHppsHzQuWfw+K5YXyJ/dVqe0FZ9/zcO7D7fbp+zvn/Dp/jOMh
p0+r0Wjq/z/6fw/ayHX7jL36OSc4HF47b52fuo54+qllQVlEHg0gV+LUbjK7
RG0VlSNqkZi3WJ5GfeqE969LSqvzgSuMPz6Dq+6Qd53Cnw9Y/zXF+ntEvfOQ
d05IJHnLws8GrLtBfVaCJdZPRxjW7lCXi8dBagPxrCAv9iPfnoMbvPDRFOt/
jLqX6Cfh22H4w0edFeRB1Lf5kO8R7GdiAuttOZF3M1/28M4JtQ61G2yY/7uw
Xom414i8NYR83YLzWJ2nLhIXzMibReQBE+tnmbebZGK8f11vmxjfx8avJZFX
WuDdfThSj/pIivpLkKzI9efIm9tY/xdsv1pwP3bZ+Wca4ZgMh+vYeR3AeRPy
0UI/eSFegX63Wf9KKerv53kbSHRanb+MwPEy+GmAzW9k4zvhoRr+/peImSb1
e6Dv4w9p0YMr
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/TTXPtQmO89B6fbPuqisZIenufKhJ5pBfMn6a7kQ
/uHpEL5JGYhvH6q7HKK+pBnE/x8yfRuIb1m/ZQJE3mcfiL+z7s5cZP7Pujer
UPkr1kP0q+yFqM/ZDJG/sgsib7ENxK8PbdkBMZ9lJ0ReZitEPmsXhD9nAyrf
ZQUy/3+IyAKI+d+2QeR5ZkDk+TZA/McyAWK+2kqI/KkOCD9iIYQf1wRRv2QG
RH1fNcS8gj6IvEYZRH5NC4SvUwThR1SD+PGhf/JB/Jt1MdDwW5MLCc9NBRA+
cvgDAPmvvlo=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxd1F1IU2EYB/CTCRWOZQYaKtpGdSGStUqzYo6iLwiW2ZeaG+UC9WIDOS9p
yBmOog+KINrNahkq6cQms4/pqLkoSrzowuiidFJ3OUdYUXBgedrZ/wne08V7
8eN5zvNxzssxnHMdO79cEIRl6VOXPlnpE7fVMM9Wl8U4I0uJl82WuK2UDZl4
17AL2+Be8jw5j9y4HfbE4DsZj0tzE7xlaRPZQXFjVLWdmShue4H4EtX/9Bw2
G+CVIsU3wB1dsHEz6iVvwh92wrN+uGA/8g8Nw/W1qqvdTyKqFVFo0u6ra+Gt
iNlOrXva4V+0T5zBOZl53ayoEzaMIR65iH4PH/OWJV9Q62+DcDE9v7sf/kz1
ux/A/dT/7T30K/83nw/xjhbeinjDofXts3g/4bvIv25HvNaPep4mzLtwH/nJ
RniS+k82IP9rL9x1Gj46gPzUKbh4EG4mR2m/0Em4MoB+ygk4GKDvSU6QC4/z
drMSK29FXDiIfUr7kN9tRvyaF/e5YAfm/3kF9224HDZ3It+yEfltrYi/Xg+/
s8NvilR/lPLrkH8gH/G9+2jetarnJVO1aiv7oVf9XUqUIf5sFdVfB+9KOjXe
k0P7XFVdwVI67NN+C3boMe9hL/LF1ch3+dDvUi7yvT10f9fAU328ZUk/oI1P
D9F9y0X9p49oHj3ywyPwGZpnPIR5dLRPZBTxI9lax7J4W9l7Ac/7KH55Cfs3
jKJeVcqZ6V+YcRUTZcSnQjTPb3pf/zsMJ//A02Pot7gC+wQjqP8lDw7Q/2Si
BPO9iuJ++MswXzyG7z23Rfs/4P+PfwF/fX7k
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxt1E9Ik3Ecx/GZl3boFFLTGZX5S8VkSSEV1RCNLtI/IkEPoUhsIBPCQyTP
o4ULCrcsShMqL2Y5SEt0UyxKL1JW5MwFQZfA3B6COgTlpfbb+wvtgQ7P4cXn
8/x+v+fZd8+2psDJllyHw5GTvmrS17r05eo4roqDAe/2T7+N0I5m7z/nmKFi
7Xq1VxxV5Kel7yzRPqraM/5hNJSST0h/sgznXaGfX47PRPD0KE6E/u/8cdbf
HNaeMg5OkA+EyYsmOZ/7uvY+0xnV9qrmXvw9Sj9wk/7HGD41SN74XNujToyw
/tgcue8J/aV57TbVFaP/6w39XbP0Pyfot76lH1zBx97jihT9iPhpinzLovYF
o9DCDxfJA+LKeCY3X1rsPxcnT0nesJRtjwp/YL0R8bll7vdL/8sy/TLJDyfw
ETlfe4L7O5L0uyVfWGX/W+Sme5V+j7jpqzy/9O/J819cwP5nuM6ye0PS/nvH
5+3+NoQdu7XPqjrxiwpyY4h565N56nxA3i3zdmmY+TtfwnmrHsn+O8nvR7Ld
pqzH9vzaOB6Q9cwpvObB1ox20vDvwaOZeXCa+w/g169kvVoceSeuxn/k/QQP
cb6CWXxbnu9yDHcW4aoxXFMo+w/j9ZuYd+egzMNG8t5+u1037Pb14Lt5uOsq
znXhO/J/9bmzvwc/jeqt2eZ78RcuRM4f
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0z9IAlEcB3ALwe6IFApLCcOE7I+UnWLaH7IWwSJECipqKKshilwikLhr
CIeGoMFFKNoihKgjI2uItrBoa4imaJCkqCEUDaTefd/wHI7jw/f33vvx/pjn
14KLlSqVyvH/kf9xoHNh6mvN2/xSEP3+kJc1v0RsWvj8JU6J2a2Qd7y1Xt7h
w0qejRNb5ZKe2CNlz4l75BcLzW9Rb+5mnT/jXGW58O3B+OQN/NSPfOQavhoM
K+u/XmA+2xDqg6esC+LBEeuUmIvB932of47CHO3HF4F9LcQGKblKrJFzRuTq
JeR6LewMwYcc7X+OuEl+qIIfZ2CP4mcxNYn6jAZ5YoJYK8c0WG8/iHyF+m6M
dUG0+cvtHFTmF7zK+pyUcGF/MtXI9+zKeQi7OuIKaaMd49/qkC9baT8G1lY5
YWKdP7u0YHyAjq9pQ95oh402eNOB+m078bsY9SAfpefbOwx/uOl+DeB+GGme
dsFaAY500fOi8xetyNeVfopi3Ih+9fR8srWoP9Gx1sg8X5671HC8Afd7sYT7
XTTDsz/wdAd7/zkp7S5/D+R9/AGfJVAN
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQHaIhvukJV4GD0u2fdVFZyQ4hGuybtMRBfMn6a7lg
vpGGIoRvUgbiixvd1YCoL2kG8b8bTjIA8S3rt0wAy2/KMQHxd9bdmYvM/1n3
ZhUqf8V6sP6NN4wh6nM2Q+Q3GEHkLbaB+OabOgwh5rPshMhf0YfIZ+2C8Kfo
ovIzNJH53zcGqELM/7YNIu+jCJHn2wDxr4csxHy1lRD51ZIQfsRCCL9UDKJ+
yQyIel5hiHkFfRD5KAGI/JoWCD+GD8KPqAbx1Te58IL4N+tiIOG3SYYHEp6b
CiB85PAHAEHbpAE=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxV1n9M1HUcx3GIFgtq/WAmos3DmAxRO4d5YC25U8MgE0hCYCaBcHnZaYU0
Ar6H3fDqpqJwQIlKE8OVDQUiUzLvPq2trDXdWub4p82YC7d+zJKFI7vv9/l2
fb9/3B+Pvd7fz28+H1KrthXXxMXExMRGfx3R3x3R3wXbTNXn3J47b+wfLZRW
nfu//9Q2Z+BqF/nFhfjKSjy2WPLVeNweddpMde0pPLGEvHGN1Y8/bfVNw3f7
hsWj+eSrb39foPtX7ZLevm2WKnhGd6zPZifPXEu97VH8eiE+mKk7SV0pZD42
8boi8vMLqD8lPmB4tppbjD0LqO8QF0t90nNmz1V96635pRLGNysTn3ie/Jis
X6CU8Ty2mO+Hy8j7s8izNuKpJ3THK/8m/OBK/OVm/FsR9de34r1bzL6seT04
R/KUV/FXHtzejIu24ISg7nQ17Zb1C5F/U4vXHMLdNTi537Cr1RhPju/qcdxe
TT4ygHurdJ/W/IOM/3Kl7P8Q7TlfMPs+tWmj1X0VtJ8v9ffKeiUMsn7uUpx/
Eh8poT/PCeq/kP3yDMj5vb2/n+Ba6e/IKOObU0l/wbPGergOV+H7zzGfa7L+
S8NGvSvbTX8bIrRnl/WcEP/gMTtdNb1idrxq2Eb75WHqv91Ovpz+1cXX8LLP
yFvr5LzJfK7ukP3vxeNv4HlBvL8Z7+rR7VBTOxlv+Bi5rZX8grR3I0CeO8J8
jwZx4hmcsYf6JWfxQBvjL5XxJ7Vb518WMnsy0txltkNlvyvnS+qD7+E7w9T/
0UP/n9OfeuQQufe01SnDVp835uNwBQ/yvVfOZ2kP+V0fGu070w4w/sP9cr5l
PJ4P8GCX2ZORW53WvKST7zvEwzLfcfEDIfp39DNfdwf1J6W/EVmvQtmPFfvw
VsYX2dPG9/d8JOd3L3mn2CmOZ36qV/an4TjfzxcPSf7jbrMd6t93rE7cRX+1
R6mfbiH/vpP2fm9k/MsC5C81yHprVgebzM7xDb3Jet+S/NM69mNhI+7ysF9l
Tbi+Ut4jOb/hEpzow3X5eF0L78PXK+Q92sl74snGeW9RX76U+Z3zc/+eWcR8
3K3m+z66/gGzJyOTb1vzU0GcJ/e5T9YzVt6jPNmPUbnPr+9jPN7l2C/nI2WV
nNdu+XvIxS+HmE+CA/fs5z15X97bYWn/43TGlyX715JC/pdf2kuSv2fN6u8a
rV4r+/HLQ7hB7o+f5uCaet1/a+ttuHwH65cwH2+Q+2hqEa734hsV+MkK/HMG
93OTcV9Pa/ZU3C3vZ8Vs6tvkfn4xmfc4IO+5ewZ53LPW8ccVmGyPOs+cJ6uC
VbqntCqZ35j8P1Ns9DdDJRq+qU08LOfNyfhiUs3m/6P/AEILPYg=
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{266.3344268392812, 
                 155.05987499999998`}, {266.5036162924062, 
                 155.76299999999998`}, {269.1330108236562, 
                 155.76299999999998`}, {268.9638213705312, 
                 155.05987499999998`}, {266.3344268392812, 
                 155.05987499999998`}}, CompressedData["
1:eJxd0z1Mk0EcBvC24QVpbEta2tKihBITKGJBNLYKJC0DJJg4gBI+DAkfLsQg
BNKE5TpDTK6ExDiAg4ML4ODg6MDACHF2Imn5aEAlUu1b+ha4e/7D1aFpfnme
/u/eu7eBiTf9rywmkyl2/RHf+74s7z6YjTb80FlbdDIqHDLNSU8XhNN8hmwv
CmvJd+Qvl+h/Ig+ap2T/KzlvmZL5N+nFxLMy1Trr10py9qFSWKs6vJyV/a6b
MndEithfq03OdywVZM4CdqzXpsPLdswLnaM//b+r5fxk+T/MD7kx/2kednrg
goG+xwtvmbE/fw3W85TBuzWYH9HwPO0+ePsGHPcLu5M2G/pjt5D7nMgzdciX
SpzleSf6feTXLuTW2/AKPU95lzh/g+//gT+HhU/5ovQxm3+I+xmm/MUD9B9L
VybC7ciDZP991Tortqo+Yx/vYf64tDmxfhf5d+r/CuJ9iZ2jH2tC7sjS+TfC
HX9Va8m5XGn+/AKepPmporr/LF+w4Dx6O/D7OJ1/vht5pgKe6YOXrXCqB26R
/WMWeQQb9D5uNpPp/qN34D2xv1GdvfTB7+l5My546KfqU+4/UW3w2ozwBat3
oz96hPytV1jnG2nhHGupRT6QEjbYSED19fvYXOq4vI8zvprC/eXo/lxp5Gth
eDyNvPoJ1tsh/+5Erv7/rwCIsPHQ
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQrcnyZJ19eKGD0u2fdRILkh0QfMt6hZUQvkkYhH90
PYQvFwJRz74FwucIAvF31nnuAPFZ1jf6Q+SzdkHkO31Q+ZZOyPwr65ZYQPQf
WAWRP6UPkc/pBvHvrGPRAPFv1t3Ih8grqkDdG4HK13FB5atYQfSbq0L4140g
8snqEL6rHsT+fk0If7MmRN5BB+o+dQi/TB+Z/2XdNwtUeTmwf17WLTGD8N95
Qd0XCuIfWacSDOGfKUAO3511ZzqR+ZDwBwCrzqyR
                 "], CompressedData["
1:eJxd1V9IU1EcB3CVERU+SOW25GI1Me/NvGtDR0bapg3E1JYZpm7m1BnNopSS
ijgXy7AniyhfhChJkFnXSsm/6QJforehpkQPwSSSDIvK9lDkvd/fw709jPHh
973nnN+5Z2e76s+XBxLi4uLq1z/Kt2CIyv1HWpyW9zG2/LrBKRhm5G6P3oEK
xblS27TiqJxciXrXOOo3T8JfR+C+KrhtGPlL1fDuZ/AK+fFTeIsPbpqAK1SP
sV+Tig2DXWTDFOphyt+ZwnzffVgfNw2frkW+lda74xTyd8lpQW1/UXnsPyc1
4/kXZL4Z9QKysxnzRcKY7yA5MYw6R/nVKax/IYjxPK/gPppv4yTyN8jmCYzn
J/PjyGeRI6PIfzoDG0dguQ7Ov4jnn6j9b5fkAOprXsWLjKuCb9cgf6sM+UP0
vsIHUDep7zNearVqHWMP9mr9jUX2wMcp3y7Abyk/wMOFVcjPZaCfdzRfMAP1
zmq9TTV6v6zB82/IjV7UO3nt+YmX3ALGX/IhX0fr+1CL/EIm3EH71Sqi/81+
PF+GfsWHftTL98HuepjZ4GVyyI7xnjco/sy4bLinEfXZHPgRvb+QC/54ls5b
HuZ3NWG93Vnq+q2rtL52C+ZboX4HODUvLtP+zhnRr/kEjbcV418+pvWMzB3V
2jBYXEq/32TkE0rgeTPy48VwKoe6UfVP5tip9Xo9Xe8Qvf/rZBv2T66m+2Vo
P2yn+XJcmG9DKfbPW4T6PK2Pp/M5WoLz21gML6jjb5KWDiPvKKL9yUN/99wY
r8WBemUB9vcCnWcpH/l+Oj+xXMV/2DW1vx9yb47i32w4BfWrNuQ9JsWzcoGo
eI0l0v4Jmfr9t/Jaf5GFNF1d7EmFk8xwRwrsxf6K54z69fm3oZ9gttYx1luo
9SKL+Oh+SsF9Y7kC/02n++8+3U923FeWIfQTytfff9r/g39gw6hD
                 "], CompressedData["
1:eJxd09FLU2EYBvBZw2htQjonsxksSFx/QKOiWHgRRRxBUEI0ZJsXrjJWVhT0
Tb0QPZqSjqnoYqBTONGudCJOcDC7mHG8cAnRnexCphchac6M9HzPe3GOF2P8
eN7zfO92zrG7n9e2nNHpdHdPPsq3Q58Vsq/8ris/8+xrlcel2DcE5/7Aae63
gelDxb+FomHY+g/59WHMV/9XnBEeI2fPCrw8f0HzrrNq51lCr8lZYyG3fJvy
3XNwhvZh5+EnZMMFLz/v6Udcf8eIvo1B5OUmL9+3eRDnN5gwPzYAiybMd37A
vETzrf3oS1NuFOm8ItjXDftO2wx39OD6ylLsmxJhmeyk89wWWKL99i3Y7y/+
b3ZUhj7HCObbrdgvTB6F5dAY5sVy9JWGkT+w8T45GEG/4TL6zJN0f8nBKa23
NNbXOKPolyjvjCK/xp0SVpEHpArkv8g5m9onfZfgZfI7K3yT7qfYh+dJpt8X
H8fz1Deh+Ebg9QxyfwR5OgZXz9D1ix6+78MYnZdE3j+ntr6mMaHx2noS/Z4l
Pi/vriCvm1Wcki+mFS+we5/RZ/+GvDiidXxI7R/s00t+vdBEfd31yL/Pw223
sM8XCbbY8X6Z6P7lSjC/N6B1b4/aO0K0S/EBi1iQ33+P3GiDt9/Aj3j/ptBO
73voKnL1+38MgqjEjg==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQrcnyxE9rQqGD0u2fdVnSyQ6aLFf8XGYj85/4LV0K
4n+su6MJ4fuuh8gfcIPwWXdA+EcSIPzEPRD+lApUvkEfKv/PdBCfxV9iN4i/
s+7cfIh8G9S8ZUtB/CN+X7aC+Jb1dash8js3Qd23DsK/ug6Zz+J/dwmqfOhs
iPmT5kD4tpMg8o8qIP4N7YLwb0VC3dcG4Us4oPLnaCPzP9btUAPx35zTbIfI
n1ECy5/b1QHh35AH8b+c84aa/0QGzPc71oMavsjhDwB3pLOZ
                 "], CompressedData["
1:eJxV018oQ1EcB/BhyvBAImNl87L8KWpLprD2IlPSoiTlX/YgJntR0r17WnmS
B6kt8qDUvEimlkbYg/awJ9LyJ/8yu3HsYalNiXO+5+Hs4Xb79P2de373/O41
TM47pvNVKpXp/6L3BvUrGb9ZsNbfZiS7fcoquthJfUcC99QhSfEg71KQKz7q
NDn4prbIyiG1+mu1wI38DPXXZaIjJFyZk7t2tG62PngKr+iQ9x3Drjo32//p
CM971KPesS86I23tig5J3+uwXIv6uBcO8356luCfQmqtHJyjviKBLN5P7UQe
JbB5Ch5M8vefoP4gnnc4Ngp/JqjjUmgY9f4E8r0hnGcvs1bedCDXc1/2i85I
zfZcm7vZ811ptp9G3mvD+fg/kK+1snm4bCnqPHmxEes30shnjLyfjOg0GfsV
HSGzbH558gBff16E89K1wrESeNmE+nZ2nknJa0GuqkLeYYO3q/m8O/F9xPj8
o23wRTm81MLnVQpnjcgbWD9ZyVeDfqO8f6UC9ZMp0VfkJJmbKy+wrxp+e4Cz
Bvg5Do80id+/Ro625/4P9P/4A4avgRU=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQrcny5N2MV4UOSrd/1kVlJTtoslx5d+8biC9Zfy0X
zM+7w1AE5puUgfhP8iZyFIHVlzSD+Efy3ARAfMv6LRPA8u8URED8nXV35iLz
f9a9WYXKX7EerP9djzBEfc5miHyKEETeYhuIz/LeRhBiPstOiHwHP0Q+axeE
78GLypfhROYfecfCCjH/2zaIPAMjRJ5vA8S/f/4Ugs1XWwmRj/8J4UcshPA1
v0HCZ8kMiPqDnwrB5hX0QeT5PkDk17RA+ALvIPyIahD/y7sfb0D8m3UxkPB7
d+E1JHw3FUD4yOEPAFTduMQ=
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxd0ztIW1EYB/DEWMGiGVpNND4wbcW3iVFMsI290dZHfKREbKFGBx+Lg8UH
isvJKIpbt6Iilj4GceggiHS0ONmhSyGDlfioCmrJ4lV7bM75f8NJhzP8+H/3
O+fe71x7/5vgkMlgMBjjyxdfSfH14SbKvzvHtAcRnTm1AU140w8P3wj/4Ndk
MxeO8Ydt8Jdb1FeTXxoHZX0j+SppUOZt0tPhzmTVOgveScjZUqpwjE34Ue9N
kznbakG9I132Z5Zm1NvN2O9rIzxnRr/Nejr//86Q/flbH/pXZqL/z2fwPQs8
S/tZrHBdO/rbsrDf+054Jwv9twKod2XDgS540iZsun33CvV9ucg/hpCf5CO3
9KqO8ple1PvJOuV38+D8p3CKV3z/Uz5C77fmFo7wFOljNl6D+Rx6kXdXo/6b
dGrY7UK+TrZVqdYZd6j+w1Yq0P9M2hheLEPeR/ufl+C+7NSj3leMfIHOO1wE
b2uqY5w3JOZ7z+EB6j/aqp4/yo0dcPNjPG96QfetAflUEB7xw9ZueL8J3gjg
+3hq4Tm6j6ulZJq/9ggOifvVo7NQNlxI73tyHz7wqI7wT7WqT/nnGuFrVpCJ
+t8u5PNW4SPukf/fJSvPQf6rUvgve21XHb+PpYmelPPY5QUOzO+S5rfsQL7g
hs8oz6jDfl1O+OIJcvX//wcVtij/
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV00soRFEYB/AhGxYsLDxyFAuTR5nMJKPksVFjiFsKmYXXhELGSDPpXMQk
5ZVQw5Ui0ixIRiYLmQ1Nkaw8VkYpU4iFmmHBmf9ZnLu43X79v3PO13lktQ9I
XbEajUb//7H/28st+WizVWQ/hqnJ1FEhOsHKHCDGbmYfDY0hv7IjD7mZg6Ry
nNkoh46Yv0jmHM/PUd+5JvqQmDdVuVK0jfHeMzhlF3nNKfy7h/WfjjHfgAf1
0oHoMN3YFe2j38tw4g7q712wmfdT7YRnFpjTZG8fs58Yp5DHWZE3O2BDB/w8
xPtvY34gSdzXrfCojfme+ppQn2dD7mnEft4NYj1FQr7PfVknOkwLTGobyqPz
KxPR9eJlTzH2J3cE+aIueh7KjZM5Rh7Jw/gcGXmvlvczKTpI3qdFH5KfWYyv
5+MblpBn6GDLCjyqR/2Fm/mVuozI5/n5llbBhVt8v8pwPyw8DxTD0jrsLOTn
tQpHtMhPov1EqDsd/Tbz/kPJqP90ivaTWrs6d/TD7lR4uIfPnwUPdsIt+eL9
j5cDJer3wN7HH5uNrB0=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/fbZJVn10iIHpds/66Kykh3ePjskm9sI4kvWX8sF
8+dmdUP4JmUg/qW58pMh6kuaQfxNc6/MAvEt67dMAMvLrp8H4u+suzMXmf+z
7s0qVP6K9WD9stJQ9TmbIfKf50DkLbaB+J9kT8+GmM+yEyIvPgsin7ULwr8+
HZW/ejIyf5Ps5H6I+d+2QeT7uyHyfBsg/u1uh5ivthIi/64Zwo9YCOHvaICo
XzIDoj6gFmJeQR9Efm4VRH5NC4Q/vwLCj6gG8R/JtpeD+DfrYiDhJxtfBgnP
TQUQPnL4AwA8NtVS
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQnXn/ku6zw0UOSrd/1vG5JDsg+Jz1aTYQ/qkjEPlt
phD+pGMQ/j99CD/qBITvpgXhJ5yG8LPUIfwl55H5j3T33UDmf9Ktewix7w7U
/CcvIfIHgiDyJz5C+E9yIfK7voL4lvXT2pH5P+uuzUeVb1oO4m/SFQfzd9bd
XguRv/gZov7hJoj53Z8g6p9vh/C/v4e6bxdEvegbZP4m3cxHyPxDunw3IeZ/
WwVRz3IBGp49IP4p3Q/HQXzJ+qwC5PAF8iOQ+ZDwBwBPDNCk
                 "], CompressedData["
1:eJxd1F1IU2EYB/CpK6bTFSVThx8tYsr0zfxofYGtT4K8GNJFeWExNXQXCTMI
uzi7ES+ii76giPJC8MY6QUukFlh5IZMugsWgtFiYxbZqzJVuZ5suz/t/gnO6
GOPH/znP+3XOa3YOdPTmazSazo2f/N8fCrCzP9z2nQuSEH3Tbe8PJdipuNpz
v2W/EJ68kh1gCyvIbS+R65OyD3hGn8OZJPLWSdQ/SsEpEe4pGOR2SbK9bJJ7
SLifQR6m/MYarNHC7Tm4nKzL6+HepcXz1/KVloRAgToP6GQnxH/jrep5Lgbz
Ud9WItsrrubx3DNi4GY+DXLrFvTbkXMrnGCV62o3rLl5fxPVO7LI09Tvcobn
nnkD6h1peMKA+iXaL9f/LoUTNP4lI56fKsR6YhXI9xgx32g1rCuDtVXwB8r/
mOBu2q8zd7C/n+j8xg7ifB6QR/bjfPu4Cz23bai3Uz7Xivpy7oiQa0aupXpn
k9KSkGhUelnoauD9xQHKS6w8F0/S+nN1vL9YJcHLtRjvI9lVi35DaaUT7HRW
aS/7vI7xfOjPGun8O5tQX0P74dwL+zfDo4dQby2CDcfhjmI4fBjOUZ6ielE3
yNe/lfo93SQ7z1O0G7mexv9uQX4zg/m2mZC/pu8tuh2+F1fay5Zi6vzcL3ii
FE7S9201or43Qq5AXhmWvSJcr1ZaEhwWteN1cHsY+2dm8GPKv9J5F0dw/uP0
vjyM4PxjbcjPR1E/fQLzGf+G3LJP9iK78gX9m+tRH5xH/aJZ9gxrCW74rSTc
KkdueKde/0W/2tkZlcUj07C/DLb54OEauH4KttP7ZJnE/KwtSkvC0WNqu7vg
PurnvAr/nIW33cX6LrzHfTr2DB4OKe9b9X38F6BXyBU=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnXn/0tynScUOSrd/1i2rSHZA8CXrrxVA+NXJEP6s
LAh/eQpE/adUCH9+GoTvFAfiH5qrlQXhZ0VB5D3ykfmf5l4pQZGXPV4JMX9B
IoSvUAeR54HYL1vZBOJb1lfUQcxb2gKRT+hD5R+Zj8zfWSeyAsTfNPdAM0T/
zHUQ+W+NEPXBmyHu0WmAqOfdAVFfVwt13y6I+jeVyPxNc1mKkfmHZEtyIfpf
b4K41zoTIv92MYj/SJYpFWL/+ynI4WtZ39SGzIeEPwBNo85w
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQnXn/0tyVqcUOSrd/1mVdSHLIvH9oLn8uMn+TrHEx
iH+zjukKiH9JVqQCIm90G8T/JPu1BsSXrE96BJafm1oP4r+s+/YKmf+z7t0X
ZD5nfdMfsP658nUg/se6R0zJYPnJ1RD1fBzJYHnTKgj/EhdEngFs/9+6E7wQ
/pcSiPwHARB/09yMIhD/e12JMFheVjoPIi8iDuHzZED4F6Qh/L+JEH6PQjLY
/3VxEP4rJYj5E2JR+Z+iUfnnIiD8DjkIXyUEwj8iCuFX+UP4DFD3qvpC+ALM
qPwv35OQ+JL1Bs8h/B0BkPBfdhvCvxcOUR92FcKfAXUP3yVI/BkmIMcfavwC
ABAb/cg=
                 "], CompressedData["
1:eJxt1F9IU1EcB/AtiopACnLQw7CimBGyCAqWFStXCWOx9r9ZRnctcitXVIY+
nM0YGDQauTQoj5pMCqEMqXAolEVgkj1EDrZQQ9AofHGy6lYPde73PJwbPYzL
h+/vnPM7596dDVLEEVyi0Wgcf3/sWTf9nvbuv2je+FEmsUXJLPrTb+YP9IKF
WRt9syyg5CurkVeWMGfpPSvzT/JQx5yn7iPMRaIrQ/3mo6hvMDCP0TYv8wJp
2IJ6mwdObkW9zY36kQrU21xYf9GIfNzJ/IVMbRctk6s71XlPJdzmhuP71P2U
VzPP0D01zOui81bk6Vq+fzvsD8BLvajfdoI5RzR+5pe0owb57lrUd/rgwQD6
/+GC14b5+k6s13FJtEzsMdEZsj6F88kr52OKvupBbuH9mfrRz6Mg6vuH0E++
HvnXEdSPNqodi6rtjcO7XvDzvwbnh+GqBNyUYS7Q9htw3zPkB5Nw6Ak8e/f/
7rsPN7aKLtDJVuwvm4bLU8ir+H793AtdzAM0wd1FkfemMN5zR7RMdO2iM2Rv
szK/fiiJ88+eV3L9XAvqp04p8+vXxPB+53wY332Fn5cDvlWvdvqcyvrXZzFe
64S/hZEbuQ1hrH/cifdlCCF/jJx+P8O/Txe8XOUZ+vw05vfw9cuCyAcOw5EA
5i/h3/NtCd//20OiZTJvUfuBGf2E6lB/zIR8Nd//CiPOvzOO/2NiE/LgdeZf
xF4qWiYu7T8uSMr4Ygv6r5jFfVPajHw6Jynvf0cT+r/5DvlEhJ/vKFw8KXqM
un3q/Kkd41eN8/mtyG0T8OUDWD85Kd53OdL9WX3/sfvwD08/pVU=
                 "], CompressedData["
1:eJxd1E1oE0EUB/DoQQtCDhbrB4K0hyoeRYQgIyW9mINg7c2DgsVD9FBQkQp1
/DgYK6inCEZbtbEfqe3WbJtssjhprLWNK+SwgrXbJmktalyD0Ihobrr7f8Ku
hxB+/F/evJkM03iq89jp9R6Pp/3vx/oOlnQWyJ1vaVqscfNlR0uwNM0KLuui
9Q3cT+4mbyYnyNeztpluO82LU07XeDNZpbwpY/kje0L5CYE8RDZewLuzcN0F
eOM03NUN359Fv8ptzFN9Cy/1wvU66g+Pwvs/WPZdmVQty6yu6Novu7PqtMxu
fXZZzJfhn9iPuGjCm+x5q2JLBW5Mod+nCtYbnHC6xiOS29+H4QbywadwF/W/
9hg2aP25h/Z6rO/ffBHkM6tOyyy/4nbbMs5HeYD6IyXkbb3oFyhi3m99qOcF
OEfrV5ZQX+6HZxfho0Oov0HeOYzz8pEz2J9YNuADMZxXiCzF0G872SSHF5yu
sq3zTsvi8jvsZ1cU/XN55D1h+z6Leg3z/wjhvhVfw4cuof8euk9ngsjNKTh/
Ej4rLC/whnbUP1OR+1tp3rTlr3yfz7LB1imW17i5F3nHJPXfBg8MuN2coP3c
tKyxDUns59xdWE1i3kAY9X4F9Z0RrKcpqA8/Qu5NwVrU6Rr3DrlzfQS+p6B/
YgweTKJeGYeTCdSn45jHS/tRZeRS3O3yc6cNsTaO30eQC01Cfty2JqJjWH+H
7TzzjyLX4jTPCJ3X/1ZgTv30FM7j6gT6SSr6/07BMbwn4ksG9a8yuB/vZzBf
IYv/+9ec+z1wvo9/ANaez0g=
                 "]}], 
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzZ4XPW23YYmD0u2fdRILkh0QfMt6hZUQ/gYDCP/o
egh/lh5EPfsWCL9FB8TfWee5A8SvnvZXEyKftQsiz6qOyt8qg8z3nqYgDNF/
YBVE3o0LIp/TDeIHT2tgAvFv1t3Ih8jP/VcMcW8EKl/HBZWvYgXRv/k/hH/d
CCJ/nxFivqsexH5uFgh/syZEfg8b1H3qEP4nTmR+9rQiYVT5WWD/vKxbYgbh
Z6lCwzMUxLeetkAXwj9TgBy+O+vOdCLzIeEPAJWnq5I=
                 "], CompressedData["
1:eJxdlV9Ik1EYxjcrtPRi9OdzxpfoUDc1Nee2ZlPTchgFIuaNqFAuB1pYbSaU
cYZdVBchpXUQgoJQqEkSKmhOt3kTdFWslCSEIrqwC1FQa4SV3/e8F+frQuTH
85z333m/s8zWy/VtCTqdrnX7T/mf2NnEs3K6Kk2f4+zHnKcysdPF9+Zr+Wuh
wqWB7ojCTfxBMfS+aej6EvDKJDjTBu6egH+NOOcVuN0OHnoJ7jsK9obA71V+
zTZnFO7he5zgnWHoZU7474eRr9OJ+uQI+Bv5fVTv41L4+4mfVov9NXG7W8v3
3Dg/RjxE+gniGTfyxaLIN0WcEoU+SP7VMOpvoHh1s+BM0pNm4P9L9RhDiLdE
bJmG/wVxbAp+D7E0Cc5zgSu6cN6i9psWGG2D7lfnucjkRnCyA/67tfCH6P6i
x6APWBXWB3xFIsfZk8Mir7FYHvgd+XtzwTUUb8QCjpTAP29GP2dpHzrM0HfY
tTzwH1sdOP+W+AvVf8ci7o8+4M5F/PNO+M9RfY10/5/ywTqal68Q/d924Xwt
+pXkMuj1R8BzxKwY7C0HB62IV1Ch8DKTbeDU49A/2sGH6L6DVeCWGtq3cuSf
rUS9vECtX7pE9fWakK+dvo8RWfVLXprvvIR+HxZRvH2Iv54vsosP5orcw9+Y
6fs9AD+j73/BCL8jG5wuQ+/PUniDOTJE3taztRyk+/9DXIz58QWKN+4Ej1I+
exXy3TJjfs2noNdbaP9pP21m7O+F0+AGNd7uwPdq+MdMNJ9y9GfIQLyrDugf
ZMz3Cu3zbyP8z2l/ru1XeIvdVPu7yNMNCv9iEwehbybDX5eq8BkeTlL4J0uh
+Q3v0s5/JEFkDx/e8ou6lBoHG4xg3Qa4GfOVllf9mvqWVvxqPx02kePs2UmR
F1mshd6ndb/63piug2/o6P17RO9TCt4r0zj6yUnTvn/i78E/ZbSOXQ==
                 "], CompressedData["
1:eJxd1F1IU2EYB/DhRd1ELdOFIIKBRDd5E2/FEEaSFosuHMwdP5adM2Wc0Uzx
Ay3OIILoKkHQclHDVNBK+jyj2qJRiBDUdDC0JVEwI/sg7MLWxWrv+T/FebsY
hx//533Oc96951TKnQ3tRRaLxVn48evmYDPbX9Pj2JXJaWvzskPwK3jDYXYj
e1kLe5LI7x+G96W4JRauh61p7ib2+wj3svblDerfHUU+/x6Oy7A6ohSssFaF
+5FWHOZ2sYThg6HT1xSj/pOC+vMRbifb7kP95XHkVWQ2YXZO806K+dQ0LFG/
xVtw4iT8YRbe0wav38E8yVb4113kepPZCtsi2MUCEu63TvUpD/WnersHz7do
+AQba0T9DNV/d9P+kON/HYW9ffCDBPyCvJTA/lj70d9P+aF+5L5nyPN9uN+x
p9wBNkd+HEP9GPWbfQIPdcEVo/BEL/qP0/77BuCOm3DyrHn+Myx/Drkag9WL
dL5ovpIhs+3s7Yhgvfoq1j+PG/X61gjy3odGP/3rDcy/+zb6rUwi746Idl8S
ne/CPNHr3GWhTW7kgWHkQTvmqbkA2yqRXxmk+XbAoVOis6pg/Z6fe0PzlsAf
O5DXlcLl7dw/tb02nI/P/P0IF/7fnejnovO4VAanvTTPNpw3G51PdxHWrzbD
B3J43+rIsR+ykU9JeF5/FnmazufxFdHBjOiGtHn9slaaEvtHF2RjntUW9JeS
qK9oQ736GvXffOL35p///x4V/AcnmwcZ
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzZ4XbTZ3SomD0u2fddd6kx2Q+bemgvjWZipQvskc
iLzRZAj/yQIQv9osZiKIv7PuxUqI+ne9EPmsdRD1LzpQ+TNakPnW257WQ/Sr
rwLLb7tQBZFfuBDE9962uxTEt6yXngnR71cIkb/UDeF35EL4xyoh/EdZIP7N
OqksED97W1oGRH5bJMR80TQIf5YHiJ+87UgyhF9nDtE/JwnE/1hXpIvM/1lX
poXMZ6wPUoWYNw2s/29duyKE350KUS8qD+E3pIP4v+sWy4D9Y3YjE+p/aYh5
k3KQ+dlmDeXIfGsz+UaIe/Q0IerzO6H+cYHwH0+A+NcpFjn+btYtKkWNT1D8
AgDhr9UI
                 "], CompressedData["
1:eJxd1WtIU2EYB/ApwWwohuW9hkqYl7Iy8TIjRDSo9qEyjqAJpZY0wewiXRZn
leUHCelLWLNM7WItUopAI5UcpTlrYtHRrmpmLJvpVhZbbstz/k9wTh9Efvyf
933evec9540s3L99j7dMJjsw/8f/l5flc2bj4Yyodw520rc4Q+IA3qXc5x5Y
tUTImUQT72O6TYFw23PkwUHw+gEhZydgrnQQvhUMZ79C/a4QuP8t8o5wjB/+
CFcvg0tHUG8iu0fQX6Hknc6VjyKPU2I+o8RarmoM9QzGcxaYTVoqtoN9Egb3
mOCDh4oEa17yfsjWV8O3h3mn6Wrq4MoPqM+8CXsmUH+/vUhYX98U7Wc38rGf
Uvf9FlvLXHJivM9jIWe2upBndQjzMXJZhdD/ZDvGF3pVCHnXPandzVLfvIH1
qMgNTcgnZbC1XujP6cmpdbCK+tlrUW/yYD1hF+CSH/DmdFgueKHOlIrxbXbe
X9nCZORH7KgPSMJ6UuyoN65FHky5YbXUplVi21hDPObPJQfEIR+ieu9YzJ8r
rMdLZ1+B3J/2X0P2SKzlpn9J8xQHHPRv/j9wGa2vwkW/NxHjT9D+KVXIrQtg
TTa8Uw5PZqDe6k3Pbx0c7cF6I6ifYg79Fi1HXsWvL9/JqkORO2fo/CyG934T
W8u9t4idznR+gc8G4nz5TMCPQnD+csZhWzjmO/qJ9yx7PkJsB3sxWmwbmxUD
n6F8KBa+TN4WDz8g96/E8xml8WUJyCOov2oNfMpG560e9Y02vB9hV5F3kqMa
4NdUn9gIT9nwvmbSeXdQnndN6uPXxU7T6ZvRr5KsMCCvpf023UF+ZRr9q+8i
L/hO56eFzotVbC3XbZHkjH4c41vwvjK76XuSrIdjhtC/61yR8D22DMJzLOZv
eoH6mXLaX/p++Zbw3sKxz3i/YdsKkMt66fnuwHynn/IO1cWreedwDUacZ3cK
6vO6aL0h9DxbpTab6Xw5YTe5Zg7zK+k+sLuQJwzQ++TB+jYg16lk+P5upHq1
l9gOVu0tdYe8WBi/z4x6lwJ5K91H/r64v2bpvor0gw29qNf4/Xffzdf/Bc3M
Q3o=
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, CompressedData["
1:eJxt0k8ow2EYB/DNLn7k4ChFc/gNJRE5qUn+HHYhXLggtJ+DsLVJlNw4iF8p
cdiS8qfkT8Om/FtLkj/LtlKSabTfm1I0rEn2/r7v4VUO7+HT8/S8z/u8j76j
r7FLp9FotMlTkjwpyePo2SaD6xZjwK6IJRbJyHvTTr1IinzUgmFomdorLQSo
z0TruZovHd4hfylMfSM9RqhXxOAn6r1HYVtGL2dFnMzjbTYkyqhlyf4Mp1ar
cWksjPwtU69af0K9zyy2tVB7yXyI9d+Keq4r3l5Sfsp7jTQcwbEm5Av78Eg9
9T7J3UN9ZxXiTS7Esyrg5S34KR92sHlNFVLvEs8mPFyHet878DTrr/sA9nej
v2sfnDkA+y7Y/G3Irwnxlsnxw19XKrDQj3z3K+zuVOdFyj9gcwvig3G8T1/L
WxHDpbwLDO05cCKG/3OmwemsvpP9b3YU+c4ILNxiX/wncPCYzX8G3nj569U3
3jK5V/u9FR0y4ibW3+isul/Ek6COi21ziNt+4GYHPK614r1rbP90cPEKfPn1
/75T/wKOc6AJ
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 295.04392499999994`, 182.44349999999997`}, {
                 295.04392499999994`, 186.49086328124997`}, {
                 292.17722578124994`, 182.44349999999997`}, {
                 295.04392499999994`, 182.44349999999997`}}, {{
                 291.66892499999994`, 182.44349999999997`}, {
                 295.42112226562494`, 187.74037499999997`}, {
                 295.98142499999994`, 187.74037499999997`}, {
                 295.98142499999994`, 182.44349999999997`}, {
                 297.20017499999994`, 182.44349999999997`}, {
                 297.20017499999994`, 181.64662499999997`}, {
                 295.98142499999994`, 181.64662499999997`}, {
                 295.98142499999994`, 179.63099999999997`}, {
                 295.04392499999994`, 179.63099999999997`}, {
                 295.04392499999994`, 181.64662499999997`}, {
                 291.66892499999994`, 181.64662499999997`}, {
                 291.66892499999994`, 182.44349999999997`}}}]}, {
               RGBColor[0.9372559, 1., 0.035155999999999965`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{174.96499999999997`, 
                113.13299999999998`}, {205.96500000000003`, 
                87.13319999999999}}}, CurveClosed -> {0}]}, {
               RGBColor[0.373047, 1., 0.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{132.965, 
                102.13299999999998`}, {175.96499999999997`, 
                113.13299999999998`}}}, CurveClosed -> {0}]}, {
               RGBColor[1., 0.007812000000000041, 0.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               FaceForm[
                RGBColor[
                0.024604722168000026`, 0.03147120849600005, 
                 0.032234097167999964`]], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{130.965, 
                102.13299999999998`}, {206.96500000000003`, 
                87.13319999999999}}}, CurveClosed -> {0}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{136.24499999999998`, 101.85199999999999`}, {
                136.24499999999998`, 99.6082}, {134.42600000000002`, 
                97.78909999999999}, {132.182, 97.78909999999999}, {
                129.93799999999996`, 97.78909999999999}, {128.11999999999998`,
                 99.6082}, {128.11999999999998`, 101.85199999999999`}, {
                128.11999999999998`, 104.09500000000001`}, {
                129.93799999999996`, 105.91399999999997`}, {132.182, 
                105.91399999999997`}, {134.42600000000002`, 
                105.91399999999997`}, {136.24499999999998`, 
                104.09500000000001`}, {136.24499999999998`, 
                101.85199999999999`}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{210.245, 86.85199999999999}, {210.245, 
                84.60820000000001}, {208.42599999999993`, 
                82.78909999999999}, {206.182, 82.78909999999999}, {
                203.93799999999996`, 82.78909999999999}, {202.11999999999998`,
                 84.60820000000001}, {202.11999999999998`, 
                86.85199999999999}, {202.11999999999998`, 89.0949}, {
                203.93799999999996`, 90.91409999999999}, {206.182, 
                90.91409999999999}, {208.42599999999993`, 
                90.91409999999999}, {210.245, 89.0949}, {210.245, 
                86.85199999999999}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{179.245, 112.85199999999998`}, {179.245, 110.608}, {
                177.426, 108.78899999999997`}, {175.18200000000002`, 
                108.78899999999997`}, {172.938, 108.78899999999997`}, {171.12,
                 110.608}, {171.12, 112.85199999999998`}, {171.12, 
                115.09499999999998`}, {172.938, 116.91399999999997`}, {
                175.18200000000002`, 116.91399999999997`}, {177.426, 
                116.91399999999997`}, {179.245, 115.09499999999998`}, {
                179.245, 112.85199999999998`}}}]}, {
               RGBColor[0.11718800000000007`, 0.23046900000000003`, 1.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               FaceForm[
                RGBColor[
                0.024604722168000026`, 0.03147120849600005, 
                 0.032234097167999964`]], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{174.96499999999997`, 
                113.13299999999998`}, {165.96499999999997`, 
                49.133199999999995`}}}, CurveClosed -> {0}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{170.245, 48.852}, {170.245, 46.6082}, {168.426, 
                44.78909999999999}, {166.18200000000002`, 
                44.78909999999999}, {163.938, 44.78909999999999}, {162.12, 
                46.6082}, {162.12, 48.852}, {162.12, 51.09609999999999}, {
                163.938, 52.91409999999999}, {166.18200000000002`, 
                52.91409999999999}, {168.426, 52.91409999999999}, {170.245, 
                51.09609999999999}, {170.245, 48.852}}}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd000oBGEcBvBN1BZKSpJxULs54LB2zDpoW4UUSpKLr1JINtpaqy17kI9W
UtLmtNn2YNPuuz7yEeXiQinlK+XoxMpF79oiW2b+z6tmHKbp1/PMzP+dd6Zy
eKp7JMdkMtnVQztHW4551j3oqrKZmZSSXQZf1qve4NYlclzaVCifPhH5pEN1
hre8kXckZ4NqJX1aMYQ81kD92269Fe4ZNeb5PvKONwRH5pBbPLB9lRx/6ISz
6+j3lxnMzu4desdnW2F/AP3QNeb3iHlyx+HxKnLSm6vZx63fWN/7RT3lW1ew
ew++PhTrj2l+5IF9uDEA23bJiVA/+qkkcksz3meUkZOH1cizCbig0GBW8yob
7F6T6f7tB5qDzNKB/OUceU+5TPsxf6O5jS282Sl/ehbz3sGpT70z/Ms8pLPC
a2n/2lhHCv3FOuSsFM87cgrXydQf6NIcTPwMIw+MIQ9vi/k94v5L1E8f/e1/
J7zcK/rF6PubhB9pnnSlpLmIhScw71ZGzK9gvrxbvX18+tiYWyNwuA8uWRGO
ietnhD/suu8/yKSBf/+D+n/8AtdMU9A=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvdB12+e7O+Mc1A051sx5aeqw0LXs89dXYP7aGlYz
MP+1UDyYn+MB4m/7vN8QzF+TswnEN/s8OQDMX5cjYw6W/xsP5q9a04rCX6Pz
DpXPI2IB1r82FqJex8gCLM8bCZHv8QDLf8kNgZj/Jg4iP9cXIi+TBeW7oPLf
GiPzzT73KkPMr/GDyNcKQ+RtxC3A/stlhpj/5z7EfT+/gP2/rmchhK/4AhI+
b6LNweobb4H5q3y4IPJbz0PkdfZAwmfvcQi/pxDE//Y59jCYv3qNJ1R+HyR8
Y2QgfOTwBwASF6Zo
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQPUF9m/GtL/EO6oYca2y2mzgg+B1r/lRC+Fk/IPI1
LhB+138If4+YicMJ4duSocwJYP6fF8ZgfiInhC9zCcJ/KYjM/y0pq4LMl5aa
a5oAtm+NK8S8TDeI/BkdU7C8YRiE/4bVDCwvGgfmr6u5jMJfUzPVHEX+ziUQ
f7bk+Rgwf9USVguwvHMURP0VXQuw+dvDIepZwiD8/iCo+7Ig6k97IfNnSxab
I/N3S+6F+GdVzTuI/SuFIPI230HuOy3ZyATmr5WRMkMKXyA/ytQBPfwBZtyP
FQ==
                 "], CompressedData["
1:eJxd1F9IU3EUB/CV0GpoCVZwt9vDnuzBpHWXzjlJM2npwmxFtI02l7kuM5sZ
kiUiSLIyZv+ohw2shyLbJfTBRqRP7cGgokUEa2tRBBXtwaA/DAe2/b4HuteH
MT6cs/M75/7Ort57+uCJ1SqVylH4FL8XKlJcxz5PY6VhrcTfNzUuVOi0BrvS
goP5oeVm0SnuyDHEhwKIxzzMj+ac8G0v4j0m5P89Dl9ZA4uDVN9rLjjMrTvP
/CDSb2bxPliyjcJ3yVXX4AS5dBL+Tr/nowpLrlll3PXBzPrTkIf+IG47h/w5
VT3rJzTAPJ3XwJvOUr/l9Sz/U0BunTbZq3Suh+bZgPwmP+KR9ah3SUT9SBny
m3wwX4p8sYvqaVbYDF88A1ta8fuyMZxn6UZ81STlh+CZO3B2GO4g9/TCvgvk
ulrmo3R/ab+R9ZvshPMOIzuvjzkodbUZWb6e4hsbkJ9g+xCMxqsRn4KltF7u
wv1slnshOpcTWP0Rqmf8KrB4Ne1PPCOw+ml6HofewfZumvcN8m/45NZpa/1y
hzlnAOdFsshfHqD70WO+j7Q/6SbYMEL70Y9+f4/R84/BLeO0j7fgySDt+wC8
NIr5bbtQr2S4aKvEqxGP0fn5l+j3mUjnnUR/evq/8TVwwi53mBMPKOP2/WQL
PNFKtiLf30L2IJ7cXfS3aNW43IX/3/MVzsB1zXh+b5fhXDPiX7Zhnid7cP+/
nJg31YL5LSHE3Xtpvjj25UcD4vn2ope4CQH1XYuo37aV7uNe0U859ZaCZ9SS
y4n4fLly/lMl/3218rGw46dbYWsGLj0M86/g7HV4cR5+8Rp+P+tm/fHbjTIX
+plW2nV5J/NnqpcWa1g/gyra9/ZaNl8nh/dpWjAxTxnk71vl+/gf7gb+Pg==

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfUL4dmTOjQQHdUOONX+izRyQ+GtrZCH8GTch/Dmv
TcH8D7ch6mOOQfgP7kP4dzpA/N2R355B+DJZEHmjj8h86SivP6jy+myJYPPP
LIbwH/KB+Wt0xCH2TxYH89f1dEH4b6Qh8mc4zVH4b6ag8FflXAfxZ0cqSUH0
T+G2AMv3iUHUpxhagN3zSwii3iTcAqx+Hm8i1H0Q9VVsyPzZkat+JCDxd0d2
vgXzV6noQdSLP4XIm2wD2f87cukdMH+di505cviuu3MKJbzB4Q8An/SaKA==

                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfUL4duSXuwkO6oYca2SkDB1OCO+OPPAGmT87kv0n
mL/6jhmIfzvyJFMiWD6mAMSXjurmAfPX3lkJkc8RBPE7Vte8Q+ZzrLGxM0KW
X3Onygis/wEfiH9i9Z21EPkTnFD11yHyPOxQ+95C5BeB7ddYw8NqDOZ3/YG4
10fOGOzeou8g/o/VOUYQ+evvIPI5/hD+zkdQ9aUQ/uxrEL7ObGOw/+edh/p/
HUT+0FlUftspVL7dEQifpxvCf7ULwn/jAuFP2wjhn/kHcf+bNVD716Pyc8JQ
+Gt9LkDCT2gLJPz/FEP4cYcg6mscIfxLJyF8G3VI/LFcRo4/1PgFACewwbs=

                 "], CompressedData["
1:eJx11F9IU1EcB/AlUYMGWUkFU+gf1HKp93rnZu1BYZDIJUJkcMVAJYNg0UPR
0xUCe/BhUYT0Bw1qRJj3THpYEG4rawaWl/7a/7VkrZB1Y2LQi1HtnO95uOeh
hzE+fH/33N8953fv1r7jHf0VDoejo/yj/zMbPmrWpZ6WnZKTmLLcIniA+rN2
ZoS6jVQ9Qp6IIb/hbCz7i1a4RV1JFJX6u6beoV4w9HONWG8a9fpL6lnNfEA9
Y+h51Afvw6GfqA+mUT+3UmH1wSTuf3ijgnySeshI7bHbSbLtYp49AZtp2Iop
Qj+ud9TLWvVj5rj3F/LiM/78NT7m8HvYOuBj9RUvmA3zCHVS+4DrCRlCfS4D
RxM+1v+FFBwpIbfu4n5kX5PdRL0ieNys97P9CU8xTxSIn+W7eX/DlQHWz59P
qA+dDLB+wovIq28GWL28qldwbJ3og2549DIc3M49AO+q5e6jdnc9refXq8jr
JO69cKT9P55D/8N+u91d3QHmCT0NL8GkMIb6cDPceZF6RJvknh5EbjXz648K
Jvp+weOpa01s/U0yc1yvwX4f24b6VNrH1s+sZzZ+H8J55VfwfuvgJ6UewcUf
omstzMcc99ki8lADXFrA+SckzM/iN37+CvLzBT6fAfh23u5lbcs81tc9yOez
yLtd8GnMazxYwjw/f4v5976220m890S7RhXWz6mvqCe9yB868PyutQrbnxyb
lzbiTeJ9jXioNxO11e7yvF+XRXtkdn0U+20oUxLezyp+nv0SOx/XapxP5xrk
6hLf31wDc/SN3bOamhFzVwLPv+MvbI4hV1qxXvQq9i80KNm/d4b5SjD7Hv4D
ABABLw==
                 "], CompressedData["
1:eJxTTMoPSmViYGAwBmIQfUL49szXCYkO6oYca2Remjig8I+bAvmnZ9bngvmr
ZOaZgeWXt0Hl88yB/N8z++eD+etk7CyAfOlZnjuh8ssswOqvXkbmz5659C6q
fNFTiP6SKRC+zWuIvEohhM/2EWL/FV8I//VniPoYSRT+mj2XzZH5q2rcIHzN
lxD1U85C3L8U6h6WTAhfcR+Yv7aEBcTfPbN+OUT+zTFTsPz+fgg/ZwOEf7kF
5n4Q//VM7WYI36YWwmdtAvNXT4mBqE9shPrHBRKeexsg9m3RhshnQ/k8vCj8
NTovTFD4ORNMwOYLge3vWKPiA5FP6IbIh0ibgONj3SQQ32NNyytjsHzkbKh7
L0H4iUuR+b9nvlyHzJ89k3knRL/PS4j69Ych8mvEIfYdPwnlG5mA1c++BHbP
6j9JEHntexD5OSug7n8MNb/NBJw+jsPi3xfC33gVql4Iol7zNJR/zRgsX7sD
xBdYMycb4t79MPebQdz3fhIyf/fM5a2o8v8roeZFQ/jf86H8ZVD9qVD+R2Ok
9N+xRiYWLT8A8wcAlnVMpw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfUL49szo9kQHdUOONXNemjqcEN498/l8MH9tDasZ
mP9oM4Sf4wHi357pcxiiPmcTiD975rZLYP66HBlzsHz2LTB/1ZpWFP4anXeo
fB4RC7B+55sQ9TpGFmD5z9cg8j0eIL70rMVXIOa/iYPIW1+EyMtkQfi7z6Dy
k48g82fPNN4DMb/GDyKvvQUibyNuAfaf8hqI+X/uQ9z3cgmE37MQwq+dB1H/
JtocrH7tdIh5PlwQefdJUP/tgYSPdx/U/YUg/u+Z0j1g/uo1nhD5052Q8IyR
gfCRwx8Ax46iJg==
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{144.55758374001562`, 
                 21.648875}, {144.72677319314062`, 22.352}, {
                 147.35616772439062`, 22.352}, {147.18697827126562`, 
                 21.648875}, {144.55758374001562`, 
                 21.648875}}, CompressedData["
1:eJxVlE1IVFEYhie9hsSV7EcoHJkmpAhmY3PH6ViBUEqiq9BcFBLabMJwMyBk
i5ZjA5VIi5ixIDPwzummaf7gQMPUoj/KTCJyWpQjZLoQYejHUZv7vUc4Z3G5
PLzv+b73nO9w3K0dZwN5DoejJvfZ/4Q2x5p/t1YfrijkzkfHqhNahD3Z3iZx
aVViF7FZHrZ5jt3YB91ogr/RRWyddkGfPAj93S+/yuMq824/rV89AE4FoF8q
A19o8FP/z/uFfhT6QInIdwj8sVjm0qoyXeYI8xQi/7UK+Dc06CfOwD+9Dfmz
LdCZQ+hdKmejClvxMdRnWG8GZ4SeD3/5CuqzAvhni3A+DOdrOt0K8+wRha3U
cfAi8ppaPbguD/5gM3hwk+ZnpdvAnWtinpfBIxmV93yXeY15PhCboyLfxnPo
6UY7/xSbHkL9vdFK5Bskfuz56pOZe3bKHOJ6n5HjJXaOE8f4KYP020/h1/MN
6v9mwuZXsfakl/q5kiLfAy/5b71XOfxF5gg7+cPmn7GHE9AHlqCPLnjp/Isy
qP9yt0H+Z+sibwPy9GE+fLkH/Hfr/t8Ds637dNWgegGabygWd4Pn/6Fe/Bv6
j6yKfBb6e9M27+DOFrG/WaFXwt+ZlHmK9Q7L/JYt9Nus8/RF+K/chR4cs/kT
y9zE/jQdeSe7cf7L12XO7bfEp3D7Hx+tP38H84++xnzvc7GfEO5z/wvo2Vrc
l3BKfi/U9+M/n8iOaw==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvePrrcjlwckO6oYca3SmmDgg83scQPxXkQ5hIL7H
Gp/fxmD5omiIfM4REP9X5JIEEF9jTU8vhG+fAZGXKYKody5C5u+KXN+GzJeK
Oj4DYv6ftxD13Ssg8nueQtzzeSuYv9pmlynEfXvA/HVzas2Q+Wvu6Jsj81fF
VEP47bshfJ8dEL77Toj6Nc9A/FmRj7dAzPOxswDz76+Bui/LAqzeeiEyf1ak
cB+qvHQNhH/mG8T84GxoeAqYg8OjGxJea9dYmKGE75oUUwf08AcA07OwqA==

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvePrrUjLxckO6oYca2SWWTjs+CoVJbgDmX8r8sgx
MH9VTiWEH3QeIs+jAOE/uA7mr1tzzBzMV78DlY9F5es8NkPh+/Cbge3rvwDm
r62xNwXLx++EyO8pNgHyZ0XmLwTxX6z+M98YyN8V+bAd6j4zY7D6rTmo/JnR
yPxXkU99QXy2NSJxUHlniDzLOhD/UaSvJYh/YvWXvxB5dROo+/JMUPg8/1H4
a8/chLh3vT3UvtUQ/+0Pg/D/FEH8H5wH9Y89KLx+RV5sRw1f5PAHANiBrWk=

                 "], CompressedData["
1:eJxd011Ik1EYB/C3OWkaeCVrzaFUoEOsXHsRe/dC00YNFASdGjKpzBJE/ABv
kpg3Ygqjqy46MgIpRPAgu9jFChGUCBG9ES9kiBcmKUuCiiDWEnfO/xHOvBjj
x/855zzn473aM9T6zKJpWkPuJ/6Tf1LMfvLUX+Wx8ea3ul/4h6dX2jVm5PyJ
Dd6GzVfCGbZMDr8xZP0e+eUs6k/IsUXkJV7puPkxzzy8kuf5pa+Y/xHWjyf+
Ir9wE/UBzSfnf1+N+u2L8K/rsOuSD/1fof6Lz9nwyfnfVVA/fuRVlXD4ATx9
g/bTAn/XMX+sE+st34HNbuQWk/bzGLbfo/H9ws4Z3kT7e4H8czv18xr5hw7V
KTbZSfuZhvsfUj4OJ5xwNiLuK81CtD8zJLzOJhzCUwu9Bu4z4EA+6kG9FTmf
cCM/uAzHKlTb+JJd9drCbgHmD8nxQZ747ZW5TusHvnnl+ZQ6Ub+9gzxeRv1v
wbZy1Rk2ei0/N9zwwU+465baf4qN1cHWEV2Oj5hn7w358wY6jzQ8dx8+3oTT
PpxPNAhH6T3WHGO9KN3/RhKule/LyvkTeJXO01UHN5aoXmdfilSn2VqhsINv
3EV90ELrtQnvs6Os+P40XjOMvD4j7OaxWdW593R4zhbR/xZLSk/xaCX2k/yH
nLfBoSzygT5drlf+H26OIFe//1NoHMhR
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvenkrZshdSkO6oYca3SmmDgg83scQPxXN982gPge
a3x+G4Pl5dsg8jlHQPxfNwO7QXyNNT29EP6bSRB5mSKI+g9zkPm7bsZsROZL
3So5DDH/z1uIeovLEPk9TyHuWfAAzF9ts8sU4r7nYP66ObVmyPw1d/TNkfmr
YqohfJNnEL7PDgj/y2OI+jXPQPxZNyfch5jnY2cB5vdch7ovywKs/sVpZP6s
mwd2oMqfWAbhn/kGMZ9hGjQ8BczB4WEBCa+1ayzMUMJ3TYqpA3r4AwBUkLtw

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvenkrZvPzqY4qBtyrJFZZuGw6aTUrX2PkPm3bhZ+
BPNX5VRC+P9/QuR5FCD8XqZUEH/dmmPmYP4VtlSIfCwqX+exGQrfh98MbJ/N
b7B5a2vsTcHyPE8g5u8pNgHyZ92UOQPiv1j9Z74xkL/rZt8mqPvMjMHqk6aj
8t3akPmvbk6qAPHZ1ojEQeXzIPIs60D8Rzd/JYP4J1Z/+QuRvxIHkffJM0Hh
8/xH4a89cxPi3pgsqH2rIf7LaYTw/xRB/M8wE+ofe1B4/bpZtwk1fJHDHwDN
27gx
                 "], CompressedData["
1:eJxd1F9IU1EcB/BRNqL2FEM6YwXF2qgMGXO7K241U+plEC5ZYZOWOaEY+dAy
ik0yNI1slTXB27U9KHtwlxVSWDF6ksh66A+jaIwhIj0I1mNlPtQ9319wTw8y
Pnx/53d+53i42zq6Q7E1JpPp2N8//Xd6rszUjljA5V6v2XP+wPTcCzZ7xugy
u9sJVybgtTE4koUvkisKXICnihnB2uptuJfyyqDuFRakvNiHfDNZTcEnQrBF
8iEPw8NXYPkU+tWZJe7vZ2FtAHb30Ppf8IVr3IV4XO+vMFtaPK9zzGiFbc2K
fj4BJ0ZR/yMHOy7pttm8U3DpOPJSHvutegRr6kbRchXz+Wj95DN4hfqXFPgl
7V+Tkvh+h//Ndx75yJjRCstlRGsjuJ/+BOon7yBv7UM/FfdRcKRRb74FW8ZR
v3CT7rMAj96Agx9QX0vWPsOpIfr/VlD/dhBOzmM/RpYXkcvXad6vcMOA0Tab
/6rRClt3GeeZfYT6B93IrU0Sf8/uLszf+cnH39urdrgYxftpo/dkX/DyvNpC
82Tg+SB3Plnv5fXRI/TeHzdg3mbdQ/lIVPcSswR0v87bv3l4/n4f9W+DW7eI
Dsvkqj7PG1Z7AOeJbJK4ew9iXmsjzpcOoL75nMT3e9iI+sQ95M5DsP2pYE1+
J+aRZXpvWF9I1OA9hrGf1m+Fe/aj/r7Dz+dx0nnUOuRdXtFlj9FLbNmN9epu
5Nl6yneiX8se7K+6dH9k6V10HztoHhd5+38OwWbqF2nHfhv2op8cR//fTXR/
SdR/OYr6xWF872ZOYr4n4/ge/Twtfg+M38c/augLng==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd028oA2EcB/BZkhcsvBk5pBZhb+ZuRi15sdiLebP2buPFisJF6l5SJmkv
pSUvLrXS0vbQ/CkpJSkeL6YwZ7zRUsukJKXEC3e/37O68+K6Pn1/99zvud9z
reEZ/5jZZDLx6qXdVw9P6frB2EC7o5JwRWHA4Aun6l1qPwUnuY0eyAOPLJ92
qc5T9yd4h+vvVV12+VU1jnmiF+oX2/WOUL/DmLf0gXekGLrYj7ltFr3vASez
w+j1IawPNRhMjm9deifnBtGKG+tjGezfz/opn0Bf1YK3pXLNcWr/wf29nTsh
F5/RYhq9kGP7T2i+pjkF7Z5H792BU7EQ1lvQxObB7zmZBW8fdGFez1xVbTCx
vwgGiysCrH9yrzlKbD7Mq58wDzQKMI9gQbOXLL3ykFe8s35v0JZvvfN0zTyu
c4SmYX5e4itifciKObHi+6Qm5m4B6r1tmqOp3zDmOTZfeYv172LrLwtwPqTS
/IfRox2svg7rlWZmhYe8E/qpIfIU9iuW+u/B/uSC3nEaeDDmJIOWg+jNM+YE
e/6I+YPXnf8o4Ub+/Q/q//EHMGJbyw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQPWn7wRMct1Md1A051sx5aeowafvCE1M+g/lra1jN
wPx+9jQwP8cDxD944qcYmL8mZxOI33giWQ3MX5cjYw6Wl9AD81etaUXhr9F5
h8rnEbEA6/+gA1GvY2QBll+gBZHv8QDxGU8GaEDMfxMHkX+hApGXyYLwMxRQ
+QISyPzGEw/4IebX+EHkb0D8s8ZG3ALsvwv/wf5d9+c+xH3TfkD4PQshfK1P
kPB5E20OVh/1Gsxf5cMFkf/yFCKvswcSPj8eQvg9hSD+wxMn7oP5q9d4QuQr
7kLCN0YGwkcOfwAY76pz
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3bXi4Iu2ijQHdUOONTbbTRwQ/I41fyohfL8qiHyN
C4R/rxbC3yMG4ec1Qvh/XhiD+VXtEL7MJQifaQIy/+ELs0XIfMaX2zZD7Fvj
CjGv6QhE/oyOKVje6wqE/4bVDCyvdwfMX1dzGYW/pmaqOYr8nUsgfuOLF7fA
/FVLWC3A8jE3IOqv6FqAzb9wFaKeJQzCX3EB6r4siPonJ5D5jS96tiLzF764
BvHPqpp3EPsPQf1r8x3kvo0vZjWA+WtlpMyQwhfIjzJ1QA9/AFj5sSU=
                 "], CompressedData["
1:eJxd1F1IU2EYB/Bt2CxZZiIRcYpWkDcmxZaueSS7StbAkLpoWxHiXNkqyZAI
kbYiZMkgiSIaRUE22qFmEEXsws1F9smUkC5OK0PxbA2RMU1jVNv7fy7O8WKM
H//nPO/XOa++7VyrU6NSqWyFX/HfF4xKnW87mqp3rxa4IVOTL6hOWcaVtn5l
fsLfLDoqdYnIe7uQJ5LMTyN2OPwDuduE+oqf8IAW9v6m/m3mgj3StiXmYKDb
zHIfLFivwK/JNTfgNFl3H9Ys43kupLDgeKHMHd/MbH7babzeReTORdRHVA1s
Po9zzOF8GVybpflWNLD6P3Nyq1PZjNKVv2g961BvSyEPlKPfw1n0D6xFvW0G
5nSo99J+cWUrbIbvzcO8Bc/vKHGx8fgO5Js2u1Dvh99vgTN9cCfZfRa+TPvl
3lvPfJ7OTzxtZPPNfofzNiMbz8fcL7QfNLJ6M+VVjahPs/ehPxSvRR6DBVEv
d+F8Nsg9FoosG1j/O9TPOGtg+YEpOJ40sP4LtB+HJ2H3NO3PBOqFGbnVqUMp
uT3ShTmMF8igfuMCnY8e61ui90vcD1v+0vvRjfmWr8L+8S/h42tg3S34lRYe
6IGrNC62fus+9OPyxX7NAleKPJGj/f2E+YqzNN5JzM9M3xtXB6fH5fZI3s/K
3P2BzMPBMXIz6q+Okk8gz44ULYVqrstd+P7erXASbo1i/778gytjyKd3Yj0T
MZx/zo715kZx/rwf+cU3tL443peSCPJ8S9FTUnAY/R3z6N8+ROfxqOgH0ta7
BQ+XCg478km/cv3XPEo/71G68QzdH0fgaiecGYTXH4M/JmDtUcyP22WUuTCf
sNIO3x7cX9RPPFXHPNhHeUs9W9+l27hPRYOJOfZMft8q7+P/jDl4LA==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3bXi4InWbekO6oYca/5Emzkg8dfWyEL4G7dD+HNe
m4L5nLsg6mOOQfg/90L4dzpA/IUn+I9C+DJZEHnv88h8xpPJt1DlPZ5AzD+z
GML/9QYiryMOsX/NVzB/XU8XhM/6CyJ/htMchf9mCgp/Vc51EL/xhPUPiP4p
3BZg+eVfIOpTDC3A7hH+CFFvEm4BVr/9Ncx9EPWTnyDzG08cvobMX3hi0WmI
fhU9iHqDwxB5k20g+x+e2AcJr3UudubI4bvuzimU8AaHPwB1Rq+9
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ3bXi4AnePekO6oYca2SkDB26Viw8cfMUMr/xhMJ1
MH/1HTMQ/+CJRw8g8jEFID7jySWvwPy1d1ZC5Fvfg/gdq2veIfM51tjYGSHL
r7lTZQTW//MNiH9i9Z21EPmHz6Hqr0PkVZ9C7XsLkd8Ntl9jDQ+rMZi/+BZE
3kfOGOze7qsg/o/VOUYQ+Q9nIPI5/hD+pQNQ9aUQ/pYtEL7ObGOw/7evhfp/
HUT+9mpU/vwVqPzwRRA+TzeEzzwTwn/jAuGv74fwz/yDuJ+1G2r/elR+ThgK
f63PBUj4aU+ChP+fYgi/fAFEfY0jhP96OTS81CHxJ7sROf5Q4xcAAEzZTg==

                 "], CompressedData["
1:eJx11F9IU1EcB/AtG01cuIdSIX0IkhJWbfNO158HRwOjRg/i3uohaZUQ7KE/
EF2hEE0iECrKpVarZuY9WwiLIKdoOTqLGZULgoZhbVQgLBKSUVE753se7nno
YYwP398597ffOXcbO4JtgVUGg6Gt9GHfl0ZnqOnMsZbNDjNJO50tkruYk3T4
LPNesi6JfO488vvmxpJT9M9FZitRfMxvaOAq81dN7W/EfvdQr75lHqf528xU
Uz+h3j8Me5dR7x9EfWa1wuv9ITz/SJWCfIC5T0ts1dtMsvvkPHsSzg/CS3cV
qR/Le+ZF6nrAHbX9RF4WE7+/zsUdfAIvHXDx+g2PuLX0UeYwXcZ6QvpQvxKG
L8ddvH/tJnyigNx0A88ju5r0Jr6Q5LH09mY+n+At7liONPN8TxT116xu3k91
AvXeU27eT/AV8toRN6/fn5M9UZDdWYSHBmC/8TjcBXvKhTuYjakva+FaH/LW
SuGdcM+W/ziD/qPr9TamTldxx9RJuKIaeW4U9UHh9uvMF+i88Gw3clONWN8p
maitkscSd5r4/nYrd1Stw7x7DahPTLr4/tnvON/fh3Bevz6KeW2DP8/JLkvL
9r7E+ozwCEXutcPmFzj/uAP3pzwpzl9B/vCZuJ9uODWt9yLdMYX91QbkxafI
D1rgEO5rdHcB9/nbY9x/2zu9zcQ2JdsypPB++p+jnhxG/mFB5JUKn89KEe+j
bQLva88aNr8a4vPoXbrvYafsBidfH8G8NWXagffzB/afDTj4+dTn0X97BfLA
azHfBTt3JK73OA2E5bz+CtZv+gvne5ErHuwXOYf5ebsd+v87LT0vmf8f/gNw
vy6s
                 "], CompressedData["
1:eJxd1F9IU3EUB/Aplr+hL8Wgl70UqxFJI0yvDwMtowi2kmWsP1cdo0JsaMEV
QTbo1iRZooRaINMSzZb3NhNWM5oPRqHZgwykvQypYUYP6zUCg7q/7wnur4cx
Ppxzzzm/H4ff3mCX72qpxWI59/dn/McSS8yrtjc4jzDdPlPXEEtMsu7bZi+x
43fg/BScIsuP4ANRio/BbfBsZlSwvj0Euyiev2v4C/tN9TIq4h/I8QhsvQlX
SrWIK/BAL1yMoF7VTon7cT+s98GFEfr+F+yY5E6GQkZ9lX3UxfPm0marbG1R
dMdbWHmA/MR72NFjuMS6tQKv+xHvW0W/7WrBerxCtHsD832j76cXYI3qr4/B
XdS/LCLxfj//zdeJeOOC2Srzp0S3zON+ogryz88h3qyinvc55nUMIj+twZXj
yB+epftMwqcSsCeL/OWnsJ6DD5MzeeSHZ+DwZ/RbfULn30S8OE3zbsFfp8wu
sX6fMFtlrx7iPO/mkO8ZRNzWKPF9LmDfklc+1fJ96wnDmQD2p6Kb6hVqeHzo
Bs0zCt+/zq2FXTU8f9c12vcXRzFv0HC/JgcMZ9liq+EVzf6jmsfVi1T/ErzD
Lbr8MnnDmGeeLcs4j7xb4na1Yl7bMZyvvg35Jzok3u9sAPnKMOI5sv2lYN29
JsblIu0b6iWVMuxjOfrpURvspHlGHHV8ntwF2t8qxPc0i77nMzvLJprwffwQ
4k1nKH4Q9Uo96B93Gn7N6k/TfeyneU6S9/1nH5z20nvUgn5v/KjnDqG+HqT7
CyM/1on8zQG8d+29mC81jvfo2S3xPTC/j38AGfH1kQ==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQHXNsw3bDkEwHdUOONT3TzR2Q+OvO3IfwpYMg/C8i
FmD+e1+IehZzCP+wJ5i/SiQSxP+wfasLRF4mCyJ/1A6Vr6qFzJ+w/bcYRP+Z
NxD73Fkh8jqfzID8Bdt3f80A8Vf3iJqB5b++zYC4N9wUha+zwwSF/ybdBKxf
8QOE36ILka/8AuF/4TAB23/xB4Sf8sQYLG/8D8KXuQThz2fJROJf2D5fPBNF
/r0miN+x+o03xPx+a2h42oPcV7D9tzfUP7JmyOG7SucpCh8c/gAtH6gm
                 "], CompressedData["
1:eJxVlW1IU2EUx4dLsizKKEwYSGoYNSjZi9NWGqNasZLKfNu1ta1y5UwLh5TX
YlBDaL1gH6xAMLICd1uLPlx6EQvC+iC9mBLlwrQ+OFygob2QQrvP/wT3fhjj
x///nOec85znuatc9XsPJ6lUKlfiJ/1zfRFRvelocW5eiqC5Yyrm+hrEkW1K
btnNOMy3SRwRP++Dbq6F3lNGXAaeqwDzhfB3VIFn08EX7eC4GvzBQfoJsP0g
427+jMST4hvieAC6zgm/7QL2aweHhctgvwt+jvKdcsPPXQX/OSWvLyKublby
+2Za3wVW89CjnbQ/OMx1YL91xNp26BMUz3YJ+bspns0PnjsNfVET/I+Ig/WI
5/uve+BfTMxVw++n/PkS8JIa8FOTka1PRb33zC8MTL+J/oYEB/gdR/FTDcyf
R+fV79UzfXS/xFaBWybnRPy/Ohm/CnHfwZVl8A+OgXeUw58TBRdUwN84pGP1
OCup3wPQn1cpedSu5MxqrF8+BG4+AH3esE42P1Zh+gvitzjh749Br6PzD86A
nxyhfi7Us/pf1mC9OQ31/vCQngE2H6P6s8CBWspPC15RJ3FrSMgHx45D924F
z9D5abrAvrPEAexvOIl8ebWe5d9G5znYjXyDdD9yeB3zB6i/jbtQ79cSimeE
/5ZVzg3ihEXOk+L2YrqvFvhFuv98Nfy5G6neJugjBRKPh/hrck7ovUrWfKN4
heDSlai3xgw+xIHTN1P+nai/t4j69xG6YwvNZwrmM7sI8xuPwe9m+bUK0z3w
ZxqpP+fQv+ENiFe6E7pzLfpro3l+kEXxaT5vZ0i8RhBuSPxW/LVUYpXg9UK/
m0L3eY/EV8T8JIl/h7RF0JNnPYr+p/2U8zMxOa7Ux8fAtnLw409g4Tqd94BH
kZ/vtYfVoynUyzjxHj1UcIg7j/utQ7zuqMPI+P4U/JwlH+/TArxX0fUmVs/8
bOX7J/8e/AMqGob4
                 "], CompressedData["
1:eJxd1E1oE0EUB/ClluIhfl4kEOoHNVYomG3WJsIioYf4VVCKp7KHILSgBith
kSILYgmFSpAcVDAUW2tb42ayVJC4liC1h168iB6Eklaw6kFKqQgdDxHNvv8o
Oz2E5cf/7duZl9k9eGmwt79JUZRzjZ93NRZnefvVy4kj6nYWWokkJO9UycWM
30V+YQjOBZEfsOB0xDPjG7fgnlOeHe4Ok0sd11A/lEUemIa1iuh/NtbwPDdf
km1j0PME112y03MnRvU5mK0VPOd5DbZzJeTNr2DLlcyqb+S8vgqn8Txm/Ib1
F3BtR5wceC7y1jitp4/BY2Hk4Rm/5/n7Kb8neP6J2I+oT02K/odRH3mM/Rlk
l6+Poz7UhvrCIzGfQ7D2z73wjWUx/ym4e0X8P9Nxms8S7AQmkZ/8JOb3EHkF
ud0x6vkdTwqPWahfF/11E176IOZ5HvNqqqF/Tcx/eBWu/4D7vvvXv8Erm8hD
N+G7264gn0H/z7v9vs4zrbKDR8nOlyzqP0aQm93odz9OtpsV5KaO3CjEJFt7
ZFfDXXR/O/qV68njlOf3IdczGj1f+4P9WONRyte+iv11we5b2dlF2fsXPP8q
VU/Ao6+R1xPwzznPCtNPR+l85On9aGHpi8hT4jzm+uEBR6xnV5TO2zdb+Fkn
3T9SFPWpTqpPPoWZhrwF57UcWMD7OCDOp357izOyjTOq//6SeUyV+mfbVFrP
CNZTvhdE/eYs6kN7Uf9gTv7e/PfW71HDfwGMXQI8
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQHXNsw/cvklkO6oYca2pYzR2Q+XNcQfyC70xQfk4F
RF5OHMJ/MxfE//C9SBjMX8XzDKJ+Gg9EXobLAqy+iwmV/+pnJhK/4HvrBzB/
FcsLiPnRzyDyVxaD+BO+G94B89ctiYfIh12GyMd8NQPzT52G8P+kQPh1x8D8
1XOemwL5F763H4TI16SYguWf7oHw59w2AfIPfHfeAeHvCTIBy3/aCuKfWB3D
hMwH6n9ljMT3WBNzEMJ/vh3E11jDshjCv7gbor6kH8LfvR/El1jzpNoY7J+s
I1D/F0Hk751E5l/4vus+Mr/g+49PEPfYPICon8EMja89EPc1CIH5q+80mCLH
3+o7zmYO6PELAEx/3n0=
                 "], CompressedData["
1:eJxd1W1IU1EYB3AxAjGJCD9IjCIYRLLC2twVHWYRZWAWMsTs9sGgF5bVJBPB
JUrzBVmblWXUKIsYtt3WLFORIbGili40nUtkSRCiqOWsZRJL287/Ce71g4wf
/+c+59nZ8Z6tJy8WnIqPi4sri/7FPvm3Lq6oQpezbVeCIFvOzJF4Z1bUQ5yx
GrZmZLF8Sx2zK3kvvL0JufEgrLQwt4cPwzduwkla+EAr6n3H4AIbcqEcPueE
ZVfh689onjq424X1ZQ0x6zlrB+WNyHOeix3ivC9Qb6hFbupE/9JKiYW5Uji3
HuZ3q5mbbzHb3bPw+kfMTs0ljtnjQH3QC/e6Uc/zGWy+fB/NY8tgefW41Plf
xA5x3ybxfFIr8uOzNF8l+r0PYX1fMfKan8jd8lUOcBJHXnPs+TSyz4G8+Qes
MHNs/dACbNLDabCTL0T90RCdhz1w0yeav0zF3B+IuVGQnVCx51NhR/AQcvso
7S+nYvOkjqI+KEc+46d+yau8VmyvQxZWsv66UZifUrJcF6DfY0LJ+uvYfLkC
H0A+Pkb9huHecbFD3N0JaZ76FTb87z8NazZiHtssfd8d+L6dtH/uM8hb/lA/
D1y+Qr6P+pZFqlfBCfOY10frDdF6ed2Yz/s55iRBUYLcNUz91HDjO7FDXLlH
bD2X3geH96F+oBd+zKO+pBvWViAXXsY87ci7J3b0fAyI7XXMjcFvKDdOwmGy
dgGWd8Hyv5jH0IXnNYnYnwjl1hS4b4TcgPO7DNutFpw/Nc6HPdgKn6bzwrfB
t2FnsB12Um7tWOVeiZ3WEaznwXpO2RTymY+0n7+QLw5ifdka/P9VfKA8Edb1
ix3isj3SfB77bdf40f8KvU8MZ+F1D7C+O6Jm72NTCyyY8T6KM9H52AzL6f2l
GEyPupnrqWV2GI3pLHfT+1ybnc76vapifipfiu13Gxe5jPPsLsT+68/TvMX0
ex6RushMvoD7o4esqcpk/Zfgdr4eeYqFvp8lk82XAbusd5Dn0v2heCixoHgi
teDH8+ZrqO/8jnwT3Uf7f2N9G/bD5V+BN9TQ/RKfJb3vovffPzCr23A=
                 "]}]}, {
               RGBColor[0.9372559, 1., 0.035155999999999965`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{294.099, 
                113.13299999999998`}, {325.099, 87.13319999999999}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.373047, 1., 0.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{251.09900000000005`, 
                101.13299999999998`}, {294.099, 112.13299999999998`}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[1., 0.007812000000000041, 0.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{250.09900000000005`, 
                102.13299999999998`}, {326.099, 87.13319999999999}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.11718800000000007`, 0.23046900000000003`, 1.], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{294.099, 
                113.13299999999998`}, {285.099, 49.133199999999995`}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[1., 0.007812000000000041, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{255.37799999999993`, 101.85199999999999`}, {
                255.37799999999993`, 99.6082}, {253.55999999999995`, 
                97.78909999999999}, {251.31599999999995`, 
                97.78909999999999}, {249.072, 97.78909999999999}, {
                247.25300000000004`, 99.6082}, {247.25300000000004`, 
                101.85199999999999`}, {247.25300000000004`, 
                104.09500000000001`}, {249.072, 105.91399999999997`}, {
                251.31599999999995`, 105.91399999999997`}, {
                253.55999999999995`, 105.91399999999997`}, {
                255.37799999999993`, 104.09500000000001`}, {
                255.37799999999993`, 101.85199999999999`}}}]}, {
               FaceForm[{
                 RGBColor[0.11718800000000007`, 0.23046900000000003`, 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{289.37799999999993`, 48.852}, {289.37799999999993`, 
                46.6082}, {287.55999999999995`, 44.78909999999999}, {285.316, 
                44.78909999999999}, {283.07199999999995`, 
                44.78909999999999}, {281.253, 46.6082}, {281.253, 48.852}, {
                281.253, 51.09609999999999}, {283.07199999999995`, 
                52.91409999999999}, {285.316, 52.91409999999999}, {
                287.55999999999995`, 52.91409999999999}, {289.37799999999993`,
                 51.09609999999999}, {289.37799999999993`, 48.852}}}]}, {
               FaceForm[{
                 RGBColor[0.373047, 1., 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{329.37799999999993`, 86.85199999999999}, {
                329.37799999999993`, 84.60820000000001}, {327.55999999999995`,
                 82.78909999999999}, {325.31600000000003`, 
                82.78909999999999}, {323.07199999999995`, 
                82.78909999999999}, {321.253, 84.60820000000001}, {321.253, 
                86.85199999999999}, {321.253, 89.0949}, {323.07199999999995`, 
                90.91409999999999}, {325.31600000000003`, 
                90.91409999999999}, {327.55999999999995`, 
                90.91409999999999}, {329.37799999999993`, 89.0949}, {
                329.37799999999993`, 86.85199999999999}}}]}, {
               FaceForm[{
                 RGBColor[0.9372559, 1., 0.035155999999999965`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{298.37799999999993`, 112.85199999999998`}, {
                298.37799999999993`, 110.608}, {296.55999999999995`, 
                108.78899999999997`}, {294.316, 108.78899999999997`}, {
                292.07199999999995`, 108.78899999999997`}, {290.253, 
                110.608}, {290.253, 112.85199999999998`}, {290.253, 
                115.09499999999998`}, {292.07199999999995`, 
                116.91399999999997`}, {294.316, 116.91399999999997`}, {
                296.55999999999995`, 116.91399999999997`}, {
                298.37799999999993`, 115.09499999999998`}, {
                298.37799999999993`, 112.85199999999998`}}}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}}}, CompressedData["
1:eJxd1G9IE2EcB/AzV+iatXAVwSUtZpvg+oNzLpphQdFsCo6t2V/mw4ysldWy
iPmiwKLIwggi7F6EhC9u5+iFQS8uKrDwRS9iEAQJEhla3YtaQoPE2v2+z4u7
XtyLD9/f89zd7/ndOVlvpLtcEISy0hUuXUtKVyHfxmzHe1vc2yoUcTTQUsjf
ZsWU0VUsdJ6c0+7qbmN/+5AP9qD+6WWyXL8L+VAGebjabG26yeS3cdhyCuuD
PX6yFkIedDSS5+vg/vcNJXvZuzX8+fwNlF+xG+1l0gqzO6t0C0p/K+rHbXz/
NBwlF7MLN2EXeS6rPDG69D6zRt9QtDofObKcnFWG4Vwl7892PL+1gpxNfdDd
zC4uI4/Z2vG+BQvqU8N+yvNlvJ+79f4cZa8Wz1D/kzn068UfsuKgfjaz50Wy
PLES/bb+Qi564NFvRu9he78aHWNjs9hfcqP+4xfk0ibdHaxyBvtLtfCPT7Do
4uc7zffb+J8jukMs8RlW47hf13esjyZRf+838plLAXrf1+WYtwu3kO+0oj/1
9+FFbtsDOLzKOK9eZq/GelGG+xxwdAT1mdWon7ij+zS7inmSfRnUv1mL+qkD
qG9dh3rVCdfUIA+mcR4vnVgvTuI8t7pQf2SDn/ZTavnzPWuk+3ncOH91Pebj
sYfPYwfmZ3IzX3/NR9/f4A7Mj/TTR9/bwX3Ik2ms3xKDx61+ql/KYMsInufs
CXjB1mSytN9keeok/Kibz+MQLCT4/Ktw4hA/jzn+Pcd5bg+YrPhMzmkx/C/m
O5G7ziFXD8PR6/jfDByDBx7y+i7j+Zr/V/8AJRDl2A==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAwBmIQ/eqwb1NdX76DuiHHGpmXJg4o/OOmQL5tk9BsMH+V
zDwzsLzVFqh8njmQn9ukdBbMXydjZwHk9zbdeQaVX2bh8PWhmuMWhgIkPpvj
HFZkvtrBJk4wf13JFAg/nQcir1II4fvwg/mrrvhCzNsvAFEfI4nCX7Pnsjky
f1WNG4Qfxw1RP+WsGZg/B+oelkyIf7a8Brt3bQkLiK/bJHQV4v43x0zB8kF7
IfycDRB+2iaY/0D82KZ9GyB8m1oIf8Z6MH/1lBiI+i/rIPIqLpDwDIDw127R
hsj/Wwvh8/Ci8NfovDBB4edMMAGbv3QjiN+xRsUHIv95B0Q+RNoEHB+OB0B8
jzUtr4zB8m9OQN17CcL/cgmZn9tUcweZz9s07RlEv89LiHqnjxD5NeIQ+6K+
Q/lGJuD4FAeHZ8fqP0km4PC9D43fOSsg/HoOaHy3gfhujmth8e8L4S9ihKoX
gpi/5wfE/DnXjMHpSQDsHoE1c7Ih7g26DHWvGcR9TQeQ+bpNVptR5Scth5oX
DeF3zYXyl0H1T4byPxojpf+ONTKxaPkBmD8AQK9Sng==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/eqwb9O7LfkO6oYca+a8NHV4dVi3qeosmL+2htUM
zC99COHneID4vk33P0DU52wyc/j6kO2gCkMBiL8uR8YcyFdz/M8M5q9a04rC
X6PzDpXPI2IB0u+YDVWvY2QBlndmgsj3eID4bo7SjBDz38RZgO0/9w9iv0wW
hO/3C5X/7SMyn7fp2Eswf1WNH0R+H8Q/a2zELcD+23YTzF/35745WL7mEoTf
sxDCFzgDUf8m2hys3uEoxDwfLoj8rf0QeZ09kPC5txvC7ykE8XOb1u0E81ev
8YTIx22HhGeMDISPHP4AQ02oow==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxd1F9I01EUB/BV8iuYT7GM8kfinJu2tWG6P+UsTVkG9udOY1qrmaw/yKiE
gRXzQVCKkHqY9jBmQUUP7cfywaCHPQbVQ40LkmLDIsQgqCCiCAa13/2eYLeH
38OHc+85517O79YOXQqe3WAwGNaVvt7St770jSxbWartcrutaZOmPvK1jyxX
Mee+clv5NLnwAH5NDt+Dlf0UTwmzOvhxbkayVrwNGyleuK7bw75Tvtw44kvk
9Bh8xQ1Xej3C/V546hr8uRX5HIpX9NPZAWuTcPQg7f8NTx4WzsZien6FDfRK
52Xv+8utsHcnJfOG03D8Ds7/IgJbRnUH+Lkz8EII+TxDqFdslqyljbL9K6I/
dp72P3wGv6L8CynYTvUrxnQH2Ld//V1EfMtAuRVWE5J9/zjuZyKO9Xf7EO8b
R74U7iNruYX1+SBcOYv1bUG6zyy8lcE9HOsXj8HaojC/Sc4VcP9N5MQHUY8v
HaXzryLfMFldg9eOlDvALvSUW+FvunGe50+Qf1sX4qZO3VU8innLRt96xLy5
MC/Z3CDm5yrNk/rRLeKtNG/+GTi3WziTcLnF+qKL5n2uBf06dd/IhAd1O1nQ
oftlRv3aLOLzjZT/BPxzu+zRneQVvZ8dLGTHecKbvcJGB/o1deA+krDWNewV
9ap3YX08iXiErD6VrPnzcjz8Bf5E+eMVmMdfqK9NmOCN1M+0xSf6idB50g7E
/1hl75Hs5AfqsT9tx/9SbaF4o8jHf5hRP23TbWbJWrqPeuqnhmz+z0E4X0fv
0SlRj/EG5PPHkP+Qk+4vgfq+FqxfnRLvHbftRX/zs3iPuqX3UH4f/wJryNye

                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJx11F9IU1EcB/BNQYQGPjiEySXwKS4kKRviRGTUIAlREIoeSiEV/5eK4Ror
tVbk2tqgl6XShFJ3di9TdCCoINhL1DASYSDuobAabaDY0Af34O75/qTdhx7u
w4fvd+f8dnbuyu49aO7I12g02uxjzT552aeoe4ElOwcslyoL5do1o+Wf6+Xa
j4qX2V+yM4o8vwt9fUyxxIq5P0kfviM3dqHvSMFt1J8+gZ12sr6a29r3H19R
LIkdcChi4bk4R/n+dcXL4m84rG9SPM9c/XDDLaznu4+++y6c9xC5PKE4wLSY
J9QQQe55jH5fXPEGM4yj7y4w8/7Bc/TXb5p5v8iNfuYzPOah80ygHybfSfFc
TMDByAFc/hq59Qgeghd30ma+/yrlwjHWL/DmOsBm4KCQhnU+fF7AeuyGj/qH
yG3kDM33Bg7KP9CfovxyHPu/p/XkGPoB8t439L3UX/8Cl7yi/Z7iPEcn1W59
q/69r06o/XUEjl40Zb3CRs+tM/Hz8Y/gvjlP+X0SDTbk6T/wpA33r33XyOcd
fkT7b+P+Be253mCNDnX+7gnNk4T942Q+zwJrfKb4pSTUwBUvuOXpAbjORett
wmG6H0IIvk3nk3GZ+Hy/cJ9kxwXkpbRfdAn7p2m+1Bi8Rd9X12Tk9z0+TOtX
IS8bVPtnv9qeXjhyDTb00PvUAs+ev9/23P+DhLTnzzX+L84A7W+cKw==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd008og2EcB/CliUK0i5YdqMmBCxt2kHZA72EcUA7sMkmy/CkXhdOwk8hy
WpRm+fPsRTjIYiU80pq/U0T+xSa1tJscvO/zfVbv6/D29un7e573+/4rcvQ3
d6VpNBqTdMjntpZ5Ou4dsJaUZxJD3GxV+aRS8hyNLDKvGuarWN65zvO+aski
vd1jFg21Fsn7dJvy3G9h8z83So/RlztVLpw+Yv2QBxafkRsH4dk3XP+6Eful
v2O+Q68yCV5VK7060gD7njDvCaP/C++j7YELz5gDQ1rZUzRygPzruJLliS3Y
uQEPi6n+sv10KQDXjMI6eM3TgfkQ4fdTh+fZBwe2S5HXc2fnqEzKYmaVndOy
/YKeXd9NjDaWC6FN5K0FskWhe0e2QFyfJrY+uMv7XsKhfaVF6jpUeozOUKy3
xTH/EUZO8tEnec5dYWbzdvY83Wu/DuTF98i9y/DRA99/wsy+j2Tq/TfCsSif
12Hed8EdNbG8ifXJI95e9E2k+leh3+SO0lP0VVTnuSt8v3Y4y8fthzMWuL9N
iu/fTQz2f/+D9H/8Acy3Ry4=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQHR4878Te9QUO6oYca+a8NHUID+47wbwHzF9bw2oG
4nswHoPwczxA/Hke285C1OdsAvHrPLKvgvnrcmTMQfInXG+C+avWtKLw1+i8
Q+XziFiA9J/YeAOiXsfIAizfeR0i3+MB4u87kXgNYv6bOIj82isQeZksCD/3
Eirf8Rwyv+6E5imI+TV+EHlViH/W2IhbgP2reAhi/p/7EPe17IPwexZC+H67
IerfRJuD1T/bDjHPhwsib7wV6r894PA5YboZ6v5CEH/dCdlNYP7qNZ4Q+a8b
IOEZIwPhI4c/AJYZnSs=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxd1n9sS2sYB/CacjfKbH6MOShmaqntbuums6KEhJgsWeamaET8zm4TGwsS
1bix3LtIjcT8zEmxzP5oj7oRiYimEdzYzT2CaHj/WCT3GqMtdWdzjQ497/dZ
nHP/6B+fPM953+d93rfvOTM376rZNlyn0w1L/U6kfmmp3+PVPuZ+WW+fW5wu
uW6W2r+7MxD/G7b1IF47CIdewe1jLIhH4b5pKVf72N0YLOQjXvtG6wlvtY5w
N0tb8+DWBI1npOff8XigSRl/9QWW96/ilZKcg7i+F/lyJlzVD0vvlXrPsVA/
1iMnYNMHmv8N1nOcLMYUt7GPQ/Eo8l3/wc7XyI9r3MHcA9r4759QX2sCbv6M
uD4Jb0qinsZ0C3/e+wXxZCnqN6Q1oB6P4hbm1MPOK7CYAdvyy3i+nEV+rnHA
FoWzKS7OKOf2ZdJ4h+GCsbDQozjInhhgqXIBj7eNhg2/wPWjYO89bsdG1BPU
f4B/Tke80WDl3v8Dt797lpXXf3UEzVfI4yx3uNqnmDVNa7cO4wvzkP9ykPZn
hpX3z54kT4EP8P6n+4Vs5J/+SPFRcIj2T1gIL6H5uvagvn49zXdYcdCxD/UH
q45hPXep/64zPN+RhX75vRcxXsZQPzvgy5lqB9nabLVbWM0EjC+eRX77RNqv
Q8j358BuB+Ibp9D+ZcC3cmn/T2B/wgKtpwf7WzcLTu5W4mH2OB/1yhHkD8xD
vGoMxntgprgd6z1YBOftgNNKkF97CP7NgvqbqP54uXb9JRVqe9hPlWqHWdYi
Ol/Uvy2L4fgp5P9px/xSE+LJpbTezVqLRVoLfD1hxxbYb+vF+fzRTv14ptjj
GMR8wdBfdL6pHuE2fKRSbQ9jC7XxQji49Q7spfX2/QFHrZi/qRP9t1vpPMmI
tyyg/j+CJ5fB5n8w33b012/uQTxUSv+vGJxL1ifg/bQ/rb14/msxnZc+xK9o
HGZPC7XuLsB8yRvIfzKH+r0C43UaUb/7Ic7X0unUj6P/8wGNg05XOe83o7jb
xuOOEUZyrIzvV8lM8jncX246v/JyuHs2/f+iuC9NvL7mgOEkvY/4+W6WhPWw
cS6djwoLX98ZUwO/f0W9ha/HXtCguu9T/Ter7WEP52vjx4uo3wOwg/oZmUTz
0X60W2C5DPXY6mAnnQ/xOpwcOl8+eHkF1iNUw438/5R6342GvTS+OYL6DLR/
ch3quW+i8crhB7O1vmTUOp/2I74GrqH7w3sQXjxV8auA6yxcmov+CffgYrqP
xJGor3o87d9e7FeOjup7gfflWn5fm6SqC3A9vT/bGzDeTrqfI+vwPt5E73P9
MsS76H0/VH9XQuUNKcfU8fMs77XicVLXKuRfo+8ZJ59PZN38e2eyJPyq/v4x
SbJPbXwffQOW88d9
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}}, {{{276.63742683928126`, 21.648875}, {
                 276.80661629240626`, 22.352}, {279.43601082365626`, 
                 22.352}, {279.26682137053126`, 21.648875}, {
                 276.63742683928126`, 21.648875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cSlpuzgt0IHdUOONT3TzR2Q+OvO3Ifwt32F8L+I
WID5Cz5D1LOYQ/hdH8H8VSKRIP6cMub3EHmZLIg89xtU/u6HyPycMrUbEP1n
3kDs8zkPkdf5ZAbkl5S1HQfzV/eImoHlFx+GujfcFIWvs8MEhf8m3QSsf+cR
CL9FFyL/9BiE/4XDBGy/4EkIP+WJMVj+0Gmo+y5B+D/OIfN7yipuoMovAPun
Y/Ubb4j5Ba+g7rMHuS+mbNknqPtkzZDDd5XOUxQ+OPwBYiaoSQ==
                 "], CompressedData["
1:eJxd1X9IU1EUB/D5q9T2R0aUwfrDEowY/WBThw2SNBgxiUL6IVcGVlQ4EmU8
iR5RYCI0CizQiYmB9cfezQgLKkzJtCIMKlwwGlJp2WqKkE2bGu3e7wne6w+R
D+e8e8857767vJq6gydSTSZTTfJP/J8sV5WtP+pLC3ZmcsttR+lkOVNyZ42e
+indq7YKq0pbHHFnLeIrF8iH4ILfsFqC/Hny0nq4LgHH0uDrSxSvh9/DQfW8
cKeyehmONSO+B+buy9jPB/fyq3CU8hnVe/MP8tk1+FZWg64/VdmVbXQrHGQ9
cJDikW54CO5lN7DfANnahngX5buvoP4qWs99ES6guLkR+Rlkfx3Wm6D6zKeQ
f5fMqpF/mqzuh3eY4H5HkXx+G/q94xwulPGzmKfGPXDOIuZhXlUo85/S+xv1
2mU8MC/s4myN3sn1F206v9TYNByi/LHPcAWtlx+BRxaQ7wvZZD9H6TxY3iGe
lTA68J8di3h+bQj+SvWnf7Dpzo+Lz33E+ieXkT8aRdxD79//C15B82LZdtm/
X9rFnTmy33heCsU3wM/J/Zvg2lQ6L1bMx5Ym3KLxYnhjOuLevfDmf+erBz5m
Jjdj/2cZDbJeNU24M15P9Y0FZb3xM/R95KvCLF5L8/VVoN+OOZpXEfpLzOrN
lK4ZvTuV0Rh9r2XIb6LvX61GvvM7ve9GxNujwt80tV3vZHzQaMsknE7PV+ai
3wj5OIPv036+bvTfIutJzi+M+JFpOp+ZOJ8lqFeLRZFfJddr4XNPkP9wiubT
JOenrPuC9Sr3IR7+hPPgpvOcMk7r0/k8FxbewnmHsF/JDwmbuNeL+NIbum8O
CHuV4dfCC5p1N+LaK+P8773Qu0nRhgzxuGWA1jsMZzyGeQCeeWCsb6IP/VhK
7Don76M+gzV2Cd/30CPcfxFPkfSFEbr/yopxP73FfRnZ7pD9WMf1973x9+Av
ju99zA==
                 "], CompressedData["
1:eJxd1V9IU3EUB3ALhQzrIfMy81qaM9G0sq1t6aINJOc/luK/3J2pS0OwJPOh
YoSghdVeEhmI1yAjie06iKB6kAjUTILEoBK6/XlY+TIwSCjJJO/vey7s7kHk
wzn3/M7v/H73LrOtu6Z9a1xcXM/mn/I/XOLlWrN6bDmF2yS+yWBT/GC31g/1
5HXTpge4hAOwt9zMvAiH1q+aWX5iDuLibcW9nB0OWEcRd1Ocn9Ta+lLjkPCZ
1fcvoX7AuMri/oVs5M/EW5T6/lfoL1SbYmH9PNtP66dbWL37+7T+tDfaA1wq
WeYRd6XDQpriPm6Mp3gq/CYN/fA65H/fQ/vhYnyK9cetqPWdiC9kol99A3yD
5r/qgouxv8BMC5xC8/F1wMm5cOUFePo4rTcBZxWhvnVccRfnIUfGEO+HpfwR
ePIQPa9TztfHlZqwvrxoYvFxK+IRF87nhZ3Wfwo/L0d+fr1ST+Sma7T9fD2j
9Zig9d9m9DdF/a21IL7uUyxwc+foPLoQD3Ug31eoseSTzRpHZszs+ZvkEglx
E3l4yMz6/dEOh68g/zrZ6kb+Bq0vnoRHG6n/S0aW71LdBiczDwZlpxHn00D9
FxnZepeZByVZj3gFxcWUGCfF+J+B1e8n8z/xfv5SHTaw+h61nyXk69T5v0P+
riatA65oC1yfW/HrYPgb4sNnEe/dQP1HrdhfPI/+drRjP1YX7beT6k3Bni7y
EFx8HvlePeaR7VHskLwfsV4mnT8fhNfUft3oL7GebEK8ulrrw06N/RlViv8E
RTucXUHzbITzyhTHSWI3ni9w0P0e0Vp6H22HlLSMfuwOzKt3DfFOyg8nYX93
HZhXbQbux6yD5lWIeSSUqfcLHqoj63A/j2K/IdEG36P9C624jx/I8jXc353q
fRtGPK+Bnp/QWBIfx3ge9d+iXkD4gjin1l9B/eY6+j5vwfvO19K8t+N9PF2j
9USV1nOl9D2aRf0nNnp/T5jZ9+cWvjeBygi+P04L8r134AQj1UuDR44wT8rT
x5iXC5iD8kV45SDl8/DvXJyHMG9k3+f0HLIB84/+PfwPsNCG7Q==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cSlZtui5iIHdUOONTbbTRwQ/I41fyoh/LYWiHyN
C4Tv1wbh7xGD8MU6IPw/L4zBfJluCF/mEoSf0I/M79lWNQOZP2eb1UKIfWtc
IeYtWAmRP6NjCpZv2Qjhv2E1A8uXbQXz19VcRuGvqZlqjiJ/5xKIH7Pt8hYw
f9USVguwfO9miPoruhZg8903QdSzhEH4m9dD3ZcFUX9xNTI/ZpvqImR+zrZT
EP+sqnkHsf8A1L8230HuK9m2ph3MXysjZYYUvkB+lKkDevgDAOgmqBM=
                 "], CompressedData["
1:eJxd1F1IU2EYB/BR0USWdWHddKAWQjcrjM3jmosWeCFlCGFQ7lyU9KG0yhwJ
xeqiL0bJQFufHHAXWdOdxmL4znSZ1spNDCKWSC2JGDVoUFAEwah23v8TnOPF
GD/+z3nf9znPOcfcfnLP4SUGg6Gt/FP/840+Vh3pdm3cUqEI9+2ufKPMlsX0
vhznHnYGVfvYrRHkvi7k04w7mnTDiQRyjx31R0fh3uXw+ue0frujbIl1wWHZ
6+D5PcqbL8JJsqUPzpJNA/BHul6I6KxII/pc+qBaFk+Rfb94LvY/Q33S0KCe
R4xPccdKldysZ5LOu6qBr5eb0Fpm80/0LiSpn5WoN8GKXIX1asexvrwC9aYx
WDChPkT3S6hcZAccfQo7d+L67gz2cx5BXnxL9QE4NQcXz8NBsucEvC5F3lrP
fZvmlztm4+fdRy612fh+Ndx+5dAuG68vYf5K9TbUZ7n9kdRm5JOwkjNrXZ7P
Gq3TkeRvK5+PhfazfbHy+Syl/lMLVj6fd+TWOW524zH1+4bXs7oxrWVmTGot
sTsT2E8uov7rFM3HjP7e0/OT2wFfeknPhxfn/Zyh+5+Aq2bpebwJj8/Q894D
d6bRf/N2rHf8heomRTAin6b9S69w3t3jtF8Hzuej900Q4daY1hILRfX56odk
Jxz//343od48RD6AfP6B6kLEck3r8vuXWeQFuCKM+5f9C3eEkec3oZ90GPP/
6Ua/+4fQvzOAfO0w9ZfC83JwEHmpRXUvs4awvvQd6/fdpXkMqvawb8GyHxkV
yY18JqDvf4Nf79ELOot/ztG89sI/ztD70Q8XTsOzr3H9Jy/OJ9TaNC6fJ6a3
dLWOu+Ys5Z0id/gK5S31vD/hOr6nOaud2zWg/d7qv8f/AO+bXJA=
                 "], CompressedData["
1:eJxd0z1Iw0AcBfBWRFSs+AHWYGpR6olaB036ARYboZWKUYoIDsalKCgGi1g3
XaRIhw4OHYuDQ5A2ioOTOAiCDuKi0l1xUBHF3cHk3hUShxB+vP/dvTZJTyo9
t1LjcDgE4zLvr7Ed8lK3JfWP1Ov8uyjZfBswnCF+F3WJPwzS/Ipj+UbIcJ6I
hPqUHw8bLpJWgeVamM4vSFYrJBq35VrfFNZnCnCjjNy3CX/P4vynGeyXSmJe
4WzWLx9DVpd2JmHnNOYL9+gfZX1q1+DdAPVJpta0SvyDyD9vAjSXu2H1DK50
VvubzpIa5sgunHZTlwsK5j1u9nti+D/vOnDe+RDyI+Yml826/020WT0wndW2
6Xk53SfTXON55PNdpvPatdd0Qs9+CHQ952N9H2DPgNV58jxstUK+RrFefsd8
LIxcd6NPcox5VKTzF1Hap/ybQr7Hnm/xGO5NsP33Rfp+JKvPfwaOT7D5Nsw7
I8wVgeZl2qdFL66jr1ztH0S/V6/VKpE4e662s/0W4dVmZg1ebmD+ESzvf07n
l/59D8b38QfovxyM
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cSlRk1KqthB3ZBjzZyXpg5PXHLUEtTA/LU1rGYg
/rJYAwg/xwPEr1kmZAFRn7MJxI9ZdtwezF+XI2MOkldb5Azmr1rTisJfo/MO
lc8jYgHSr8YHVa9jZAGWf+YIke/xAPHnqO1zgJj/Jg4izwWxb41MFoR/ygaV
P88CmR+j1mYCMb/GDyLfBPHPGhtxC7B/63Qg5v+5D3HfQw0Iv2chhL9aFaL+
TbQ5WL2zEsQ8Hy6I/AR5qP/2gMNHbZIs1P2FIH6PWpUMmL96jSdEPkgaEp4x
MhA+cvgDAN2mjRM=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQnWBbY3Yzo9hB3ZBjjc12EwcEv2PNn0oIf28mRL7G
BcJvzYbw94hB+L65EP6fF8ZgfnABhC9zCcKfXoLM7zHbWIvMn2NW2Aaxb40r
xLzrfRD5MzqmYPnd0yD8N6xmYPm1s8D8dTWXUfhraqaao8jfuQTix5hxQfir
lrBagOWPzICov6JrATa/bjpEPUsYhP9qCtR9WRD1HBOR+TFmMe3I/BwzxjqI
+TXvIPZ/h/rX5jvIfSVmj3PA/LUyUmZI4QvkR5k6oIc/AL9Hjdg=
                 "], CompressedData["
1:eJxd1F1IU2EYB/DVRYZak4oiOBUrKAKLYqfXuY80JJAcCPapO9BYH1auD1hU
xKiLDEK3aZYheXIzdU43TYnWhbvcxSIriciLlt0UfSAVFUU0tHPe/yOc44XI
j/+z532f9z3nmDxna44tNBgMdcqf+t/t8LOqVl/5pu2LE0LUUu52yMzWrneq
g3vQflu1nz2/i9x/DvlMJ/dwygV/lZF7LajvugcHFsEHY9TfY1UssX44Jvus
PH9DufMa/JNcfBMuGIALw/AqOCbEdU5Ij/S59Fa1nJxbz/+b58lMP+pTBpu6
n+TnKPdILp+bDfXRfotsvN/yXq1lZuzRe919mseI+opu5PJS9KuPoL+8BPUV
YVgoRP0knZeQP89W+AOtb9+D3w8MYz37ceQbxqg+BP8jT1+Bn5K9Z+ADdF7e
0hLuF3R/2QaR77eFnKsT+Xou7huJo1UirzdTvsKB+gLk8fRW5H86UZ81aa3c
z0qtM/HUXzO/Hw/1Ez+a+f2U0vzpKTO/n6IueN9rbjZOFl7yeuYNay2znd1a
S2yiB+vJ06hfT/cvmzDfMjqP7C54LE7Phw/7XfOAzv8xvHuUnsc78A/KAxfg
yBDmd5ahX++g6sqEkId8Jkrn+wz7bYzQeiewv4f0vgkMbm7XWmKTt/S5s41s
h7/Mvd+VqD8UIruRG4OqP8WLm7VW3r8n8zwFlwVxfq9m4TDl77dgntkg7v+X
C/O2hjC/PYS8poXmS+N56WhCnqtWHWCnrqO/9B39M1fpPvpUe9nGy4pH8xKS
C/mC8/r5a0/r/a1e56R4hO5rP7z5ML0fbfBaFzw+gd+vrsX+hG2ixsp+RvSW
mnZwu6hf9iTjftdAeXUJn2/vJXxPs2YL98VG7fdW/z3+D0b9+OU=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnWBbc+3G9WIHdUOONX+izRyQ+GtrZCH8vBsQ/pzX
pmD+rJsQ9THHIPxJtyH8Ox0gfs412fsQvkwWRN76CTJ/zrXjL1Hkw3a9g5h/
ZjGEL/wZIq8jDrY/LOc7mL+upwvinhk/IfJnOM1R+G+moPBX5VwH8WOubf4B
0T+F2wIs//IbRH2KoQXYPfJfIepNwi3A6gs/wdwHUX//HTI/5tr358j8nLD0
RxD9Knpg9WF69yDyJttA9veEfYWE1zoXO3Pk8F135xRKeIPDHwAmCaFn
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQnWBbc23OrWIHdUOONTJShg4JtjnXmB4h82PC1F6A
+avvmIH4NWHsbyHyMQUg/pywFx/B/LV3VoLlr0V8AfE7Vte8Q+ZzrLGxM0KW
X3OnCsSfc03oM4h/YvWdtRD5tg9Q9dch8hrvofa9hch/fgPia6zhYTUG85+/
hMj7yIH4Mdein4P4P1bnGIHlw/geQ+Rz/CH8/3eg6ksh/A/XIHyd2cZg/xde
hvp/HcT85kuo/KcXUPkHz0L4PN0QvvhJCP+NC4SfewTCP/MP4n6JQ1D716Py
c8JQ+Gt9LkDCb/VRSPj/KYbwL56BqK9xhPC7oe6xUYfEn8pV5PhDjV8Ak+XD
9g==
                 "], CompressedData["
1:eJx11F9IU1EcB/CVgy40aETEMH2IghJWbfOq6x9cYdCQ2YPI6GFCDY2CQQ/b
47UCg1YIIkku2ENGhLizPYTQH2fsQWPaFpLrtGpZ6R6sRnuoBGNRO+d7Hu55
6GGMD9/fufd3f+fcuzd4qWdgq8lk6qn/2P/ZkzqNPQprB5wKyblcmuRB5su0
/wmzl+yaR15LI7+vtNZ9lY5lmK1E9TFfo97nzOsJfaSV19teol5/xRyh0Rxz
NqGvol57AXt+oF5bRH3BrPJ6bQH379+t8jyTZY4m0oeMVkipS85LYTi6CFfu
qVI/liLzMHUscSftG8jHl8XzN7dxdxfhyuk2Xr+vwJ3InWcO0RGsJySK+tE8
PDzdxvv/tgCHqsht6DdJjrcbTXx3JE/ljnTw+eT5fJRUmXTwvEP0N2Z1834m
3qHeE3HzfvJryJseuHn9zHfZ4Z+yuzbheAzW/ggPwu1bInCQOU5vNMBNPuRH
zcLH4KL1Py6g/9A2o+N0CU7ps/AeBXl5EvXdwr23mQP0ivDcEPKYItZflEz0
U5Kn0nfZfOP+FPpN6s183v63NTxvepbtT8Bv/oX9rfVhv25VxLwOw9fXZI+v
SvY//oz1BeEvn5B7HHAjnJx24vw0fhT7r+J6Xz+I8+mGf5eMHqYP3+P6egvy
ndh/ErDAQZzX5IkqzvPNNzj/9tdGK8T+TLYlrvJ++lZQT84hbxDPb9mh8vmP
buJ9tM/gfT1jYvO0EV+n0fXzPuGS3eLi69cx74SacfJc2cD15wacfP8PVtF/
73bk2bKY74qDe50aHaHevJxPzmP9/r+wkkGuduJ6F57i/p4hp/F7l8gtS+bf
w3/lxv+t
                 "], CompressedData["
1:eJxTTMoPSmViYGAwBmIQnWBbUyYhU+KgbsixRualiQMK/7gpkF9SlqQE5q+S
mWcGlv+mB5XPMwfye8qyrMH8dTJ2FkD+nDJ3D6j8Mguw+t5QZH5MWWkUivy3
6DiI/pIpEL5DIkRepRDCV02B2H/FF2LejFSI+hhJFP6aPZfNkfmratwgfPME
iPopZyHuL4W6hyUTwt/sBeavLWEB8XPKkuwh8m+OmYLlm4wh/JwNED4PzP/L
QPyWMgtdCN+mFsJfqgPmr54SA1EfrAP1jwskPBkh/LVbtCHyN7QhfB5eFP4a
nRcmKPycCSB+y7fVYPs61qj4gOW/BRlC5EOkQfyebz9NQHyPNS2vjMH6/S2h
7r0E4QfbIfN7ysSdkfkxZSoeEP0+LyHqq3wh8mvEIe5pC4DyjUzA6j+EgN2z
+k8SRH4HNH7nrIDwI2Kh5reZgNNHGyz+fSH86jCoeiGIevNAKP+aMVj+oTuI
L7BmTjbEvU0w95tB3CdliszPKSvTQ5VfpAE1LxrCn6cM5S+D8GfJQfkfjZHS
f8camVi0/ADMHwCg1xX5
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnWBbUxagX+KgbsixZs5LU4cE25yyadZg/toaVjMQ
/9tkVwg/xwPEr/nm4QtRn7MJxI/59jcEzF+XI2MOki+7EQHmr1rTisJfo/MO
lc8jYgHSX+YCVa9jZAGWlwmHyPd4gPhzyr6EQsx/EweRd4DYt0YmC8JnCELl
X/FF5seU7fGEmF/jB5HfAfHPGhtxC7B/tzhCzP9zH+I+cTsIv2chhP/QCqL+
TbQ5WH2lOcQ8Hy6I/DETqP/2gMOn7IQR1P2FIH5P2QZDMH/1Gk+IfIcBJDxj
ZCB85PAHAL54i78=
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{327.28479622382815`, 21.648875}, {
                327.45398567695315`, 22.352}, {330.08338020820315`, 22.352}, {
                329.91419075507815`, 21.648875}, {327.28479622382815`, 
                21.648875}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxdlF1IFFEYhleX1QJZgtkZZ1bd2jWydP0pkRC3ZaGS7WaJurKkA0FQacxW
LBEY1tVcKMzFkiZ4IS5EhQSldwVbLEWyQT9CZKhD7k3BVkQkGBrNfO+JznRx
Lh7e77zfz/lmwqf1Y2e8Ho+nwj6H7VNpn7W5ApvenU7cuHlwZHB4Z2JtLsdS
HSKXrHddxMbQEYcLVk839MnlRifemooRm48vOlxgx+PQX275j6cjLh7tjdB9
/QC4/DtM/nd6OBfDlP8jz1e+RTqb3/+3PjDrErnEfJ0i56yavag/Ogb/TDv0
mQL8V1pRf/Q7/KRWru+JuDh6wcXmzBTVz7Jgo/499Gwb4oekRqoni3zmUgrz
kDBfYzDj4pGo4WKzfA88gPtGbB5cx/3rV8HFKOI3foEfNvP+q+m92OsmN19v
EHnBGg3AfxL1WT9roG8sOfOYtU754N8/sAP9VaQTlS1GUHvVILKi5YIiqxMf
VJuLVthLHNAyteQfr0L8xCWF8p/cSixradnJx6r80Be/BsgvHnBzTBM5x+SQ
w9XKelLGfkSgd2/KNP9rTfC/+kCh+DctvN5xqoc9a+d8XyW+3MH9V8BSJ+eU
Sn5329BP3xeF+Gwz9L5l5D+6i8eHkH/bdodN209Cf7Vcj0sUv88v8ix74vvH
5XNX8m83dZvHlfXPDhv5Ez909JeQbR7Or37S0d+YQvrtErGqnVdFVrRHQTcn
Q3Q/+U3HPj7H+/Z6+f4fwj6/8PPv56mzHwssVif+H9z/jz/9r+us
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQXbT2cP6psAIHJu12McntEg7I/JkZ4kD+6fdiEWC+
+MxgMZD8+/VRUPUVokD+5fcesSA+u/jMOSIgfr5YIkT+pp4I2DyJNGT+5ny/
AmT+4/yoSoj5kXJg8/NtGiHykX8lwfwP7WC+UKS/LJjv1V3g0DjVuT9HTwGZ
3/1mkiIyv/2NphKYv6sLwj+zGMKf1QlR38OgDOQvzs9oh5h3Zj2En9YMkc9h
VwGrn1KLzF+cz1CCKs+SDeGfUVAG8xckQc0PVgSHxx5IeElJesqjhK/kT2kH
9PAHAHS1ot4=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXbT2cP7kugKHxqnO3Tn1Kg5Fax/n/+9A5h9+HzEB
zG/nUYPw50+ByPsUK4P5z2aA+f09B5RA/Hyu2VD5t4oo/J6fCnA+k3a72MzF
cmD77KaC+VKRKdJg+WWdEPlIUwkgf3H+uloQn10s8pkIkL85/3kBRP6mnTBY
fWAyKv9wFDL/dP7LYBC/XmznPai8H0S+Uk4UyD+eP9cTzBe1jBODuM8d6j55
CVR+khQyX2rmWVkw/5wPNLw6If4Li4DwdSQh4aGQAuGv2QQKr8v59wtQwhcl
/AFr0ad2
                 "], CompressedData["
1:eJxd001IFGEYB/BtEZIu78Hd+ahLC5HutgXSB+xFViNqu0gFkXQIBPXgQkug
4kWwQAMPq0iHgQiCPkA3IzaxddXcJnfTxQoXyqlO5SUYI/Cgm4ec9/k/hxkP
y/Lj/7zP87wzTKj99tUOv8/na3Z+8v/OC1P4M6m4/8SwYpS0uPSfpVR88MH5
kWR9g+OsOFWEM83SFXGdbd9soPpOdrQX9b3s5CjyAXg889TjEXva43uZf9Q/
/Qzzxx8eC8s8vW2ifu60dDZ96R3qf7SQxd8FOJkIY/8cz7+4z8/DtH9xjvfJ
ov+hRdguwHmeF12DkyXu/xPzvizzvpvov7PC99mC737k87URx7/E6hrXH49Q
bn3lfVqRJ9bdNsXsOs+7AEctzhvhK7N4X23t8n2VxeMce0Z1nBcxOFBtVale
5zwWVam++oas9dci/822NhS3lbaCx0GrR6H+IfRTY2eRj3H//v9Bej4HsF8w
txyk/BPva03Bu3m3K6JxwZsHCnD1JPo/ee/e3xRnPvC8iEbnz5X5/FGd8olV
3l8cJl/+DOuPkNsreD7GffSbL3KuYt68yd9DAvukab8+Rd+sI9/g+1pNsPba
7bz49srtsvj+UrqkGB2oPzLF87LSJdE9Kd2l6PUByusmpA+qlu22c58axeuU
9FtxDdYMH+5T4VyfhkOTyPUajeYNsY1b+N7d3/8e+76ofw==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvWv6Jj3FNwUOTNrtYpLbJRyQ+TMzxIH8Xety34L5
4jODxUDy69g+QNVXiAL5h9bN/wTis4vPnCMC4uvlfoPI39QTAZuX/xuZv0hv
KWshEv+S3kY+MF88Ug5svt5kMYh85F9JMN9dFswXivSXBfMXKhQ6NE517s/R
U0Dmd7+ZpIjMb3+jqQTmC0L5ZxZD+B/lIOp7GJSB/El6+2Ug5p1ZD+HvlYDI
57CrgNW/FkLmT9IL50SVj2aA8M8oKIP5378XQMwPVgSHhzAkvKQkPeVRwlfy
p7QDevgDAEg/oOA=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvWv6Jr1XwoUOjVOdu3PqVRx2Tb+kFyaHzN+0br0q
mN/Oowbhf9OEyPsUK4P5tnpgfn/PASUQXy/RACr/VhGF3/NTAc5n0m4Xm7lY
DmzfVC0wXyoyRRos/1cOIh9pKgHkT9JjFQbx2cUin4kA+Yv07Ngg8jfthMHq
V/woQOFLfUDm79JzeAni14vtvAeVfwKRr5QTBfK36X25B+aLWsaJQdx3ByI/
U14ClZ8khcyXmnlWFsxXfVQACa9OiP/WvoXwdSQh4VH+E8JfswkUXof0zNhQ
whcl/AHYbKR5
                 "], CompressedData["
1:eJxd1G1IU2EUB3BbH0IyRmZGtMy9BIUWfbEvzRxzva3bNVovztayqFgwtWll
q/XiokZtsBqFSEYlERSXQGEfWkIUFQT1QAupwaBQQoKpEH5rUN7zP4N7+zAu
P8655znPs3Mf89GuPccNZWVlnrmf+sz0jwiXP+Tou9scD162OTL9Q+KbziNy
02G4cB4+V3IIHi45QBaf4Jji1zle74HTHC84Vb8RgxxXNiIeZQfXw5b9IYeh
LlY94FxFNrQiLq2pJd/xoV6iyUz9TB9hb7aQjQHOX20lb+gkJysq1PopMf+0
br/iRljrlLgW0Vn+cgk2tWP/3VfgiFl1Vl4chfPjtJ74ASfr7+kcD7r1Vmao
X1F6P/IY7uH6+QA8xuvb16nOioFSf0bEX4W1TokPvXpLZ3E+dhPyt5/h+g2o
58J5JCMtyA/3wFIH8ie7+TyT8OsQ/HEM+X3sxDhZbmArBfwf+VM8D7O0nnyV
rfxBvSp28C98q0vrrKjs0Dolh09iP6Mp1H97DHHfC3UehmRjO/ovfq+lecsd
pHmq8f7CPFlbMV+56ZUU/7kP9r40kU94yJVe2wrKf7Kb89cuR78t5Krc5LI5
Z0RRIi/N1VRT3O/mfLGE/HCT3uadvJ8Ztb9nYp7E38cBMzkNJ31pmm/RuAv5
owsstN47OGZqw3mVy3Dwvs5x5bM+XliE+buN95MmO/xI4vnywcPoL+aLWKmf
cjf3m0D86Ta9J7ZqnZGntnA/N/H9vXdx/DrVkx80Y/1gVPVz0ejk+EXux8Hu
/c9f4TDXK0zReuLCDtRTFtqo/qzM51eH73ViL/KLEt13crYN/Q124j76fUh/
H2jvx39WVGlX
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAwBmIQrVJnpO7cXujApN0udpNLygGF3yQL5Gup9/YWOjRO
dW7PyVcAyyvOAvO7c/iVgHwn9anLwPz+nPXKQH6QetFmqHy9Clj9jgPIfCH1
BUdR5Je3nYTol4mB8LPPQORrRCH8gPMQ+++cUwabd/gCRP2bVBR+95pbSsj8
dp0DimB+0mmI+phzEPcvgLrHhhXCv7cV7F8pywo5IF9JvXcVxP+SYP8bqa+d
B+VrQPjmM6Hh808GyLdST54B4UdGQ/gXpoP5QjtvSIPV10H4Yj/LpMHhqTMd
ap8oRJ4Zyp85SwqZLybJjsZfIQEyf/k1iH0SP6eJg8Ondg5EfudlMVB8LFdZ
AOaLVwqIgfVXLYG6d50oxD0rkflO6k7rkPlC6v6bIfpnckP0L90Btf8ohL9x
N5RvKA5WL30AzBeJ/AR2j/rjo1DzOCTB/OYTUH6dBDh9bITJzxIH85cdhPI3
QMxP2gPlHxAFy/OA3bNc7KaICNi9a2HutxMGq3ddgMxXUl84E1X+7GQo/wqE
f7IPymeAhMfRTihfRww5/UvcvCXugJ4/APqLFAE=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQrVJnpF49q9CBSbtd7CaPnINKnZL6wWVgvlRkDZi/
fN8GCF+yQx7IN1pevKPQoXGqczfPDAUgX2i5xgEwv58nRxEkr858BMxv77FT
QuZ39/Aro/B9okF8IfX8w1D10yHy7oeg8kdA/CB1+YNQ8z9C5LP3Q+Rz2FXA
fO29qPz/O5D5QurPt0DM17kA0f94A0R+TaIy2L/310DM1/kMca/TSgjfpwzC
51kG9e9rRbD6JYsg5p1xh/j343yo/1YrgPmf50LdLwbiO6nfngMOPyHJXnD4
qW+eDQnPm9flHNDDHwAFzZFz
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvaDMyNzqZaEDk3a7WKSzpAMSXyLSTwLMl3sFla8Q
B/OfvYbyD4qB+eveQvlcEP6WDxD+zXWiYP6PL8h8J3Ohf8j8IPNLbEVg+yRr
IeZb8IP5YjMlpcHyMuIQvmSdHFieT7rIoXGqc7/OLQVkfrdOnBKK/JsbIL6Q
ebYUmN9eY6cMlleVhKi/06cMNv++OES9zX0I31sUIp/DrgJWnymIzBcy38uO
zFcyTwL6B2S+jgDE/IivYH73GkVFIF/L3AUSPlI3z8khhy+QL+2AHv4APBOP
Ow==
                 "], CompressedData["
1:eJxd1F9IU3EUB/Bl2R8xs3Xv3ZZTN7ecy5V/KH5KEiOhKC1lVjQLDMO3Ra5C
soesrEYt8MF8UCp9ECNYPVRwUyQfeiioHiqILj1IRBGxQUFQBmG753sG99fD
GB++Z79zzv2N6+0+EenJs9lsndmP+T3RVy9SxSfDF0aak7EBf3iiLyJuqrJL
XeRE6rDpelFTgjykIO9yk4dS33zktlLkhZM+ql9kt4bhx1V8/q9A1naxMkge
jK2vorwJTr5shPezrx+AY+zWOHwm9/urkpPpW3KezpiO6Ll+IU/QzPUgz5Pa
Ytqu7wmQh0O7yaKokuftoHpx2m91RPT6ZJ+v4HkiqJ/0ct6O8557cH5sH+on
y9ktqG8o4/pd//kOvHMDz/sMvy+oQb/UIvJL27i+bSP5SBPfRx0cyrkY1vl5
FU55ybXZ+8qrTmiG6qR5v7vh6BsH9ZuFnQvDDqq/wfl0p4PqY7DS70V+iOuN
jGa1ZsxJVqN7Nbqfp5w3LqVcH+N5+j+qdD/xMu43Rxabyvm8+yqd90pyRIx7
rbaLOj/6GU70Hwxwnqb+4lSQfRz7ukO8/1Yn1Z+rYTe7yFN18OgT5B217DC8
ZDP2Hz2G8/KryQ7jIvp3cf/obcz72cNepVCulPA829eR06rVdtGgyPk9O/sg
3LKWfQX100XsL8h7V5teobmGFYuz8ydV2fPwBKxO92B+G5+3UIr7Pgorje+w
7w/YGR3H83i4hvfrd9E8CwWcT5n1O8SLfL6fAM4P2njev+Z8FSLxJ571Zc14
i/m7f8al/Wcystu/StZHPsGjM/C1edj1gPbXBz5wfhf7njXi+P9WOqzWjKBL
9pCbPJs9j94/yz3kcJr92kv7PfpNTqTHfOT3y6zvW/l9/A/QK/lO
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQvaDMaLllR5EDk3a7WOQ1eQckvlTkHTkw/zyUf1ME
wv/dCVF/s14WzP/cDeV3ygD5Ssvr+qF8Phmw/JwpyPyg5RqzUOTVpedDzJ/5
FcIvWQyRlzwMtk/97PIih8apzv0+Hgpg836uBPO7z7gpovB5YpWQ+e08j0B8
oeUiEH5/jJcyWN4LYl73n6nKYPc0LIWon/NQGaz+0iKIfA67Cli9w3xkvtDy
iBnIfCX1E5Mg+mv6wear9/dB5OfMB9nvpB7WBbF/z3pFePiC+G9OKDighz8A
Ggaiow==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvaDMaPnfriIHljA+3U1zWR0WlCktT56EzBdSb58B
5qtuamYD8o3UM+ZC5f05gPwgdc9FYL7pJmkukPzynUvAfM1NDjzIfN1N+/jg
fCbtdombgQIg/cuLF4P5ojdlBcHyzxeA+WKRhwXB8p3zIfyb0kJg+ZC5ID67
+MwqCN9jFkR+5n0QX2j5nukgvruYpIEw2L35kyHykksg/IReqHprETA/sB0q
f1kE7P9LzVD75ETB5j9pQuW7NaLyleqg5k0Cm7e8ohJqXhXYvuXnSqDyiRD3
VhZB+cqCcD4ofIwa+JH5pkb+3GA+Txk0/HM4wHyjWmh43gDHx/I3DVA+GxvY
/a2tyPGHGr8AiFmvIw==
                 "], CompressedData["
1:eJx11FtIU3EcB/C1TLuxbJfjjpvW3OKQ6aCV1faSGARWT+sCo4ZQjjCLZMVo
bpbhYLOZNkvWicAm5p9RG3ajRlZUWETWUwiSRU+RXUAOBS586Jzf7+8456GH
MT58f//7//wth0+6fWqVSuUWf9L/jYCD5I/664sOaGodRzT1C1ZviDK8t1T0
ZjLeAi7Lta+G3HsC83xMK3oL+dMmmTDOpE60i6QDkksYz7Ae6oNnsd4zahBd
TWbCYINn1gD1qRA6uImB+lQ71ueCDNSngjh+/hnmFrTeU1EmNzOVUFg/VWcE
z2B/elYwKubDv2JFN5BEJ7ic3V4O+VwXzT+hszE0O2SC+kgErOUXmUVXkdlO
mneboV7ooO23VcD899D1sLZKHP8MHW//moLPD+yIT/jWyh2d6LfA/tjD4L75
nirIr3Zh/aF9VpiPOo71YyYbzMd+BfPj52xQbx5U+sOw0rfS1M3oVIbajk7e
oZ6TxnOT7/eo31ohv3afmqCdz//jjzj/dw/ldpONj3B9NVl0GB2fj2B9lnq6
SbKWfKEec2GeX2hfrHC85oVF7ujt09L+urlVD3D/PdNwHpwrQ++nVzovLee7
iefr+WyC9r+v0/tVif52Wem5foU5Fq3NWdC7EpgHOXToEo7vrDXBeYX66H3Z
iv3t7qXeiT54Ue4Gouuh81uJ+akLdPwk3teXMbo+K/pHlN7/x6zcDNukND9p
hPk87aX1v/B7aqbr54cY2H8hjd8ju9cAeW5U8muGb9XJLPb/s7RgeF+MGmjf
mAGv879fDnnLCObC3xI4/+5BcJ2fWwL5+gHM7z5ZDG6Myl1N0h3KfFkA2wvj
Rdh/G+b+yWLwm2M4vvB1aeG9k+xoXSE3vIf/AAqq+KE=
                 "], CompressedData["
1:eJxd1G9IE3EYB/C1CjNt0lX271puWpSzQVJBNmws6gc1CCYRsxEhhFazyMDA
FlEvMrrFIMiIGhjUu3sbEQm9PBCxXJpN14RRDHU6CsP+rMx7vs/grhfj+PA8
e57n7p77OVouBc5aLRZL0+JPv/Z21ov4TIf35oNDSvhGjbe30yl2zxpdrz1k
57rgd0Vfhkvz7Day2A53q6dNVuqaYBvHcz7dPvGd66n7EB8v9nfD1750eK2u
7spHvq3kU1nE/TuqyDPTqBc96KB5jnxlNzrJrfOcv62afOcPOVZerteXRGjp
FeP9iswKoyWRLjNZc9lg+Qzuv78Cjjh0B7Rzq+FUhvqJ/RI5VvfYZCV81Gw1
T/OK8/z/yDN4gOun2mA39/fs0h0Q34rzVSC+odRoSThLzH6+nNztkZH/dBnX
34t6cTyPWOQ48hNW2N+OfC+s+GPwpiXwwAjyxyxwNEPW7rHVHN7HHnbdHPXT
xhf4/f9GvXZ2eAGe/Gt0QFwoGC1pQz/wvvvuo748h3jolb4PTq0V+xYrTFTR
vtVP0z7Zg5PYp0gW+5Wc3ULxRt634GuZ/CZDloI1myl/YYLzd27EvGny2mR2
/aIbxIkUeV3SXknxl0nOH1xD/tlvdtcY309en69WNI/z93HSQbalMH/oBe23
6IGVvhIn9bN/Qr7cjOfVwg7HTVbUIXM8twr7N8X1ZQ/8C/0VTwheyfOEItU0
T0uS540ibh012/PB6Abt8AjPcxffn32Y47epnjafQP/wLd1u0TPE8es8z1v2
1f88Cife8/kzQ/3E8EfUU8tqqL4/zc/Phe/1wGfkF/x03mm1U5jvyUWcR8dM
56H5fPwHHfQqng==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbce6ez5/eLFD41Tnbp8kJQckfv+ZTxA+SxiELxOr
DOa/C4aot1kI4d8IBPPbY56C+LfnB/pD5HPYVcDykT6ofE4nZP7q+SUWEP1n
eCDmzdKHyPeIKwL5m+dfUS92YNJuF5q5Rw4s/1EZzBebeUQahS/pLonKZ5MA
62dXhfArZcTB8sYQ88Qsu8TA9sdrQvg/v4uC5QV0IPyb6yB8N31k/un5xyxQ
5d85gvkiktMg5u/zgrovBeS+2fO/BEHdc1sOOXzbe/4qOKCHPwDzwI8H
                 "], CompressedData["
1:eJxdlVtIFHEYxcWwCMxy3ZndWavB1hBsiRZaYqkWK5a8bFq2XsZ0y2ukRhe1
m2L4opXChtCDGMxbCWbRQ8RqQuSDhRrkgzEZFIEpMRESSPsQ5XznM2Z6kOXH
OXP+3/n48zej5kJxfWJCQkLN6p/xG0gaU68VtOR03TvS23wzMyeQNKg2HLey
L0wc9ZQbPKYulEJ/tBF6STnzJzdxmwL2DLnJH6xgrgWPMyfvB3+pZN2B/Mwq
4h7PHoPn1Qhz8iHod8G903k4/xU42lcM3heBXy+D/we4V1fAP8+Z+42ptxut
/LmRv28H/2JdbwVvacJ5+nmcl8zcVw1dZ/90EeYf4rxpH7iN9VAG/CfX2IY8
7xqvg/83z6t/x76eM3tmwZ1nWnISd/WISp5M33dEiF3K1W2kT1YS26SFdOLT
p+Af6HeRf7PCLDlJXywjdmhPRDOLSomFBS0d7C6HP7YsEA+CxfgcOA35gv+F
QH0e8nnaY+hlFVZe/I+7Ma8QGwXvRR/x+qzw7/4Y5/u/If9ZFfwDmzDfSIT7
HQCHeV9aVKT+H8AOZZh0+WI161NgoYb7L4NHmTXRQXldtcR2KQhuqoMudYAv
NbJ/Bft92szc6aTzUxswr9Jq5M/LL3m+WCr1k8e5b7zUbvjlUd6v/34a9V0K
c14gjfJzT5h5UNULzTyvuo5xnxb4ZwuYP8J/J585aCf9a57BG0TltZlX9XrB
wtoKuJi/j01i39mcH3+PfSSGeP4l9J8L8f5mJNIf8HwD3bift0J8f1PAQ8h3
+iPwr8/l/CtO6lcXRF4sivOyDvN94PtcFOB8vp9v/NTPIb0z+k2pl30GnxUl
J/rme9k/bOxnWLXtNvioKNVif/Fs6/7/ZJl5Qo3vsOhy03bOmwCHXXxfZug8
+aBonc9rRx+t0GFmUfNJZrZp7VvxPiEvRVuQid/u5PcjloH3ycvvV7+b+twI
WN8/8/+Dv8M6Koo=
                 "], CompressedData["
1:eJxd1F1IU2EYB/BlzZkNY5nTNJDNiVCTatJFpnvXFwaukAXCLooY2dJGi3kh
0b6cjdkmrYIENQpCKGgFTar1eYghEXZTQRHRnZfLIgiivOic5/8k5+zicPjx
f97nPOflnNfiC3oGKnQ6Xa98KXen/pnI+IZda/pr2vMvVrs07taTe0+q/Vg0
D8KOKeSG0+y+StlPxPcA22CQ/VQcOUNudTirqL4jyPmvtWTT+LBr9Nq+TOC1
RXZRPIBTJZNV9pyou0jOvu2xUn03nDEOKr4rBuCUO438HNs+q3Em96gs/wvf
4+eX2lvIdSn2YTiSZAdbaB7bGM8bR14dV7sojsfUnhNSlN8nhvq2KPeLoj4b
wfuVIoolsRRGfeA86veHud8IbPrvT3B+hvcjbCM3XIfdURvtzwk46x5BPsm5
0Y/cA6cmDiheEI3sgB31S9w/1wQvTrLfW8i/p3l+3v/CDdhej/lst9TzfxGe
O8gDbTbyy/ucx9D/1EO1Z8T25xpLY6+wfrmL6iXfPPLNBeov7XmD+bs68Pwd
C7zffqvG9n7Liiu2pszeVc00z7p5cqM30US5VOB8WwPNcyXHXtxI+beb8Gdn
LfnDVa13XdZYqrykuMfsPQTvnuB+Q/DZtGK/2Zuqpe9DjCuOmTcV0O92EvVT
y/CWC7x+dgN9b0MJttFE6ztH+X97t57qp+PsUA3lf6LknY6v1egX5f/9Y5XW
x8pcb1Cvbw0drNT0//lDT/N0JtA/ROdFUYSSqM8fxfmxN609b1Zcfh7J/gd8
06K0
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQbce62/7jzmKHxqnO3Tp2ig7I/Jx9IP5s+woon0dF
CSzftgPKzwfxb9tv2Abmt/v8VwKrd9oM1e+uDFZvsw6V/2YlMn/2fsulEP02
zGD5/SoLIPJ3qkDmrd7PPxvM76/5BHHfomkQ+TeyEP6dScUOTNrtYpG/5MF8
swlgvtBNFjkg//T+Xb1Q+R/SYPMzuyH8m1ckgfzD+yU6ofIbxcH6P7SD+aI3
88WQ+WKRAih88ZvZomDzXnWA+OzilZ9EwPz7XRD1lksg/Cs9IP5xsZ+hIP5q
e51+qP16YHn7ZxOR+aftr8xB5s+2L14GcU/kc7B99ofXQd0TIQnmm2+D+jdT
Bh5/YH6pvAN6/AIAfxK4UA==
                 "], CompressedData["
1:eJxd1WtsS2EYB/DZVlts2Og5p+3aTbtNuq0JEUaTmdKESOaSzpchTgyfnBA2
CSIRhiZaq6hLar6RkKxxDckMC9kHlwVxbysOkSBWFHNpgmif/9Okpx+W5pf/
+z7nOWfvxdq+0bMuPy8vb1PqL/3brOtXbR86XLuOuH3KlDqXxoG076mz4uxT
lMv7vpCDKy/DJd+QN92CD46Qu8wPUG/gJ9wSg0O/MX7oHVyV10m531xP8x2F
sOKEB2CfMhv26MhBZW7aPeqgjnM35ao4OtsxNQoHHY3Im4pQv7RGY1/pWNiU
6HDlN3jFyJQq8o1f1K83PMZK/vuXHAgbbeTn+ZgfH4RbS8je+HA19WeZyP3s
rKF8hklriyXbMflTFea3rKZcPmXj/mrT7pFX1JIDQx+qaf6VycjDO3L82qax
o99G/XSzh/Yjb2b7l9joe31GfV+LHu7m58VVvH8l58pFuN/Qie9VbyCvgA2R
qETzS2B95IBE+T2Jx7sl6scn8fikSPn6TH4lx9s1FiKNItXvzbgAeUOmnzcC
1e+FpciAQPkaI+dn4VZTtmOq26zNfZVwWyHXt7LPwXds3L8J7/uwlnMdvoer
nuttMJLPO9ivDDTeZefxTszfXoN+QzrUX8XPC7nRX7Qi7WOicXgi5YtFrtcM
Xy3LdkydOi7bPXJ5KezcTOPllWPg5AsaL58uhvvm6KneUFHaRWLocbZT/RwW
si0Y78IvON/2B06w+xrwPsVcP7lcpP/PdFhoCyDv5DxyG34q8nqbh/X7A/Yq
Hqzfcon3WztcJ/F+7IDnSrx+98CLOFeO5viMxgEliuc9F9mjsL+GBR5vwf7+
qud+nMgvZPb7ArhhQrZjqjBOk8ufizE/HKPny5f5PHEUwjv+8HnjsNJ53ITz
KOBfOonq//yG8yqkVuL78vllPGlJuVd99Ik8YdtWM+XL4sj75Aqq9+wj2ZSc
b0r5kjrynmxou4n9evYtn4f3sb4ST7S2jfD9MN5O9rDDdXaqv5nvg/gc5Ls5
d3js1N8hOKisRX6cx/u3aOzz783xS8y//h3jT5ThPing++iaFffXwgTqv5wG
/8N91qXMzLnvUvfffzgxufo=
                 "]}]}, {
               FaceForm[{
                 RGBColor[
                 0.07864000024400009, 0.08472839575199997, 
                  0.09386072924800004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{92.24449999999999, 361.952}, {92.24449999999999, 
                359.707}, {90.4262, 357.889}, {88.18199999999999, 357.889}, {
                85.93790000000001, 357.889}, {84.11950000000002, 359.707}, {
                84.11950000000002, 361.952}, {84.11950000000002, 
                364.19599999999997`}, {85.93790000000001, 
                366.01399999999995`}, {88.18199999999999, 
                366.01399999999995`}, {90.4262, 366.01399999999995`}, {
                92.24449999999999, 364.19599999999997`}, {92.24449999999999, 
                361.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{18.2445, 376.952}, {18.2445, 374.707}, {
                16.426199999999998`, 372.889}, {14.182, 372.889}, {
                11.937899999999999`, 372.889}, {10.119499999999999`, 
                374.707}, {10.119499999999999`, 376.952}, {
                10.119499999999999`, 379.19599999999997`}, {
                11.937899999999999`, 381.01399999999995`}, {14.182, 
                381.01399999999995`}, {16.426199999999998`, 
                381.01399999999995`}, {18.2445, 379.19599999999997`}, {
                18.2445, 376.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{52.24449999999999, 323.952}, {52.24449999999999, 
                321.707}, {50.426199999999994`, 319.88900000000007`}, {
                48.181999999999995`, 319.88900000000007`}, {45.9379, 
                319.88900000000007`}, {44.119499999999995`, 321.707}, {
                44.119499999999995`, 323.952}, {44.119499999999995`, 
                326.19599999999997`}, {45.9379, 328.01399999999995`}, {
                48.181999999999995`, 328.01399999999995`}, {
                50.426199999999994`, 328.01399999999995`}, {52.24449999999999,
                 326.19599999999997`}, {52.24449999999999, 323.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{61.24449999999999, 387.95199999999994`}, {
                61.24449999999999, 385.707}, {59.42619999999999, 383.889}, {
                57.18199999999999, 383.889}, {54.937900000000006`, 383.889}, {
                53.11950000000001, 385.707}, {53.11950000000001, 
                387.95199999999994`}, {53.11950000000001, 
                390.19599999999997`}, {54.937900000000006`, 
                392.01399999999995`}, {57.18199999999999, 
                392.01399999999995`}, {59.42619999999999, 
                392.01399999999995`}, {61.24449999999999, 
                390.19599999999997`}, {61.24449999999999, 
                387.95199999999994`}}}]}, {
               RGBColor[
               0.07864000024400009, 0.08472839575199997, 0.09386072924800004], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{57.18199999999999, 387.95199999999994`}, {
                88.18199999999999, 361.952}, {14.182, 376.952}, {
                57.18199999999999, 387.95199999999994`}, {48.181999999999995`,
                 323.952}}}, CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.07864000024400009, 0.08472839575199997, 
                  0.09386072924800004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, CompressedData["
1:eJxV1F9IU1EcB/BVUA+2gord/iJCMUrBP7tRTCq1B2kUgVLmcpjj6MQMRaHF
GqKOGrjdXULqgk3KSkYpiYUs9UEIypfIImIgphDTPRj0sMAHI7v3fH/CPQ/3
4cPvd8/5nd8995fnbatq3GaxWLboj0d/tupP6dJlRVssKhs97GbrrKOM+2Ax
93SI7DJbVbQGOHvX8JySDBquYudvI3/tMeIjHTwe9X83fI3ltML2/BKs14z8
HYOCo4kFwTH7Hofu68zWgvzwGQePf2pFfqbZ8FXW20b1dsGHOs12M81vdhXz
BOClO4a97FkQbruF/KYueKPBcAs70Q2nqhH/2EPnrYCd1K+aGdT/I4b6pHbD
Lvb7IeLJs4YDbHgAPkX92Iijn36rYSe795Tq/VfM83NemO1mDxJiPDuK92eP
8PXSb8YRt9fBcxPoZ3gA/jWJuJTF/uvTdL5Gh9mx5CPBEe2zg9fno3y/Vebx
c1Pcas1FmdcjYX210o946B3yK2OC1cqE6JlJma//jfLHPiDeifUiT75i/b1T
VM8CvDpF/ViRhfNotpOi5ym+2d9XgiPaINarRn8jUh/qOTBK/WpH/qUxchlc
PkH5f9CvUqpfigqOSjfEeOo07EnS/bHBQxMUp++z/Jbq/Qm7x0VbXpsdYC0j
tN8qvvfRl1TPX7gQ54tJVr5f2jmM+GyRg7//fojuj4/ue5z+vy9wXj+c2S7z
/+MY7ruaKuBO7++j81Tw/qTX76M/qRrDrvTi5nzxon+93aJXgqILaL4UyjL/
v3va4foU6lm+CasB3fvc7IKPzr/TIcy3tUiJ2VHNK1hR7YZrWaiR5sM8/rf+
Jto/prvOzZ77MA9naR7m0zxLXDFbVcLlYnysRPdCLcugPiX3OOL1ZDUX66f4
fruVpE13vJbl0P7armJxXpvm939adX7K
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQvVNflzv2obnDGpmolOrzRQ5APtfdnah82Rkg/qwn
5RfAfG7ZGrD8k4JLYD6PbAKIL/Uk8wpUPgjMTzl5DZkfldJ/E5WfegdZ/6wn
Z+6hmn/0AbL9Uk/2PUJ13+7HEPUw90P5XH85LFD4rNoWyPq5S90tkM3nfJps
gWp/kQWy++B8uPuh/J3XUPWHXkE1P+USqv3FF1DdBw1flPAHACFBnm8=
                 "], CompressedData["
1:eJx11E1IG0EUB/DUg5XdVXrQixpKroVVBNeIULDet4LoJaCgnZjSujXGD6Ih
IB68tRWh3nLxom0zgpVWo3hVelioUiFU/EAXEXVFpAehBeu+/ztkCx5C+PF/
M5l5M5NQT39btCgQCLTcfbzvXK2uyuLG5mx1xJlfSzTfWdE1z03OANsqI4sa
WLVKqV7sr8LmSQN5KulZqmbec49QhjnfQn6V8LvF5y7RPsD+iXwyzv4F5/vJ
mnmA+kpYsc+Rr71BvX3rs2KHwr58/XmYxr/j+TOTyOuH2HOe20TXCBz8Eab9
JEfZAex/Is1+AidS7Cr48RjW+5THpwaxHnMav/eV12N2w/Zr7m85/CyGfqa/
Yz9/BPL0eKGlmunw524dHOrl+Spg6yXnNwY59wqWZwb1I24VOiKm43730XlZ
qrwgOyXcL3kFx+i8XUX+hjdGYP2vQfu3k6jXH2I9Ke5XJg9ffmLveh4T2c/o
V3AfjmS5v4eov4G14FED3c8Zyfkx6usXCh0R2/9ZW0T/jB3U931BHs0hvyZL
5UMG8yeX+Dx6+X4t8Xzl9/gbxgdjcOcyxu/NwrvLqO/chI0V7GeP7/N7WHn7
KEzrc1f4PA3cj9YcO4p8C9Zcul9Nzgt+n+461TvF/J7dU6p3PsKa/qCRfMDv
u/D/4B+8EpVb
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}}}, CompressedData["
1:eJxdln9sU1UUx7u2qYv+UeUf+QMtEMkIJBIDRvZa+l7QxN/WDMNYYZYsd0z3
B93GxsIIvFUWU02gLGr8A81zmgUZrHUM1sGC1WhEEB1iIpCJD7NntDFZN0bW
6HBz73wP89390T8++Z57zj33e969XVYTr6j1uFyukrnf4bmfe+7XVex2G+s2
aCeWRMX0UJNms14tsTeXAL/IeqwLPHEGnPvRZkXks+BCHvrBUzLfyDhZEV/1
gjO/2dxmXesBr6F8Ueuho6x/QfFWzSfELpPrb/qQ6zeDC+9iv+oo5RN7DHBk
Y5i4nfMVOsMU7+X6keUq6TMDxL5clzrf/+XpikSgVHOyrgckPvDHOvDsWcRX
PgO+5wziz28F+7PQ9VqN+rf6nRwVb2ZkXpXG+tx2sNkDXa0Ed3dzP5ew371N
xDMvfQvubEQ/dRdsftUaaED8E5dJt/6KI9531ebN1tI49z+K9UM72e+p/9mu
P+vRnHyg/z6N1rvj0J9fRLrVCdZHF2tUf2kD4iPLiIW/EfGp1chX3QSOPA4+
sgvx6gabK0RfM/TYk9CNFvbjWZtrxMHdiC9GEa/tQfz5VsQP7mNOgVv2cr4k
eHkb1hsC+dKonziqob+3uf/WJegvW4/zSY3Pnc+dKsvaAQ4c4/kRYKNGYp+5
UWb/Spu3iv21PP+LoHdwvvg45vXR17ieafM2MVXv5Kj4ZafMV9jP4Zs2bxbX
2P/IKPQxzMfMD7+HyQ/vLvChfJj6DzZzvjHEv9PC98PP2N9K/l716+A/mXMj
+J6Sx8HqDeilJ1j/VaX5TzLrJuJLe50cFUmJFXEv7g9f2XXw2s+gt/L8e/qw
/29yyPcT8+cZ6MGTPM8fSOxTt8h8tRT57+f7qiyN/s9+ivukdRPuE/Exn483
TPFTR9ivL3EfNbzH591hc724eAj8dBXut/VvgSs18FAHuK4MHG5HveG/Q+TH
67u5XjaE/dbx/fhdUGLjVsjpj8u4DR7sufs9h2i/T7E/ZhH6JeYY1WsTr7A/
gX+g31zADb1OVsStNL8XXC/A/szmwUWwSzXBw/DHm/o+JPlTOCWzv1lir/8R
7G8izfFfo/9q+OMZrg3Sfi50cX8PgrvZn8CIgveL/dENcPVhrI/vsPk5MZ7k
/Gug9+g2r3BnHlDofnG1gVP5cvp+Rhrv+lO+wJ/1EpsT0KePMd8GZ8ifFZ5Y
sZzeu+i8H6Rb/x5Hvdh0Ob2XH7EfsTtY/0KvzK60kxWxn/3Qx8Azffw9XkF8
O5/37ADlF+5+Xp+AvprZfIz3f3IBn+b9v4/8k3hPS4ygQvkmB3k+Hw7Ov5/E
q8BVzPE3cN4K/CkpTCqU72WDv6cY/DzH73mK/U/w/KUimMd9WZ63iyG5nuP/
zn/nSisu
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd1N9LU2EYB/BpW5y6sF10oVSCdbOLwn5ZMSPPfiCnjeoghUx2Ze+WlbYI
wsMs6ibfEUFKFhkGQ0hMHaXT0DME/4Lw0ozA4IDVTeJNMoPa+34f4rxdjPHh
+7zv+5yzZ29DZ6YtVe3xeOKVj/h+ecLmK6d1fWp/B+truaMrDpOvuP2KW93w
8Qjy+T44HxWe4FuP4ZpW4Rle+0I4xu4ZqK99jfxHHNZYSLp5TLjMtevCQfZ0
XDjLA93CWXZuAvVdPag3JoWDfPwW6tumkBsZuKHgdgebK6j5p3fwty7kmWk4
kIR7Z+i8S/CDIvrJn4V3zCJfPuR2mT+sdzvLrTqc96dI72sv8l9F1G/twfP9
lF7lG7tR/5nq8z7Ul8ial/wB9leFpddKsO6FN0t4P/mdYbm/TflRDfkZyv0y
D7LDtnTO9MJXF1C/UY36L/PUzyrOfz5G522j/3Z6/3odzlt4T/Unw+7+c/40
8mbsn7s9jHyb+lv6qLjf44soHmkUzjrr1N/QRZk7S3PY70mPcNAZpt9Tu4/1
LZOqp0dV+4awfiUufIPt6kdufUc/ixbO13Lw4E2an4PUL6P5tkOKjTeqZ58J
J1hTCk4+Qv6W7O2teCTBDqQxH1aq4t8Jtpam+TFRv3mN5i8KD3Zi3pZPwceS
WG8egUfbUW8GYOcy5ftC8nntC7QfzWfhvOpFQ3Vjq3t9zBmIKvs7XyPox2yS
+zu4L8rcL/9PMVai+2Xgbki5b/75//uo4r85C/Yt
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQPcN4VzvHZyeHNTJRKR8XFjkg8z8vBfPbHN5D+Aor
IfIbnkP4FavB/A6GmyC+Vcqv9RD1E/ZC5K03QdQnTEXlPyhC4bf5+IL1P5Hc
AJFfogKWf3INbL5V+5/fjkB+1ZPJyyHyE244gvW/XwA1fxeE/3I6hG+wFMT3
ShGeANbfETIRIv+wHSJ/pg7CD64H8X+1u+RA+EfLIPIMySB+WMr+QmR+VIpj
ATI/LmV9LoR/JQvEj3lyMhvCr6kCq38yIQvCV+kC8aOfhGdC/PNgDsS83RnQ
8NyEzLfqUOByQpZvkwh3Artnbj5E/YyZEPnEWgjf4qoT2L/LO5Hjzyvl+lTU
+ATFLwD2ddiw
                 "], CompressedData["
1:eJxd00tIW0EUBuAQyEKoxFoqKFWIaDaSVclGCSrqqmQTUDDaIjJXU0RjNJH4
SBCqTEQERRARg6tSCoVaKhRaI5TiqkVUImJUfHCv1kIpLnylpJiZ/yzu7SKE
j//MmdcdW7vfo5hNJlNt9if+559+5uv/6mrePfGykuG+GuHyjXrpqj3hSl6+
CeempGPKFnyUQr1G/rCPemUbfnWA/LX0AnMc6u1l7w0uYjtH6H/xXdarZSfI
A2uyXo2foP/dsqxXC05h5xzGPzul9ffQ+v+3hv7aGNYT15DnLMHWM3hmFfUz
5MIU+j86p/39hrvPkYeuUb9EXs9vkK79KR0rdjbIeucF8shz5MO/kGfaDObj
DPUV5Mc+5JM03hXAfBODwmme6IIPB4SHeMQn7FGrQzRfJ85vOYj6SIdwu2oL
Is8o0my2X28vsxjcxHYD6J+Q/V6oyV5aD+ZXM36cT0Ked5Nq9yN3hNDvSw88
FdW7MuaaNuaNb9DvE/Xf+aZffzY/ht+G6Xu8pe9tBLnlAc7LNUq2weEonae8
Lw8rHYDjSYxvpfnidP/2blr/bNYHzWylk+77JfK/jFyt9xAfd+id5lPFwi1s
TqH9W5H/6BBO8dx09v0tNrNFH3L3H/EeW9nHLr297GGv0V/lfSxw92WdvD8z
nY/7CnmS9pe4QZ4XxnxaGo4O0veqe//3lBXH3A==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0ztIw0AABuBq8YUSRAqCFEEEQQtVERw6KaKCQ4TWKYJDOR/UdysRkyIl
qRRRCnVQS0WKQxGUghSDWNChDurgIjro4hBEQRy76KCX/4brEMrHf3f9c3dp
8S96J8ttNlvP/0N/t/dk/So22HfqlIgrEuzjXRun7tWFS2oPUVPIs81DVq4e
Uxd1UaNWiHpu5dHeT+Q/eYyf8g3z1jJKifWXJLVivl3C5WdWbp5cwB231B5T
Nli/R2s86czxlshTlreHlGVg4xjrBw/hjBfrt+/Du7+0b8B8S1jvowlH6F8d
Ry4MwOlteKKRvd8WtaFf1cPzm3BbHfWI6Y+x9Wus3HzdwH5WVuH/xqKsb4Vl
EtB4S8QZKXVawfqSg9pvjsvId7qxvhjCedyL1BNm/xJyeRnz8wusT5J3UTeu
S3Kt+cOaT9xs/kMD9tcRgt0u+GYF49dFai+5W2V9w8hbw8wJdt5ruB9uFZ5F
/+izBBeC7Ly6YPsi8sr3/z4HEvHNoK+QYvtPWL9R3kUt21SaC1+4z75p+LsA
2+fY/BScW+Lvv5/MrvLG9/EH9u9pqA==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3TO9rLlO0c1hjUxUivGEIoee6d+a1jWD+FkpHydC
+LMuQ/gK00D8smYnQXew+gNzwPymV34gflVKwmKI/L5cEN8q5ctKZH5USs0G
VP6tTRD9cpkQ9Xu2QOTvxUPklbaB+S3zwiDmd2yHyP/zgMhb74DyzVD580RR
+E33vriBzW/cBrX/CsS/vJsh/pu3xQ1s/sz1EPlt0yH8TashfLY6iPqI5RD1
x5Ig5tktgsjr+ULkY+ZC+Ha2EP6mGWD1zXUmIL5Xigk0/Oy0IeEZPxnCRw5/
ABWOsY8=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQnXpxemtpv5fDGpmolMjpRQ4IflZK4WQIX3UKhB88
AcJvnQtR/78XwnddC+Grd4H44q1zT0L41h0Q+d5PKPy2t3LeKPKNbt5g8691
Q/iemRB5Hqj9gj0gflWK0yyo++ZC5M0WofJfrELmW6UIrAfzW3yngfU/CdoE
kf/bDlb/ZP0WiHvWVoLVP+HZDlFvmwJ13w6I+rXuKPyWXAFkvnjry8deYP3V
EPNaFQ+B/fvkzxqwfFvkAi+w/bVLkcO3KsV9HjIfEv4AdkC1Kw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQnXpxeuvUpV4Oa2SiUqydixxSL4q3Hn2AzJ/e8lDQ
G8j3SmF3BfNbX1p4g+Xne4D5bR/jQfysFHMfiHxpMYgflNIYgMyPSqkNReYn
pbhHQvS7ZoL4YSnlMRD5pyEQ9bzxEPmvnhB+fgJE3hdsf0zKq0QI/608RL4u
GeLeXm4QPzLlQApEXvElxD8T0iD8lTsg/HcZEL5hB4Tvkw3xv20OhF+dA5E/
m4LKvxuOyt9rB+F7ZUH4uZIQ/otUCF/2iyeY3wZ1b+lDCL8vBpXPEI7Mz0qZ
5wfh8/7zBIf/TUh4t9qaQ8zfCI0P3lAIn9cF4v6rlSjxhxK/ADrU1bk=
                 "], CompressedData["
1:eJxt1F9IU1EcB/AhrKciRpkgDTKFIKgU2stipMGSXf88DM26KwM5Kxgsm7ml
Lstq9yrWBWNYD3MP/bF/zBHh2jKCRIp6GDRiDYp8iFMPsQiCK0RZ7Zzvebg3
ehjjw/d3z/ndc849dX39Xn+VxWLxVn7s31+4poQ1T3Nqs0xedA00Gx05xHxH
KSaYe+mXI8inczyn9X3MWaW7WPGMTA8fYy4pepVUyQ+SKwExXovEx1s8wdyj
6LuZD5DFftRntnPT/EnUZ7byevo5hPpMrcTn/zMg8k3MXhIeNFomrRFzXhqC
9Qb4ZdTcT+055hrV4WUOkF9jyINB5JGLsD0OT6ioz4eYJbJmglvZ0Y28YRL1
Lhf88TL6X7cFnpoS89swX9e00TLZmTDaSa7ewvrYdzGP0OMp0V8A63PjIfp5
Osvr6Ycc+rF/w3g/n6Be299mcseg2dYEXC+cWYBPPYb97+ClLLe6WoZ9j5CP
fof3ZET/Pe3/9fs0XL3WZNWxnnmEhOZgzcZzuk28r30D/Ps+d2xuI1y8J8av
xvNNd42Wie220U4yi/VV61ba+PqH4siHs+g/rGH8wlAb39/hcbFeDuTRGPy1
LJkc/GR2aJmfD6oK/yhhv5LC5wt8/+l8DPulvMLzyyK3PhPnU4GVnNE1qjuN
89ck6t3XkR+9AD+P43xp4jxbNZz/8lmjZXJm1Gw5in6SS6ifP40834j3n8T3
F3MlmXtJe1Cs7xtmH0n7jZbJA5/ZjbhfYjpfb4nOdIjvc4znVG/F/ugevj+0
c5/IV8T67hUeN7pynzj/yVc9/PlLLcKvcV+l3MI3PXz+vMd430nkbaf5/mP3
4V+pF1Hn
                 "], CompressedData["
1:eJxd1E1oE1EQB/AQUKSChxoaqV6KCCJYtErRFSGKKJZNhEQqLIjSvrSaSyQK
wY1eZHfRgBaLNTSHlAZCa0yittXGzSEgKuIHWA9GC35U1l6qOYhWqNLqvv8I
+zyE8GNm581kJ6+lKxoMu10uV+jvx/4OT6X0ftPvK6xT2K9KzBee8uptVadT
es8DuEZufQj3kecfwQfI049tS+yH6bTCBsnNFPdye40gPX/3PuIXqP7pfz4L
NwyQL8J7B+HGIur9Hobf1+DvN+DZFQGev+kOXN9pW2XHy9xa8kRAmNe8JlhL
F0Qvr3JbLspffAavRL/G/Bu4aRLx2Aec93bCaYWFxkSfvwUv0PPri3DDc3j/
Tfr96PyTmM+Qing+MYp45LpgzTREv1JtS9YM5Y/FUK9E9fojvF8rkUe+xNB/
hM7PH0M9tQCrnXCphHz1MOzBPFpTEA7TfIFD8DBsGDL8juKNB+n3Jn/bJ9hw
bxWstXswzwD1c6XO98N6msM+zz7x83mWMtg3aYSb5VLIT17CPlX6EE/H4a9J
ONttu4Nd1ZCf9SM+co763WM7yIbitmt6cIvtTpY4hXjXWuTv6qX3nZMFqy2I
J4ZsH9HVjdjfahZubkX/+RzylTbMt3sU56Xbeb71Mk/7uwPPzxWcVtjlkhiP
3qZ92476H+n/oW5G/Rnaz4UNqP9pHP2Ya1Cvm/bZXCY6uSQ7XNNf/5T5eSGK
Z+qIb5tAvZ7PMn8fq7njujKN+Nw49fMCrvzve7D0BY5O4rwOD97v0TLqr/Jh
PoXuEyOK+Xpx/+iLGcx3Bvef4S6L95/zfvwDBaNq7Q==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQHaayaoFQc4DDGpmoFKHVRQ4IflXKtPUQ/rM6MP/J
i00Qfl8ZWP0Tzq0QvlkeiG/1RGs7iK+1UCoFYp71Doi8VQQq/5ceMj9rwTIO
sP6UtA1FDms9QhxrT/mD5fcsAPFFHH17QHyvlE+TIPKmuRB5oXZUvkwtKl+i
AqL/aSmY/6SwBCLv2g7haxSB+Fccls6A8O/nQ+R110H0786D8O8eR/DDVF4t
eMcZgMQHhgfYP0EpEWUQ/rlAiPykVnB4LFhWBOHnTEYOX6uUN/OR+ZDwBwC/
QaJF
                 "], CompressedData["
1:eJxV1V9IU1EcB3DrISKyBykhqTHFIgYlhEVU2hYhKbSZ2dBZFuNs/qtdXU1N
zcoHzXKUMhma0p2wsjENzZb/cPSQhKBLE6xEe7lPPqT4IGRYee73h9z7IOPD
73t/55zfPVzjrUKWbXtUVJR184//mhMDYig7Ux88YGF/Rpx6c6JOdBSqHajg
rmIfh7kDYnEd6pcGUdc9hjdClG+CDe+RX3oG738HTzTD3/rg/HZ4aBC2v+A+
zR4Nyf18xg54J60f24m8cRjrLXZifx5y/0vkw5Rv6UI+Qu6aUp4vIK5/Uds8
g+d/kkMzqL8mx37FegLNZwd5N9XrKV+L/fjKp9Gvl84ToPV2DSGfQG6hebZH
4DjYN0H7FT4g3z8JN4fgqW74UCueHxe5i9mCG/XVNu4M5mmAszzIZ9QhH/MU
tlei7qznzmdhp9IWdrVMaTMTSmFrg5yXxgX4fKOcl/LICXJ/s7TiwHmcbvQb
caB+/Lnazha1f3nw/BL5lRf90wXl/cmXugWabyf2d5L298SHfqvkwzSvc06c
PzWA8/bQeT1B1JPuwEfewp/Io31w3l34xwB3FtvrgusGUV8ht9P7na8mf6f7
dg/rx4Wx3+ky7H/2Dc6Xdgv5z200zyLkR2m+pXa6X1XUjyG/VqK0Tqy3quxL
zYMnbchrzHBZAfJ/M+F9Rag7jNw5LL5EaQtrva32PL0PDZ6XNDSv2ivwjQp4
EetJYjXWO2bB/JIfUL/rdP/pfq7l4P6eegiXX+a2SpX36X6kod885umzn5X7
SanldJ+SMN8xer8xWvS30H7Xo7mvsQub5+u5OGtI+W3SBzty2c1C7mzDxpxJ
zvfa5bo+ZYw7lzXZUHf5TVvz5fa7lfYYXDZ1fZsB3lMAp2vh5BK4+Z9xa3/c
J5aN8nzOuJS2sLkapTPYciN8VGOSvzdeL3ywBv0jfjh6wSR/r7wD/PzF4phW
/f1T/j/4D5Ptif8=
                 "], CompressedData["
1:eJxd1F9IU1EcB/Bp9OCL4JMsGp0bEswUrZDCuZQmtu0qufVnTKLAzlXSB0mI
wpKghyBBymjNRYLuYeSfYWstuhsDoZda9LDeTISJNwRfxF56yKid+/0V9/Rw
uXz4/s45v3vvuUfpHwlqlTabTS1f4n6pboFVpHo7lg728Tvtox2Sz5BXrH7O
Ap/g4x7ku1/g2U7hOJv6Cld3CSeYUhL287te1M9tIt9WYfvZgGlXQrjAYj7h
Vv7opfAEc6rCY/z0Auo/qqj3LgoPsevdqA8uIdfJStLqPp5JyvnqMvzQh3wk
BTs98K3XtF4bfC+NfrQT8L43yH8dsbrALtZZPcGKCtb7nUb9jUPIf6RRX+PA
8+2YzrLJA6hfo/pvtajPke1//RaeicClHNwShb/n8H60acyfpbwxhvwU5Y5p
rNeQFd5m7ih8TUf95DPUr7+DtftwJAFnnmD+EL3/zBysv6L6ZWv/9YrjA3KX
Dn/eQP6T+ru5Z3U9i9QGJW82CI8ZW9Tf1TYzN1YymG9NFW41YvQ9Y+cxvn1R
dioue/9TjK9wCQ/xqgfIi1XI87exvn0V/U0N0/5JUL8cVkZl64Oyd64Ih3mL
Br8PIZ8nR3vLfhHmjgHsj6L4P/bCvDRA+8dN33cQHj9J/fRjv403w8cuY3z+
KBwPod7thI0LlB8OmM+b7aH5aH8mfbLzXtlNXdbxfuNxpzS/seFBP/kmc34D
50WBzZj/k5/n6HxZPxeQzpt//v88KvsPNwvGJA==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQHaaySmEmX5DDGpmolI8LixyQ+Z+XgvhaClt5IHyF
lRD5txwQfsVqsLziVEYQ3yrl13qI+rufA8Hy1psg6o/eR+W3nkPmayns3g3i
Wz2R3ACRT18Oln9yDWx+loLwZBC/6snk5RD52EaI/vcLIHzXIgj/5XQIf206
iO+VIjwBxH+lsD8WIv+wHSJfHQLhB9eD+KcUzL0h/KNlEPmpbiB+WMr+QmR+
VIpjATI/LmV9LoRf7wXixzw5mQ3hBwdB3D8hC8JXjwLxo5+EZ0L805oMMW93
BkQ+Nw+Z/0pBdRYyX0th4QGIe+bmQ9Q/fAiRT6yF8Df+h/h3eSdy/HmlXJ+K
Gp+g+AUAdaXBGA==
                 "], CompressedData["
1:eJxd1W9IU1EYBnBtSJTUkDBLK5MFkxlICUmZaElWShmzVoxooGdoSc5ppmwl
5VxmWBaGg/nBLUhtm3+WhMWyEVELRkj5QefKEq+ulIqCsBAy7543uNcPY/x4
3vOec+/Ozkkq0im1KyIiIvRLH/5btc1h0/iU2a5NamacrMwWmeM9axschWXT
yL9yvK2cgxz5PZxzMTNw7B/e8VwteSSykDcbJ2esKgz32xWCC+XIuc+wOR32
f4Hf7kb9HHnzXt5WFj3LW2ELZSJPmEWemiW0wp61H/VuGu/LQf+tIqtZKc2f
FcLzeu/Cw1F8voedsMH+LbwN7E03nLYT4+W9sOw46jWDWF9+FfIFD3Jni9j5
7UIr7E2dGL+acq0befIT9Nv3FPPnDiLve458ekDsqD6xAz0YLyWrXPR8XviS
A/O3PIPvdcPSIcy32In6Ag/y1vvwiybYWQvnXOddxMpqMF7SyFvJ0i8il1xD
vbQa65GYUR+qQm5qQB6sFHtOL7SKBSvQ32SGpRWUN6K+UYf+pvD6zrDFcuTF
zcg9ZNltoRX2KYs4l9jhmP/9nfAQrW/BTc97AePj6P3F0vsYHaZ+l2FLADYa
UT/qo9+PxnsfY73rab4CF/K152k/ty35tJq5SpBLr9D+YbD3rNAKu0Ujsm3j
ybC511rUHzgGF5egXn8Y/luKfGUu71PsaJnQaqYsF1rFknVwOnLuB9lC7qXn
mSeX6bGeroMYn0nvs+sQ+stoP6TUw+uwP23Oevw/Wh3IE0xwnBM2mlDfQQ6a
sH/ltN+jaT8NLHNOj9AGNtKL+dLq4eh++v3raD/2I283YH6/G3l7NfKMh1Sv
E1phT9GI85t5GP+Bzo8HO5An0fnycgPm19pxHvskcIOV/t8/cV7VtdL7nYGb
b/E+Z0uc4J3HTTYhl4/hvK4zo1/qO97nuISrvG/Yul4pw/s5qgb1LY/QL4P2
m8Ugtmae7osxOPE3fCSA/h1hx7PFAPKPlN8Zp/WF7wsrkwXp/MX9wVwiq9n2
92JzExjv/4X7puET8qlveL41k5h/IYT7qo08PI7+nuX33ZL/AQpd84A=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{139.24499999999998`, 376.952}, {139.24499999999998`, 
                374.707}, {137.42600000000002`, 372.889}, {135.182, 
                372.889}, {132.93799999999996`, 372.889}, {
                131.11999999999998`, 374.707}, {131.11999999999998`, 
                376.952}, {131.11999999999998`, 379.19599999999997`}, {
                132.93799999999996`, 381.01399999999995`}, {135.182, 
                381.01399999999995`}, {137.42600000000002`, 
                381.01399999999995`}, {139.24499999999998`, 
                379.19599999999997`}, {139.24499999999998`, 376.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{213.245, 361.952}, {213.245, 359.707}, {
                211.42599999999993`, 357.889}, {209.182, 357.889}, {206.938, 
                357.889}, {205.12, 359.707}, {205.12, 361.952}, {205.12, 
                364.19599999999997`}, {206.938, 366.01399999999995`}, {
                209.182, 366.01399999999995`}, {211.42599999999993`, 
                366.01399999999995`}, {213.245, 364.19599999999997`}, {
                213.245, 361.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{173.245, 323.952}, {173.245, 321.707}, {171.426, 
                319.88900000000007`}, {169.18200000000002`, 
                319.88900000000007`}, {166.938, 319.88900000000007`}, {165.12,
                 321.707}, {165.12, 323.952}, {165.12, 326.19599999999997`}, {
                166.938, 328.01399999999995`}, {169.18200000000002`, 
                328.01399999999995`}, {171.426, 328.01399999999995`}, {
                173.245, 326.19599999999997`}, {173.245, 323.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{182.245, 387.95199999999994`}, {182.245, 385.707}, {
                180.426, 383.889}, {178.18200000000002`, 383.889}, {175.938, 
                383.889}, {174.12, 385.707}, {174.12, 387.95199999999994`}, {
                174.12, 390.19599999999997`}, {175.938, 
                392.01399999999995`}, {178.18200000000002`, 
                392.01399999999995`}, {180.426, 392.01399999999995`}, {
                182.245, 390.19599999999997`}, {182.245, 
                387.95199999999994`}}}]}, {
               RGBColor[
               0.07864000024400009, 0.08472839575199997, 0.09386072924800004], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{209.182, 361.952}, {
                209.182, 361.952}, {196.682, 349.452}, {169.68200000000002`, 
                355.452}, {135.182, 363.11799999999994`}, {135.182, 
                376.952}, {135.182, 376.952}, {149.682, 
                405.45199999999994`}, {178.18200000000002`, 
                387.95199999999994`}, {178.18200000000002`, 
                387.95199999999994`}, {209.182, 361.952}, {135.182, 
                376.952}, {178.18200000000002`, 387.95199999999994`}, {
                169.18200000000002`, 323.952}}}, CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.07864000024400009, 0.08472839575199997, 
                  0.09386072924800004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}}}, CompressedData["
1:eJxd1n1MVXUYwPErkJGjZPzBiPGW68VLzbnJH+7S3F3Z1oxWM8fgVm7eflYw
B3h5mUBcaGN2remwdBVmWI2pCJcXXwCRjco/lOFy11ooaOTO9KJLOcd1k0iK
c75P2zn8cf/47Hl+z+/l+Z1z7hP+8o1b410u15KFX8vCL27hF507qlft9Hs7
M3xqbijgNd3yid3TeloLflXiSfuwPojTWk171HQ/zjpIfPcJp6922+1RP3bh
1K9M12njHXipVc+nZR7Gsc+tfM3/nekSPUPmf+Mg8R178N19rPdl6qnaNpx7
BDdJvaw+8hNk/tyzxOdPmXYbaT87zyP6u91ufeSmw0b6H/jf07JeHT88SH4k
hpfL+Xhn2b923G6f2tntdG6Y8cn38W9yPj1/4vZ2HLyM6wPk3xrHe7ezvket
+GbtVAX5N8nXbpeT//0V04VaDjaKJhk/VEZ+5zWnp6bsdhsXrjM+rpx4pUb9
vVL/8RvMn1NBfl7Uslq+nfyzt6j3dgDnyXkeqCR/9V3TG1VvFfGBGeJt1dT3
Gqb9ancN+V/HyPfWkh95QP5Agzj+HcvV9fj+EryijvGJs9QLVxJfNsP+Ppb9
z99gf/2l2Li64H+KNe1dnPCL3A8l+xmz2208f87p69b9e1MFt5L/9A/Em6Xe
nWG86n1Z/5Dpt1Ss1G6fmixzOiL9/NtyoRqX/m84Q/wO90NvPUM/EjhvPWWY
/efLeffJ/J9Vy/27glfKfUyewFFx0QTPU+gYDkk8sVP6N8H9D4kvSn5il90+
FXLYo5Z1s5+HxGt6iJfL/Y/vZf2Xf6XeJfG49CO/j/xtl+x2G9FRp+dGqJ8s
z2P7SeKnj/A+ea2D+upb4oFD5McO4Me+IL9iPy613p+lanQPfoT3q7Z2F779
ER5qxhea8bom5ktvpB8lNdLfGlnve7iw2Om8oL0/JXqVeED60xlkveulP5MS
HxMnNbK/TdKfJxuJTy1yRZfdHmWEWe8OqZct/clpwH/1sJ5z9finXvI/rXX2
J1jjtL/M7mndr1ifHpb8Inl/WP05r7cWsJ7z38j+XsDt0p/1+fL9kv5cXCPj
Wxgffs70BjUTIn7tKeIdjaa/1FNX8H5x1eGUTJ6fCXmfRVIX9Wd2i8MZWfL8
H8UfiLut/gzqY1l873z/9yOb+/DgGPMVZPO9PCT92EZcFXQ57Qrb7VFB6UdP
Jp7vxWvTyW+S8x5J5Xzj5PuUlEz8WXHGUll/3yKflPWnUP+e9T3dpW96hnr3
Bsg/8aLz+5r3Ei4Wr1qNPfsZv3kd9V5vIz76Ch6W73lA+v+h3L9ICfGGfu7b
ylrnfPb/O/8BN6nNrA==
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJx1lWtIU2EYx8WIjBDDIESNDAujRXUK0ZSYFEkXSdmHpTMn6WvJJtvcnDrX
nOWlmt0oLTe15SwstzSdiE0yVCgKQkiQoIuEpwsGdqU++CXP+T8fzgn6IPLj
/3/f93n/z/OebSgyqkrCw8LCrEt/wv+FpF7ucHxxRiBewyIqzRkCZ+8Gj/YK
7OEuEx/1Q38qcg37TPyHdEMAnJQmcBr7RaxMg99xX8oatrJPymnM/wDnDaWK
fj5zEPrNZNHPvxY5xJ3bKfp5UxD+ya1Ub5Dq3/gfHgZ3KsGZD8GbCsAfR8Hj
BVS/yM+5bC3qmSZ9Sot6GkR2cdmFqCeZ2FmI/T6F4C8kdodk61kWnf84Hdxq
w31mxTxUbHm1NJ8i/gX1ZxZ58wtWsFNkFR9llffPVCHn1f+wz4zz1ov7q1l9
ubyeoAn3KdwjsJbNGcGnKT+7kfLbK2UXd/6gXH+iwvoJM/gN5Z1jA/8oFfgQ
e+cUeJ6bMkMPNEG32MGhi9BT6mleW6Dnu8CR7ZTPFfAzH/xzLeinuwfc48E8
KvvhV/hoPqgfcWNybnSDc6uw/nub2A8WI/ZDx5WB+W+U7+8b6M97C/x1Imv5
l3T//WD2s1zKGrZPxmpmNWH9bfJPUJ5FbfBvMeL8BDf8Vw3w53lovg3wR3ZI
WceNd0p5nmvwYn8f+dVd0DW0/+Zu7B9N9RjvQN9G9SrugvvM0PX3ML9aC9YH
/dBnKJ9l/eC1lGfUAPKsrIZ/+xD0SzXwF4+AtQ5w9yPwdTt9b0Zw3gy9D+Mg
6h2jvO0B+I8YcV7w1hJ35LGyUpr3VuiLDOxtlrKOK26S69FnBM5noRJwoBZ6
6klwpjCvHRo2TPtfswn6MbZKL2UNSzFIWc2mqb454jbKt74G/ibKM9GO+1ZY
4U88hfy6qsjvoPdQA/+yOvgdteBd4vvRsYgG+Necpf65wF8vgN/S+1JSHl3E
Xhve60Aj9pvUY/8E6of/OPwLFfgeKHIEzmVZOrBXKc9zxQ45Tymk7OEWk8A6
yruZvucHTgjs476sQ97hlHd7LM6L0UtZw1xGKavZKxPWj8bifX6gvBfh5wfF
+Rnk0uPwvp0W+P1xuG8HzbP09/MvrwweIg==
                 "], CompressedData["
1:eJxd001I02EcB/C1GhoUWr4EvuYQFVLooJSKOcVbtx0E/0qI/tQodD75wswa
gl3Sixl4GIqQp4agliQoiIIn8bCDGrrN4Xp0uiA7Cb5Re57vc3jmYYwP3+//
9zz/59lymhz2FrPJZKqKfsT3n3wPGw0226YzDMrqf2MTfpVE0uU7wkMsonx3
V3idlSXDwV30DeU5H/pvlQf9yIek3VQU0G3QTIzTaCuI+b77ss9z95G/T5B9
PrGP+dl3ZJ+nhuAOC55/HlL7v8D7lF/3Aean3cB+Jg6QT8XBCYewBevRJ+W2
VMxPCmO9snS4PYzclYn+pPJoLlx1JBxhBUXolxwjtz1B3h9B/vCpbg8zl6L/
SPmwFPmwev7xJd7nY5/wIvOew4FeYTczSdt5ZQ/6K2cy57Pd6A9IN/GcbuSN
MH3u0m2QJca19JNhvlf6Bd/sRD6L9fmVA+czIs+7luc5kBdeYd5SB/zhn+51
9vcmxeQ/buO+F9T87UTS9u9hpw/gr048f67Of/Ad8pAVrhiArQWw0wW3yr6d
rL1wfAryBrVevLr/vHZ4+lbU/jqab4OfqfO+IHj5RLebVf/WvchqwsL1NNaC
/tov5Butwt8Y7UU9XkfjL5HP+0TeQN9f6zboXmesV+V9fGHFftyfWZ1PcQD5
pno/bwB5ohPrufdgV5/6vWr///+djNZX
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxt1EFIk2Ecx/Fll+gkFQRRh0CILh2i06RaKJSmlQsrRAvXs6k03XptIsMw
iLItmTbfS+tSaGtFhx6ziVoJIYIH3XvwVNCll/DYJQgMce/7/UN7ocN7+PD/
Pf/ned799x4OxYLhnT6fb0f5qS8/VeVnY/O1bqxTgbcH21RzrxH45+tq1bXW
bdju7KOeJG/vjjl+oXOur9jvY9S/yvrOOPbX03/vbTzUjX9M47/n/++JGfqf
bHLst6c+UF9sYv/9Rc53ptlx0k67fqofXXCttorkzUv0M2bxYAf1E/OOU3qg
y+2vvn+knukjH190vKLzCfJVX8gHh8n/XiaffUy+YQ3fyeBDFnlLfMOiXjfm
+IBtilfHuM8n8dVxxzn7p8X+G+Os35T6vSeVTumZrNtPfROPTrjr1YLkd5nk
n0ldiY+Kcybrl0rk30g9WmL/eZN++0rkp8Wzct+s5FvFz1N4YQ4bBa+P572/
958HXu+5iR/2O57TRghHDOqTIeatRebpJXn7nMzbK8W8no5x3vaI7C/zu9Rd
6RVdHfXW38XxZek3NYDv9+PqpOOgqk3gdXceQmpyEP8akX53sTWKa4dwTVrm
Jcn5AsO4Re5XSODlKG7vxYUe2T+M0xHm/ViHzIOiXmz1+tRFrzONvK/1MM6f
xSNd+DP/V9vfU/k9uKaO3Ko034ttXCE12A==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/ej8yo9pH1Mc1shEpVSfL3J4dL7zY9kbVL7dCxB/
1pPyCyD+yo/7noDlnxRcAvFPfrR7COJLPcm8ApGvuw/mp5y8hsyPSum/icpP
vYOsf9aTM/dQzT/6ANl+qSf7HqG6b/djiHqY+yH8zo9R31D5s38h61/5UfMf
svmZH7czpqLYX8eciuQ+BB/ufih/5zVU/aFXUM1PuYRqf/EFVPdBwhc1/AGw
buGc
                 "], CompressedData["
1:eJx11F9IU2EYx/EhESIR0aVEJUSXu1o3XYSOriIqpAsZNELfmvinzWVycuhF
SOBNSRdSN0F3raagW9uOAxXRUMi2I4iFkExGRqT1CuYokDrn+1ycE3Qxxofn
95697/Ocdw2t0eZbNT6fL/j3Y39vFpP62E/VmDoRqrwsxBs3i8N61vH5So+4
dt+x8jtO6i/k1acpfGgFjxi2TX2xZLtV1d2jrorUf8S9DnocVtd78LzUH8bw
UAl/iNpe0mcs8vVR9peR3y/cIR9YdXtY93701o9vsP6RPP/oZ+qBXuz/artZ
hfvwhe+cx7gv3iP/YAAP/sLxBH5exaf62W9Q1ifusp+hLepvZD+qjJc78eIa
borQz473+LeifmnBbVPvzHjrRgE33JZ55XB3O27JYLMDj0zSj1i32yH1JOZ1
lzOvCV3ClVrp17U0jjjzfqFL4rd9eDbD+ZcN8qezPC8h/boi8915hccd96vU
a/p1IA6lpP8W+WqK/g5avJ+jY9J/i3xg3O2QWvnHRyboX7lIvmuSeuQd9V3H
z/T2Is830uTr5uR9SpOfzv3HWdaflPyNHOtHl/B6jvxZme+5POfJyvv8OM/5
L6+xv+28zHOd+lVTXKZumax/usX9bZP7Wf3GPA7LfW7ZdfKVZIH8zT28Iffb
/X/wB4lVPVs=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQXbSkXX+tX6rDGpmolMjpRQ4IflZK4WQI/6Y/hB88
AcI3DIKo/98L4SuGQfjqXSB+ur55LIRv3QGRL05H5h/X7y5ClS+ogZh/rRvC
V2qFyPNA7b/SC+JXpTjNgvB1J0HkzRah8l+sQuZbpQisB/Hd9ZMngPU/CdoE
kT/fA1b/ZP0WiHusO8Hqn/Bsh6i/3wx13w6I+t01yHx3/dd5yPx0/VPJEP3V
WyDqI6Ih5v9ZA+Iv138WBLG/dily+FaluM9D5kPCHwBQ1aox
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXbSkXd80JNVhjUxUirVzkUPRknR9xmRkvru+Rz6I
75XC7grit+tzVULk53uA+Mf1zzSB+Fkp5j4Q+bXtIH5QSmMAMj8qpTYUmZ+U
4h4J0a/YCuKHpZTHQOQ5GyDqeeMh8r61EH5+AkT+cQWIH5PyKhHCP10Eka9L
hrh3cy6IH5lyIAUiL5EKkZ+QBuH/ioDw32VA+Hd8IHyfbIj/77tC+NU5EHlm
F1T+cQdUfr0VhO+VBeFrG0L4L1Ih/OvqEH4b1L26yhB+XwwqnyEcmZ+VMs8P
wg/WgoT/TQ8If74FRP1GaHwIQ93D6wJxv6sncvyhxi8AwXvCkQ==
                 "], CompressedData["
1:eJxt1F9sS1EcB/AG8SIjjRdBUkuJRMNpDaF7aJFpLGuXVLPUrRrNacf8qXa2
ju4izDqrGyvhTrZFyKybtLXIGPGiEealEpHxIDxw40G8eNjTBDv3ex7OTTw0
zSff3/n3O/fe6kjcH11gMpn88z/2nxzJkI1Lo+7Caom+DiTdojv2M2fJKzPz
Qe1HGPnsCj3XrBHma2TdmnkPSdqBGLNKFBvLgzTXyuerxXzlk8wpUrWduYmW
46iXt+rWKqdQL9dg/u8J1MsOrP83yXM7s5+2nxYtUU+HMf/YCVdtgd+kjftZ
eZ45T8Iu5lb6+wJy2x5+/kuw2gj39qB+t4e5ni7uZW4hq9zI1/ah3uKEv17F
/t9vhvv7+foE6wVuipbopkHRTnprBP1RtzGf1VoKyI/VoT/3HmE/roBer31+
iv2oMcw39xz1bV1Gf8sYncvBVm75Ntz2DD56F345xTxNlo3CoSfI43m49jFc
fPF/fyrBM0XR02S4pJ+PJopwzUOcbz0/r8r95wGzh8xxz4zzfk1gvGNMtETN
o6Kd9P4g5g+Oof+JG8hLA6hvVzD/oiu43zMZ5NZO5OlueEnMaBs1+nhEH6/1
cL89hP0Oc9ub9fW1yW7clyOM8V94/k7iz+dl+FdQdJ4cbsL+HLy+eh/y5otw
uRHnU/jzbPbh+f95TrREu2SjpTT2MxVC/WQK+cIU8r4k+mO5rr+PtOEEv987
zCFaioqW6ETIaHsA4ysD6M+Ql7+fWfRn1oP78croj28XcuUI768LrjSIThFl
hzH3bsD47E4+vwXzF+r4+OVYv7JX/N7V0w8+4/ePfQ//ASlXIbI=
                 "], CompressedData["
1:eJxd1F1IU2EYB/BREK00ooZZWRRFUJSJXfSpDfs49B0Od3FAKHu3oRe9MUeD
zepGEoIYXtgQQrEczrW2/EjXdtFVDLpJKhAJR5NjRJZp2ZIWq877fy7e08UY
P55nz8f27Gxt4LWOJSaTyfbvpb+7e9u4Z73TGi1TWT7ltrp7Xfz+BtltvHEj
PE5+Rw6Qz5XBCvm28CH2IylbZZ1kO8XXCffx7RR/+gzxOarfTK4wwys6KF4E
13TClhLU+90Dp7fAC/2weQ/ydw3AZw7q9rFLCd0K/3bcuG/hgmyF5+qMbleF
NRPlv6qHV4p507z4Mlwyini0Af0mhmWrzDZo9I04vIo+v+0x/Jrqn3wE36P+
jf3ot9mOz/vDiDddlK3wm2eNbj0lvh8tS/ktCurFqJ7nhJhX80eQnzmG+Zuo
f7IG9XxR+KoVjsWQP3sUtsThOrKD9ntYDffE0W++Cp6kuIWcJxcdkZ3mq/fL
VvjkXuzTQfM078A+L0O4Z/Mm7POnC/fWZcE+oSDyK4tRLxVAfGQ5/OUOnFiq
+zRrb0X+gYJDxPtaaN687lrW7dUd5FpOt535ryEenkf+YRe8+63R5d9hf7du
L59dcIj7ff4Atot6Pi0SQr7zp8jXqsLod31R5GtjEbpfmM1EZavsbswY50/o
3hZR/z39P8pzqJ+l+zyPebSpIcxTmEO9K3TP1Z+NHvwkO8hffEQ/G8W9HxDf
N4x6OzXRn60VvsWdWcRnhmieDJz63yNwZhrmo+g39RX16hOo/+YX9lPpeTKw
DPfhSuI+AmtwP54Ufu+xUuPzQH4+/gXYvVr2
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ7XKoTC7yTZrDGpmoFKHVRQ4IflXKtPUQvvMrMP/J
i00QvvgzsPonnFsh/NcPQXyrJ1rbQfxtcnfvQMyz3gGRf3sNle97CJkfJqe8
Hqw/JW0DRD5/LkR+zwIQP03ucS+I75XyaRJEXrYN6t52VL5MLSpfogKi37MD
4t7CEoj8wh4IX6MIYv/PCRD+/XyIfPQ0iP7deRD+8TnI/Glyx9ejyouD/ROU
ElEG4W+/DJGf1Arim8kpP4HwcyYjh69Vypv5yHxI+AMAtn2qzg==
                 "], CompressedData["
1:eJxV1W1Ik1EUB3BTZGkRmUYo9cQ+7JOIHzIrozQYRQsLjCS30pLrllY+buVS
15sVybAXii0hEqSQEmog6ZobJAkGEia9TlmxXp5eibRlrbVq+dz/+fA8H0R+
nLN7zzn37k5bLZbVJCclJVXP/Mn/9UN2IfeZueTmYiOLB2wl+qFCQRNWu/u9
7BZ2zy/bLqR+QbzUh/i7r/BfL6z7Bq/rR/5wBM6+Dfd/h8d74UQUHvDBJ3/J
LmKtA7K9QpQ8m/Y3xZC/2Y/9BmOoz0Xu+Y38QcrP/oP8MbJ2gUXRn10ozVQ7
zl3EwuTcLMSvk03cLUyk+Wwlz6V4JuUf9aP+dlrPQ/3oaL/0AeS/pnou0jw7
yTk+5C8ni3eQ35MBX/DCKxLoT+fG55fFZdexl2cRH+HzNTBXGxybRr7hBPIr
pmBzE+Jp/Dwr2aBNaSPbZlW6nIkNcCvypfsibJ3k+ZKJvJuvXy5N1aMfJ92P
QD3inyJqp02rveEHPv+ZfO0n1t8oKu9PpXRDxPrdMdRXSPW541gvQn77Dy62
of/JBPq9Rf3mzMJ88w/ALBkeJntSYNNBeE2q7DKW1QhnaBCfIi+h8w454M5F
dN+asf/OdAuv95EV9ftxntL6fcjvi9I8a5Hvofk2mJE/5yN9XxnyH7xSulDI
fKG0VxDH4dEa5Ifp+2+1IH/LE3hhLeKax7K3M+1epY3MvV/tEJ1HGJYEmtf5
p3DVIbj4OdzlwH4fgmY+v4JjiLdNYL0cup+bgri/K4/D7by+aqnpCN2Ph1gv
1Iz+Ukb4etJaO+LOIdyHu3S+E36sb6R6R3tl72B63t8lYWnPjK9UsF17EB/r
Qr6Hz7tcqLosu4KdofnludTzX3VO6dNC3il1fL4DnmeB39jgAppvX526vk4z
5rO6UWkjCx5W2sAmnfQ+2fD+dXTAQSe9f930Pl3Fe9nRh37yA8r3Xv178B/Z
5ZZo
                 "], CompressedData["
1:eJxd1E9Ik2EcB/Ax9ZAH8SAipYHXkKQoMSduurE2LV0rtI3xHPTxFVQmiG6S
orDD6GQFWqRDxIOkbtqajv1hUZ467tAlRJnwgtBF8BJooHve7894nw5jfPj+
nt/ze989e+r7x9yDRoPB0FX8iG/bfoC5SoYs0VovnzaPWyR3wPlyvf1sqhK+
b0XuqIJXbcLjrKYGrrALT7DCTeFOPuNA/Wot8t9dsK8bNq0Lh1mkR7iFv/kk
rDDuEn7F2zZRv+tCvWNLuJeVPkO9O4q8gVwf09vL92Jy/msHXuhBPhaH+RM4
+AV+4ITnEpgnZINLdpF3t+kdZueteissZcJ+lwnUv25B/ieB+peP8HynmmdZ
dTPqD6h+vwn1WbLv2kl4ZRIuZOHhAHyWxfsxBtE/Q7kSRN5M+VEA+zVkhN8z
P3kgjfpq6neYgo2j8OI6fGcC/fvo/W9Ow+nPcCiknz/JjuaRm9Jwchn5Bc1X
vqF3E1tKym7/rq1XT2i+yx9arn7bQ79cXptf/Ui/Z+Qn1pu3ZMfXZJctYL1L
6zfMb4SRp3aQ56awv+8D/G4EedUszcfhwoDsKJP92Cvs4Q8H4Xgv8g3yredF
Rzy8TsH5SIn/x18PLyh0fug8ng3B83aapx/nrcIK3/Nh/bYFXutDvd8Mqy+Q
323F82aeUj86nzGn7JxDdqNdv75TfWuT+qvHVsyz3aH1V3FfhNltJ+6DLN0v
X93yffPP/99HRV8B9C73gw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ7XKoLE5mU7rDGpmolI8LixyQ+Z+XgvhmcVobIXyF
lRB5t/UQfsVqEH9b3KzVIL5Vyq/1EPX7lkDkrTdB1G+ahcoXmoTMN4tb2wHW
/0RyA0S+uQ4s/+Qa2PywuMgSEL/qyeTlEPm6bIj+9wsg/E/JEP7L6RD+sjgQ
3ytFeAKIPy1ufSRE/mE7RJ43FMIPrgfx2+KyAyD8o2UQeSk/ED8sZX8hMj8q
xbEAmR+Xsj4XwucH6495cjIbwv8ZDHH/hCwI/3E4iB/9JDwT4p9JMRDzdmdA
5NmSkPnT4h6VI/PN4hS6Ie6Zmw9Rf2A2RD6xFsJfsQri3+WdyPHnlXJ9Kmp8
guIXAJSH1f0=
                 "], CompressedData["
1:eJxd1V9IU1EcB3ALfElSxNJqadmyCRlCkIJRGcYqzX+jZlwswc7acG5zq6lp
aaWh9keYhoLS7a8lc/5rNJMhUb0E4kNIlK600TX/7KHspYeg5d33F9zrg4wP
3985v3Ov556TWGrR6NaGhYVZV/7E3yNvKvn6SEOmayvHav22TJkF0R18Xyys
nEOujhfdJTjJBTtCuRD9HeZUorcI1eTR3SGzabIpFfOlzcOXDiIXFuA2NTy+
CL88ivoAeeZYqD+LWBKdxr89jlyxhFyfLbWH/5GD+mEa7z6B+bfLzDED9bck
wK/uwiN7RGewUw/gfRmia9hEL7yYhXrVAOw/ifqSEazPzpD/8SLvscltr5ba
w2+ow/h1lF9vQJ48ivl+NqO/egT5s1vI59xyhw/KPdWP8UVkrYue7yZ82Yn+
ceRHvXBRC/oFn6K+qhl5ew88bIH7quFls+hSZqzC+MKQNSy9Evl7E+qj7FhP
oQn18xeQR1Pus8kdsEqtZb4KzO8gR1Ugd5hR32TB/I7Q+s6yoBn5GityL9lv
k9rDv66U54W1cPT/+a/CY7S+iQZ63osY72tBvpHeh7eN5rsCd3fS91WLem8r
/f9ofGoT1htL/X5Tv0gT7Wf7ios55tIj/1hG+4fBgyVSe/huTuo0vliL7/Wd
DvW/NPA5Peqb8+G/BuSTuaJPszyj1BzTmKXWsmQLHEAuLJMVefAAPU8O2WjF
eh7nYfwBep/KfDpvaD/MGeEYJ+qTyvF9tDuRnyHH9cF3ylF/nzxWjv2rov3+
gXL3Kmf1S13DJgfQb9EIRwzR/qP3HRhCHm9A//Fh5Pd0yPc/p/1SKrWH13Hy
PLYA47/Q+fGEzpNEOl/2pqO/7iHOY3cK3NiFXLUT9XXt9H7p/LrdKlrLz24W
nS34W5B/w3ku1N3AfPMxossExTXR53llJPZzeBXqO8NpvbTfFAt6met30X7+
BM+Sc6cw/zbcByw4hfyQCrljGusrUeF8Vvro/KV6l8wcS/kstzCD8S+ScN80
fkV+mO6j9X70n0jAfdVBTt+E+b2r77sV/wMEmx/Y
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{246.70399999999995`, 376.952}, {246.70399999999995`, 
                374.707}, {244.885, 372.889}, {242.641, 372.889}, {
                240.39700000000005`, 372.889}, {238.57899999999995`, 
                374.707}, {238.57899999999995`, 376.952}, {
                238.57899999999995`, 379.19599999999997`}, {
                240.39700000000005`, 381.01399999999995`}, {242.641, 
                381.01399999999995`}, {244.885, 381.01399999999995`}, {
                246.70399999999995`, 379.19599999999997`}, {
                246.70399999999995`, 376.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{280.70399999999995`, 323.952}, {280.70399999999995`, 
                321.707}, {278.885, 319.88900000000007`}, {276.641, 
                319.88900000000007`}, {274.397, 319.88900000000007`}, {
                272.57899999999995`, 321.707}, {272.57899999999995`, 
                323.952}, {272.57899999999995`, 326.19599999999997`}, {
                274.397, 328.01399999999995`}, {276.641, 
                328.01399999999995`}, {278.885, 328.01399999999995`}, {
                280.70399999999995`, 326.19599999999997`}, {
                280.70399999999995`, 323.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{320.70399999999995`, 361.952}, {320.70399999999995`, 
                359.707}, {318.885, 357.889}, {316.6410000000001, 357.889}, {
                314.397, 357.889}, {312.57899999999995`, 359.707}, {
                312.57899999999995`, 361.952}, {312.57899999999995`, 
                364.19599999999997`}, {314.397, 366.01399999999995`}, {
                316.6410000000001, 366.01399999999995`}, {318.885, 
                366.01399999999995`}, {320.70399999999995`, 
                364.19599999999997`}, {320.70399999999995`, 361.952}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{289.70399999999995`, 387.95199999999994`}, {
                289.70399999999995`, 385.707}, {287.885, 383.889}, {285.641, 
                383.889}, {283.397, 383.889}, {281.57899999999995`, 
                385.707}, {281.57899999999995`, 387.95199999999994`}, {
                281.57899999999995`, 390.19599999999997`}, {283.397, 
                392.01399999999995`}, {285.641, 392.01399999999995`}, {
                287.885, 392.01399999999995`}, {289.70399999999995`, 
                390.19599999999997`}, {289.70399999999995`, 
                387.95199999999994`}}}]}, {
               RGBColor[
               0.07864000024400009, 0.08472839575199997, 0.09386072924800004], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{285.641, 387.95199999999994`}, {316.6410000000001, 
                361.952}, {242.641, 376.952}, {285.641, 
                387.95199999999994`}, {276.641, 323.952}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.07864000024400009, 0.08472839575199997, 
                  0.09386072924800004], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}}}, {CompressedData["
1:eJxd1F9IU1EcB/DZH6KHzEH01BgeewyiICiFnE1kKb5YMjbsITtaJrKyxFCh
N+0ltpv/khnFRNvcLm4ts20M5kPoQ+pAoWJIN7hhWaNhyh76u3O/h7inh3H5
8P2d3/2dy9kpbXY1tOwyGAx1hR97Xv6YJu4mlyV0xEl7Kzstgs/BB6nei2Su
DT5pRT7QAT+pZn5N7Dfh4hrmZWK+zVxL+2yof9+FfLMO9j6FK6aYFZLxM5dT
t585RSYCzD307DTqvwdQbwsyh4l1GvUNIeTt3KWy3k46K4v5uxl41Y/cFYEn
JuHuZ/AtH3w3innmH8G7nyO/P6q3Qs6M6J0i+SG8708U9QuDyPNR1I8+wP6+
aX5LGiXUZ3h9kQf1CW6vm/sFvL4MKwk4sAJvJfB9qtLoH+f5ZBr5aZ6b0njf
sThzjsgr8JUY6ht5v/WXcNUreHgKbltCfzv//p/X4FgYns/o5y8pM31CXhGD
d7aR/yjME+68Jh0tuqGzTfq6T7DRcoC5R92IafVGs1HL1dQs8z3j70PM5epY
BP2yh7G+Mig64hO9d0hbLy2UMF+n+/uR9+5BnrzD5vUQbw7zSu3Y34U3fH4K
m5Oiv8yJ7o8yO+ipFjg3gzzA7QwVPO6gplacjzz7f/x0UKWVnx9+HreuwkuP
+TzNOG/14/CJJqzPjsE+O+rlh7B6EXnHsEvbb7ye9+PnUz4vOmkTfbxGv75W
9VQL/dUPVsyT9Wr9VdwXCrnkw32Q4PfLr6B43/zz//dRwX8BC3IqWw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQvaEoY+Ja1gKHNTJRKR8XFjkg8z8vBfE9JppA+Qor
IfJOLBB+xWoQv2NiDhOIb5Xya32RQ+LTCUp//+aD5a03gfgXlD5+RuUHvkbm
T1B68xDEt3oiuQEif+g6WP7JtdUg/galGWdB/Konk5dD5Pcegeh/vwDCN9wL
4b+cDuE/3Q7ie6UITwDxPyi92wSRf9gOkfdZB+EH14P4D5RWrYTwj5ZB5COX
g/hhKfsLkflRKY4FyPy4lPW5EL4fWH/Mk5PZEL7FWoj7J2RB+EobQfzoJ+GZ
EP9c3Aoxb3cGRN51NzL/g5LiRWT+BKX4JxD3zM2HqP//BSKfWAuJj8+MBWD/
Lu9Ejj+vlOtTUeMTFL8AjyvoLQ==
                 "], CompressedData["
1:eJxV1F9IU1EcB/AR+LQegqI/pJRNV2o2TibVJNwU7WpUtGptV7eZHZ3ZZGOC
LZNQRxE9CCYSxKCsRMJZ3WKZ+pYoBJVERZAaPVwtqOGDT2FQO/d7Hs55EPnw
/d3ffufce05uY9jVtM5kMvkyf+z/s2gLSe+IOJLZKl2jUQfzmAWeinNbRYdI
zh549SpzhMwVMLtoZQfqp4uQj0aZG0idjdlDzSH45QHerwX1n8pEe8j7ctEx
Yq1krqObW1G/UIX8bQj1txVmN+0NI0/XwNvbRav0zmXRLurrNKz1G26kD7rg
rwrqm6/BFsOttLAbzzuPIp/tgUuqYTvfrz9H4MU+zJd1mLmWrgwiXyll7qTD
d+Fxvh//EtjP+f3Mdnr9Pp+XoN78SLRK+0fkfDWJ57+XGLn+XEM+exCeS2E/
k9hv/fcE8lInf/9T8HlFdIyEj4lWSPoE5gvy+nkX8vJJ5pvkjRvzbJmAY17k
8Veo/6mKzuT1krV7PvT/iHrN70febvRTtJwA+m+cxDzvuH9Non9bg7yetguy
xwLcfH/H6kUrZLEO/U6PwMMq5tmWRH0WX8/xp9xu2JlCfdUpuIyvd6ZWdOZ7
UOS8n3/PvnH4YiU8lOLfG38/Sy/gYgesarJNT0R30tZR/F4KuZ73mM+Dfrpt
BO/3cwVsH0a+oQrPvx6CO/i8swl4/Uk4dwCOunA+8vvwPj+cMaxvvYW8APuj
r93A/vScM86D/o2fl2IP+vV2y17ukr0X94tWfRbnuycCX+HzLF2Ck+w8b1Jp
TRDrn6mQ77dpu2gPKT4k5VqXcR69NN4EazbkA83wcmHG9Sp9GMR9uJPfh0X8
PvPvFh0i2VYp1/blZ7zgpT+C8GAe8gD3Xwv6fzF+j5Iwc8JLzc38vO+S1yPe
3/8BIdxyPg==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxV0z1IgkEYB3A/hr4GiZqiJSIihISaarKhpaGhmgwcXi6KzA+0jDRL+pJ7
EytoKJKSqBQSw8SKGrOhJQhqqsHgGpqiKaKl7v43nMPLy4//3fM83L1vi+Yd
GjMZDIbu/4e/B41f9Njts2ebHcQa9dtV1yW4P+hngLuXhPeQL0eRhzPcRv07
zh0i4SJ3vf60i/z3Buub0qofqSlbkdd8nIn9rHwNP5yLnJ1ewYWi6M+CF6jX
dol+toJqB3nOqe4lxhO4lEd9/z5swjysYwe2J7knWXmL+41+bqJedQK5ZRVO
xeHdRTn/OvcPvVuA3RTuEh5gWgzryxH0e1nFeSYi6DeygnwMJpNLqh2kOVrp
VEjUr+kR/TU2GsT5lJdQfzAg7qM2tsbtZH0+7H/Vsf/GI+fZUG3Uj7ZVP9K8
uD8n6ZT7qw6QNwbghkO4NI31kRPuIXI/i7xf3m/rPPyek+c1h++jQeauIFyd
gW/98r5kfbMXuYfPk3SQ4QnMa5H380uwPr2m+o2ao5W5LQQPj8PWGVl/Cm73
wQWf+v1rxDVb+T/w/+MP5X5XEg==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ7cf4sfNuQ4HDGpmoFOMJRQ5+jA87lXtB/KyUjxPB
fE7F6RC+wjQQ/yPntXkQ9QfmgPgXObuXgfhVKQmLwfKdqatAfKuULyuR+VEp
NRtQ+bc2gfV3XlwJUb9nC0R+5QqIvNI2EF+wq3E5xPyO7RD5s0sh8tY7IPze
xaj8xPnI/IudnrMh5jdug8i7TofI826G+NdxMsT8mesh8kv6IfxNqyH8vB6I
+ojlEPVsnRDz7BZB5IPbIPIxcyH80BYIf9MMEJ+xy7YZxPdKMYGEX6doEyQ8
4ydD+MjhDwD63ahw
                 "]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJx1lVtIVFEUhicvOamTpiGewcCgJw0fgqgkSAgGCZGSMDvZIMO2Yoy56Xg3
qUxCuhEVHpNAKYqcrBSExujBNLKSBjUV1DQ6jkOliE1mVpRn/+vhnKCHYfhY
/15r7X+vvc9miz2nMESn07lXf8r/qx8LkqPPkeFJEpm+1JWh8OIQuPu+wgEp
bhh8qA3xNM6VLEBsorjNAzZzTmdBYivpax6oWWTr2tWcztoe8XrCHV6/UjZ1
8LhgHOR6eZzzsnDZx/WyoxP9eQao307kc/X/h7vAwijY9AQ8OQP2d4NT/dQ/
Z12Ty49+hije4Uc/dZynpUXo5e3EkbPIN+uFfgV6Jnk161kW1U95B75egf14
uR85LLxc7Y9FHqDzSYd/8rwbHAm9HOPWnp+jRMux/3CrC/VEvj6XnXVq++l0
YD8rnM3sox0cRf5V2aE/OqbmaSlmQhMX2qexvscF3kX7318B7v2s8D72vlbh
2KaOBcQ99cgf9g3svYi4f5nm9Rri5b/Ahptg7x9wfyv0T9c4+XlKd8G3wpx8
Hvc8hL5A78R80HnkJWjZEAbOK8P656EKW1giPw+fcBosL8BfwcRZlD8Uc70x
irNZHsT+pbkQzuyrU80i26vhXOZ2YP0mrGc95Gc18rMUO+qPh0J/1Yb+yqhf
kw35DoSr2SelrlVzrNEQgfyt0AtLEYiLlH9Kj/xx6KcpJBLxNOq3IArc7kJc
F+3k82suRr0tBsRHaP7erAcnkJ+DMfCztBx6ywbEL1VCXx0PNteAk+h8blTR
exOPeiN0P87Eot9n5Pd5qp9tR73byv6aD7OTJ2jeyf+fDGz87VCxT6peUfOC
cJDP3xHmLQS3LCG+8zh4PrjKzSLrovwbFU7KZ1FFahbZDpuac9kQ9bebuJH8
vUD6evJzIoj3ocQNfT6/HxbWUgZ9NPVjqIQ+6zv0NafAMu/fyvR10A/T/tob
wD20/0m6X5/ofrUQG4O4r4/PId/WOeRPpvNIDkA/X4L3oGBK4TyWZQUbRzV+
StlvtbxtQM0BKfM12Aq/pSv0nmceU/iLlPECfoeQ3429qJdYpGaRNdjVnMvG
HFh/j7NZniG/X0Ivd/D5CUqBXry/tcXQJ/dhv800z+rv518IpsCF
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfernB8s5+oUOa2SiUnhrixwQ/KQUy0oIv8EAIv+w
FML3MILwWYshfAETCF+zAMIXM4fwd+dB+FHWyHwGqxIXZL6AlYkvxL4vUPNn
hULk01og8nWxEP6PiRD5gkQQvyrl4jxkflTKx1Wo8sfXgfgXLM8mgPhWTz5v
hMi3x4PVPynbAjHfMQ6s/snPbRD+2miIedY7IOpPhyPzL1jK+yHzH1geAfvH
KqVxA0T9Lqh/eReC+C8slxmD+Fkp1pORwxfIb0fmQ8IfAO7Cvno=
                 "], CompressedData["
1:eJxd1F1IU2EYB/DphQR97aKCVCwvFhRkEUWcE+GuClGS5qZ2FoXbu4+m7ntz
WrMvhFBQSoiaUBRoXayLLFubEBhdhBdjKGbZIh1nlhLkVWKW5Tn/JzinizF+
/J/zfj3vOeUWj8FWqNFohPWf9D++ssRtafDp46UCWx3168dXtPyaWe3L5yXz
7FNK8hJ3swn5g5fIxyySO5gpAT+1It89gvomBhcOw8UeeHRacoZzyS5mk++R
36M8/QF+QY7PwGly90d4hp6vziotsO9Zde75LK8v9W++gjk5T/a4UT8oO5OM
t0qOsaoc1udtQT6Qw3jvXEpr+YkLauecGL+f6oucyK/TePscGD9A9UV22Ez1
MTqvY/87Dz9uho/P4/mWEOb7/QX5/FXkFxfhV9fgGwtwL/nKV3inFz44CN+i
/jVEsF4DuaoN85XJtoi1YdT/kPsviK4Q6tOyDWJXEHlKtoUlAkoL7I9f6Xp2
xIf+6DCfuMmL/vwid3nQn0mch7jmxnx9NrpPbox3wK60li9wKp3h+l2Yz4rx
uXwr8mcB1E/R/UmE4E4/PBVB/WwI3hyFN0Tgnx3wSJjueztsDWL/vTSewyf5
HNtI+x+j+dtpvScdsM6JPEzv2yqDT51VOsPFBHW+9QxstsFP6P0usaO+xET3
1YF8ok5yI6txKS2wCrfanR640Cifn3jbB1uM6Ecb9fu1Ef1vpPtSZ8L+o3Q+
2+sxXj6K9ZhPI78r3ycNv78G/blP/ek5gfrlZsmz3IJ+3dsEVkvrf8Or9196
WO3hCpWTy3vhRTv8TQe/xf6Tc+XwEO0/uwvrGwgqLbBHl9Su7IbL9sBH78AP
D8F9Q9jfjkp8T6efw3y18nur/h7/BUubvU0=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfernh5u3JxY6rJGJSrlTVeSAzF9UCuL/iNSYDOLH
pfgVguUjD06FyD/IBfEZoqJmgPgxKUVZYP4t9TkQ+d0ZEPM0FyLzH9yMX43M
F7iVvQVifmUBRL3vHoj813oIn/EwiO+VYtsL4UcfA/GrUopnIvOjUqYvQeZb
pfivhPBPH4Xw5dZC+KuPQNSzbADxL9ysPAQxr24rhF++DyJvvQOifukOZP6F
m4LrUeVFl0H4bBsh/I1zIfw5iyDhcRYcXlkpKlNRw/dJOyofFP4AHZrUWA==

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfernh5tLdhY6rJGJSvm9u8jh1E+BWwJHkPkfIrNO
g/hWKQY7IfyN5yHyszZD+D8ug/hVKSzrwPyb0tcg8lnLUfln5qPy+yZB7PO/
AOJnpUxshchvh9p/tQLEv3Bz/w4QPyJlZjaI/+Dmj9VQ96VA1CfNQ+VfmYrM
/3HzVx+Q/yfySVU6VL4TLP+kMgfE/3JzXQuIH/akohDqviaI/roKVH5XIzI/
K8WsH8K/3w6R954D4adPhvBProDwDedD+FO3gvgMtz6sRglflPAHANzy3Qo=

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfernh8rZ/wod1shEpUROL3JA8LNSCidD+Ib/Ifzg
CRB+LEMRWP3/Xgg/lAnCV+8C8R9UPmCF8K07IPL/uJD5AlVdAijyP2tEi8Dm
X+uG8K9KQuR5IPb/1JMD8atSnGZBzItWgMibLULlv1iFzLdKEVgP4l+oLJMH
638StAkiv0YWrP7J+i0Q9zySBqt/wrMdot4Ear/1Doj6RaLI/AuVu/iQ+Q9+
anJC9Fdvgbj3AwvE/D9rQHyGX9sZIPbXLkUO36oU93nIfEj4AwB6l8pN
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfernh8p4xiKHNTJRKdbORQ6nfj6oPMqBzL/w8wUf
iO+Vwu4K4n/4eVIYIj/fA8QX+LVKAsTPSjH3ActXSkuD+EEpjQHI/KiU2lBk
flKKeyRYf9VVSRA/LKU8BiLvKQ5RzxsPkX8tCuHnJ0Dkt4Htj0l5lQjhrxKA
yNclg91bKQd2b2TKgRSIey9wQuQnpEH4B5kh/HcZEP6mv4Vgvk82xP8mvyD8
6hyI+W4/UfkrvqPyW75A+F5ZEP6t9xD+i1QI3+A1hN8Gde/tFxB+XwwqnyEc
mZ+VMs8Pws97UwgO/5seEP6UzxD1GyHxUekHdQ+vC8T9z38XIsUfavwCAPGR
9qI=
                 "], CompressedData["
1:eJxt1F9IU1EcB/CbKytHsAxf1AdjxiDB5UuBPWRCSPPPwxhWd2UgxwKj9N6a
de/KIs1EExZSL7OXqKg2R4T9IyIkGJEIvVgP5rC6LCmrqevPXebynO95OBd6
GOPD93fO/d3fPfdubG7ztuRIkuRd/tH/V2ZK8yeUqmixTOI+tUp0xz7qec01
Td1kfD6A/PlHlhvOZuq0tufTsodkY/8h6t+a/SvN95LLraifTGO/0WPUM1rt
AnUjGW1DvW2e2RhvR71tDvsnFdTbUrh+VkXe9Z3aSwInRMukpsOavz0F187B
L4PWfgrPUkv6wk/qVrJ4Drmc4fffBTuycG8P6pMs95DcXuppzfsLeWkf6n18
/w+X0H8sBYdC/PrfcD3fFdEyKQ+LriRXb2A+ITYf3TgcRZ4xMZ/r99EPWaHS
emPqMfoJ5alsvz9PUd9ZYPXWIqvXlcBOblspfPwJbLrgF4+oHXrdZtj/EPki
9/YHcHjb/z0Zg93loh36ILNOlGE4gdxw8ft1uOGlu9SvtWruiTv8vLqxvuK2
aJmsvyW6ktxk83Vk2stUNn9lkOVm2In6wADb34yz+XiIdhHrGzcgD3bDnjyr
5bUWm/oatt7o4Y6sRr/XuN/lsusbI914XlOrsD7B9xteCRdegJ/ZREt6IAf9
VfD6CQn5wfPwpizO1wA/z/VLOP+znaJlcvqM1XIQ/ZSwfrxk5CTyeD7271Mx
fx87L02k7ijyInY+/CTWIlom9/xWb/FhfcSJ+QzVIx8rxnx+1OD5fynAfBqq
kffb+Xx3wJG/iuAZzZ5WLPmRWXb/Rv9Ovn8S70t0F1z2nr2/xvhu8XvnIW8a
rN8/+j38B84qoGA=
                 "], CompressedData["
1:eJxd1E1oE1EQB/BFD4JeAorygpfiTcSDLR7UQBRpsa1Es6HSrYV+vBCsSkKq
VrOpLRK0iKWKVnmKrS2Exphu1KqpjR+XXhoV9yaClVZyKFaxB4UEhejufw77
PITwYybzZt5Otqoj7A+uUhRF/fexvgvlFVbpjHozmzX+Ox/1FsoL7Dp3ekWU
yR/IO4LwEPk4uQ5mA7Z38V8zTmtckCMU32RbcR+h+NPniHvI3eT5FnjtMPyy
Fd4nYF8H6v0ZQz+pEPzzPjx3EvlbH8Ffuy3HeNu0ZZO9OifNy/b3OW0y7wXJ
YjBhu6jQ/Nsuwuvsfl2331yCN+ZQ784Azvv4xGmNq49l92bht/T7LZPwdqpf
+wC+Sucfs+dzuQPUn55CPNbntMkSvbLXxO37KS5S/mod9QyqV7HvI1bU08iv
gXkXnT9+FvViGTjeAxsG8veQN2RxXz/OwEHMJ26Sx7K4Lw95nuZ/f5rum9wg
2eV+F3XaFNVhzDOMfsT5LsxTSNr7LOaCmKcygn270Y55krdQ/zPtU34I8Xu0
b98vw1XNluv5tQTy25sQn4hTvwHLfj7aY7nEcn7LTVyPIM4OIX93CG7ZK/sT
xfVRy0vsxWHs7+txOOJH/+kk8kt+zOdJ4bx+FfObacRnYb6ccVrjg4YcDz+E
G1XUX8D/gx2l+ou0nyfQT/HLFPqZ9aFeJ+0zPyh7pNHpkphowHkq4qK/HvFq
20ui+QCex3rb31ipDvHlKeqnlp7P/34G11C9cA73sdOHeq3TqG8EMJ+G94m4
q2G+0Az240ob5juVx/OelN6H8vvxL1ium2c=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQndFRWVR4tshhjUxUitDqIgcEvypl2noIP+0MmP/k
xSYIP+AUWP0Tzq0QvtUJEN/qidZ2EH9m0eajEPOsd0Dkdx9C5WfvQOZnFl1b
B9afkrYBIv9nKUR+zwIQv7DIbB6I75XyaRJEPngW1L3tqHyZWlS+RAVEf+Zs
iHsLSyDyU+dC+BpFEPsPzofw7+dD5IsWQfTvzoPwVyxF5ncWaaxHlQ8A+yco
JaIMwlc4CJGf1AriRxaFnYTwcyYjh69Vypv5yHxI+AMAc+Kx4A==
                 "], CompressedData["
1:eJxd1V9I01EUB3DpyUbUQ0WYYQzqIXqohxFSURZSOWiQoLQttOSqW3/2c1dn
Lu2PQaWxwHI2BiIFxaRMkjbdFNRprqiWra1maqX4ewgLkt9rCLn7PQ+/nw8y
PpzzO/eecy9XfYVUXLkmKyurYuUv82trcfPpKC/o2WZh/4Z4ga3FzN/GtPa9
y/gKiw5m7ObH44ifDCM+8BFe7ofTk/CREPIDn+CcV/D2BDzVBxcm4UgYvi28
nzVHMvbzUXI2ra9QvmkQ6+1IYX9esj+F/BHKP/UF+ZPkkjl1f27+e5WPzuP7
n2TLPOIBMp/HehLNx0FeR3ET5V8bxP51VK+X+knTeroI8kPkBzTPdvLWMPLL
ydIA8nPI9/vhua/wzg58/0P0f559v4f4LjEvI/PegaM0f+NN5DvpvKoaEC8S
51nGRrjaFlbiVLuUSTXwLeTLMQleRr5sJbtE/VJ5yYF+1tJ9GHIgHlnlooTW
vxL4fpH88DPqF0nq+1Mmd0uovyWF/e2j/W2g81fI/TSvwxz9H0yj3xfoV0mk
Ed9TC9dPwRPk3G+wtQ71FoSL2SYXHJ9GfImcpPOaaYQ3LtB9c2P92lnsNyHm
61f0WF8+dhHr5SVpnnaRr+TivOSaKvRrfE/1GOo/e6O2mZsm1PbzpnE4Xol8
wxjsrEb+n1F4sx3xE8Knmf6C2hbWcUnrGTqPICznYV7cg/dFLr8MM6wnP2rE
evnjmJ/hOuLZr+n+0/1cHMP9zb8B60S9CrnhKvJtw6g340Z/sSFRTz5Uj3hr
GPMdpvvcF0R9C+1398uMz7BC0V8rTz1fcaeZnbUh3hNAfq+Yt53XPcnYzDw0
P+tj7fzPdandzK1+TVz54IXXV8OhNtiA+SpdHu3+2u9iPgdcaltYukltI/vb
Su9TG94bnw/e20nv31N6n7rxXvmC6Gc2qH3/1P8P/gN7fMfk
                 "], CompressedData["
1:eJxd1F1Ik1EcBvAX+4BdlHT6IKKiBV0VSIIUDpqljKlEJoFseGXHr1WIvsRs
GbGbkRCob3khLSqLUeko2xZtQ4gQg+gqulAsVHolCCLaMq2t1s55/sV7uhjj
x/Ocs//enR17S1dja4mmafXFl3jvuHKBfZ7pqRrf6eUXnT1Vio/B0XdWn2fB
ebi8GnnnIny7RtjPTn6AN7qEe1nCFK7jfW70h5eQf6qH9d+wIyIcZJsLwpV8
4L5wN/NLB/iRh+jfKqDvHhPuZC+p3ziOfI5sj1rt5Ymoms8+gksp75qA/b9g
/xN4PgdfjmGe0A94TRz52e9WB9mLZau7mX0Zn1eIod//DflKDP2vWXy/L9KX
WEMW/TnqRzLop8n6Xz+FtzBdeiENB8iZNJ7PtHSApyhfpfww5XHpSn4gJdzP
+sink+g3UP/9M9i1AR6OwN5N2L+Jnv+OrXDyMRzarlvmH2Hx3cgdSXjPPuQ5
mu/Vfqs9zChXbCwdkuvNj5jPmHLI3HyekPsZd51yfnOEfs9rR7HeOaZ6YlT1
uuuY55zcz8dtIeT2MuSTvZgnuxceOoP8xDaaj8MVNtU31is2OtYKe3hFK3yz
BPkD8hut6LCH72rD+bgj/h95D19ow362PH7/TDt89Sc81ILz9noVPtiM9eEV
eLQJ/TydV/MU8mZ5Pn08dZz2o/MZrVU96VZd5rKurzMHa5T9zcVqzBOW8/hM
3BdB9jaH+yBN98s9TVfum3/+/z4q+g9jZftt
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQndFRKRRsUOywRiYq5ePCIgdk/uelIH6k0C19CF9h
JUT+hR6EX7EaxJ8pJKQL4lul/FoPUb9EEyJvvQmifp4KKt9PAZkfOWm2NFj/
E8kNYPlJbWJg+SfXwOZnTioUBPGrnkxeDtHPwgvR/34BhG/HCeG/nA7hz2AD
8b1ShCeA+J2TZFgg8g/bIeafZoTwg+tB/MZJVf+LwPyjZRD9Qf9A/LCU/YXI
/KgUxwJkflzK+lyIeT5g/TFPTmZD+I4Q859MyILwzZhB/Ogn4Zlg/wj1sULs
350BMc+DA5nfKWQmjMyPFLoqUwx2z9x8iHpVVYh8Yi2EP1MH4t/lncjx55Vy
fSpqfILiFwCpc8kO
                 "], CompressedData["
1:eJxd1VtIFFEYB3AJCkrMTMpIIxchhS4PQ2RagRD0UFiy0aZLaOlZXVdWXde8
62psqOlu5ooya5kphqzr7ahJiNVLEIhPReQlSRjTFMGiNyNz5v8FMz6I/Ph/
5ztnz5w5o0vP05t2BQQE2Lb/5P/mulLuTLUn+COMrHyxIEFjSXY996bDUUtK
LqyYZHslH9lqVnIp5Dv8yyL7qFQCc51VMZslb+ai37lluKYIubSC8e4yeOoH
rCtH/Rp5VLGXBa7KTuEnKpCHr6JficYiv1iJ+mGM5x2V6B+psZGZMT+vyITf
tsCRynrj2a1OOK1Qdhmb7oXjSlEfPQCP1aA+bRzrc9Qj35xA3taktcOjtijc
aMX4fciFPSLymNdKP2GyHfNfGcf4I8+QL41ovXtQ65l+rGfjKWzwI+8kV/iw
X0nkrl54g+bbeon66nbknh742GO4rwSedMtOZznFGG9VrGexRchPu1EffB/r
WXehftmOfNqFfK5A6zWb2gY2l4/+QW44OB+5i/rX5qF/kLK+VLaVi/w9rXeC
PNaktsh7mrX5egsc8r9/GzxJ6zsp0u8txHiB9u8Q7UdXJ/WrhA920/tVjvqu
Dnp+NH7ei/Uepvne0Xz7rXSe5fXdMTJ/FvKhRjo/DI6oVVvkzU61UwT7A7yv
H0w4X2+q4YwsnL+9DvivGf3OVMlOZtdz1DYyfa7aBhaTB8cjl36S9eQB+j0W
co4Nz6eVxl+i/fxM/aPoPMTS8w/1of62C++Hx4fcTg7rgxuo/jm524XzG03n
fZDykR2+3K92Gfs4gPniyIFDyBNpv9eGkN9swPxTw8hDHyG/wOm81Kkt8mKn
JheSHBj/FfeHEEb3iQ73i7BQgPlNL3Afd1hhpxf9k7NRX+Wh/aX7q9EtO5uf
ZbKvSov1yF/hPpeqHqLf+XuyLVJ4jWwbN6TiPO8uRv0BI62Xzpv+mtZOC53n
L/AoOXEG/T/he8C2ZpBLlD+Zxfp+W3A/R80h/0P1fo2N7NS81tICxh+n743z
G3ITfY+CFjF/Xya+V63kuxnoP7Hze7ftf/yvKf0=
                 "]}]}, {
               RGBColor[
               0.07864000024400009, 0.08472839575199997, 0.09386072924800004], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}}}, {{{317.051, 
                361.952}, {317.05099999999993`, 361.952}, {346.317, 
                370.582}, {342.865, 359.452}, {340.07500000000005`, 
                350.452}, {317.051, 361.952}, {317.051, 361.952}}}, 
                CurveClosed -> {1}], 
               
               JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}}}, {{{317.051, 
                360.952}, {317.05099999999993`, 360.952}, {335.1410000000001, 
                334.452}, {326.1410000000001, 334.452}, {315.701, 334.452}, {
                317.051, 360.952}, {317.051, 360.952}}}, 
                CurveClosed -> {1}]}, {
               RGBColor[
               0.024604722168000026`, 0.03147120849600005, 
                0.032234097167999964`], 
               Opacity[1.], 
               JoinForm[{"Miter", 4.}], 
               
               JoinedCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.18199999999999, 112.85199999999998`}, {
                85.18199999999999, 86.85199999999999}, {11.181999999999999`, 
                101.85199999999999`}, {54.18199999999999, 
                112.85199999999998`}, {45.181999999999995`, 48.852}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[
                 0.024604722168000026`, 0.03147120849600005, 
                  0.032234097167999964`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}}}, CompressedData["
1:eJxd1E1IFHEUAPC/H8EgA2660GWkFM2CvaSz6xpDbkEItggum3aIgtgCY8Fk
i0UUdsCKIom6SNiUZdBhZhwiCjps5EGiQ9ghSjHJ7QOUWGjtc9xWp5n3XjDT
wBx+vPfm//X+U39iIHaygjFWZr9R+y1n+MjPtkaa93C6cD8cscmxWzVum9s7
ax0b+etglnsK1sf6Mf+O6HesBvZjnJ0B69Far/PLbR6/7EPLx2A8VeoPYTzN
Q1zyB9FDleCRN62OC9ZxqwPmF2rFeLjkdsE6+Mfre0XbTB/povxYEeJSitzg
2NRKl8lVjlc1/YHb9npW3L6k53eL6LvrjjV9gvzKhPyxdpr/xm/HWnIBbFot
4Gm+m9Y7+AvykxMhjOd+dMB+HoD94eQj3x0bCYP2a34N8v24n2amtwD5s9W0
38UvuP5d5PGPbptW8IPbPrZ3Gb6vNP/LfwdxZSf1w7d5+L7SRJ55DRYaKZ/N
4fca/nOMxpt8C872UX3PJ6iPJyh/9CvEP6cxLi/+hPmcvULxbesQD4yT02j+
Bvk2nT/2a8HKbEC9oKIzLZvg+BTmy4/B+uxVXL8chn5SxWGqXwQbS72U382g
/7L15NEyuA9Sivo5WQ79K7yg8+QqIP/oDjrPU2jhSRDX/xw8na2j/mjC/pZ6
qH+MLVh/QcT5vOcca8oa2BepwfuRSGH9TGc1+FEVjje5D+9z5RTNh8f7XOLb
PFYOeawunSY/xPrkNfKmD+9zltyFDqySczh+1Bf2WBc9NvKH6XwFrG8cpP08
h45fxH7JzKHP36R8yfN/8vyv/gJBSDkP
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd001IAkEUB/AlFlnMIoLKjy0/EjrUJb+KiLBYJCIv0i2DkIQisQKPdcgs
PEWUdZIICQkdLahjXUSqi5eKTkHhScNDRXSpQ857Q+x2WJYf/9mZ92ZmzYEl
X7CB4zh7/aHv568NoVhqd/f0C0SsOtwK3zipVdKsljojHroglzYNmIcHqDVS
qos6L44Mupe/R4VCzYR5GsxH9y1yc1FbtyL3nYLzkQT6o9EKuXUFvTsPzjx4
0eUDcN6vU5hc3g/InVn1oAuvOH+i5MJ6drEefgE9NmSmzkV46I+XjoyQ166d
2O+JCA6doYsTrP80WF1sQw+vofl3PXU24cfxsSc99iPhfvK34NxFL5vvCq1p
Upj0VRwKh3bA6mMbXS9OrJOYz4lY35QBrLGqOuseJ7FXO65v6MJ675j9xj/X
+1cVPCa5uUDFBN9PVsG8ZQ/2h5AOBzj1yWwDc+V1up/x7E8A8/IQnm/yhHmb
nfcWWEg5mL3osXM8j2Qrji+omR9hfaHhhdbTQpKLdrxv86x+F/YjNXfKzUtB
gzJ/0+F808ynWnSaOdyBfrfL7n+ciDP//of6//ELRAYtgg==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQff9bM8eR2dIO6oYca+a8NHUA8llc1sqB+GtrWM0c
Cn47MgVNUwDzczzAfJZPPYpg9TmbwHyGSc1KIP66HBlzsPyjf2D+qjWtKPw1
Ou9Q+TwiFmD9SW8g6nWMwHyWpOMQ+R4PMJ8jaRHE/DdxEPlH2RB5mSwoXxmV
nzRPEZnPkCQN5q+q8YOqnwX2zxobcTCfKUkKzF/35745yP8cLb7yYH7PQgif
pQEcHmveRIP5LCzLZMHm+XBB5F1+ykD8t8cMzD9SCeH3FIL5PEeMwfzVazyh
8i/B4b02RgbKRwp/ADD6lH8=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxd1DFoE1EYB/CYHsml3mK5zSyWa5K2sUUTbYcMFQ9x6GINKDXVUK9LG+py
UCmJUEzRoahgKjakSLEoXI5TIQWHbEZxERFCdUhbkUNQ0EGKqEQw+f7f0Odw
w4//e9/78t7LOzR5ZWyqw+Px7Gt9Z1uft/Xt/Lwu60f7RsJHZDv4aHikZV9N
FywXzsCNh3DlPJx6ANcvcV6Ejctkq7os2G7eZqeRN26QO/UJ5NUF5NI4XMqx
B3rJytBxeBpemof1JtmK+obI5mPUtxfhwkw/5v+GK4PRtp1MhupL2teo8Hvd
4uG9low/olV9gGzew/jdOVibIyv1Mlw/h7z2kuw0Y4Lt0n7RiW305/L89eew
dpXrFWGD15dyZMVtcn+zyNfXBEvupGg9RrbyJsbXupAnF1BP/4H90W7x/A+w
ssr1X2G/FIf7XYNH3/H4Fdh+DyfvwNUGxscX4exHrKfOwwkXuZ7h8/jM/V0Q
rEiKYKl+n87Xqj3h+l6ct3qS7CvM0H1wjE26L52uS/fFqaZxf7RZ3Kfgp2OU
GyE4sQznNyNtl7ODZDl/LYL7/jSOfkfbvllOpckBPdD263LwewzjN8KoPw7X
tnoEu28436Z+/O4XspXqov79hofWc9QTfP4HsL4+TQ4Y3WTLvMvn0QcHNwTb
ibdinvrGPoj6psT3/y/6yavsHfRT0IbRn4W8FOX8omjtlOBAMoz5pX7kppfz
XtQrbIVo/VK47Q7ZeBbCfvRw/Ry7+z+PsX/BqQmsp61QfSeB/7c/fpr3L4vx
qg/n6y7hvdt9gfejsor3SIqI79/e9/Efe1kFrg==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJx11E1IFGEcBvApqy2zuiwoMRp1aIqk/ZJKWWHAhd1AWAxKguogxl5COwQD
tc5MYaym0cGDHrQggo3dYZFY2KDtkB3sYyH6sAVRlkpasQWXMj2ssu38nz/o
HDrM4cfzzDvvO/O+c7ir99zVKkEQtlUuX+XaXrl+xkvlnrBDlly7De8Lj7zp
gOF9bfqW0NsH92c419C3Zykv99w2/Sb+5Bvnd9EPF9hD6I+veeQ/MxvadN4J
28/AVf+xw/RL7cNOciwpI8/tQb7gN92qL+8jJ+xB032aVAe3X0A/cgz94ctw
9AFyY5CsjuYwfnsSeWedi/rX5sl6bQc5MbyrmfrKQ3IsfZ6sKYKb+uvv4Egt
7F1EP3QQvlRAXq4nP00uw8EjyH2/4UdHyZNfVsi6dAK5uIo877BYjTRjPBF9
1S/jfpHHk3zcLyK3+Xm+PL9UAPcb39E/fRZ54zyen4InjSyvnz33kdeP+430
e55fEe9PvIP3qeTdVs+4Ld87+tllsZLG98o0NJnfU1dS7JomvL/nTtpv/SXs
pwOvkK8swYfeOmn/dc+S1emvyMVPyG1LFuuhHS5LHjrO8/nF/YvsBjw/dMP0
QFxsgSOPycb4dc5/8HhT7Gpefwy2/UW+fo+s5ifg8F7kEvabkXnG52U/XNB5
fhnMvyboof3eeZ/Xcwr5aIfV2fpNm+cxUcR5TLbBJ6fghSucj/D5vrn1f7AY
nxvbavwv/gGgb+3A
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd079LAmEcBnAp6QcVWEtI1yAIEVpR3mmBhENEQTZEi2lDQYMkRZCeBxUF
Ebo1KBFobZL6KgUtQmNUBkFUBNI/UFGBSxA05H2fd7hrkOPD8319n3vvzrK4
OrNUZzAYHLWfen1JR+RKo8PTM9jEhDfRo/O1VPN3RAmRc8KRk/KSJCJfcamO
/vySi8LosGqlfCshz5Dl3mOn1uHsp85yu91F69cT8MIcmVnX4LMYOffkhSvH
mA+YdWYXjy6tcxvjcHkS84k79M+msb8xCMer1LewbiRHFDf6f1xJlCtbuN/Q
KWzu4fefofORK2bYvQlnTeR8IoD5eAty6xjOM9hALpzbkFfq4dY2nZn9VdQ5
tC/S/7dbVMeYdQr5jh/5bBc5Wk2qnmC77w7KJ1943wc4bpO0jpZlncOHNxKt
n3rD/E83zot1Yr/SNPcQOexLqo7lfxd53yry1Al3F56PsEdWSl/8+Xvh5iKf
78B82cf9TPsrwUu1j4mlltFX6ed9nbzfgah1pNSns6zc431O+eGRbe4MXz/A
XXVo3v8YE+b/fQ+17+MPmqJEZw==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfXtuWXmktYmDuiHHmjkvTR2A/LKd/8H8tTWsZmD+
xPmmYH6OB5hf/lDKDKw+ZxOYX2o4DcxflyNjDpa/eRnMX7WmFYW/RucdKp9H
xAKsf+YpiHodIzC/XHIHRL7HA8yvnLkUYv6bOIh8ZBdEXiYLyk9D5c9URuGX
Sj4Cu39VjR9E/uZCMH+NjTiYXzYzEcxf9+c+xH0n1SH8noUQfuYXSPi8iQbz
y17uBfNX+XBB5HdOgsjr7IGEz80iCL+nEMyviEwE81ev8YTK+0HCN0YGwkcO
fwBt7KDI
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxd1n9olHUcB/A5r7DHkyTC1XjEaWZrrKRc7nb3SEOM8uGiGko1DhZrNTgu
YjW8Pc/NqDwrHlaRznS3B6k1NJ57PKnA1Rn9oZTrfIhcW9aUoq1cPdsYzCN0
ndSez/sDPV//GOPF+/P9/fD93trWF5ueW1pWVrZk8W//4l+597//oKYerW+8
675lduLkpsb/PZyd+Y39GfId19hn4cEVdfAkXFy96AsHtcI/sLwBeeHWkOiq
61zr+S27bT07hLxYxd5GeTbt9d8/pBWe8PyI7VRw3oJ652aeTy9sX/bm+6Sm
9odoPc4cLA3w+LNYj/ExbE57Pq9Jxzl3uf0JOPYXr/8rvyt09byYGy7m1zsH
S1eQB0qc39BA8+lcVof21Q2Ulzbx/J+BzVfIXepeOHac/TOsbHgA9bEwPCk4
q7iw9Thyc81mcrwBju2Ba9bB8hRZd4OwHalH+6sYL/gabFyCe87ArWPkXOBv
+P5vkHcGQ+TyIbL1+zpyl5VBLt+LvKbD7wpNela0+jD6l+9Gvbua8zWU68ZS
9u1weIr225JvQf3CMJ+nBKsn2WFY5/Euvoz5jb/D4+0h6/Mn4Oi7qD91AfWJ
Q6jfV0b7ZfV8iLyyivfzCNwcFqyPtwnustLknNmH+kIfn9erqK/Jw91PIY+P
8fndBBvTfP77sf/x5RGsZ4rP93m49BLlqbxNtpxR1Ff+ijy6gvcjqCBvhJvq
4fXt8ECLgvsA89Pm3yTn0jx/NacI67dGBCfdouBUZuUWfF+8f/k74Zn3UV8Z
JVt2mvtvQa60ijY3ipaxntSnO9Femcd6X9+KvPQLOdm0kZz78ix/36u4/Sm4
5orid1KaFazFJ7D+ttOw+hPy4tfc/jvsX3oY+2+cRn3U4fafoz56Dpbeg2sn
MJ67F+1rp7j/FPLOae6/Aw7Mcft2uBfrTep8XrEicr1ZcGqhVnRhFt9H6QvU
uya+D+UhXn+UnOv+Ht9X5g7k8tvXOSU4F0uQk+X3IO9WkI88yJ6m+yo10MTO
8H3WDjvb4MJuOOHivpT2Reh9CB7g+/Mjsi03w8YnqDcbyCnp2wjdv2aAnDQm
I777frG/JYrfSUMWrBkh3u+rXL8THl3F4/F5DNbxfEyF5qPE2WPIzSH2v9z/
YX7PfqD6rPwY+4iC924513fx9zGK+alVsBPHfJodXs9mWO8WPb5dtLsWnnkU
tgJwz244ftm7X/7MJvrg/ESY9k8+A2dG+L66EfPTO/m+2oXzWmjEfen8gfdy
POC52o5+ABs/4j4e7OD95Pd29Gm8x8YBfj+38vv7QkiYv7rF70Oaeq3e56Na
4ZznlfbF7agv5JHHaLykVjjm+TZbfsP/+6fadg77jd9H/wHlHYpy
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{29.885429000281253`, 
                 21.648875}, {30.054618453406253`, 22.352}, {
                 32.68401298465625, 22.352}, {32.51482353153125, 21.648875}, {
                 29.885429000281253`, 21.648875}}, CompressedData["
1:eJxV1E1IFGEYB/DFPEhNiFKnBpZFSaIt0J11/Tpss5nCikIfFCQSiZc0EpyT
hggeNIYOHqJDm0SEHztvA7WyCvNOhWtQbYfITq7d1ggz9FbEQu08/zeY97As
P/7PPu/zzL5M6Oadi0MVgUCgs/zxvpfm8vzSjB5vaKxi6kJLvGwnsyHZ/XVA
TtebZB5UEpRrV1Df1UC2zweRFzTkH3djsldls3tk5/UZeHsI+UwQ7u8hu301
Im9CbgZg9STc/lP32x3ekuwsfsD8dxtRv+8i7+hGfewF2S4NiPnSIp+QXUpJ
tnkW/Qs2+hufRZ5Fff0B+hdeof7LUfF81lGvhiSz0inJ9nY7/AjzpiuT8IkM
6o2rIl9CfXEQ3nwo9r8F56ZkJ876nXQXv52j/itivv1lMite9uZP8thtsn0s
1Yz5esnPw1tRv1m42u9ZpjzWyj7i9l0nWyyhUR4zUK8c0uj84H3P76yR9Qid
N/YSufo0QvWRouw6Rffb+dHk+bv1bA25eQ35yg7ZPT2pU/+NWjrfyT9BHu7B
PMNv4L05uPBW9J8X/n+fxsmuuarTPjwETz9Azr/i/Jwh6m2cn2vzfJipA2K/
P2KfZtRvZvxO8sSo3yY3Wz0rrHgD9VY1ciPr2eL5nTjtV6mIeT/F6fnvTfld
3vd4VPLI7yj9fvAvOZ16j/93rB/9+Szu8/Qa7kfpAu5LnSq9H6T3xz/QkdTK

                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3Xj6jd2UH84O6oYca3SmmDgg83scQHwd+x9MLkC+
xxqf38Zg+QPiLmD5nCMgfo59hw6Ir7GmpxfC/+IFkZcpgqhnKUbm59htOYIi
by/C6wo2/89biHoVH1ew/J6nEPccaQTzV9vsMoW4bw6Yv25OrRkyf80dfXNk
/qqYaghfZAaE77MDyu+HqF/zDMy3bamFmOdjZwHml8RC5GWywHy7J3oofFuX
Ry4o8imzIPwz3yDmu4RD+DoC5uDwUJEA89eusTBDCd81KaYO6OEPAMi+n9Y=

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3Xj6jd0dM1cHdUOONTLLLByAfHubLhS+HcdRMH9V
TiWE7/AcIs+jAOFXcLqB+OvWHDMH86dIuUHkY1H5Oo/NUPg+/GC+vckbsHlr
a+xNwfIl/RDz9xSbgPi2W/RB/Ber/8w3BvJz7GpOukDcZ2YMVn8mBpUfI4HM
17HveegM5LOtEYmDyu9wBsuzrAPxeex1+kH8E6u//IXIT6mCyPvkmaDwef6j
8NeeuQlx75YVEHmZ1RD/fWGB2P+nCOJ/l2QIf489KLxy7G1g7oeGL3L4AwDE
rp4g
                 "], CompressedData["
1:eJxd001IG0EUB/CNBswarUSkKFhED22EvYQEoTHsRpGYiCBWwUsEUxRBArpU
RYsfiC0aENGi4EdaiCC0OLQVRRS8BDxUmh4UDwa8iKIguQQvPbRgZv5P2HgI
4cf/Zea9mUnl2/43PTmSJNVlPvx76ndKbd3weV85LKx5xeXl3tYbhcvfuzMO
q9vvYM+MsJYehINLblGvD8FjMdSnydHvyB3Dwj89B1lmwXiWvx5eYf2hftTv
/kX+P4T6BqlWrP+xHfVneXD8NVxurUX/Nuo//4ndol7T7dSPF/lyPRxshF90
0Twt8OY41o92YL/0AuzpRG5ao3m64NY9+n2fsPbtnOYbRS6b/OhnHnnEnGXV
ZvFjnggcs1I+CR+XYP1/E/y+FC1QRPfTzs1UuYB7dqvbjfuUrcgHHaiX80XO
PtiRR2Q4WmG0hR0+N/rX1kUu1g+I9fxs996Jfp7R/dw4xfkEilF/do78oJTO
/xQuqzI6rB07s/PLJvg6DYd6jf1n8mnYrLvwHtcf3xvyxR90HnfkIzj1B46t
4nzm/HD1CHIlhf2q6f4T+9R/DbeZsRBsKqR+a8hXPoOZajsxWtHK4tylLKHR
/DvIlTbuAm31M7fElAHkyU/cdhaNGZ15T7dPnMP7T6jJJZ+4v7mXmCe5gpy1
wYF15OFel9hP/wI3TyA3/v8fAIYAkkk=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQXaq/0sprsYeDuiHHGp0pJg7I/B4HEP+l1bq1IL7H
Gp/fxmD5skMQ+ZwjIL6mtd11EF9jTU8vhL/qK0RepgiifpesJxJf0yorH5m/
0vrUdk+w+X/eQtTf+gaR3/MU4p4qHS8Qf7XNLlOI+9zB/HVzas2Q+Wvu6Jsj
81fFVEP4p5wgfJ8dUL4lRP2aZ2C+pZUGxDwfOwswX4sDIi+TBeZbzbrpicy3
/NWDwreScoXwz3yDmP+LEcLXETAHh8ctSHitXWNhhhK+a1JMHdDDHwCBcopk

                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXaq/0mrSQ08HdUOONTLLLByAfOtPJl7IfKt9+WD+
qpxKCP/bRIg8jwKEr7cFzF+35pg5mO91FCofi8rXeWyGwvfhB/OtX00D89fW
2JuC5bWsIPJ7ik1AfMusWyD3vVj9Z74xkK9pZVQCda+ZMVh9EzsqX+iwBxL/
pZVTD4jPtkYkDiqfDJFnWQfin7R6ZAnin1j95S9E3ksVIu+TZ4LC5/mPwl97
5ibEvVnBUPtWQ/y3aj2E/6cI4v9fvBD37bEHhZem9adilPBGCX8AiWWJrQ==

                 "], CompressedData["
1:eJxd1F9IU1EcB/ChUoGjReyhh4FYy4skXMQ/d/cPuf6xh4xLS5DyxqR/WoxG
NBnFRAzDAtmFaj3YRKhI3C5XyYLK0UNFFoNWKI1orbCRjP6MqJfAh7rnex52
ehiXD7/v/Z0/9+zUHwn5j1fZbLYD/37Wc4CflvpaO71c8zrDdcfjHeAbpbVi
paclWYHzt+Dq7bA2CWc6aH0cnvESJ9NxxsaqDpeRT+ZHyXgyR99PD6PeTfsn
Bql/7SW2C+1wFepj5+GVBvRrWiMQz+2HjYvw/AXk7X/gp3PEZjBI+ouBZXa9
+vp9lRZDDazfe+DwdeQX98DuCLGc8cNL3aj7DhKbqy2MjUQta6WA+WXp+7cf
wB9p/6VxuEzHrxkklh0cnd9p1Ds2MBZ1G+up39ifkTDyo9+w/q5h9OsrYn/c
MeQdBdg+gfzQO7qfJqy+hjvfIK++go0c/DVDv28e+S0v4egnjNfzHFaKqK88
od/jC7zwmLGcSzIWa2NYz7MZ5I/2o+7cJZDzPL8T8z/2tp2cN0c9nO7F+QlU
037LbaQe+onzpsThyAfiVJRvI/nIAur52VbM95HlSymt13JJ4pKWX6RcP1pI
XYgj7zoE++pYqzeoC9Z8TkrqTeKktlEgLk8Rm84dWB9vIL/7lEDGC80iH76K
un4Xdt1nbChZtq59p+fNRP9wDc6jivGMESecnUT+mttD5qNfQT3RRP8vQ6wD
5ypdklJn8H5iG+pn+2m9Ef3kAMZPcJYvS3wX3Y+tdD4+6s3/2Q87TsDaYYxX
F0M/JYj+nx/S/Ysi31NCvjiG+25xE87PvQncR7lm9j6ovB//AtwrwoI=
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxd0z1IAmEcBnALo6CiryEkIQKroRrMUxsiCqMUNDFajmwRDKJIBHOyLcQW
c5AmDYKSTk9pkChwaejDoaEPGqKiMaOlIeHOiLz3eYW7hkN+PP+79/F97/o8
vnlvvUqlMlQv6ff1ICiyIcfkoL6J15aYSYWvjFWbRC5HnNbumUhu65pDvm6u
uiyWgsQ57cSYlFduX2ieIhbrrE65hSmfwuJGlDgXiMPJQ+Q6P3xRIE4/OGD2
GvNujcJ84d4sdzo0A7uSmI/foP/ULObVK7D+i/TNBtSSywK3i/6fl0aSc2Z4
7RgWmmv/T/KJyDbA45vwuYo4E3djXv+L/dRNYz/3K8TZ/BByVoRbWhXmh98Z
hddiDHn+d5P0/AivsyMfGcD6Cz0MOQ+vRbKV3/owkLxjmfa9g/VRucuiK6/I
hbNn3G8vYX6lEfvFd2O9Yi/1KLGgsUiOZH48tK8feeKIOkzPO0xcKdbO3wH7
nXS+E/OufupHsn5l/0nq084nVtGX26F9TbTftNxlwdamzLk37F9iEd4+pU7R
+2PUXwbZ+x/htUv/vofq9/EHlQNiiA==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQfW9J2S9JMT8HdUOONXNemjrcW/Ltp2cFmL+2htUM
zDc9AeHneID4Zb/usvqD1edsAvN/tjqD+etyZMzB8pFJYP6qNa0o/DU671D5
PCIWYP07YyHqdYzA/F+VIRD5Hg8w/7elN8T8N3EQ+Zm2EHmZLChfG5VvyYXC
/1n5Euz+VTV+EPnIkxD/2ohbgP1nuRLMX/fnPsR9gT0Qfs9CCH9hEUT9m2hz
sPrEcIh5PlwQ+ZOOEHmdPZDwuWkI4fcUgsPvl6QmmL96jSdUXh4SnjEyED5y
+AMAk0qqoA==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
                 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQbbk31p7TLcBB3ZBjjc12EwcEv2PNn0oIf6YnRL7G
BcLfGQDh7xGD8G+GQ/h/XhiD+R+TIXyZSxA+Yykyf6595kxk/l37zD0Q+9a4
QsxjvAeRP6NjCpaf+BfCf8NqBpaP5A0E8dfVXEbhr6mZao4if+cSiH/X7iwX
mL9qCasFWH4rK0T9FV0LsPlzGSDqWcIgfN9vUPdlQdQffYbMv2snegCZL2u/
chaYv6rmHcT+xjJoeH4Huc/W3jAMzF8rI2WGFL5AfpSpA3r4AwAI74yj
                 "], CompressedData["
1:eJxd1F1oUmEYB3ANzBqutVqLxREnLLxoH5nOqXOe2efKydxo0KZSSZ+0Ptag
bkYwdiMZC0d1pYQXRc1DTGhU4O6MChpktEWhC6m1IActog8wyvP+n4tzdiHy
4/+c933ej3P0wfM9x1cpFIr+0k/8t00H+MxHb7vBuEbg7lrbbdM5PvJL7puq
btETjhuiA3yunFkYvoA8toH5QcoHB6qRD1hRr62Br62GlbthLmgX652uPcz3
okN2llfuRd45Cg+S6yNwhqy5DSv34XkuIbPgn5Ln/hybj99F8w3/RP7MhfqU
opX143YyTxbL4D4b9bu+ldUv75A6x+cb5dZvo/VUoD5pQB5dh/FcdRg/Wo76
pA7mNKhXbqHxylbYDtsssOMAnt8fwHyOE8iN16l+DI6Mw4UrcCZC53MO/kv7
NWBrYc5vgrNnzKzffBVc7GfmK5lDwjG3GeezEXlVG+oz7D6EEulG5COwkNVL
XTqfaqmfJ1J/TGz8JprPvGhieXgznJ5nuXOR9uPgHDyrpfW+Rn1vrdSl+2mQ
2blgxHzRAuobeDofPda3RPcr64Ij3XQ/htBvzWHa/0fwk5N0H2/BZ4N03y/B
W/uw/k4e4zV7RHcInBp5zEn7O4N+p+povlPob5DeN84CZ357Jc45ld+9snz2
K9kBez6TO1CvypKPIM/Pif6SqA9LXXr/XqzwPBx/62X79+YfrH+H/FMD1hN/
72Xn/8OH9S6w+UKCYwz50gfUp9K4L6oZ5MUu0THe8xjj+79h/Kdx1GfviNby
beGSk2rB70N+/6J8/WsPyX10p9yXm2BNL+zWwYVxWFcBv3xF46nRH7fdLHGp
n0m5/Veb8f2qpfy0BfvTQ3lXC1vf8ijzRNZkZR55KP3eyr/H/wGzH/dZ
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQbbk39j/boSAHdUOONX+izRyQ+GtrZCH8uCMQ/pzX
pmA+30mI+phjEP67CxD+nQ4QX/a/1H0IXyYLIj/pMzL/7v9DnMEo8j2yYP7a
M4sh/A96EHkdcYj9IQ5g/rqeLqj7PCHyZzjNUfhvpqDwV+VcB/Hv/ityheif
wm0Blveyg6hPMbQAu0fJHKLeJBzM/5elA3MfRL2SHDL/7r8mJmS+7H+HN2D/
rVLRg6iPuQ3xr8k2kP1z/1ecAvPXudiZI4fvujunUMIbHP4AbBqcEg==
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQbbk39r/Y2SAHdUOONTJShg6We2X/r3uFzL/7z4Y5
GMRffccMxI/9f0AMzF8TUwCW/++iBeavvbMSIs9mAuJ3rK55h8znWGNjZ4Qs
v+ZOlRFY/zs9EP/E6jtrIfL7VKDqr0Pk3eSh9r2FyBeB7ddYw8NqDOY7cUHk
feSMwe4VYgDxf6zOMYLI33kH8U+OP4S/4BqE71MK4afsg/B1ZhuD/Z+1Aer/
dRD5TWtQ+VbLUPmrZkL4PN0QPlM7hP/GBcKPKoHwz/yD+j8bav96VH5OGAp/
rc8FSPgFVYL5q/8UQ/ivpkLU1zhC+JeWQPg26pD4M9uOHH+o8QsAb+zBeg==

                 "], CompressedData["
1:eJx11F9IU1EcB/AxYgwaJSIR0YggCGOZm3dzWYHCmCOGD1PWiz40NiPoH1kP
0V1UUxKTpBAzUiiTEd6jUe2tTaRsiCyhWhFjFphIiWV/yKfotvP7nod7gh7G
+PD9nXN/58+92yMnQzGzyWQKlX78f2+mTbc0hOp3Oq0s53LVS45zx3RPgDvA
Kp4jHwgjH7XWlHxcX4tylzElyB3Xs+e5P2lqXw3mu4169RX3AT3bzz2jqQuo
T/bBvp+oT15FfX6dQvXJK3h+dJOCvIu7W0vvNtrKigflvNgBZ3vhlRFF6sf2
jntYb79HHnesITc/FOu3u8mFZ/BKk5vqXY/JWq6d264vjCJn3ahfHoR7U27q
P9QDH1tFbkngeWyfx2gWvCV5LLenlvancJ08schqKb/8APX9ZV7qZ9cL1PvO
eKmfwnfkW5Neqr9hb5Z8WpE91wgPDcLJQ8Jx+MIR4Qj3vD57SowPIu/pEK6D
Lcn/OI/+wxeNnteXLpEn1AxcnkC+eB/1BeGWAcr/jHTC0wnkli4x/qhkpjZK
Hkvf8dD8rWfJ46od+20Noz6dcdP8KQ9Z+92G8/pRIfqtgp9+C0k2f5Hd+Rn3
Iy8cWELuq4ZtH3H+KSfuz4YP4vwV5E0FcT+98LW3Rg/rJ15ifrUS+ddZ5K02
uGoa8+9fxX2em8L9d7wx2sock7JtQwr1s6WIenYY+aNyrN+2UaH9WQ400/vo
eCLe7yj3ZhZsMLp03++6ZFe6aLwf+60pU068n3XiPGNOOh//NpxPy3qR/xL7
+76a7J80uvQ9uflPfg7r36HD2QhypQHz+YPYP1/CafzeabnXkul7+BfUIw6q

                 "], CompressedData["
1:eJxd1G1IU1EYB/AR0xK1mK0g2T4sFiINosxdpVWGQUgNyknDugvpFWMUwiKM
bYfBogaWlK3Qtl5Qg22XGZhUsOEXpSLEAi2ETSzMMCqKKCiU6p7/E9zThzF+
/J895zlnh2M5fLrx2BKdTuf6+1G/a7MeFnU31VVsXKaY7tXU1WbN7F2z1h7G
DsK5XviIDMu34V0eynvgx3AyExWsLHTCzZTnLqiOs+/ULxNCfokcC8ClElwi
2ZFvgzvOwZN70c9WKHFvOQ4r5+HhIP3+J1x/gzvt9ar988EraXG/iRGt88Hu
F6LHp2DfddTvnoGtZ3nOnszBE27kBR+w3kKVYCVWLNoxjfme0e/7HsH7qP9E
DzxF6+sDEl9v/t98p5CHRrXOBxNZ0UMPcT5hH+r7B5E3hdAvOoB5rZdR36rA
JXHUW5J0nmk40g/veYn6SB+svIbdvfT/5lD/7S7sn8F6nXdo/7PIJ2/RvHPw
aEzrPBu7Kjh4Ioz9jAygvqsNubFe4vd5+BDmP/rKzu/bvBPOtOD+GLZTv7fV
PF9jp3misNnGnfJvqOb1Zgvd9/ubMW+56ospuUV1gJ0pU/00ZfpcxfPFpdT/
AFww5hJcVEz5tDrPVhZZjv3IZRJ3swHzGndgf+0rUb/zpMTX616Fel8X8sRq
2DQkWHGMi7n8ie6bEf19etzHIqynhI1wQynqr1lr+DyJQrq/NuSViy7Bhl9a
B5j0gzsZW4/85lfKK9Hv90fudKxCtZO1v6fzWUfzvCGv/c+NcOsXWPZgvTY9
9uPwor+rnM7Pj/oVmzD/bAfeu+cN2N+DON4j537xPdC+j38AqdHqlw==
                 "]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQfT0v9n7c31AHdUOONT3TzR2Q+OvO3IfwjX5C+F9E
LMD8Wx8g6lnMIfymF2D+KpFIEP/u/bR7EHmZLIh82yVUvttKZL7s/U9NEP1n
3kDs64qHyOt8MgPybe8XOYD5q3tEzcDyzwyg7g03ReHr7DBB4b9JNwHrtzOF
8Ft0IfLvbCH8LxwmYPvnuUH4KU+MwfJJgVD3XYLwreKQ+XPvW7Wgyt9aAeJ3
rH7jDTFf6gzUffYg99299+kN1H2yZsjhu0rnKQofHP4AxmSo6Q==
                 "], CompressedData["
1:eJxV1V1IU2EYB/A1P1prFMryc0XZsJKFlDrXkDIls7UR2WYUZwqjRGzMiqEQ
JyEoEQuDuqgMQ0KCdo67MPBimJF0IWZfS5No7ojEyLDAMIkSaef9PxfnXIzx
4/+c57zPu/ec7fC11p3XajQaX/Ijf88EvJL2nady1z6daHpiq5wJzMYj82qv
LDGH+TuyvdLwKvKKC8jbtPVwPdWnw7wd9VY9vJoNZxngxRQ4ZKT8Ejy0hTnE
d7B+Um8WvNiJ3JeNeudN3K8ohzks3obXclHP0XrjJtRzd+GftfWK+bxSzXG1
Hzvp+gFY60Ie66f7w2GuD/erI1vuIY86aX09WP8Y+oec1+AVB3JDO+oD5Fut
6Jc4Rnkz6rPInBf1a0dpf0/AeTvhEZuVXZ+ZzzxY8aqM5Qexv4LYCD/aRP03
lrH6hjR40l/K8lGN7FqRy1Q62f9ficLjAvcDDq9D/dQ83JOCenMMDqShPjhd
wuYZXU/7HUXeoVd71KC2fTOuN07DvzKQp34pUZyfWnF5Dv1XslE/uYD8Uz7t
72/4cgHtp76Uzd9txvUVGZh3rpDyXDi4h+YvgHUWWp8FLiyW3SWI5fDb/cj9
R+AE/b6mAfIpcifu33QA6+VTmKXtZuRTIazXSM+HmWfzxXWpcNCFeceW6Xm1
or4qofRsPBpTWeqepue3GvUt72Hei3rHa3ikHXlkXPY3gb+vdDJ/obbpK/Wb
gN05mHfiDXyOg4s+wMF+zH9lyoP9+4w8MoPcoMP5rPrILCwuoH6Mra9LXH6O
evtL1JuvY/+GhtHP7aDz+9TD9tdJ57mhl/rT+azpkr1bFHtl90nf22RrRL8f
uaMJ9c6TsrdKLWdk/xEsh5Cnu9T7v+2w0lel9L3qfDKP+p2GL+ph8QH93n/d
qvUlltxsHpO9VOHk++iZygJ3A8+3bwPrF4o1WpnP2tCfqy7H+6kZ7/NYsY3N
o3+ofN+r/w/+A5APiOQ=
                 "], CompressedData["
1:eJxd1F9IU1EABvBrZCTMlkoPg7uoMEUS9DpzqzYYQn8sR2CmFHedCO6D4BRk
BsV8EPay2IshhLIVVhrdeyfcB62H7WFGxoRegoiBE8p8ENZDbz3coJ3zHeIe
H8blx/edP/dwdk8/mBzSDkmSdKP2o89vE1ESOTcSbleOmvJOd1jwMQW+6HSE
ZC/DaQ/yUAQe76a+TSrD8OBV6jskdpfZ6JxA/1cUuWsZ1op8/uv+mmfI3gdm
XZ2kDpHpj8yrg0/8rH9iE/3qIrWXrMF62kBe/wlOvBds5otibu/CX7Geqf6F
pwvwdmMA673j+ckA24+VgzNtyAeWnJ4hS8+dDhFvhr8P7xcW+Pxn0Y8+w/up
zDFSnkdfbkVfecrP5wyszXEPwfvuUZz/a3i2CU4vB9j5WM3Mq66XyB+1IK8u
IB9DrnemqLMkhfF6JoF++Tj6wThs2fw8b+K86hox/zY//zoZtn/DVseoY/8V
MtaPXH4Me1Ser2D+4kOnK/e+z4nueoPxP5PoG+vI4/2Yr30T+z8sId/7jFxd
9AtONInOt/Wx8ZE15px95TzLvUn+/lO9bH3tFh//wof7c4rvrw+OVUcE1/8Q
falM/cfIX4DdX5DbYXh3i1oyg9d87H54N6iPmOPDyAv8PqY1uGTBCbeP3beS
zv22h41vWOH9+z2sn3oFm708zzLnXBv4P5b4/QzOHvCUaHVAcY434l2KMH+y
VWH7acB+cvMe9PfX0Zeb0e/YEr83/33we1TzP6zSwHU=
                 "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfT0vNv5pR7iDuiHHmhpWcwdk/hxXEP9uHGM7hJ9T
AZG3bIbw38wFy8c/rAbzV/E8g6jXzIPIy3BZgNULRqHyL3og8+/GsZtB9LO8
gJi/WREif2UxiC8bH88L5q9bEg+RX/k7DCwf89UMzJ/4BsL/kwLh/3wI5q+e
89wUyJ8bz30DIl+TYgqWP34Owp9z2wTIr41vPgrh7wkyAcs/PADin1gdw4TM
B+p/ZYzE91gTcxDCP30ExNdYw7IYwp9/BqK+pB/CL74C4kuseVJtDPbPxbsQ
eZkiiPzOF8j8ufGFIuFI/Ltxb63Cwe6xeQBRrxsDja89EPf9rQTzV99pMEWO
v9V3nM0c0OMXAOEJxy4=
                 "], CompressedData["
1:eJxd1XtIU1EcB/CpFaVCpYbBZg+0/MOV1NyjbZWPwIrJQM3nldAQE8VHixQc
WbhSsJToDwvXQ4gw720pSC9WpAZJjYZllrjt/mGxQivCiZKvtvM9wb3+IePD
93fO+d3juffsLKnOLA2WSCS1/r/A7+eqIp5NyUuO37eeky1rk0Xeq/P7Fh+S
CVs1OpIfOEncG5UCZ5Qjt6TDxSbibl8GvN0Mh2fDzU2od+TDd7qQc2fhkT5Y
1gTH9NN+LsHlj7G+rDlgt0fxlOYtyBueCe3mW+2oN19EHvkS81fWi8xNV8Kt
xTCzX0UsvUDcY5+Co28S2/QmNXEjh3rXMFz9HvUMoyH9dfyk/dzXkHxuQ77I
HVuEdvOfdhD3hHcg70tAPl2P+a6qiG2OAuQLOuT2uFUeU4u8OKQm4wupHSxy
qRaWt5Gcn9DAV2rgQjXWY3JQ36lEbj0Mb1xD+69NIm4PDriFkxUlkfHGIGLW
dQy5UYJ6Rk1yj3Elj9S74pA7l+l+Ra3yWqGHWZlPQeZ3rsCMV4E8CPO7PCT3
OEMCPsoxY8gfraP9foCrQ4V284kR4twohc3/598F6yPQT7qcPu8ePO8pun/2
MuSxx+l8g/BkFvVt1Mem0vokOEyBfh10vc7dyA1P0F/rpoDDOXkx8sK/dH9U
cNhXod385LjIntIR2JeK+mtv4XsM6l8MwdnnkGe9Cvg7a+gU2n8+3gk9zE5/
gZtobvkGT1Jn/4HTBuC4JfQzM4Dx+lDsz8wg/d5shesWqZtxfufgHms7zl/Z
EuzqgN8s0ff3LhyP82NzdcO59DxZ+1b5ucg260es14j1bDIvcuc83c9Z5F4f
1peF4P3z/qZ5KOz8IbSbrxsX5+OvMV4/ivlnWeTm0/Dm61jfvqgi3+PI8zDX
hu/RQiXqDdvgNPr9kjuVfsfwFXnErMWiJLmJfs+zDynJfA0G4odx84H9PsjP
JON9tOdg/ycSab8F9P/pyxWZraV5Fe6PijOwvkFL5p+Cu5nLyBNM9PnategP
7rXeQN5K7w95l8ic/IHY3CjGR9egvv8X8kR6Hx2Zw/rpJZh/dAWWnqD3S7BO
fN/5779/wxX7aA==
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.11718800000000007`, 0.23046900000000003`, 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{49.244499999999995`, 48.852}, {49.244499999999995`, 
                46.6082}, {47.426199999999994`, 44.78909999999999}, {
                45.181999999999995`, 44.78909999999999}, {42.9379, 
                44.78909999999999}, {41.119499999999995`, 46.6082}, {
                41.119499999999995`, 48.852}, {41.119499999999995`, 
                51.09609999999999}, {42.9379, 52.91409999999999}, {
                45.181999999999995`, 52.91409999999999}, {47.426199999999994`,
                 52.91409999999999}, {49.244499999999995`, 
                51.09609999999999}, {49.244499999999995`, 48.852}}}]}, {
               FaceForm[{
                 RGBColor[0.373047, 1., 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{89.24449999999999, 86.85199999999999}, {
                89.24449999999999, 84.60820000000001}, {87.4262, 
                82.78909999999999}, {85.18199999999999, 82.78909999999999}, {
                82.93790000000001, 82.78909999999999}, {81.11950000000002, 
                84.60820000000001}, {81.11950000000002, 86.85199999999999}, {
                81.11950000000002, 89.0949}, {82.93790000000001, 
                90.91409999999999}, {85.18199999999999, 90.91409999999999}, {
                87.4262, 90.91409999999999}, {89.24449999999999, 89.0949}, {
                89.24449999999999, 86.85199999999999}}}]}, {
               FaceForm[{
                 RGBColor[1., 0.007812000000000041, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{15.244499999999997`, 101.85199999999999`}, {
                15.244499999999997`, 99.6082}, {13.426200000000001`, 
                97.78909999999999}, {11.181999999999999`, 
                97.78909999999999}, {8.937889999999998, 97.78909999999999}, {
                7.1195299999999975`, 99.6082}, {7.1195299999999975`, 
                101.85199999999999`}, {7.1195299999999975`, 
                104.09500000000001`}, {8.937889999999998, 
                105.91399999999997`}, {11.181999999999999`, 
                105.91399999999997`}, {13.426200000000001`, 
                105.91399999999997`}, {15.244499999999997`, 
                104.09500000000001`}, {15.244499999999997`, 
                101.85199999999999`}}}]}, {
               FaceForm[{
                 RGBColor[0.9372559, 1., 0.035155999999999965`], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{58.24449999999999, 112.85199999999998`}, {
                58.24449999999999, 110.608}, {56.42619999999999, 
                108.78899999999997`}, {54.18199999999999, 
                108.78899999999997`}, {51.937900000000006`, 
                108.78899999999997`}, {50.119499999999995`, 110.608}, {
                50.119499999999995`, 112.85199999999998`}, {
                50.119499999999995`, 115.09499999999998`}, {
                51.937900000000006`, 116.91399999999997`}, {54.18199999999999,
                 116.91399999999997`}, {56.42619999999999, 
                116.91399999999997`}, {58.24449999999999, 
                115.09499999999998`}, {58.24449999999999, 
                112.85199999999998`}}}]}}, ImageSize -> {{750.}, {300.}}, 
             AspectRatio -> Automatic, ImageSize -> Automatic, 
             PlotRange -> {{0., 344.}, {0., 394.}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate name", "scanner" -> "Data", "id" -> 
     "AlternateNamesPod:MathWorldData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"AlternateNames\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"vertex\[Hyphen]edge graph\"", TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Basic definition", "scanner" -> "Data", "id" -> 
     "BasicDefinitionPod:MathWorldData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"BasicDefinitions\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              
              GridBox[{{
                "\"In graph theory, a graph, also called a network, is a \
collection of points together with lines that connect some subset of the \
points.\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{{Top}, {Bottom}}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {
                "Columns" -> None, "Rows" -> {{True}}, 
                 "ItemsIndexed" -> {{{1, -1}, {1, -1}} -> None}}, 
               GridBoxItemSize -> {"Columns" -> {Automatic}}, 
               GridBoxSpacings -> {"Columns" -> {0.6, 0}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Detailed definition", "scanner" -> "Data", "id" -> 
     "DefinitionPod:MathWorldData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"TypesetDescription\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                Cell[
                "The word \
\[OpenCurlyDoubleQuote]graph\[CloseCurlyDoubleQuote] has (at least) two \
meanings in mathematics.", LineSpacing -> {1, 3}]}, {
                Cell[
                 
                 TextData[{
                  "In elementary mathematics, \[OpenCurlyDoubleQuote]graph\
\[CloseCurlyDoubleQuote] refers to a function graph or \
\[OpenCurlyDoubleQuote]graph of a function,\[CloseCurlyDoubleQuote] i.e., a \
plot."}], LineSpacing -> {1, 3}]}, {
                Cell[
                 
                 TextData[{
                  "In a mathematician\[CloseCurlyQuote]s terminology, a graph \
is a collection of points and lines connecting some (possibly empty) subset \
of them. The points of a graph are most commonly known as graph vertices, but \
may also be called \[OpenCurlyDoubleQuote]nodes\[CloseCurlyDoubleQuote] or \
simply \[OpenCurlyDoubleQuote]points.\[CloseCurlyDoubleQuote] Similarly, the \
lines connecting the vertices of a graph are most commonly known as graph \
edges, but may also be called \[OpenCurlyDoubleQuote]arcs\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]lines.\
\[CloseCurlyDoubleQuote]"}], LineSpacing -> {1, 3}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              BaseStyle -> {AutoMultiplicationSymbol -> False}, 
              DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemStyle -> {"Columns" -> {{
                   Directive[SpanMaxSize -> DirectedInfinity[1]]}}, 
                "Rows" -> {{
                   Directive[SpanMaxSize -> DirectedInfinity[1]]}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More details", "input" -> 
         "DefinitionPod:MathWorldData__More details"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "https://mathworld.wolfram.com/Graph.html", "text" -> 
           "More information"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Related terms", "scanner" -> "Data", "id" -> 
     "RelatedTermsPod:MathWorldData", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"RelatedEntries\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"bipartite graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "BipartiteGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"circulant graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "CirculantGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"comparability graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "ComparabilityGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"complete graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "CompleteGraph"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"connected graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "ConnectedGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"degree sequence\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "DegreeSequence"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"directed graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "DirectedGraph"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"extremal graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "ExtremalGraph"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"function graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "FunctionGraph"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"graph diameter\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "GraphDiameter"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"graph minor\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "GraphMinor"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"graph theory\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "GraphTheory"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"interval graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "IntervalGraph"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"isomorphic graphs\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "IsomorphicGraphs"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"labeled graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "LabeledGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"multigraph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "Multigraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"null graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "NullGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"planar graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "PlanarGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"pseudograph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "Pseudograph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"random graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "RandomGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"regular graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "RegularGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"sequential graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "SequentialGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"simple graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "SimpleGraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"subgraph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "Subgraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"supergraph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "Supergraph"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"superregular graph\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, 
                    "SuperregularGraph"}]], Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"tournament\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`MathWorldData, "Tournament"}]], 
                 Identity], TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Related Wolfram Language symbols", "scanner" -> "Data",
      "id" -> "RelatedFunctionsPod:MathWorldData", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \
\"RelatedWolframLanguageSymbols\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Graph\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Graph"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GraphQ\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GraphQ"}]], Identity], 
                TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Educational grade level", "scanner" -> "Data", "id" -> 
     "EducationPod:MathWorldData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"college level\"", 
              $CellContext`TagBoxWrapper[
              "EntityClass" -> {$CellContext`MathWorldData, "CollegeLevel"}]],
              Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Subject classifications", "scanner" -> "Data", "id" -> 
     "SubjectPod:MathWorldData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "MathWorld"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"general graph theory\"", 
              $CellContext`TagBoxWrapper[
              "EntityClass" -> {$CellContext`MathWorldData, 
                 "Discrete Mathematics:Graph Theory:General Graph Theory"}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "MSC 2010"}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"MathWorld\", \"Graph\"][EntityProperty[\"MathWorld\", \"MSC\
\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"05Cxx\"", 
              $CellContext`TagBoxWrapper[
              "EntityClass" -> {$CellContext`MathWorldData, "05Cxx"}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show details", "input" -> 
         "SubjectPod:MathWorldData__Show details"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "graph", "template" -> 
        "Assuming \"graph\" is referring to a mathematical \
definition${separator}Use as ${desc} or ${desc} or ${desc} instead", "count" -> 
        "4", "pulldown" -> "false", "default" -> 
        "{\"C\", \"graph\"} -> {\"MathWorld\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "{\"C\", \"graph\"} -> {\"MathWorld\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Calculator", "desc" -> "a computation", "input" -> 
          "{\"C\", \"graph\"} -> {\"Calculator\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"graph\"} -> {\"Word\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"C\", \"graph\"} -> {\"ExamplePage\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "graph", "template" -> 
        "Assuming graph${separator}Use ${desc} instead", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"MathWorldE\", \"graph\"} -> {\"Graph\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Graph", "desc" -> "graph", "input" -> 
          "{\"DPClash\", \"MathWorldE\", \"graph\"} -> {\"Graph\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "FunctionGraph", "desc" -> "function graph", "input" -> 
          "{\"DPClash\", \"MathWorldE\", \"graph\"} -> {\"FunctionGraph\"}"}, \
{}]}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "9", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.851", "parsetiming" -> "0.129", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP834129h8e55fc721cc700003ghie4656cb8d945", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "1", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa835129h8e55fc721cc70000108684cg3cic0g8e7794153569472399936", "version" -> 
    "2.6", "inputstring" -> "graph"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 28, 7.5882223`8.632715015300366}, "Line" -> 
    87, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "graph"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{660., {575., 581.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.880290050520054*^9, 3.8802900783764954`*^9}, 
   3.8802903272429805`*^9, 3.88029048827419*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"ccee1c65-d77e-4bb7-b434-ceb1cdf30416"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"WolframAlpha", "[", "\"\<tree{1->2, 2-> 4, 1->3, 3->5, 2->6}\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"WolframAlpha", "[", "\"\<clusteringTree\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.8802905994063845`*^9, 3.8802906074614673`*^9}, {
  3.880290720101638*^9, 3.8802907291012373`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"e0813a50-132a-40da-ad7c-7b25a70cdb1b"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "tree{1->2, 2-> 4, 1->3, 3->5, 2->6}", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TreeGraphQ[Graph[{1, 2, 3, 4, 5, 6}, {1<->2, 2<->4, 1<->3, 3<->5, \
2<->6}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{"1", "\[Rule]", "2"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"2", "\[Rule]", "4"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"1", "\[Rule]", "3"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"3", "\[Rule]", "5"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"2", "\[Rule]", "6"}], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"tree\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], 
                    GrayLevel[0.949], 
                    GrayLevel[0.949], 
                    GrayLevel[0.949], 
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["True", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> 
     "ImagePod:GraphData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Graph[{1, 2, 3, 4, 5, 6}, {1<->2, 2<->4, 1<->3, 3<->5, 2<->6}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             TagBox[
              GraphicsGroupBox[{{{
                  GrayLevel[0.7], 
                  
                  LineBox[{{1.0859306069076735`, 1.7374889710522776`}, {
                   0.4343722427630694, 0.8687444855261388}}]}, {
                  GrayLevel[0.7], 
                  
                  LineBox[{{1.0859306069076735`, 1.7374889710522776`}, {
                   1.7374889710522776`, 0.8687444855261388}}]}, {
                  GrayLevel[0.7], 
                  
                  LineBox[{{0.4343722427630694, 0.8687444855261388}, {0., 
                   0.}}]}, {
                  GrayLevel[0.7], 
                  
                  LineBox[{{0.4343722427630694, 0.8687444855261388}, {
                   0.8687444855261388, 0.}}]}, {
                  GrayLevel[0.7], 
                  
                  LineBox[{{1.7374889710522776`, 0.8687444855261388}, {
                   1.7374889710522776`, 0.}}]}}, 
                
                GraphicsComplexBox[{{1.0859306069076735`, 
                 1.7374889710522776`}, {0.4343722427630694, 
                 0.8687444855261388}, {0., 0.}, {1.7374889710522776`, 
                 0.8687444855261388}, {1.7374889710522776`, 0.}, {
                 0.8687444855261388, 0.}}, {
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "1", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 1], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "2", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 2], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "4", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 3], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "3", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 4], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "5", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 5], 
                  InsetBox[
                   FormBox[
                    FrameBox[
                    "6", Background -> RGBColor[1, 1, 0.8], FrameStyle -> 
                    RGBColor[0.94, 0.85, 0.36], FrameMargins -> Inherited, 
                    StripOnInput -> False], TraditionalForm], 6]}, {}]}, 
               ContentSelectable -> True], 
              Annotation[#, 
               VertexCoordinateRules -> {{1.0859306069076735`, 
                1.7374889710522776`}, {0.4343722427630694, 
                0.8687444855261388}, {0., 0.}, {1.7374889710522776`, 
                0.8687444855261388}, {1.7374889710522776`, 0.}, {
                0.8687444855261388, 0.}}]& ], {
             ImageSize -> {150}, FrameTicks -> None, PlotRange -> All, 
              PlotRangePadding -> Scaled[0.1], AspectRatio -> 1, ImageSize -> 
              NCache[{
                 Rational[59600, 297], {250}}, {
                200.67340067340066`, {250}}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More images", "input" -> 
         "ImagePod:GraphData__More images"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Basic properties", "scanner" -> "Data", "id" -> 
     "BasicPropertiesPod:GraphData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"GraphData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[AssociationThread[{\"vertex count\", \"edge count\", \
\"connected component count\"}, {VertexCount[#1], EdgeCount[#1], \
If[UndirectedGraphQ[#1], Length[ConnectedComponents[#1]], \
Missing[\"NotApplicable\"]]} & [Graph[{1, 2, 3, 4, 5, 6}, {1<->2, 2<->4, \
1<->3, 3<->5, 2<->6}]]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"vertex count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["6", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"edge count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["5", #& ]}, {
                 TagBox[
                  PaneBox[
                  "\"connected component count\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["1", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show lists", "input" -> 
         "BasicPropertiesPod:GraphData__Show lists"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
GraphDataSourceInformationNotes.html", "text" -> "Graph data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "Graph", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.087", "parsetiming" -> "0.666", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP55123e4fi0a6079f5ch00003434f7bg80fi0f14", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa55223e4fi0a6079f5ch000019816ih9hhif214b4307842769377011871", "version" -> 
    "2.6", "inputstring" -> "tree{1->2, 2-> 4, 1->3, 3->5, 2->6}"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 32, 12.4011751`8.846037796048746}, "Line" -> 
    89, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "tree{1->2, 2-> 4, 1->3, 3->5, 2->6}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {225., 231.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802906106914883`*^9, 3.8802907324351234`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"bd533400-f3ca-48fd-bf72-f232812261cd"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "clusteringTree", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \"ClusteringTree\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 TagBox[
                  TagBox[
                   StyleBox[
                   "\"ClusteringTree\"", {
                    FontFamily -> "Roboto", FontSize -> -1 + Inherited}, 
                    StripOnInput -> False], 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {WolframLanguageData, "ClusteringTree"}]], 
                  Identity], "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"Wolfram Language symbol\"", 
                    "\[NoBreak]", "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Usage", "scanner" -> "Data", "id" -> 
     "UsagePod:WolframLanguageData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \
\"ClusteringTree\"][EntityProperty[\"WolframLanguageSymbol\", \
\"TypesetUsage\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              
              GridBox[{{
                "\"\\!\\(\\*RowBox[{StyleBox[\\\"ClusteringTree\\\", \
{FontSize -> -1 + Inherited, FontFamily -> \\\"Roboto\\\"}], \\\"[\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
\\\"\[Ellipsis]\\\"}], \\\"}\\\"}], \\\"]\\\"}]\\) constructs a weighted tree \
from the hierarchical clustering of the elements \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\
\"TR\\\"]]\\), \\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]]\\), \[Ellipsis].\""}, {
                "\"\\!\\(\\*RowBox[{StyleBox[\\\"ClusteringTree\\\", \
{FontSize -> -1 + Inherited, FontFamily -> \\\"Roboto\\\"}], \\\"[\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", \\\"\[Ellipsis]\\\"}], \\\"}\\\"}], \\\"]\\\"}]\\) \
represents \\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\
\"i\\\", \\\"TI\\\"]]\\) with \\!\\(\\*SubscriptBox[StyleBox[\\\"v\\\", \
\\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) in the constructed \
graph.\""}, {
                "\"\\!\\(\\*RowBox[{StyleBox[\\\"ClusteringTree\\\", \
{FontSize -> -1 + Inherited, FontFamily -> \\\"Roboto\\\"}], \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"e\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", \\\"\[Ellipsis]\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"v\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
\\\"\[Ellipsis]\\\"}], \\\"}\\\"}]}], \\\"]\\\"}]\\) represents \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\) with \\!\\(\\*SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) in the constructed graph.\""}, {
                "\"\\!\\(\\*RowBox[{RowBox[{StyleBox[\\\"ClusteringTree\\\", \
{FontSize -> -1 + Inherited, FontFamily -> \\\"Roboto\\\"}], \\\"[\\\", \
RowBox[{\\\"\[LeftAssociation]\\\", RowBox[{SubscriptBox[StyleBox[\\\"label\\\
\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"label\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[RowBox[{\\\"2\\\", \
\\\"\[Ellipsis]\\\"}], \\\"TI\\\"]]}]}], \\\"\[RightAssociation]\\\"}], \\\"]\
\\\"}]\\) represents \\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) using labels \
\\!\\(\\*SubscriptBox[StyleBox[\\\"label\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) in the constructed graph.\""}, {
                "\"\\!\\(\\*RowBox[{StyleBox[\\\"ClusteringTree\\\", \
{FontSize -> -1 + Inherited, FontFamily -> \\\"Roboto\\\"}], \\\"[\\\", \
RowBox[{StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"h\\\", \\\
\"TI\\\"]}], \\\"]\\\"}]\\) constructs a weighted tree from the hierarchical \
clustering of \\!\\(\\*StyleBox[\\\"data\\\", \\\"TI\\\"]\\) by joining \
subclusters at distance less than \\!\\(\\*StyleBox[\\\"h\\\", \
\\\"TI\\\"]\\). \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AutoDelete -> False, 
               GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {None, {
                    GrayLevel[0.84]}, None}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{0.8}}}], "Grid"], 
             $CellContext`TagBoxWrapper[
             "StringBoxes" -> 
              "ClusteringTree[{e1, e2, \[Ellipsis]}] constructs a weighted \
tree from the hierarchical clustering of the elements e1, e2, \[Ellipsis].\n\
ClusteringTree[{e1\[Rule]v1, e2\[Rule]v2, \[Ellipsis]}] represents ei with vi \
in the constructed graph.\nClusteringTree[{e1, e2, \[Ellipsis]}\[Rule]{v1, \
v2, \[Ellipsis]}] represents ei with vi in the constructed graph.\n\
ClusteringTree[\[LeftAssociation]label1\[Rule]e1, label2\[Rule]e 2\[Ellipsis]\
\[RightAssociation]] represents ei using labels labeli in the constructed \
graph.\nClusteringTree[data, h] constructs a weighted tree from the \
hierarchical clustering of data by joining subclusters at distance less than \
h."]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/ClusteringTree.html", 
           "text" -> "More information"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Basic examples", "scanner" -> "Data", "id" -> 
     "ExamplesPod:WolframLanguageData", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    RowBox[{
                    Cell[
                    "Obtain a cluster hierarchy from a list of numbers:", 
                    "ExampleText"]}]}, {
                    RowBox[{
                    StyleBox["In[1]:=", "CellLabel"], 
                    Cell[
                    BoxData[
                    RowBox[{"ClusteringTree", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "5"}], "}"}], "]"}]], "Input",
                     ShowStringCharacters -> True]}]}, {
                    RowBox[{
                    StyleBox["Out[1]=", "CellLabel"], 
                    Cell[
                    BoxData[
                    GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    
                    Graph[{1, 2, 3, 4, 5}, {
                    Null, {{1, 2}, {2, 3}, {2, 4}, {1, 5}}}, {
                    AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> 
                    False, AxesLabel -> None, AxesOrigin -> Automatic, 
                    AxesStyle -> {}, Background -> None, BaselinePosition -> 
                    Automatic, BaseStyle -> {}, ContentSelectable -> 
                    Automatic, EdgeLabels -> {None}, EdgeStyle -> {
                    GrayLevel[0.65]}, Editable -> False, Epilog -> {}, 
                    FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
                    None, FrameStyle -> {}, FrameTicks -> None, 
                    FrameTicksStyle -> {}, 
                    GraphLayout -> {
                    "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> 
                    Top}, GraphStyle -> Automatic, GridLines -> None, 
                    GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                    All, ImageSize -> Automatic, LabelStyle -> {}, 
                    PerformanceGoal -> "Speed", PlotLabel -> None, PlotRange -> 
                    All, PlotRangeClipping -> False, PlotRangePadding -> 
                    Automatic, PlotRegion -> Automatic, PlotTheme -> 
                    Automatic, Prolog -> {}, 
                    Properties -> {
                    "GraphProperties" -> {
                    "LeafLabels" -> Association[3 -> 1, 4 -> 2, 5 -> 5]}}, 
                    RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {},
                     VertexLabels -> {3 -> Placed[
                    Framed[
                    Short[1], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 5 -> Placed[
                    Framed[
                    Short[5], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 4 -> Placed[
                    Framed[
                    Short[2], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center]}, 
                    VertexShape -> {
                    3 -> Null, 4 -> Null, 2 -> Null, 5 -> Null, 1 -> Null}, 
                    VertexSize -> {0}, 
                    VertexWeight -> {
                    1.7650452162436565`, 0.5883484054145521, 0, 0, 0}}]]}, 
                    TagBox[
                    GraphicsGroupBox[{{
                    GrayLevel[0.65], 
                    Opacity[0.7], 
                    
                    LineBox[{{{0.8944271909999159, 1.7888543819998317`}, {
                    0.4472135954999579, 0.8944271909999159}}, {{
                    0.8944271909999159, 1.7888543819998317`}, {
                    1.3416407864998738`, 0.8944271909999159}}, {{
                    0.4472135954999579, 0.8944271909999159}, {0., 0.}}, {{
                    0.4472135954999579, 0.8944271909999159}, {
                    0.8944271909999159, 0.}}}]}, {
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    InsetBox[
                    "", {0.8944271909999159, 1.7888543819998317`}, 
                    Automatic, {0., 0.}], 
                    InsetBox[
                    "", {0.4472135954999579, 0.8944271909999159}, Automatic, {
                    0., 0.}], {
                    InsetBox["", {0., 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "1", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0., 0.}, BaseStyle -> "Graphics"]}, {
                    InsetBox[
                    "", {0.8944271909999159, 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "2", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0.8944271909999159, 0.}, BaseStyle -> 
                    "Graphics"]}, {
                    InsetBox[
                    "", {1.3416407864998738`, 0.8944271909999159}, 
                    Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "5", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {1.3416407864998738`, 0.8944271909999159}, 
                    BaseStyle -> "Graphics"]}}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FormatType -> TraditionalForm, 
                    FrameTicks -> None, 
                    ImageSize -> {Automatic, 200.7109375}]], "Output", 
                    ShowStringCharacters -> True]}]}, {
                    RowBox[{
                    Cell[
                    "Unify clusters at distance less than 2:", 
                    "ExampleText"]}]}, {
                    RowBox[{
                    StyleBox["In[2]:=", "CellLabel"], 
                    Cell[
                    BoxData[
                    RowBox[{"ClusteringTree", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", " ", 
                    "1.3"}], "]"}]], "Input", ShowStringCharacters -> 
                    True]}]}, {
                    RowBox[{
                    StyleBox["Out[2]=", "CellLabel"], 
                    Cell[
                    BoxData[
                    GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    
                    Graph[{1, 2, 5}, {Null, {{1, 2}, {1, 3}}}, {
                    AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> 
                    False, AxesLabel -> None, AxesOrigin -> Automatic, 
                    AxesStyle -> {}, Background -> None, BaselinePosition -> 
                    Automatic, BaseStyle -> {}, ContentSelectable -> 
                    Automatic, EdgeLabels -> {None}, EdgeStyle -> {
                    GrayLevel[0.65]}, Editable -> False, Epilog -> {}, 
                    FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
                    None, FrameStyle -> {}, FrameTicks -> None, 
                    FrameTicksStyle -> {}, 
                    GraphLayout -> {
                    "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> 
                    Top}, GraphStyle -> Automatic, GridLines -> None, 
                    GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                    All, ImageSize -> Automatic, LabelStyle -> {}, 
                    PerformanceGoal -> "Speed", PlotLabel -> None, PlotRange -> 
                    All, PlotRangeClipping -> False, PlotRangePadding -> 
                    Automatic, PlotRegion -> Automatic, PlotTheme -> 
                    Automatic, Prolog -> {}, 
                    Properties -> {
                    "GraphProperties" -> {
                    "LeafLabels" -> Association[2 -> {1, 2}, 5 -> {5}]}}, 
                    RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {},
                     VertexLabels -> {5 -> Placed[
                    Framed[
                    Short[
                    Text[{5}]], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 2 -> Placed[
                    Framed[
                    Short[
                    Text[{1, 2}]], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center]}, VertexShape -> {
                    Association[3 -> Null, 4 -> Null, 2 -> Null, 5 -> Null, 1 -> 
                    Null]}, VertexSize -> {0}, 
                    VertexWeight -> {1.7650452162436565`, 0, 0}}]]}, 
                    TagBox[
                    GraphicsGroupBox[{{
                    GrayLevel[0.65], 
                    Opacity[0.7], 
                    
                    LineBox[{{{0.4472135954999579, 0.8944271909999159}, {0., 
                    0.}}, {{0.4472135954999579, 0.8944271909999159}, {
                    0.8944271909999159, 0.}}}]}, {
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    InsetBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"3", "\[Rule]", "Null"}], ",", 
                    RowBox[{"4", "\[Rule]", "Null"}], ",", 
                    RowBox[{"2", "\[Rule]", "Null"}], ",", 
                    RowBox[{"5", "\[Rule]", "Null"}], ",", 
                    RowBox[{"1", "\[Rule]", "Null"}]}], 
                    "\[RightAssociation]"}], {0.4472135954999579, 
                    0.8944271909999159}, Automatic, {0., 0.}], {
                    InsetBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"3", "\[Rule]", "Null"}], ",", 
                    RowBox[{"4", "\[Rule]", "Null"}], ",", 
                    RowBox[{"2", "\[Rule]", "Null"}], ",", 
                    RowBox[{"5", "\[Rule]", "Null"}], ",", 
                    RowBox[{"1", "\[Rule]", "Null"}]}], 
                    "\[RightAssociation]"}], {0., 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], TextForm]], "InlineText", 
                    ExpressionUUID -> "df88081d-bb10-42c9-8ee1-38a44f854de5"], 
                    Text[{1, 2}]], Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0., 0.}, BaseStyle -> "Graphics"]}, {
                    InsetBox[
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"3", "\[Rule]", "Null"}], ",", 
                    RowBox[{"4", "\[Rule]", "Null"}], ",", 
                    RowBox[{"2", "\[Rule]", "Null"}], ",", 
                    RowBox[{"5", "\[Rule]", "Null"}], ",", 
                    RowBox[{"1", "\[Rule]", "Null"}]}], 
                    "\[RightAssociation]"}], {0.8944271909999159, 0.}, 
                    Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"{", "5", "}"}], TextForm]], "InlineText", 
                    ExpressionUUID -> "fb543241-cd0d-4881-91c8-6fe0bf419c62"], 
                    Text[{5}]], Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0.8944271909999159, 0.}, BaseStyle -> 
                    "Graphics"]}}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FormatType -> TraditionalForm, 
                    FrameTicks -> None]], "Output", ShowStringCharacters -> 
                    True]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    RowBox[{
                    Cell[
                    "Obtain a cluster hierarchy from a list of strings:", 
                    "ExampleText"]}]}, {
                    RowBox[{
                    StyleBox["In[1]:=", "CellLabel"], 
                    Cell[
                    BoxData[
                    RowBox[{"ClusteringTree", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"a\"", ",", " ", "\"abba\"", ",", " ", 
                    "\"ababa\"", ",", " ", "\"abcdefg\""}], "}"}], "]"}]], 
                    "Input", ShowStringCharacters -> True]}]}, {
                    RowBox[{
                    StyleBox["Out[1]=", "CellLabel"], 
                    Cell[
                    BoxData[
                    GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    
                    Graph[{1, 2, 3, 4, 5, 6, 7}, {
                    Null, {{1, 2}, {2, 3}, {2, 4}, {4, 5}, {4, 6}, {1, 7}}}, {
                    AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> 
                    False, AxesLabel -> None, AxesOrigin -> Automatic, 
                    AxesStyle -> {}, Background -> None, BaselinePosition -> 
                    Automatic, BaseStyle -> {}, ContentSelectable -> 
                    Automatic, EdgeLabels -> {None}, EdgeStyle -> {
                    GrayLevel[0.65]}, Editable -> False, Epilog -> {}, 
                    FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
                    None, FrameStyle -> {}, FrameTicks -> None, 
                    FrameTicksStyle -> {}, 
                    GraphLayout -> {
                    "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> 
                    Top}, GraphStyle -> Automatic, GridLines -> None, 
                    GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                    All, ImageSize -> Automatic, LabelStyle -> {}, 
                    PerformanceGoal -> "Speed", PlotLabel -> None, PlotRange -> 
                    All, PlotRangeClipping -> False, PlotRangePadding -> 
                    Automatic, PlotRegion -> Automatic, PlotTheme -> 
                    Automatic, Prolog -> {}, 
                    Properties -> {
                    "GraphProperties" -> {
                    "LeafLabels" -> Association[
                    3 -> "a", 5 -> "abba", 6 -> "ababa", 7 -> "abcdefg"]}}, 
                    RotateLabel -> True, Ticks -> Automatic, TicksStyle -> {},
                     VertexLabels -> {6 -> Placed[
                    Framed[
                    Short["ababa"], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 3 -> Placed[
                    Framed[
                    Short["a"], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 5 -> Placed[
                    Framed[
                    Short["abba"], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 7 -> Placed[
                    Framed[
                    Short["abcdefg"], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center]}, 
                    VertexShape -> {
                    3 -> Null, 4 -> Null, 6 -> Null, 2 -> Null, 5 -> Null, 7 -> 
                    Null, 1 -> Null}, VertexSize -> {0}, 
                    VertexWeight -> {5., 3., 0, 1., 0, 0, 0}}]]}, 
                    TagBox[
                    GraphicsGroupBox[{{
                    GrayLevel[0.65], 
                    Opacity[0.7], 
                    
                    LineBox[{{{0.8944271909999159, 2.6832815729997477`}, {
                    0.4472135954999579, 1.788854381999832}}, {{
                    0.8944271909999159, 2.6832815729997477`}, {
                    1.3416407864998738`, 1.788854381999832}}, {{
                    0.4472135954999579, 1.788854381999832}, {0., 
                    0.894427190999916}}, {{0.4472135954999579, 
                    1.788854381999832}, {0.8944271909999159, 
                    0.894427190999916}}, {{0.8944271909999159, 
                    0.894427190999916}, {0.4472135954999579, 0.}}, {{
                    0.8944271909999159, 0.894427190999916}, {
                    1.3416407864998738`, 0.}}}]}, {
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    InsetBox[
                    "", {0.8944271909999159, 2.6832815729997477`}, 
                    Automatic, {0., 0.}], 
                    InsetBox[
                    "", {0.4472135954999579, 1.788854381999832}, Automatic, {
                    0., 0.}], {
                    InsetBox[
                    "", {0., 0.894427190999916}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "\"a\"", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0., 0.894427190999916}, BaseStyle -> 
                    "Graphics"]}, 
                    InsetBox[
                    "", {0.8944271909999159, 0.894427190999916}, Automatic, {
                    0., 0.}], {
                    InsetBox[
                    "", {0.4472135954999579, 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "\"abba\"", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {0.4472135954999579, 0.}, BaseStyle -> 
                    "Graphics"]}, {
                    InsetBox[
                    "", {1.3416407864998738`, 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "\"ababa\"", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {1.3416407864998738`, 0.}, BaseStyle -> 
                    "Graphics"]}, {
                    InsetBox[
                    "", {1.3416407864998738`, 1.788854381999832}, Automatic, {
                    0., 0.}], 
                    InsetBox[
                    FrameBox[
                    "\"abcdefg\"", Background -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, FrameStyle -> 
                    GrayLevel[1], RoundingRadius -> 2, StripOnInput -> 
                    False], {1.3416407864998738`, 1.788854381999832}, 
                    BaseStyle -> "Graphics"]}}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FormatType -> TraditionalForm, 
                    FrameTicks -> None, 
                    ImageSize -> {Automatic, 295.9410317949907}]], "Output", 
                    ShowStringCharacters -> True]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    RowBox[{
                    Cell[
                    "Obtain a cluster hierarchy from a list of images:", 
                    "ExampleText"]}]}, {
                    RowBox[{
                    StyleBox["In[1]:=", "CellLabel"], 
                    Cell[
                    BoxData[
                    RowBox[{"ClusteringTree", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJwVV+dvKtndXr35ki+R3kjZG+Vqs3v3rht1BpiBGboxtrExGBvTYegMvWN6
x4BpNsUN9+u9NVvzbom00SvlW5S/Kud+GHTOEfr9zq89z3O+dMX2ff/zySef
pH4Pfvad2dVk0pnX/i/Y6KKpABn1eraiaS/pTWKu34HDz8G3Ar6P67oJHrm5
Uy96ExFehsR9BzJyoyduZOrlNglOSsuMqukJDa1sZTVceM3GOSXxUVhQtvPa
LjS0uZjfXelY4IaVXTMxC/u0NsEu6xlVE3Pg5p14eT0HAkxdhvBpgH8W4l+E
cLA+D/CmJK9lhEYOzsSN3IT4T6m1npXdNEFtB9KywkkdK7HPTOrhnA3q+Xmj
kKThQEch4TDEP3YLYkrqyhefimnPxz5ex431vVjNDHdd3ElA0HEgk4AQnE9J
7kUQf0hJLiPC64jgLi66DPHOQ/jAiRxbWQM7p6aljd3ceVjUJzhdAjlyctMa
ak4HNR1owcqt2tDzqOQqvd7xCXoB8Xl0rWxguUSL29gy/eWzcUg8DuFnsdWz
iGQakc4Ta7Ow5Ca5dp2QPaRlT9m1V4drsyA286HzCD7zc8ckNvRwqzrGmOTl
NSstI3zqE8wCoqlf0LAhRT2U1zO6JDJL8q6i0vcV5VNeUSPQm7jkKSMvG+CK
VRLRoIt//fQkKHlIy2ch0Twhv07JH/OKx/zmU37rKad4zG7cH67P49Khk9Nx
cE5IrE1wqka4bUfaBFIzs7N7tJSaWjNzBh585MPaDrRkZueM0HkM7/m5dwnJ
29LmBFiOCm9i/LMg3vPwb8uWlkPKo764zQDLknlUdBYR32U2X2UVo4hoEhSC
kCeR1QaBAvtHDlbHw+m5sKqZ1TSzqhZ2143N/HjZxDo0sAY+AajLSQAb+vGu
Dz/x4RcJwZGX83Va+pCV9/yCp7T4PiEaudnjoORdxzWOqCSspbOYbBLAzgPY
NCi8y8nHIWHOCNesnIYd7ZLsAsEIKRmHehAFu2xiZ/Vw18ntg9BsyKkHPXKi
PQ9+EZWchYQnYeHQx+t6sNu4uOfFTv3Y1xnpRXztISl+eyi9iwv6Dvguu/Oq
ajuJ7rp2kKGX95CRXcREH+ubkGaNTIPghW9jqWpmZ/QUr4quEy6HVcsFC1S2
ImkT59iDD0kBaK2qBakT6CwoOgsLZ0HBNCwCqR64UZC6uhOdhfmzADbwcN/l
ZPOYuGeHzoK8vx2ZJv7taUJzFl87C4tuUvJZHEQqbtp5vvXFNeiv9rWl/D4t
scvwK+lmyUJgixJUUgsGBpi4thOt2zCQ/4qVVzTAY79gQuKg7gMfNg5gkwD/
MSU59gtbBAf8eeDlvS1vdUlB38UeuqGHwt5t0jAMyI4IVteBNh28IydW0DPj
KkpylxbVMKtWpG1nR9RgKOB9/Eu98Mugkn6og2sGRs2GVoycggE+IpD8AaNp
gqtaWsUIFUAbuHlgEk/8/CM3v2hCCibOJCm/iMv6Xrxj52T24Hl656nuzOnR
po0NsKJugetmOKtllI3wwI1NgqLEHnQaEGZ1MPDrlC1bZMslK7dOQId79EMD
0nbyS3pmSkMtg6tuLqW2l2JKSkLHKTvQogE6i4sqduzQyKk5sUlyvWJDum5e
Yp9zaBJ/0ybejxJZs+gyIrqKS64TknFQNPLyp2HxPCl7V94GRTxycfMmJLCx
7FxbSuzBdSvScPPzJtBvvLOIKKOmRrZXinpGbGclf0DPHTBzRqQOEIzELpLy
tl9SsKNZC7fpxFs+Qd2zel001+3iaWrvdZs8CmleZTfeFtavYvxZWHyXXgPw
cp+RP2TkA1IQVNEOTezQDsUsflkCybRzS1akA/DTh+eNUEW/XDPTK0Y4oaal
9mhVGwIS0rZzRiQ2CksaLjR1wAGXBONcdwrva8T7tuPDEXFZMN0WdRVidZjU
dd2CjgvvuvGruPRNcfPhUDYL8QdeftXKyuohcoviUyzULZyBH2170J4baxEs
99pCnVhpWFfKWhAvNaNl5E3MpgfpkXifFHY8WN7IyRiRtosHgK7jkZxnD951
HD+OQ9+PvJcp5cgvrRLSrEkQ0wlcG1BIxSmYBT1yFaBK3yuYZwQtFyOupge3
qaB7W3YWsNOwsjL7lOD2SuaAUTYwchq6S/yioIdSB4ycCW678YYdG3mxnpvb
9gmHfv7Ej11FxZOI/DS89lQ9+Hlge1/Xj0Pynk868K9WbPykDk/phVGtMG3Z
iB8I4hpO0Yg0nRxAMRUTnNMzczrmaVBUssBxNS2pZWT2GCk1Ja+h5PZoXSev
SrCrBDIO4Jcx8TwmOQuLLxLrN+m1izD/Pi17U1Ke+AVn0dVfT90/9WxvSpqn
guZtVXuVUg78sn5w/TigaAVUDc86qWBapHTfFpQzIF1QLC2jbkPAOIA6pnZp
ZT2UUVOA35oByh9AHQfacNAqDsYkit5nBMdO7sDDAygKgP1dSXEVFY2DAEWF
APZ/ODb/PLD+0rf9cOy6yahukpsPWfVVRn2e2h3Hto5Jecu9VrSJQ7tcg5hK
bjF6Ht6QxDsupGSEQ5tLFRMrqqSCkMtGNhiTspFZ1FOrdnjkR4fujxQ/C/Ln
MdFTVn6XWh15uV03MiL5f6tsA3r6v571l2Pzr6fkdWr7LqX4rmV+Vzc/Vc03
Bd1F1jDPG8dxdcsjyxkws5TqUTBKJlbmgB7T0IoHjIqJHVSsHO5DgE+P7AAw
2YUDZt3GBrpiEsTvM7K7pPQhJX06BAvJLISfkrzX+c13OfnrnPz7Y+Kntu6X
Y8vfO5abxMa7suZ99eB11Xhf1L1uEI9V60VaXbfxSxZ+xSby7XAsq8v+jSWX
fMEhW2jZ2HkdFN6mtJ0gD/ycHm7akLqR0SDY0zj/LiN+nV9/Xdj8OrcO7nCb
FF+EBW9y8jc52X1C/Kaq+a5jAa5/6ho/VFRvi8rvKrsfarpvO8Q3x87b7O5p
eLPnXx/EVKP4XsWxapJS2S8/ZS88Qxee6fgv0hp6VEmZhiU9D5bRMVp2bhOo
IxI/T0qvE+LbpASk9DErv4oK3hY2buKih6ToJiYEWmVKotepjQ/1g2+rO9+X
Nn87sfxzZPrHse7/z8lvO7Z5Rt1xi4dBxSiqbnk3QK1JJWvli2fP//xHzuJf
9PyXcRUVJPbYxe26kLqdVnewAANOoqt3Gfk0gIPxuYyKb1PSx8wqSPVVVHif
ErfMtC4BTwOAuLlPRdWbouqHwvqPrb2b9MaPLe2/Zs5/Xvj/fkJ8aFm/7buP
o1tFM1Yw88NqFvTVn188/5NbvhLdXg5sU4pmOK9jFE1AugBVwOsD6g9J5gnp
iQ8DLDD2cV9l5SDwkRs59eOToCC/TwGSA/AyOL8M8X+7CP82dk1JYRVYIARd
v+K3C/+/HiM/T0MfOrarnGYc2eqQ8pCSucr4zKugz8N4ywJIBErsQ1kTu6Bn
HTmQtgdrEtyhjw8mqGVDANwBzn3KrZ+SgGWExw4UKBMgvW7jwosg9ngov41L
/v22+F3PmVbTjmwcz9pX8Gd/GETV/3lXfl3Xz5OKx7L+LKFs2AURJa1q4tzG
xGd+XlK5mNIAHKPlLWjNioxDzEGAXTB+FD+A1ACxApYBQ3QVAUoAv0zIAMHV
LJyekwvU3U1C+qaw9ZiS/Tr1P+TVBR2r70SDimUd7/OKCfnHxPdN2zIKrd1l
1Xc59SQkA2AF9MxNGE9uLynpn/pVzOgulDVw0ma0aafXbGDQ0BO/sKRl9Ozc
i4gUwMXAiQK8nYWEl0BKkfx5FJDd+iQE8rAB4h0G5S0rd+TGGma4boR7dk5F
Rx2HN35oG0FvtD2Cy6T8Kbt+nZT23WjHRCew52romXuDGt+DYxpGah/Kaah1
C9L3CE/8oq4Znvr5Qw/ec3BrRhj0ec/Fm8dXzwN8IEtOSUHPyTu2I12CXdQx
ywd08GqoGVgtM6dDcMD24/US4r6HC9DmNICD3pi4gULg5HdeJjdf+le/cMmp
KS0rb2IkdynZAwi4qBnZfTd2AmJ0cQde4SQgKumg+A6t6+AOgQ4hkKaBUTcw
k8rliGKxCnSLEQbbIzNc1UMgWNAJYxLvWplNE30WAWocSype1HWUPgGXtSsl
9UJWtZRWfkVuAsXFKFlpZTMzvw8V9xmZnWXgAjxtMrv07B6U1TIbNjS+TQUB
Dl287C6lsEd1ib6IKJZSKgqQ30DYHO5SAfpNA6Lr5PpZRNo0MnKqpakfB/Oe
3FkkV18MHHBNT6serByZ6FnVolf6eVJFyRvoOS0tpaKS68spDdBm9IwWyu4x
bcIvDdjnCS07Bi6ghVpWdnafHt5c2IH+ooSfl3SwmfdZ08JOq6gN28dUXMVk
j7mtj+8jAikboLEXy6qXN6h/SgOmswHkh+JbC4eqRdAD4JnwXywhXqM=
                    "], {{0, 30.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {40., 30.}, 
                    PlotRange -> {{0, 40.}, {0, 30.}}], ",", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJwtlnlQ2+eZxzPb/WP/6Uz/7Ux3ZzJJZ9JcteskDnFsg23AmPtGBoRA6EBI
CF2ABEIISQgBEiBuEEe4wTjGgA02OAYbJ3Ztx3GTThKn7uZq2m687ewx3Z1p
p58+zfSPVzO/n+b3vu/zPN/r6QpzjvafnnrqKdu/yE9OeX2C1VruzP2BPOTX
2Kp0NZrKlBq7Rqexvl7xPXn5o3+sf5a1M1XDrYttXJy00GE7TUPJEd7dHGZ3
rYvpsI7dKR1rQxr6vKW01yYxEVRwfclFuzOPvpCBBn0ifY2Z3N2JsTpRj7Po
ZYbaNQw0Z7I1U8d7e9O8s+BgJlTM22MWNicb+Gh/AU3hm4w35bPgzWKxR8/5
IQe352r5+mY7o958Li328e1vP8KuPkpLVQItthwMcrd6TQJvhWs4N+rBpz/G
9pSdkUAJU2ENM73VjHVVsRBWoS84xEiHXu5bzs5yiDZbOtMdSlwlB5j15fPp
ZhcPVpuYbFdiLjzGpaUB9q4tk3r0WQaCWpZjdhxSW135G8x2W9ndnGPYXcjn
+wO8u9LISGshd67N8uSLXS7EbGxvzLB5YYyZjlK67ek0607SGzQR69LS7cjk
6piRsrSnMasyefzpQ1zWbNJO/Csd7hK2FroIugoINeRgUcUxGlCztTLIgKeA
/Tkni90qZgO5Ulc5PlsqO+v98Nf/5Mtf35X/9LwVVNMq5znKEohFNNSWxjHs
KSLYUkG4q5HLWzO4bXnoaw8zOtLA7VtbjEQcBGoSGfGX0N2UzbT0bihYQVeT
koqsg8x06VgYMDLd7+LJ737Jb754n29/85Ap12kCf59JhcyvJZOasiPM9+jY
W4vij9TjaCqlVh+PUZ+AynAIr72YhYkOhkImnFXJjHfqmO6uJGRNZj5q4+rF
YZbnBrl+ZYlhmdX8iJO5wVpWZ9q4vT1Cf30yl/uyeW9RxcZwPkFrCtcWPUT9
BiwNFajlLLsxk4a6PMoMz1PvSqa9MR+3pQCXNgld3mvUlx+nruKY1JvKuclm
Hv3iCvdurTAcKGIkWMJs1MrVGRuzAza+vGnny3cqBRsltFtlb/UJIvYU1Fk/
YyjShLMmA5+1GH+vFl9bBo3V8VSXvIpJm07AnotDfYpGwc2DzbBgqxBV9kHp
oZXLCwHWRmroa8nl0lwbO+dDNMleo54MdhdsRN1ZqHMP01Gfx6TMYS5azUBI
L5iPZ77PQXN9MUMyG39FPIazx5nsNeKzZ+OVmqbaivl6v5eJ1jzGu6r5+XaU
8+N23NWn6Xdl8OFGgM2FdnRFJ2gzp9Ll0VKefgCfJYdebwU3r85xbroZU+lh
xtorCXrKCTcrCRlPsX1hlN5OC3bdKTobi+hpPour4jBbo9XsLvewtz7E+/sz
xHoNOKqS6HCk0e/OxqFLYWle5uc9S+WZHxM0ZxB2ZmPIP0Rfq5bm2lyqig4z
3nqWTpeC9oZCwX8+K7OdTEYthF15xDrKmIroyUp4hhFvCZ/sX2Bl0oe96gyG
4qNEnAUMtZbSYT/NWKeB2/urtNYk0+1KZ9iVKn1rYmdlgLXJgMzXL/tVoUr7
CVFPJYtDdTi0Jwg6C3FoTmGVOfvtOXQ2FVOR8yrB+kIG/WVY9amM99RirzxF
1Kumy13GDcHf9ZUQF2aCtGqPMBdrZLWnlIfXFnj/6iDro3bubvTQWZ/PGz/9
IbknfoK1PA2XORebnGkX7phMJdTbytiYctPmVFKrFV4582k2naHXX0mj+Yzc
0Uxfm5oPr0+wMe4g7NXTbopnyFfMaFMm2zEH2zNObi65Wew1EX/wh8S99G/k
JjwvOEymP1BJk+44nuokgu5STOXxdDWWMNFZQ7hBQYulkJKMn1GWcwS/NVPW
GdHz03S7c5hoV3F/e4JY3VH2Flt4uD3EJ1ci7M7WMdhSQGX2AfJOPoci+WXs
qgS6GjIYC6poqU0j7FYzHlJhUryEPu913h50cme1U/pvpzj7FHZDHi59mtwr
jenOcqYjgveBOtEgO1N+DX/69zU+vzvBpZlm/NXHaCh8nrpS4bFGZmTJwKJO
lLtn0GJOx2NKYWXAhLXiOMbSeEpSD6BIekX6EmB5OEBO5hmSj7xAdU4cnaYM
elpyMCqP4HEUoFRm0GnP5NO78+KBPfR5lEz2mBmPmAS3iu/2rqs8QVN1Ck36
ZDrqsvDXpuK3iZ6/PcD//PEx06M+8o6/wETIStjnoKAwD4MqmybBiz4tjqzT
r3Eq/U2Mhkyq1CmMRgz4G/LwWlPpFdxfXBmnwaYSbh7iynwLMz0aXMKjcFMR
NaVv0CL89gkuv3l0Hf78B+5cfwtTURw9Hgva8jIUBWdQFiWgVrxOgdTdpC3C
bhZvurHA8lgj4wN2Vpf7uLg+T2/YwWDYJhrzdy6m0WpPI9JcKD0+yd6Sh8Wo
kfPhUmIyu9/9+jp/+f//4NbVCV5+9vvEHXyWpOOvcDbzMNnJz4lvlPJgq5e5
DqPMMuM7P3EYc7m4EOaLx/d49NkDRoc8jISUUstZ0bdcLNoEloYswvl8zou3
zHWbeXfRxa0LbTz56uf892/f587OGElxT3Pk4I/JTnwZTcHrlGQdFs+3CIft
3FhqlLnkUKvOIRpyMCX+FPFUSy3FuE3iY/12BvxVbMx3EhItXRnUiW8YmRd/
C4tnNJsL2Fnqgv97zB+/2GFxrBZl5iFSjj5H2tFn6BGv7msUXQnoUZ45wHxE
y3tr7aITSrZFs/1ViZJxXqHfZ2ahxyKeWcX9a+N8fGeRDqdCPM3K/nqUQV8p
K/21bE37qNcmi261SB7RkZP0IgUpLxFoKBa8HmVIstNSuIiKjBdwak7L90aG
27R8cGOWd6TeqCuF7bFqdubb6PZq+fj+FR49XJEepPP4w3eYkjw2FXHxzTdf
MRAw45P6WizZdHiEf+WJmBWHGPAWyFLSJv4001OFXXR+ut8t3viG5BAl9faq
73LEsDOVJenVgHhStDlfuJzDzY0R1mYD/Or+Gg/eu0B3Rx2///ornnz7e27s
LJGf9Iyca+RP39zl6vlOZsOVfLDhZ2uiRjLgWeFTHTrFSdYnvDRVZaBS5mKu
KSfr5IuoU19iskPDxlyr6FsVq5MuyW8qwXYZH927TKdbhcelZrK/kRsbo3z9
wTytwsmt+RB3RWeNijgWw3oe78d4eDkg/bLhFp5Nd0mmXW0nIH0oSD9CSXEa
yrxE7JpcyZYKRn3ibeITo0ED19cHmZ300+at/s5/POYkGjRvMhXScO9KlJWY
k3ODNiozX0CX8VNcZYf55FoPj269xR8+WiDWVsYlyb2Xp+rQZ70mmpZObVk8
0yMhttbmuL3i4eZMtWiHgmjYy/piLy5DOhbFqyz0i9Z0G+ltUbA3KxjtVuIV
35sbdnHtXBtLwhF99ovE3MKXWANG8Ty3JpGb6530SB6OWPKxlZ8UjFbz+M48
F6dbOR/ViUecwKVKxilYMJQcp8+SyITtGA/2lvnf//qclREDmzE9EZfkqs1u
nny+y2f3z/PxrUn2LoYIiibWqlMZ62uWjF/HaH9APFrFvd1F3h6x89m7Uvuv
rnL7cpi/AchRuro=
                    "], {{0, 28.}, {28., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {28., 28.}, 
                    PlotRange -> {{0, 28.}, {0, 28.}}], ",", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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

                    "], {{0, 25.}, {35., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {35., 25.}, 
                    PlotRange -> {{0, 35.}, {0, 25.}}], ",", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[
                    RawArray["UnsignedInteger8",{{{145, 145, 145, 255}, {129, 
                    129, 129, 255}, {129, 129, 129, 255}, {54, 54, 54, 
                    255}}, {{58, 58, 58, 255}, {154, 154, 154, 255}, {151, 
                    151, 151, 255}, {199, 199, 199, 255}}, {{49, 49, 49, 
                    255}, {186, 186, 186, 255}, {109, 109, 109, 255}, {69, 69,
                     69, 255}}, {{170, 170, 170, 255}, {127, 127, 127, 255}, {
                    36, 36, 36, 255}, {109, 109, 109, 255}}}], {{0, 4.}, {
                    4., 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
HRsdf3MiO7GcxE7rnE47vXV2cU53/ta5xfmpi7kL16XUpdHljivNNdR1umu9
61U3ohvLLc9tg9sld9Td113sXut+0QP18POQeGzw6BxBGBEwQjqifsQNT6on
27PYs9Hz/kjGyLiRC0e2jHw+ynFU5qiVo06P+uzl65XvtdXr9miT0eNGLxzd
Nvqlt7s337vW+6oPzSfKZ55Pq8+LMR5jhGM2jrnpS/cd7/utb7vvJz9/P7lf
k1+3v6N/ln+d/w2WKSuRtZR1JoAQEB4wL+BQwPtAv8CiwL2BfwZ5BuUF7Qx6
OtZlrHDs1rEPg+2DecGbg1UhzJCskO9DVKF2obzQ+tAHYQ5hgrBtYU/Ybuxc
9i7283CvcHn4gfC3nEDOHM6xCCwiOqIioiPSJDI1sibyXpR9lCiqMao32jd6
VvSxGEJMbMzKmBtcay6f28DtHec/bs64k7HU2OTYmtgHce5x8ri28ej4ceNX
j78T7xQvjW9JAAnchNUJdxNdEqcn/jyBOCFxQu2Ex0mjk2YnnU6mJ09L3pn8
JiU8ZXnK7VTXVGVqe5ph2uS0hrS36RHpq9JVE0dNnDPxfIZlhiSjNZOUmZa5
LbNvUuSktZO6JvtOLp98fYrLlJIpZ6daTs2fenia4TTetH1ZhKz0rJ1ZH3kJ
vHpeXzY3uy67l8/hr+M/E4QJ1gi6hcHCVcInOcE5q3KeioJFq0Xd4lBxlbhH
wpHUSF7kxuRuyn2bl5C3PW8gPz1/d4FeQVbBQamJNE96stCmsKSwU+YhK5ep
pgdOXzu9Vx4r36ZAFFMUrUWm8MB+Qemq/EZ5vzikuLb43Yy0GftKjEukJRdm
us9cMvNJaVTpD7PwWfxZ7bPtZi+YfX8Oe87mucjc7Lnt8xzmlc3rmh89f8cC
yoK8Bb8u9Fq4auHrRemL2sqsy+aXPfwm+pvGcoNyefmNb4O+3bQYXyxZ3LHE
Z8n6JZ8rBBXnKr0qqyo/LuUvPffd6O+qvxtYlrOsY7nf8o0riCukK66vDF25
Y5XxqtJVD1ePX928hrmmYs3rtdPWnq0aU7VpHWWdcp2qOq66db3j+hXrP9aI
a67VhtfurrOqW1L3doNgw+WNYRubNllvqtz04XvJ9zc3R29urneur9pC3FK8
5fHWtK2nf2D90LDNclvltk/bpdtVO5J2nGzwb2jYabVzeSPaqGzs3jV516Uf
I35sbfJs2rybsbtyD9ij3PP7T1k/Xd8bu7d9H2tf036n/XUH6AcqmpHmmc29
LeIWVWtGa+fBcQfb24LaDvw88ufth+wO1R42O7z8COVI2ZGBo6VH+47JjvUc
Fx1/2D6t/faJiSeunpxwsuNU7Kkzv0T9cuI0+/TRM8FnDp0NPHvwHOtcy3m/
880XfC8c+NX31wMdfh3NF/0vtl4KuNTWObbzyOXQy8evRFz55Sr36vlr8dc6
r6dev3lj8g3VTcHNp7fyb734rfi3/tvz7xDuVNw1ult1z+pe/b/c/rVb5ac6
fD/i/oUHyQ9uP+Q/fPZI8ehjV9lj2uOqJ7ZPGp56Pz3UHdV96fdJv3c9kz3r
7yn/w/iPuueuz/f/Gfbnhd6JvV0v5C8GXi59ZfFq++sxr9v7EvvuvSl40/+2
4p3Fux3vWe9Pf0j/8KR/xkfSx+pPbp/aPsd+vjNQMDAg48l5mqMABhuakwPA
y+0A0DIAoF+C54dJ2nueRhDt3VSDwH/C2rugRvwAaIIP9XGdcwyAPbA5z4fc
sKmP6ilhAPXxGWo6UeT4eGu5qPDGQ3g3MPDKGgBSGwCf5AMD/RsGBj5thcHe
AuDYdO39Ui1EeDf4PkyNrpkL5oOv5N8GDIyv
                    "], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> 
                    Association["XMP" -> Association[]]], Selectable -> 
                    False], DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {4., 4.}, 
                    PlotRange -> {{0, 4.}, {0, 4.}}]}], "}"}], "]"}]], 
                    "Input", ShowStringCharacters -> True]}]}, {
                    RowBox[{
                    StyleBox["Out[1]=", "CellLabel"], 
                    Cell[
                    BoxData[
                    GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    
                    Graph[{1, 2, 3, 4, 5, 6, 7}, {
                    Null, {{1, 2}, {2, 3}, {3, 4}, {3, 5}, {2, 6}, {1, 7}}}, {
                    AlignmentPoint -> Center, 
                    AnnotationRules -> {
                    "GraphProperties" -> {
                    "LeafLabels" -> Association[4 -> Image[CompressedData["
1:eJwVV+dvKtndXr35ki+R3kjZG+Vqs3v3rht1BpiBGboxtrExGBvTYegMvWN6
x4BpNsUN9+u9NVvzbom00SvlW5S/Kud+GHTOEfr9zq89z3O+dMX2ff/zySef
pH4Pfvad2dVk0pnX/i/Y6KKpABn1eraiaS/pTWKu34HDz8G3Ar6P67oJHrm5
Uy96ExFehsR9BzJyoyduZOrlNglOSsuMqukJDa1sZTVceM3GOSXxUVhQtvPa
LjS0uZjfXelY4IaVXTMxC/u0NsEu6xlVE3Pg5p14eT0HAkxdhvBpgH8W4l+E
cLA+D/CmJK9lhEYOzsSN3IT4T6m1npXdNEFtB9KywkkdK7HPTOrhnA3q+Xmj
kKThQEch4TDEP3YLYkrqyhefimnPxz5ex431vVjNDHdd3ElA0HEgk4AQnE9J
7kUQf0hJLiPC64jgLi66DPHOQ/jAiRxbWQM7p6aljd3ceVjUJzhdAjlyctMa
ak4HNR1owcqt2tDzqOQqvd7xCXoB8Xl0rWxguUSL29gy/eWzcUg8DuFnsdWz
iGQakc4Ta7Ow5Ca5dp2QPaRlT9m1V4drsyA286HzCD7zc8ckNvRwqzrGmOTl
NSstI3zqE8wCoqlf0LAhRT2U1zO6JDJL8q6i0vcV5VNeUSPQm7jkKSMvG+CK
VRLRoIt//fQkKHlIy2ch0Twhv07JH/OKx/zmU37rKad4zG7cH67P49Khk9Nx
cE5IrE1wqka4bUfaBFIzs7N7tJSaWjNzBh585MPaDrRkZueM0HkM7/m5dwnJ
29LmBFiOCm9i/LMg3vPwb8uWlkPKo764zQDLknlUdBYR32U2X2UVo4hoEhSC
kCeR1QaBAvtHDlbHw+m5sKqZ1TSzqhZ2143N/HjZxDo0sAY+AajLSQAb+vGu
Dz/x4RcJwZGX83Va+pCV9/yCp7T4PiEaudnjoORdxzWOqCSspbOYbBLAzgPY
NCi8y8nHIWHOCNesnIYd7ZLsAsEIKRmHehAFu2xiZ/Vw18ntg9BsyKkHPXKi
PQ9+EZWchYQnYeHQx+t6sNu4uOfFTv3Y1xnpRXztISl+eyi9iwv6Dvguu/Oq
ajuJ7rp2kKGX95CRXcREH+ubkGaNTIPghW9jqWpmZ/QUr4quEy6HVcsFC1S2
ImkT59iDD0kBaK2qBakT6CwoOgsLZ0HBNCwCqR64UZC6uhOdhfmzADbwcN/l
ZPOYuGeHzoK8vx2ZJv7taUJzFl87C4tuUvJZHEQqbtp5vvXFNeiv9rWl/D4t
scvwK+lmyUJgixJUUgsGBpi4thOt2zCQ/4qVVzTAY79gQuKg7gMfNg5gkwD/
MSU59gtbBAf8eeDlvS1vdUlB38UeuqGHwt5t0jAMyI4IVteBNh28IydW0DPj
KkpylxbVMKtWpG1nR9RgKOB9/Eu98Mugkn6og2sGRs2GVoycggE+IpD8AaNp
gqtaWsUIFUAbuHlgEk/8/CM3v2hCCibOJCm/iMv6Xrxj52T24Hl656nuzOnR
po0NsKJugetmOKtllI3wwI1NgqLEHnQaEGZ1MPDrlC1bZMslK7dOQId79EMD
0nbyS3pmSkMtg6tuLqW2l2JKSkLHKTvQogE6i4sqduzQyKk5sUlyvWJDum5e
Yp9zaBJ/0ybejxJZs+gyIrqKS64TknFQNPLyp2HxPCl7V94GRTxycfMmJLCx
7FxbSuzBdSvScPPzJtBvvLOIKKOmRrZXinpGbGclf0DPHTBzRqQOEIzELpLy
tl9SsKNZC7fpxFs+Qd2zel001+3iaWrvdZs8CmleZTfeFtavYvxZWHyXXgPw
cp+RP2TkA1IQVNEOTezQDsUsflkCybRzS1akA/DTh+eNUEW/XDPTK0Y4oaal
9mhVGwIS0rZzRiQ2CksaLjR1wAGXBONcdwrva8T7tuPDEXFZMN0WdRVidZjU
dd2CjgvvuvGruPRNcfPhUDYL8QdeftXKyuohcoviUyzULZyBH2170J4baxEs
99pCnVhpWFfKWhAvNaNl5E3MpgfpkXifFHY8WN7IyRiRtosHgK7jkZxnD951
HD+OQ9+PvJcp5cgvrRLSrEkQ0wlcG1BIxSmYBT1yFaBK3yuYZwQtFyOupge3
qaB7W3YWsNOwsjL7lOD2SuaAUTYwchq6S/yioIdSB4ycCW678YYdG3mxnpvb
9gmHfv7Ej11FxZOI/DS89lQ9+Hlge1/Xj0Pynk868K9WbPykDk/phVGtMG3Z
iB8I4hpO0Yg0nRxAMRUTnNMzczrmaVBUssBxNS2pZWT2GCk1Ja+h5PZoXSev
SrCrBDIO4Jcx8TwmOQuLLxLrN+m1izD/Pi17U1Ke+AVn0dVfT90/9WxvSpqn
guZtVXuVUg78sn5w/TigaAVUDc86qWBapHTfFpQzIF1QLC2jbkPAOIA6pnZp
ZT2UUVOA35oByh9AHQfacNAqDsYkit5nBMdO7sDDAygKgP1dSXEVFY2DAEWF
APZ/ODb/PLD+0rf9cOy6yahukpsPWfVVRn2e2h3Hto5Jecu9VrSJQ7tcg5hK
bjF6Ht6QxDsupGSEQ5tLFRMrqqSCkMtGNhiTspFZ1FOrdnjkR4fujxQ/C/Ln
MdFTVn6XWh15uV03MiL5f6tsA3r6v571l2Pzr6fkdWr7LqX4rmV+Vzc/Vc03
Bd1F1jDPG8dxdcsjyxkws5TqUTBKJlbmgB7T0IoHjIqJHVSsHO5DgE+P7AAw
2YUDZt3GBrpiEsTvM7K7pPQhJX06BAvJLISfkrzX+c13OfnrnPz7Y+Kntu6X
Y8vfO5abxMa7suZ99eB11Xhf1L1uEI9V60VaXbfxSxZ+xSby7XAsq8v+jSWX
fMEhW2jZ2HkdFN6mtJ0gD/ycHm7akLqR0SDY0zj/LiN+nV9/Xdj8OrcO7nCb
FF+EBW9y8jc52X1C/Kaq+a5jAa5/6ho/VFRvi8rvKrsfarpvO8Q3x87b7O5p
eLPnXx/EVKP4XsWxapJS2S8/ZS88Qxee6fgv0hp6VEmZhiU9D5bRMVp2bhOo
IxI/T0qvE+LbpASk9DErv4oK3hY2buKih6ToJiYEWmVKotepjQ/1g2+rO9+X
Nn87sfxzZPrHse7/z8lvO7Z5Rt1xi4dBxSiqbnk3QK1JJWvli2fP//xHzuJf
9PyXcRUVJPbYxe26kLqdVnewAANOoqt3Gfk0gIPxuYyKb1PSx8wqSPVVVHif
ErfMtC4BTwOAuLlPRdWbouqHwvqPrb2b9MaPLe2/Zs5/Xvj/fkJ8aFm/7buP
o1tFM1Yw88NqFvTVn188/5NbvhLdXg5sU4pmOK9jFE1AugBVwOsD6g9J5gnp
iQ8DLDD2cV9l5SDwkRs59eOToCC/TwGSA/AyOL8M8X+7CP82dk1JYRVYIARd
v+K3C/+/HiM/T0MfOrarnGYc2eqQ8pCSucr4zKugz8N4ywJIBErsQ1kTu6Bn
HTmQtgdrEtyhjw8mqGVDANwBzn3KrZ+SgGWExw4UKBMgvW7jwosg9ngov41L
/v22+F3PmVbTjmwcz9pX8Gd/GETV/3lXfl3Xz5OKx7L+LKFs2AURJa1q4tzG
xGd+XlK5mNIAHKPlLWjNioxDzEGAXTB+FD+A1ACxApYBQ3QVAUoAv0zIAMHV
LJyekwvU3U1C+qaw9ZiS/Tr1P+TVBR2r70SDimUd7/OKCfnHxPdN2zIKrd1l
1Xc59SQkA2AF9MxNGE9uLynpn/pVzOgulDVw0ma0aafXbGDQ0BO/sKRl9Ozc
i4gUwMXAiQK8nYWEl0BKkfx5FJDd+iQE8rAB4h0G5S0rd+TGGma4boR7dk5F
Rx2HN35oG0FvtD2Cy6T8Kbt+nZT23WjHRCew52romXuDGt+DYxpGah/Kaah1
C9L3CE/8oq4Znvr5Qw/ec3BrRhj0ec/Fm8dXzwN8IEtOSUHPyTu2I12CXdQx
ywd08GqoGVgtM6dDcMD24/US4r6HC9DmNICD3pi4gULg5HdeJjdf+le/cMmp
KS0rb2IkdynZAwi4qBnZfTd2AmJ0cQde4SQgKumg+A6t6+AOgQ4hkKaBUTcw
k8rliGKxCnSLEQbbIzNc1UMgWNAJYxLvWplNE30WAWocSype1HWUPgGXtSsl
9UJWtZRWfkVuAsXFKFlpZTMzvw8V9xmZnWXgAjxtMrv07B6U1TIbNjS+TQUB
Dl287C6lsEd1ib6IKJZSKgqQ30DYHO5SAfpNA6Lr5PpZRNo0MnKqpakfB/Oe
3FkkV18MHHBNT6serByZ6FnVolf6eVJFyRvoOS0tpaKS68spDdBm9IwWyu4x
bcIvDdjnCS07Bi6ghVpWdnafHt5c2IH+ooSfl3SwmfdZ08JOq6gN28dUXMVk
j7mtj+8jAikboLEXy6qXN6h/SgOmswHkh+JbC4eqRdAD4JnwXywhXqM=
                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic], 5 -> Image[CompressedData["
1:eJwtlnlQ2+eZxzPb/WP/6Uz/7Ux3ZzJJZ9JcteskDnFsg23AmPtGBoRA6EBI
CF2ABEIISQgBEiBuEEe4wTjGgA02OAYbJ3Ztx3GTThKn7uZq2m687ewx3Z1p
p58+zfSPVzO/n+b3vu/zPN/r6QpzjvafnnrqKdu/yE9OeX2C1VruzP2BPOTX
2Kp0NZrKlBq7Rqexvl7xPXn5o3+sf5a1M1XDrYttXJy00GE7TUPJEd7dHGZ3
rYvpsI7dKR1rQxr6vKW01yYxEVRwfclFuzOPvpCBBn0ifY2Z3N2JsTpRj7Po
ZYbaNQw0Z7I1U8d7e9O8s+BgJlTM22MWNicb+Gh/AU3hm4w35bPgzWKxR8/5
IQe352r5+mY7o958Li328e1vP8KuPkpLVQItthwMcrd6TQJvhWs4N+rBpz/G
9pSdkUAJU2ENM73VjHVVsRBWoS84xEiHXu5bzs5yiDZbOtMdSlwlB5j15fPp
ZhcPVpuYbFdiLjzGpaUB9q4tk3r0WQaCWpZjdhxSW135G8x2W9ndnGPYXcjn
+wO8u9LISGshd67N8uSLXS7EbGxvzLB5YYyZjlK67ek0607SGzQR69LS7cjk
6piRsrSnMasyefzpQ1zWbNJO/Csd7hK2FroIugoINeRgUcUxGlCztTLIgKeA
/Tkni90qZgO5Ulc5PlsqO+v98Nf/5Mtf35X/9LwVVNMq5znKEohFNNSWxjHs
KSLYUkG4q5HLWzO4bXnoaw8zOtLA7VtbjEQcBGoSGfGX0N2UzbT0bihYQVeT
koqsg8x06VgYMDLd7+LJ737Jb754n29/85Ap12kCf59JhcyvJZOasiPM9+jY
W4vij9TjaCqlVh+PUZ+AynAIr72YhYkOhkImnFXJjHfqmO6uJGRNZj5q4+rF
YZbnBrl+ZYlhmdX8iJO5wVpWZ9q4vT1Cf30yl/uyeW9RxcZwPkFrCtcWPUT9
BiwNFajlLLsxk4a6PMoMz1PvSqa9MR+3pQCXNgld3mvUlx+nruKY1JvKuclm
Hv3iCvdurTAcKGIkWMJs1MrVGRuzAza+vGnny3cqBRsltFtlb/UJIvYU1Fk/
YyjShLMmA5+1GH+vFl9bBo3V8VSXvIpJm07AnotDfYpGwc2DzbBgqxBV9kHp
oZXLCwHWRmroa8nl0lwbO+dDNMleo54MdhdsRN1ZqHMP01Gfx6TMYS5azUBI
L5iPZ77PQXN9MUMyG39FPIazx5nsNeKzZ+OVmqbaivl6v5eJ1jzGu6r5+XaU
8+N23NWn6Xdl8OFGgM2FdnRFJ2gzp9Ll0VKefgCfJYdebwU3r85xbroZU+lh
xtorCXrKCTcrCRlPsX1hlN5OC3bdKTobi+hpPour4jBbo9XsLvewtz7E+/sz
xHoNOKqS6HCk0e/OxqFLYWle5uc9S+WZHxM0ZxB2ZmPIP0Rfq5bm2lyqig4z
3nqWTpeC9oZCwX8+K7OdTEYthF15xDrKmIroyUp4hhFvCZ/sX2Bl0oe96gyG
4qNEnAUMtZbSYT/NWKeB2/urtNYk0+1KZ9iVKn1rYmdlgLXJgMzXL/tVoUr7
CVFPJYtDdTi0Jwg6C3FoTmGVOfvtOXQ2FVOR8yrB+kIG/WVY9amM99RirzxF
1Kumy13GDcHf9ZUQF2aCtGqPMBdrZLWnlIfXFnj/6iDro3bubvTQWZ/PGz/9
IbknfoK1PA2XORebnGkX7phMJdTbytiYctPmVFKrFV4582k2naHXX0mj+Yzc
0Uxfm5oPr0+wMe4g7NXTbopnyFfMaFMm2zEH2zNObi65Wew1EX/wh8S99G/k
JjwvOEymP1BJk+44nuokgu5STOXxdDWWMNFZQ7hBQYulkJKMn1GWcwS/NVPW
GdHz03S7c5hoV3F/e4JY3VH2Flt4uD3EJ1ci7M7WMdhSQGX2AfJOPoci+WXs
qgS6GjIYC6poqU0j7FYzHlJhUryEPu913h50cme1U/pvpzj7FHZDHi59mtwr
jenOcqYjgveBOtEgO1N+DX/69zU+vzvBpZlm/NXHaCh8nrpS4bFGZmTJwKJO
lLtn0GJOx2NKYWXAhLXiOMbSeEpSD6BIekX6EmB5OEBO5hmSj7xAdU4cnaYM
elpyMCqP4HEUoFRm0GnP5NO78+KBPfR5lEz2mBmPmAS3iu/2rqs8QVN1Ck36
ZDrqsvDXpuK3iZ6/PcD//PEx06M+8o6/wETIStjnoKAwD4MqmybBiz4tjqzT
r3Eq/U2Mhkyq1CmMRgz4G/LwWlPpFdxfXBmnwaYSbh7iynwLMz0aXMKjcFMR
NaVv0CL89gkuv3l0Hf78B+5cfwtTURw9Hgva8jIUBWdQFiWgVrxOgdTdpC3C
bhZvurHA8lgj4wN2Vpf7uLg+T2/YwWDYJhrzdy6m0WpPI9JcKD0+yd6Sh8Wo
kfPhUmIyu9/9+jp/+f//4NbVCV5+9vvEHXyWpOOvcDbzMNnJz4lvlPJgq5e5
DqPMMuM7P3EYc7m4EOaLx/d49NkDRoc8jISUUstZ0bdcLNoEloYswvl8zou3
zHWbeXfRxa0LbTz56uf892/f587OGElxT3Pk4I/JTnwZTcHrlGQdFs+3CIft
3FhqlLnkUKvOIRpyMCX+FPFUSy3FuE3iY/12BvxVbMx3EhItXRnUiW8YmRd/
C4tnNJsL2Fnqgv97zB+/2GFxrBZl5iFSjj5H2tFn6BGv7msUXQnoUZ45wHxE
y3tr7aITSrZFs/1ViZJxXqHfZ2ahxyKeWcX9a+N8fGeRDqdCPM3K/nqUQV8p
K/21bE37qNcmi261SB7RkZP0IgUpLxFoKBa8HmVIstNSuIiKjBdwak7L90aG
27R8cGOWd6TeqCuF7bFqdubb6PZq+fj+FR49XJEepPP4w3eYkjw2FXHxzTdf
MRAw45P6WizZdHiEf+WJmBWHGPAWyFLSJv4001OFXXR+ut8t3viG5BAl9faq
73LEsDOVJenVgHhStDlfuJzDzY0R1mYD/Or+Gg/eu0B3Rx2///ornnz7e27s
LJGf9Iyca+RP39zl6vlOZsOVfLDhZ2uiRjLgWeFTHTrFSdYnvDRVZaBS5mKu
KSfr5IuoU19iskPDxlyr6FsVq5MuyW8qwXYZH927TKdbhcelZrK/kRsbo3z9
wTytwsmt+RB3RWeNijgWw3oe78d4eDkg/bLhFp5Nd0mmXW0nIH0oSD9CSXEa
yrxE7JpcyZYKRn3ibeITo0ED19cHmZ300+at/s5/POYkGjRvMhXScO9KlJWY
k3ODNiozX0CX8VNcZYf55FoPj269xR8+WiDWVsYlyb2Xp+rQZ70mmpZObVk8
0yMhttbmuL3i4eZMtWiHgmjYy/piLy5DOhbFqyz0i9Z0G+ltUbA3KxjtVuIV
35sbdnHtXBtLwhF99ovE3MKXWANG8Ty3JpGb6530SB6OWPKxlZ8UjFbz+M48
F6dbOR/ViUecwKVKxilYMJQcp8+SyITtGA/2lvnf//qclREDmzE9EZfkqs1u
nny+y2f3z/PxrUn2LoYIiibWqlMZ62uWjF/HaH9APFrFvd1F3h6x89m7Uvuv
rnL7cpi/AchRuro=
                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic], 6 -> Image[
                    RawArray["UnsignedInteger8",{{{145, 145, 145, 255}, {129, 
                    129, 129, 255}, {129, 129, 129, 255}, {54, 54, 54, 
                    255}}, {{58, 58, 58, 255}, {154, 154, 154, 255}, {151, 
                    151, 151, 255}, {199, 199, 199, 255}}, {{49, 49, 49, 
                    255}, {186, 186, 186, 255}, {109, 109, 109, 255}, {69, 69,
                     69, 255}}, {{170, 170, 170, 255}, {127, 127, 127, 255}, {
                    36, 36, 36, 255}, {109, 109, 109, 255}}}], "Byte", 
                    ColorSpace -> ColorProfileData[CompressedData["
1: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
HRsdf3MiO7GcxE7rnE47vXV2cU53/ta5xfmpi7kL16XUpdHljivNNdR1umu9
61U3ohvLLc9tg9sld9Td113sXut+0QP18POQeGzw6BxBGBEwQjqifsQNT6on
27PYs9Hz/kjGyLiRC0e2jHw+ynFU5qiVo06P+uzl65XvtdXr9miT0eNGLxzd
Nvqlt7s337vW+6oPzSfKZ55Pq8+LMR5jhGM2jrnpS/cd7/utb7vvJz9/P7lf
k1+3v6N/ln+d/w2WKSuRtZR1JoAQEB4wL+BQwPtAv8CiwL2BfwZ5BuUF7Qx6
OtZlrHDs1rEPg+2DecGbg1UhzJCskO9DVKF2obzQ+tAHYQ5hgrBtYU/Ybuxc
9i7283CvcHn4gfC3nEDOHM6xCCwiOqIioiPSJDI1sibyXpR9lCiqMao32jd6
VvSxGEJMbMzKmBtcay6f28DtHec/bs64k7HU2OTYmtgHce5x8ri28ej4ceNX
j78T7xQvjW9JAAnchNUJdxNdEqcn/jyBOCFxQu2Ex0mjk2YnnU6mJ09L3pn8
JiU8ZXnK7VTXVGVqe5ph2uS0hrS36RHpq9JVE0dNnDPxfIZlhiSjNZOUmZa5
LbNvUuSktZO6JvtOLp98fYrLlJIpZ6daTs2fenia4TTetH1ZhKz0rJ1ZH3kJ
vHpeXzY3uy67l8/hr+M/E4QJ1gi6hcHCVcInOcE5q3KeioJFq0Xd4lBxlbhH
wpHUSF7kxuRuyn2bl5C3PW8gPz1/d4FeQVbBQamJNE96stCmsKSwU+YhK5ep
pgdOXzu9Vx4r36ZAFFMUrUWm8MB+Qemq/EZ5vzikuLb43Yy0GftKjEukJRdm
us9cMvNJaVTpD7PwWfxZ7bPtZi+YfX8Oe87mucjc7Lnt8xzmlc3rmh89f8cC
yoK8Bb8u9Fq4auHrRemL2sqsy+aXPfwm+pvGcoNyefmNb4O+3bQYXyxZ3LHE
Z8n6JZ8rBBXnKr0qqyo/LuUvPffd6O+qvxtYlrOsY7nf8o0riCukK66vDF25
Y5XxqtJVD1ePX928hrmmYs3rtdPWnq0aU7VpHWWdcp2qOq66db3j+hXrP9aI
a67VhtfurrOqW1L3doNgw+WNYRubNllvqtz04XvJ9zc3R29urneur9pC3FK8
5fHWtK2nf2D90LDNclvltk/bpdtVO5J2nGzwb2jYabVzeSPaqGzs3jV516Uf
I35sbfJs2rybsbtyD9ij3PP7T1k/Xd8bu7d9H2tf036n/XUH6AcqmpHmmc29
LeIWVWtGa+fBcQfb24LaDvw88ufth+wO1R42O7z8COVI2ZGBo6VH+47JjvUc
Fx1/2D6t/faJiSeunpxwsuNU7Kkzv0T9cuI0+/TRM8FnDp0NPHvwHOtcy3m/
880XfC8c+NX31wMdfh3NF/0vtl4KuNTWObbzyOXQy8evRFz55Sr36vlr8dc6
r6dev3lj8g3VTcHNp7fyb734rfi3/tvz7xDuVNw1ult1z+pe/b/c/rVb5ac6
fD/i/oUHyQ9uP+Q/fPZI8ehjV9lj2uOqJ7ZPGp56Pz3UHdV96fdJv3c9kz3r
7yn/w/iPuueuz/f/Gfbnhd6JvV0v5C8GXi59ZfFq++sxr9v7EvvuvSl40/+2
4p3Fux3vWe9Pf0j/8KR/xkfSx+pPbp/aPsd+vjNQMDAg48l5mqMABhuakwPA
y+0A0DIAoF+C54dJ2nueRhDt3VSDwH/C2rugRvwAaIIP9XGdcwyAPbA5z4fc
sKmP6ilhAPXxGWo6UeT4eGu5qPDGQ3g3MPDKGgBSGwCf5AMD/RsGBj5thcHe
AuDYdO39Ui1EeDf4PkyNrpkL5oOv5N8GDIyv
                    "], "RGB", "XYZ"], ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic, MetaInformation -> 
                    Association["XMP" -> Association[]]], 7 -> 
                    Image[CompressedData["
1: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

                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic]]}}, AspectRatio -> Automatic, Axes -> False, 
                    AxesLabel -> None, AxesOrigin -> Automatic, 
                    AxesStyle -> {}, Background -> None, BaselinePosition -> 
                    Automatic, BaseStyle -> {}, ContentSelectable -> 
                    Automatic, EdgeLabels -> {None}, EdgeStyle -> {
                    GrayLevel[0.65]}, Editable -> False, Epilog -> {}, 
                    FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
                    None, FrameStyle -> {}, FrameTicks -> None, 
                    FrameTicksStyle -> {}, 
                    GraphLayout -> {
                    "LayeredEmbedding", "RootVertex" -> 1, "Orientation" -> 
                    Top}, GraphStyle -> Automatic, GridLines -> None, 
                    GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                    All, ImageSize -> Automatic, LabelStyle -> {}, 
                    PerformanceGoal -> "Speed", PlotLabel -> None, PlotRange -> 
                    All, PlotRangeClipping -> False, PlotRangePadding -> 
                    Automatic, PlotRegion -> Automatic, PlotTheme -> 
                    Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> 
                    Automatic, TicksStyle -> {}, VertexLabels -> {6 -> Placed[
                    Framed[
                    Short[
                    Image[
                    RawArray["UnsignedInteger8",{{{145, 145, 145, 255}, {129, 
                    129, 129, 255}, {129, 129, 129, 255}, {54, 54, 54, 
                    255}}, {{58, 58, 58, 255}, {154, 154, 154, 255}, {151, 
                    151, 151, 255}, {199, 199, 199, 255}}, {{49, 49, 49, 
                    255}, {186, 186, 186, 255}, {109, 109, 109, 255}, {69, 69,
                     69, 255}}, {{170, 170, 170, 255}, {127, 127, 127, 255}, {
                    36, 36, 36, 255}, {109, 109, 109, 255}}}], "Byte", 
                    ColorSpace -> ColorProfileData[CompressedData["
1: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
HRsdf3MiO7GcxE7rnE47vXV2cU53/ta5xfmpi7kL16XUpdHljivNNdR1umu9
61U3ohvLLc9tg9sld9Td113sXut+0QP18POQeGzw6BxBGBEwQjqifsQNT6on
27PYs9Hz/kjGyLiRC0e2jHw+ynFU5qiVo06P+uzl65XvtdXr9miT0eNGLxzd
Nvqlt7s337vW+6oPzSfKZ55Pq8+LMR5jhGM2jrnpS/cd7/utb7vvJz9/P7lf
k1+3v6N/ln+d/w2WKSuRtZR1JoAQEB4wL+BQwPtAv8CiwL2BfwZ5BuUF7Qx6
OtZlrHDs1rEPg+2DecGbg1UhzJCskO9DVKF2obzQ+tAHYQ5hgrBtYU/Ybuxc
9i7283CvcHn4gfC3nEDOHM6xCCwiOqIioiPSJDI1sibyXpR9lCiqMao32jd6
VvSxGEJMbMzKmBtcay6f28DtHec/bs64k7HU2OTYmtgHce5x8ri28ej4ceNX
j78T7xQvjW9JAAnchNUJdxNdEqcn/jyBOCFxQu2Ex0mjk2YnnU6mJ09L3pn8
JiU8ZXnK7VTXVGVqe5ph2uS0hrS36RHpq9JVE0dNnDPxfIZlhiSjNZOUmZa5
LbNvUuSktZO6JvtOLp98fYrLlJIpZ6daTs2fenia4TTetH1ZhKz0rJ1ZH3kJ
vHpeXzY3uy67l8/hr+M/E4QJ1gi6hcHCVcInOcE5q3KeioJFq0Xd4lBxlbhH
wpHUSF7kxuRuyn2bl5C3PW8gPz1/d4FeQVbBQamJNE96stCmsKSwU+YhK5ep
pgdOXzu9Vx4r36ZAFFMUrUWm8MB+Qemq/EZ5vzikuLb43Yy0GftKjEukJRdm
us9cMvNJaVTpD7PwWfxZ7bPtZi+YfX8Oe87mucjc7Lnt8xzmlc3rmh89f8cC
yoK8Bb8u9Fq4auHrRemL2sqsy+aXPfwm+pvGcoNyefmNb4O+3bQYXyxZ3LHE
Z8n6JZ8rBBXnKr0qqyo/LuUvPffd6O+qvxtYlrOsY7nf8o0riCukK66vDF25
Y5XxqtJVD1ePX928hrmmYs3rtdPWnq0aU7VpHWWdcp2qOq66db3j+hXrP9aI
a67VhtfurrOqW1L3doNgw+WNYRubNllvqtz04XvJ9zc3R29urneur9pC3FK8
5fHWtK2nf2D90LDNclvltk/bpdtVO5J2nGzwb2jYabVzeSPaqGzs3jV516Uf
I35sbfJs2rybsbtyD9ij3PP7T1k/Xd8bu7d9H2tf036n/XUH6AcqmpHmmc29
LeIWVWtGa+fBcQfb24LaDvw88ufth+wO1R42O7z8COVI2ZGBo6VH+47JjvUc
Fx1/2D6t/faJiSeunpxwsuNU7Kkzv0T9cuI0+/TRM8FnDp0NPHvwHOtcy3m/
880XfC8c+NX31wMdfh3NF/0vtl4KuNTWObbzyOXQy8evRFz55Sr36vlr8dc6
r6dev3lj8g3VTcHNp7fyb734rfi3/tvz7xDuVNw1ult1z+pe/b/c/rVb5ac6
fD/i/oUHyQ9uP+Q/fPZI8ehjV9lj2uOqJ7ZPGp56Pz3UHdV96fdJv3c9kz3r
7yn/w/iPuueuz/f/Gfbnhd6JvV0v5C8GXi59ZfFq++sxr9v7EvvuvSl40/+2
4p3Fux3vWe9Pf0j/8KR/xkfSx+pPbp/aPsd+vjNQMDAg48l5mqMABhuakwPA
y+0A0DIAoF+C54dJ2nueRhDt3VSDwH/C2rugRvwAaIIP9XGdcwyAPbA5z4fc
sKmP6ilhAPXxGWo6UeT4eGu5qPDGQ3g3MPDKGgBSGwCf5AMD/RsGBj5thcHe
AuDYdO39Ui1EeDf4PkyNrpkL5oOv5N8GDIyv
                    "], "RGB", "XYZ"], ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic, MetaInformation -> 
                    Association["XMP" -> Association[]]]], Background -> 
                    GrayLevel[1], FrameStyle -> GrayLevel[1], 
                    FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], 
                    Center], 5 -> Placed[
                    Framed[
                    Short[
                    Image[CompressedData["
1:eJwtlnlQ2+eZxzPb/WP/6Uz/7Ux3ZzJJZ9JcteskDnFsg23AmPtGBoRA6EBI
CF2ABEIISQgBEiBuEEe4wTjGgA02OAYbJ3Ztx3GTThKn7uZq2m687ewx3Z1p
p58+zfSPVzO/n+b3vu/zPN/r6QpzjvafnnrqKdu/yE9OeX2C1VruzP2BPOTX
2Kp0NZrKlBq7Rqexvl7xPXn5o3+sf5a1M1XDrYttXJy00GE7TUPJEd7dHGZ3
rYvpsI7dKR1rQxr6vKW01yYxEVRwfclFuzOPvpCBBn0ifY2Z3N2JsTpRj7Po
ZYbaNQw0Z7I1U8d7e9O8s+BgJlTM22MWNicb+Gh/AU3hm4w35bPgzWKxR8/5
IQe352r5+mY7o958Li328e1vP8KuPkpLVQItthwMcrd6TQJvhWs4N+rBpz/G
9pSdkUAJU2ENM73VjHVVsRBWoS84xEiHXu5bzs5yiDZbOtMdSlwlB5j15fPp
ZhcPVpuYbFdiLjzGpaUB9q4tk3r0WQaCWpZjdhxSW135G8x2W9ndnGPYXcjn
+wO8u9LISGshd67N8uSLXS7EbGxvzLB5YYyZjlK67ek0607SGzQR69LS7cjk
6piRsrSnMasyefzpQ1zWbNJO/Csd7hK2FroIugoINeRgUcUxGlCztTLIgKeA
/Tkni90qZgO5Ulc5PlsqO+v98Nf/5Mtf35X/9LwVVNMq5znKEohFNNSWxjHs
KSLYUkG4q5HLWzO4bXnoaw8zOtLA7VtbjEQcBGoSGfGX0N2UzbT0bihYQVeT
koqsg8x06VgYMDLd7+LJ737Jb754n29/85Ap12kCf59JhcyvJZOasiPM9+jY
W4vij9TjaCqlVh+PUZ+AynAIr72YhYkOhkImnFXJjHfqmO6uJGRNZj5q4+rF
YZbnBrl+ZYlhmdX8iJO5wVpWZ9q4vT1Cf30yl/uyeW9RxcZwPkFrCtcWPUT9
BiwNFajlLLsxk4a6PMoMz1PvSqa9MR+3pQCXNgld3mvUlx+nruKY1JvKuclm
Hv3iCvdurTAcKGIkWMJs1MrVGRuzAza+vGnny3cqBRsltFtlb/UJIvYU1Fk/
YyjShLMmA5+1GH+vFl9bBo3V8VSXvIpJm07AnotDfYpGwc2DzbBgqxBV9kHp
oZXLCwHWRmroa8nl0lwbO+dDNMleo54MdhdsRN1ZqHMP01Gfx6TMYS5azUBI
L5iPZ77PQXN9MUMyG39FPIazx5nsNeKzZ+OVmqbaivl6v5eJ1jzGu6r5+XaU
8+N23NWn6Xdl8OFGgM2FdnRFJ2gzp9Ll0VKefgCfJYdebwU3r85xbroZU+lh
xtorCXrKCTcrCRlPsX1hlN5OC3bdKTobi+hpPour4jBbo9XsLvewtz7E+/sz
xHoNOKqS6HCk0e/OxqFLYWle5uc9S+WZHxM0ZxB2ZmPIP0Rfq5bm2lyqig4z
3nqWTpeC9oZCwX8+K7OdTEYthF15xDrKmIroyUp4hhFvCZ/sX2Bl0oe96gyG
4qNEnAUMtZbSYT/NWKeB2/urtNYk0+1KZ9iVKn1rYmdlgLXJgMzXL/tVoUr7
CVFPJYtDdTi0Jwg6C3FoTmGVOfvtOXQ2FVOR8yrB+kIG/WVY9amM99RirzxF
1Kumy13GDcHf9ZUQF2aCtGqPMBdrZLWnlIfXFnj/6iDro3bubvTQWZ/PGz/9
IbknfoK1PA2XORebnGkX7phMJdTbytiYctPmVFKrFV4582k2naHXX0mj+Yzc
0Uxfm5oPr0+wMe4g7NXTbopnyFfMaFMm2zEH2zNObi65Wew1EX/wh8S99G/k
JjwvOEymP1BJk+44nuokgu5STOXxdDWWMNFZQ7hBQYulkJKMn1GWcwS/NVPW
GdHz03S7c5hoV3F/e4JY3VH2Flt4uD3EJ1ci7M7WMdhSQGX2AfJOPoci+WXs
qgS6GjIYC6poqU0j7FYzHlJhUryEPu913h50cme1U/pvpzj7FHZDHi59mtwr
jenOcqYjgveBOtEgO1N+DX/69zU+vzvBpZlm/NXHaCh8nrpS4bFGZmTJwKJO
lLtn0GJOx2NKYWXAhLXiOMbSeEpSD6BIekX6EmB5OEBO5hmSj7xAdU4cnaYM
elpyMCqP4HEUoFRm0GnP5NO78+KBPfR5lEz2mBmPmAS3iu/2rqs8QVN1Ck36
ZDrqsvDXpuK3iZ6/PcD//PEx06M+8o6/wETIStjnoKAwD4MqmybBiz4tjqzT
r3Eq/U2Mhkyq1CmMRgz4G/LwWlPpFdxfXBmnwaYSbh7iynwLMz0aXMKjcFMR
NaVv0CL89gkuv3l0Hf78B+5cfwtTURw9Hgva8jIUBWdQFiWgVrxOgdTdpC3C
bhZvurHA8lgj4wN2Vpf7uLg+T2/YwWDYJhrzdy6m0WpPI9JcKD0+yd6Sh8Wo
kfPhUmIyu9/9+jp/+f//4NbVCV5+9vvEHXyWpOOvcDbzMNnJz4lvlPJgq5e5
DqPMMuM7P3EYc7m4EOaLx/d49NkDRoc8jISUUstZ0bdcLNoEloYswvl8zou3
zHWbeXfRxa0LbTz56uf892/f587OGElxT3Pk4I/JTnwZTcHrlGQdFs+3CIft
3FhqlLnkUKvOIRpyMCX+FPFUSy3FuE3iY/12BvxVbMx3EhItXRnUiW8YmRd/
C4tnNJsL2Fnqgv97zB+/2GFxrBZl5iFSjj5H2tFn6BGv7msUXQnoUZ45wHxE
y3tr7aITSrZFs/1ViZJxXqHfZ2ahxyKeWcX9a+N8fGeRDqdCPM3K/nqUQV8p
K/21bE37qNcmi261SB7RkZP0IgUpLxFoKBa8HmVIstNSuIiKjBdwak7L90aG
27R8cGOWd6TeqCuF7bFqdubb6PZq+fj+FR49XJEepPP4w3eYkjw2FXHxzTdf
MRAw45P6WizZdHiEf+WJmBWHGPAWyFLSJv4001OFXXR+ut8t3viG5BAl9faq
73LEsDOVJenVgHhStDlfuJzDzY0R1mYD/Or+Gg/eu0B3Rx2///ornnz7e27s
LJGf9Iyca+RP39zl6vlOZsOVfLDhZ2uiRjLgWeFTHTrFSdYnvDRVZaBS5mKu
KSfr5IuoU19iskPDxlyr6FsVq5MuyW8qwXYZH927TKdbhcelZrK/kRsbo3z9
wTytwsmt+RB3RWeNijgWw3oe78d4eDkg/bLhFp5Nd0mmXW0nIH0oSD9CSXEa
yrxE7JpcyZYKRn3ibeITo0ED19cHmZ300+at/s5/POYkGjRvMhXScO9KlJWY
k3ODNiozX0CX8VNcZYf55FoPj269xR8+WiDWVsYlyb2Xp+rQZ70mmpZObVk8
0yMhttbmuL3i4eZMtWiHgmjYy/piLy5DOhbFqyz0i9Z0G+ltUbA3KxjtVuIV
35sbdnHtXBtLwhF99ovE3MKXWANG8Ty3JpGb6530SB6OWPKxlZ8UjFbz+M48
F6dbOR/ViUecwKVKxilYMJQcp8+SyITtGA/2lvnf//qclREDmzE9EZfkqs1u
nny+y2f3z/PxrUn2LoYIiibWqlMZ62uWjF/HaH9APFrFvd1F3h6x89m7Uvuv
rnL7cpi/AchRuro=
                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic]], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 7 -> Placed[
                    Framed[
                    Short[
                    Image[CompressedData["
1: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

                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic]], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center], 4 -> Placed[
                    Framed[
                    Short[
                    Image[CompressedData["
1:eJwVV+dvKtndXr35ki+R3kjZG+Vqs3v3rht1BpiBGboxtrExGBvTYegMvWN6
x4BpNsUN9+u9NVvzbom00SvlW5S/Kud+GHTOEfr9zq89z3O+dMX2ff/zySef
pH4Pfvad2dVk0pnX/i/Y6KKpABn1eraiaS/pTWKu34HDz8G3Ar6P67oJHrm5
Uy96ExFehsR9BzJyoyduZOrlNglOSsuMqukJDa1sZTVceM3GOSXxUVhQtvPa
LjS0uZjfXelY4IaVXTMxC/u0NsEu6xlVE3Pg5p14eT0HAkxdhvBpgH8W4l+E
cLA+D/CmJK9lhEYOzsSN3IT4T6m1npXdNEFtB9KywkkdK7HPTOrhnA3q+Xmj
kKThQEch4TDEP3YLYkrqyhefimnPxz5ex431vVjNDHdd3ElA0HEgk4AQnE9J
7kUQf0hJLiPC64jgLi66DPHOQ/jAiRxbWQM7p6aljd3ceVjUJzhdAjlyctMa
ak4HNR1owcqt2tDzqOQqvd7xCXoB8Xl0rWxguUSL29gy/eWzcUg8DuFnsdWz
iGQakc4Ta7Ow5Ca5dp2QPaRlT9m1V4drsyA286HzCD7zc8ckNvRwqzrGmOTl
NSstI3zqE8wCoqlf0LAhRT2U1zO6JDJL8q6i0vcV5VNeUSPQm7jkKSMvG+CK
VRLRoIt//fQkKHlIy2ch0Twhv07JH/OKx/zmU37rKad4zG7cH67P49Khk9Nx
cE5IrE1wqka4bUfaBFIzs7N7tJSaWjNzBh585MPaDrRkZueM0HkM7/m5dwnJ
29LmBFiOCm9i/LMg3vPwb8uWlkPKo764zQDLknlUdBYR32U2X2UVo4hoEhSC
kCeR1QaBAvtHDlbHw+m5sKqZ1TSzqhZ2143N/HjZxDo0sAY+AajLSQAb+vGu
Dz/x4RcJwZGX83Va+pCV9/yCp7T4PiEaudnjoORdxzWOqCSspbOYbBLAzgPY
NCi8y8nHIWHOCNesnIYd7ZLsAsEIKRmHehAFu2xiZ/Vw18ntg9BsyKkHPXKi
PQ9+EZWchYQnYeHQx+t6sNu4uOfFTv3Y1xnpRXztISl+eyi9iwv6Dvguu/Oq
ajuJ7rp2kKGX95CRXcREH+ubkGaNTIPghW9jqWpmZ/QUr4quEy6HVcsFC1S2
ImkT59iDD0kBaK2qBakT6CwoOgsLZ0HBNCwCqR64UZC6uhOdhfmzADbwcN/l
ZPOYuGeHzoK8vx2ZJv7taUJzFl87C4tuUvJZHEQqbtp5vvXFNeiv9rWl/D4t
scvwK+lmyUJgixJUUgsGBpi4thOt2zCQ/4qVVzTAY79gQuKg7gMfNg5gkwD/
MSU59gtbBAf8eeDlvS1vdUlB38UeuqGHwt5t0jAMyI4IVteBNh28IydW0DPj
KkpylxbVMKtWpG1nR9RgKOB9/Eu98Mugkn6og2sGRs2GVoycggE+IpD8AaNp
gqtaWsUIFUAbuHlgEk/8/CM3v2hCCibOJCm/iMv6Xrxj52T24Hl656nuzOnR
po0NsKJugetmOKtllI3wwI1NgqLEHnQaEGZ1MPDrlC1bZMslK7dOQId79EMD
0nbyS3pmSkMtg6tuLqW2l2JKSkLHKTvQogE6i4sqduzQyKk5sUlyvWJDum5e
Yp9zaBJ/0ybejxJZs+gyIrqKS64TknFQNPLyp2HxPCl7V94GRTxycfMmJLCx
7FxbSuzBdSvScPPzJtBvvLOIKKOmRrZXinpGbGclf0DPHTBzRqQOEIzELpLy
tl9SsKNZC7fpxFs+Qd2zel001+3iaWrvdZs8CmleZTfeFtavYvxZWHyXXgPw
cp+RP2TkA1IQVNEOTezQDsUsflkCybRzS1akA/DTh+eNUEW/XDPTK0Y4oaal
9mhVGwIS0rZzRiQ2CksaLjR1wAGXBONcdwrva8T7tuPDEXFZMN0WdRVidZjU
dd2CjgvvuvGruPRNcfPhUDYL8QdeftXKyuohcoviUyzULZyBH2170J4baxEs
99pCnVhpWFfKWhAvNaNl5E3MpgfpkXifFHY8WN7IyRiRtosHgK7jkZxnD951
HD+OQ9+PvJcp5cgvrRLSrEkQ0wlcG1BIxSmYBT1yFaBK3yuYZwQtFyOupge3
qaB7W3YWsNOwsjL7lOD2SuaAUTYwchq6S/yioIdSB4ycCW678YYdG3mxnpvb
9gmHfv7Ej11FxZOI/DS89lQ9+Hlge1/Xj0Pynk868K9WbPykDk/phVGtMG3Z
iB8I4hpO0Yg0nRxAMRUTnNMzczrmaVBUssBxNS2pZWT2GCk1Ja+h5PZoXSev
SrCrBDIO4Jcx8TwmOQuLLxLrN+m1izD/Pi17U1Ke+AVn0dVfT90/9WxvSpqn
guZtVXuVUg78sn5w/TigaAVUDc86qWBapHTfFpQzIF1QLC2jbkPAOIA6pnZp
ZT2UUVOA35oByh9AHQfacNAqDsYkit5nBMdO7sDDAygKgP1dSXEVFY2DAEWF
APZ/ODb/PLD+0rf9cOy6yahukpsPWfVVRn2e2h3Hto5Jecu9VrSJQ7tcg5hK
bjF6Ht6QxDsupGSEQ5tLFRMrqqSCkMtGNhiTspFZ1FOrdnjkR4fujxQ/C/Ln
MdFTVn6XWh15uV03MiL5f6tsA3r6v571l2Pzr6fkdWr7LqX4rmV+Vzc/Vc03
Bd1F1jDPG8dxdcsjyxkws5TqUTBKJlbmgB7T0IoHjIqJHVSsHO5DgE+P7AAw
2YUDZt3GBrpiEsTvM7K7pPQhJX06BAvJLISfkrzX+c13OfnrnPz7Y+Kntu6X
Y8vfO5abxMa7suZ99eB11Xhf1L1uEI9V60VaXbfxSxZ+xSby7XAsq8v+jSWX
fMEhW2jZ2HkdFN6mtJ0gD/ycHm7akLqR0SDY0zj/LiN+nV9/Xdj8OrcO7nCb
FF+EBW9y8jc52X1C/Kaq+a5jAa5/6ho/VFRvi8rvKrsfarpvO8Q3x87b7O5p
eLPnXx/EVKP4XsWxapJS2S8/ZS88Qxee6fgv0hp6VEmZhiU9D5bRMVp2bhOo
IxI/T0qvE+LbpASk9DErv4oK3hY2buKih6ToJiYEWmVKotepjQ/1g2+rO9+X
Nn87sfxzZPrHse7/z8lvO7Z5Rt1xi4dBxSiqbnk3QK1JJWvli2fP//xHzuJf
9PyXcRUVJPbYxe26kLqdVnewAANOoqt3Gfk0gIPxuYyKb1PSx8wqSPVVVHif
ErfMtC4BTwOAuLlPRdWbouqHwvqPrb2b9MaPLe2/Zs5/Xvj/fkJ8aFm/7buP
o1tFM1Yw88NqFvTVn188/5NbvhLdXg5sU4pmOK9jFE1AugBVwOsD6g9J5gnp
iQ8DLDD2cV9l5SDwkRs59eOToCC/TwGSA/AyOL8M8X+7CP82dk1JYRVYIARd
v+K3C/+/HiM/T0MfOrarnGYc2eqQ8pCSucr4zKugz8N4ywJIBErsQ1kTu6Bn
HTmQtgdrEtyhjw8mqGVDANwBzn3KrZ+SgGWExw4UKBMgvW7jwosg9ngov41L
/v22+F3PmVbTjmwcz9pX8Gd/GETV/3lXfl3Xz5OKx7L+LKFs2AURJa1q4tzG
xGd+XlK5mNIAHKPlLWjNioxDzEGAXTB+FD+A1ACxApYBQ3QVAUoAv0zIAMHV
LJyekwvU3U1C+qaw9ZiS/Tr1P+TVBR2r70SDimUd7/OKCfnHxPdN2zIKrd1l
1Xc59SQkA2AF9MxNGE9uLynpn/pVzOgulDVw0ma0aafXbGDQ0BO/sKRl9Ozc
i4gUwMXAiQK8nYWEl0BKkfx5FJDd+iQE8rAB4h0G5S0rd+TGGma4boR7dk5F
Rx2HN35oG0FvtD2Cy6T8Kbt+nZT23WjHRCew52romXuDGt+DYxpGah/Kaah1
C9L3CE/8oq4Znvr5Qw/ec3BrRhj0ec/Fm8dXzwN8IEtOSUHPyTu2I12CXdQx
ywd08GqoGVgtM6dDcMD24/US4r6HC9DmNICD3pi4gULg5HdeJjdf+le/cMmp
KS0rb2IkdynZAwi4qBnZfTd2AmJ0cQde4SQgKumg+A6t6+AOgQ4hkKaBUTcw
k8rliGKxCnSLEQbbIzNc1UMgWNAJYxLvWplNE30WAWocSype1HWUPgGXtSsl
9UJWtZRWfkVuAsXFKFlpZTMzvw8V9xmZnWXgAjxtMrv07B6U1TIbNjS+TQUB
Dl287C6lsEd1ib6IKJZSKgqQ30DYHO5SAfpNA6Lr5PpZRNo0MnKqpakfB/Oe
3FkkV18MHHBNT6serByZ6FnVolf6eVJFyRvoOS0tpaKS68spDdBm9IwWyu4x
bcIvDdjnCS07Bi6ghVpWdnafHt5c2IH+ooSfl3SwmfdZ08JOq6gN28dUXMVk
j7mtj+8jAikboLEXy6qXN6h/SgOmswHkh+JbC4eqRdAD4JnwXywhXqM=
                    "], "Byte", ColorSpace -> "RGB", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, Interleaving -> True, Magnification -> 
                    Automatic]], Background -> GrayLevel[1], FrameStyle -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    RoundingRadius -> 2], Center]}, 
                    VertexShape -> {
                    3 -> Null, 4 -> Null, 6 -> Null, 2 -> Null, 5 -> Null, 7 -> 
                    Null, 1 -> Null}, VertexSize -> {0}, 
                    VertexWeight -> {
                    132.8599626958211, 98.47945002620727, 86.59146768825173, 
                    0, 0, 0, 0}}]]}, 
                    TagBox[
                    GraphicsGroupBox[{{
                    GrayLevel[0.65], 
                    Opacity[0.7], 
                    
                    LineBox[{{{1.3416407864998738`, 2.6832815729997477`}, {
                    0.8944271909999159, 1.788854381999832}}, {{
                    1.3416407864998738`, 2.6832815729997477`}, {
                    1.7888543819998317`, 1.788854381999832}}, {{
                    0.8944271909999159, 1.788854381999832}, {
                    0.4472135954999579, 0.894427190999916}}, {{
                    0.8944271909999159, 1.788854381999832}, {
                    1.3416407864998738`, 0.894427190999916}}, {{
                    0.4472135954999579, 0.894427190999916}, {0., 0.}}, {{
                    0.4472135954999579, 0.894427190999916}, {
                    0.8944271909999159, 0.}}}]}, {
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    InsetBox[
                    "", {1.3416407864998738`, 2.6832815729997477`}, 
                    Automatic, {0., 0.}], 
                    InsetBox[
                    "", {0.8944271909999159, 1.788854381999832}, Automatic, {
                    0., 0.}], 
                    InsetBox[
                    "", {0.4472135954999579, 0.894427190999916}, Automatic, {
                    0., 0.}], {
                    InsetBox["", {0., 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJwVV+dvKtndXr35ki+R3kjZG+Vqs3v3rht1BpiBGboxtrExGBvTYegMvWN6
x4BpNsUN9+u9NVvzbom00SvlW5S/Kud+GHTOEfr9zq89z3O+dMX2ff/zySef
pH4Pfvad2dVk0pnX/i/Y6KKpABn1eraiaS/pTWKu34HDz8G3Ar6P67oJHrm5
Uy96ExFehsR9BzJyoyduZOrlNglOSsuMqukJDa1sZTVceM3GOSXxUVhQtvPa
LjS0uZjfXelY4IaVXTMxC/u0NsEu6xlVE3Pg5p14eT0HAkxdhvBpgH8W4l+E
cLA+D/CmJK9lhEYOzsSN3IT4T6m1npXdNEFtB9KywkkdK7HPTOrhnA3q+Xmj
kKThQEch4TDEP3YLYkrqyhefimnPxz5ex431vVjNDHdd3ElA0HEgk4AQnE9J
7kUQf0hJLiPC64jgLi66DPHOQ/jAiRxbWQM7p6aljd3ceVjUJzhdAjlyctMa
ak4HNR1owcqt2tDzqOQqvd7xCXoB8Xl0rWxguUSL29gy/eWzcUg8DuFnsdWz
iGQakc4Ta7Ow5Ca5dp2QPaRlT9m1V4drsyA286HzCD7zc8ckNvRwqzrGmOTl
NSstI3zqE8wCoqlf0LAhRT2U1zO6JDJL8q6i0vcV5VNeUSPQm7jkKSMvG+CK
VRLRoIt//fQkKHlIy2ch0Twhv07JH/OKx/zmU37rKad4zG7cH67P49Khk9Nx
cE5IrE1wqka4bUfaBFIzs7N7tJSaWjNzBh585MPaDrRkZueM0HkM7/m5dwnJ
29LmBFiOCm9i/LMg3vPwb8uWlkPKo764zQDLknlUdBYR32U2X2UVo4hoEhSC
kCeR1QaBAvtHDlbHw+m5sKqZ1TSzqhZ2143N/HjZxDo0sAY+AajLSQAb+vGu
Dz/x4RcJwZGX83Va+pCV9/yCp7T4PiEaudnjoORdxzWOqCSspbOYbBLAzgPY
NCi8y8nHIWHOCNesnIYd7ZLsAsEIKRmHehAFu2xiZ/Vw18ntg9BsyKkHPXKi
PQ9+EZWchYQnYeHQx+t6sNu4uOfFTv3Y1xnpRXztISl+eyi9iwv6Dvguu/Oq
ajuJ7rp2kKGX95CRXcREH+ubkGaNTIPghW9jqWpmZ/QUr4quEy6HVcsFC1S2
ImkT59iDD0kBaK2qBakT6CwoOgsLZ0HBNCwCqR64UZC6uhOdhfmzADbwcN/l
ZPOYuGeHzoK8vx2ZJv7taUJzFl87C4tuUvJZHEQqbtp5vvXFNeiv9rWl/D4t
scvwK+lmyUJgixJUUgsGBpi4thOt2zCQ/4qVVzTAY79gQuKg7gMfNg5gkwD/
MSU59gtbBAf8eeDlvS1vdUlB38UeuqGHwt5t0jAMyI4IVteBNh28IydW0DPj
KkpylxbVMKtWpG1nR9RgKOB9/Eu98Mugkn6og2sGRs2GVoycggE+IpD8AaNp
gqtaWsUIFUAbuHlgEk/8/CM3v2hCCibOJCm/iMv6Xrxj52T24Hl656nuzOnR
po0NsKJugetmOKtllI3wwI1NgqLEHnQaEGZ1MPDrlC1bZMslK7dOQId79EMD
0nbyS3pmSkMtg6tuLqW2l2JKSkLHKTvQogE6i4sqduzQyKk5sUlyvWJDum5e
Yp9zaBJ/0ybejxJZs+gyIrqKS64TknFQNPLyp2HxPCl7V94GRTxycfMmJLCx
7FxbSuzBdSvScPPzJtBvvLOIKKOmRrZXinpGbGclf0DPHTBzRqQOEIzELpLy
tl9SsKNZC7fpxFs+Qd2zel001+3iaWrvdZs8CmleZTfeFtavYvxZWHyXXgPw
cp+RP2TkA1IQVNEOTezQDsUsflkCybRzS1akA/DTh+eNUEW/XDPTK0Y4oaal
9mhVGwIS0rZzRiQ2CksaLjR1wAGXBONcdwrva8T7tuPDEXFZMN0WdRVidZjU
dd2CjgvvuvGruPRNcfPhUDYL8QdeftXKyuohcoviUyzULZyBH2170J4baxEs
99pCnVhpWFfKWhAvNaNl5E3MpgfpkXifFHY8WN7IyRiRtosHgK7jkZxnD951
HD+OQ9+PvJcp5cgvrRLSrEkQ0wlcG1BIxSmYBT1yFaBK3yuYZwQtFyOupge3
qaB7W3YWsNOwsjL7lOD2SuaAUTYwchq6S/yioIdSB4ycCW678YYdG3mxnpvb
9gmHfv7Ej11FxZOI/DS89lQ9+Hlge1/Xj0Pynk868K9WbPykDk/phVGtMG3Z
iB8I4hpO0Yg0nRxAMRUTnNMzczrmaVBUssBxNS2pZWT2GCk1Ja+h5PZoXSev
SrCrBDIO4Jcx8TwmOQuLLxLrN+m1izD/Pi17U1Ke+AVn0dVfT90/9WxvSpqn
guZtVXuVUg78sn5w/TigaAVUDc86qWBapHTfFpQzIF1QLC2jbkPAOIA6pnZp
ZT2UUVOA35oByh9AHQfacNAqDsYkit5nBMdO7sDDAygKgP1dSXEVFY2DAEWF
APZ/ODb/PLD+0rf9cOy6yahukpsPWfVVRn2e2h3Hto5Jecu9VrSJQ7tcg5hK
bjF6Ht6QxDsupGSEQ5tLFRMrqqSCkMtGNhiTspFZ1FOrdnjkR4fujxQ/C/Ln
MdFTVn6XWh15uV03MiL5f6tsA3r6v571l2Pzr6fkdWr7LqX4rmV+Vzc/Vc03
Bd1F1jDPG8dxdcsjyxkws5TqUTBKJlbmgB7T0IoHjIqJHVSsHO5DgE+P7AAw
2YUDZt3GBrpiEsTvM7K7pPQhJX06BAvJLISfkrzX+c13OfnrnPz7Y+Kntu6X
Y8vfO5abxMa7suZ99eB11Xhf1L1uEI9V60VaXbfxSxZ+xSby7XAsq8v+jSWX
fMEhW2jZ2HkdFN6mtJ0gD/ycHm7akLqR0SDY0zj/LiN+nV9/Xdj8OrcO7nCb
FF+EBW9y8jc52X1C/Kaq+a5jAa5/6ho/VFRvi8rvKrsfarpvO8Q3x87b7O5p
eLPnXx/EVKP4XsWxapJS2S8/ZS88Qxee6fgv0hp6VEmZhiU9D5bRMVp2bhOo
IxI/T0qvE+LbpASk9DErv4oK3hY2buKih6ToJiYEWmVKotepjQ/1g2+rO9+X
Nn87sfxzZPrHse7/z8lvO7Z5Rt1xi4dBxSiqbnk3QK1JJWvli2fP//xHzuJf
9PyXcRUVJPbYxe26kLqdVnewAANOoqt3Gfk0gIPxuYyKb1PSx8wqSPVVVHif
ErfMtC4BTwOAuLlPRdWbouqHwvqPrb2b9MaPLe2/Zs5/Xvj/fkJ8aFm/7buP
o1tFM1Yw88NqFvTVn188/5NbvhLdXg5sU4pmOK9jFE1AugBVwOsD6g9J5gnp
iQ8DLDD2cV9l5SDwkRs59eOToCC/TwGSA/AyOL8M8X+7CP82dk1JYRVYIARd
v+K3C/+/HiM/T0MfOrarnGYc2eqQ8pCSucr4zKugz8N4ywJIBErsQ1kTu6Bn
HTmQtgdrEtyhjw8mqGVDANwBzn3KrZ+SgGWExw4UKBMgvW7jwosg9ngov41L
/v22+F3PmVbTjmwcz9pX8Gd/GETV/3lXfl3Xz5OKx7L+LKFs2AURJa1q4tzG
xGd+XlK5mNIAHKPlLWjNioxDzEGAXTB+FD+A1ACxApYBQ3QVAUoAv0zIAMHV
LJyekwvU3U1C+qaw9ZiS/Tr1P+TVBR2r70SDimUd7/OKCfnHxPdN2zIKrd1l
1Xc59SQkA2AF9MxNGE9uLynpn/pVzOgulDVw0ma0aafXbGDQ0BO/sKRl9Ozc
i4gUwMXAiQK8nYWEl0BKkfx5FJDd+iQE8rAB4h0G5S0rd+TGGma4boR7dk5F
Rx2HN35oG0FvtD2Cy6T8Kbt+nZT23WjHRCew52romXuDGt+DYxpGah/Kaah1
C9L3CE/8oq4Znvr5Qw/ec3BrRhj0ec/Fm8dXzwN8IEtOSUHPyTu2I12CXdQx
ywd08GqoGVgtM6dDcMD24/US4r6HC9DmNICD3pi4gULg5HdeJjdf+le/cMmp
KS0rb2IkdynZAwi4qBnZfTd2AmJ0cQde4SQgKumg+A6t6+AOgQ4hkKaBUTcw
k8rliGKxCnSLEQbbIzNc1UMgWNAJYxLvWplNE30WAWocSype1HWUPgGXtSsl
9UJWtZRWfkVuAsXFKFlpZTMzvw8V9xmZnWXgAjxtMrv07B6U1TIbNjS+TQUB
Dl287C6lsEd1ib6IKJZSKgqQ30DYHO5SAfpNA6Lr5PpZRNo0MnKqpakfB/Oe
3FkkV18MHHBNT6serByZ6FnVolf6eVJFyRvoOS0tpaKS68spDdBm9IwWyu4x
bcIvDdjnCS07Bi6ghVpWdnafHt5c2IH+ooSfl3SwmfdZ08JOq6gN28dUXMVk
j7mtj+8jAikboLEXy6qXN6h/SgOmswHkh+JbC4eqRdAD4JnwXywhXqM=
                    "], {{0, 30.}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, ImageSizeRaw -> {40., 30.}, 
                    PlotRange -> {{0, 40.}, {0, 30.}}], Background -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    FrameStyle -> GrayLevel[1], RoundingRadius -> 2, 
                    StripOnInput -> False], {0., 0.}, BaseStyle -> 
                    "Graphics"]}, {
                    InsetBox[
                    "", {0.8944271909999159, 0.}, Automatic, {0., 0.}], 
                    InsetBox[
                    FrameBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJwtlnlQ2+eZxzPb/WP/6Uz/7Ux3ZzJJZ9JcteskDnFsg23AmPtGBoRA6EBI
CF2ABEIISQgBEiBuEEe4wTjGgA02OAYbJ3Ztx3GTThKn7uZq2m687ewx3Z1p
p58+zfSPVzO/n+b3vu/zPN/r6QpzjvafnnrqKdu/yE9OeX2C1VruzP2BPOTX
2Kp0NZrKlBq7Rqexvl7xPXn5o3+sf5a1M1XDrYttXJy00GE7TUPJEd7dHGZ3
rYvpsI7dKR1rQxr6vKW01yYxEVRwfclFuzOPvpCBBn0ifY2Z3N2JsTpRj7Po
ZYbaNQw0Z7I1U8d7e9O8s+BgJlTM22MWNicb+Gh/AU3hm4w35bPgzWKxR8/5
IQe352r5+mY7o958Li328e1vP8KuPkpLVQItthwMcrd6TQJvhWs4N+rBpz/G
9pSdkUAJU2ENM73VjHVVsRBWoS84xEiHXu5bzs5yiDZbOtMdSlwlB5j15fPp
ZhcPVpuYbFdiLjzGpaUB9q4tk3r0WQaCWpZjdhxSW135G8x2W9ndnGPYXcjn
+wO8u9LISGshd67N8uSLXS7EbGxvzLB5YYyZjlK67ek0607SGzQR69LS7cjk
6piRsrSnMasyefzpQ1zWbNJO/Csd7hK2FroIugoINeRgUcUxGlCztTLIgKeA
/Tkni90qZgO5Ulc5PlsqO+v98Nf/5Mtf35X/9LwVVNMq5znKEohFNNSWxjHs
KSLYUkG4q5HLWzO4bXnoaw8zOtLA7VtbjEQcBGoSGfGX0N2UzbT0bihYQVeT
koqsg8x06VgYMDLd7+LJ737Jb754n29/85Ap12kCf59JhcyvJZOasiPM9+jY
W4vij9TjaCqlVh+PUZ+AynAIr72YhYkOhkImnFXJjHfqmO6uJGRNZj5q4+rF
YZbnBrl+ZYlhmdX8iJO5wVpWZ9q4vT1Cf30yl/uyeW9RxcZwPkFrCtcWPUT9
BiwNFajlLLsxk4a6PMoMz1PvSqa9MR+3pQCXNgld3mvUlx+nruKY1JvKuclm
Hv3iCvdurTAcKGIkWMJs1MrVGRuzAza+vGnny3cqBRsltFtlb/UJIvYU1Fk/
YyjShLMmA5+1GH+vFl9bBo3V8VSXvIpJm07AnotDfYpGwc2DzbBgqxBV9kHp
oZXLCwHWRmroa8nl0lwbO+dDNMleo54MdhdsRN1ZqHMP01Gfx6TMYS5azUBI
L5iPZ77PQXN9MUMyG39FPIazx5nsNeKzZ+OVmqbaivl6v5eJ1jzGu6r5+XaU
8+N23NWn6Xdl8OFGgM2FdnRFJ2gzp9Ll0VKefgCfJYdebwU3r85xbroZU+lh
xtorCXrKCTcrCRlPsX1hlN5OC3bdKTobi+hpPour4jBbo9XsLvewtz7E+/sz
xHoNOKqS6HCk0e/OxqFLYWle5uc9S+WZHxM0ZxB2ZmPIP0Rfq5bm2lyqig4z
3nqWTpeC9oZCwX8+K7OdTEYthF15xDrKmIroyUp4hhFvCZ/sX2Bl0oe96gyG
4qNEnAUMtZbSYT/NWKeB2/urtNYk0+1KZ9iVKn1rYmdlgLXJgMzXL/tVoUr7
CVFPJYtDdTi0Jwg6C3FoTmGVOfvtOXQ2FVOR8yrB+kIG/WVY9amM99RirzxF
1Kumy13GDcHf9ZUQF2aCtGqPMBdrZLWnlIfXFnj/6iDro3bubvTQWZ/PGz/9
IbknfoK1PA2XORebnGkX7phMJdTbytiYctPmVFKrFV4582k2naHXX0mj+Yzc
0Uxfm5oPr0+wMe4g7NXTbopnyFfMaFMm2zEH2zNObi65Wew1EX/wh8S99G/k
JjwvOEymP1BJk+44nuokgu5STOXxdDWWMNFZQ7hBQYulkJKMn1GWcwS/NVPW
GdHz03S7c5hoV3F/e4JY3VH2Flt4uD3EJ1ci7M7WMdhSQGX2AfJOPoci+WXs
qgS6GjIYC6poqU0j7FYzHlJhUryEPu913h50cme1U/pvpzj7FHZDHi59mtwr
jenOcqYjgveBOtEgO1N+DX/69zU+vzvBpZlm/NXHaCh8nrpS4bFGZmTJwKJO
lLtn0GJOx2NKYWXAhLXiOMbSeEpSD6BIekX6EmB5OEBO5hmSj7xAdU4cnaYM
elpyMCqP4HEUoFRm0GnP5NO78+KBPfR5lEz2mBmPmAS3iu/2rqs8QVN1Ck36
ZDrqsvDXpuK3iZ6/PcD//PEx06M+8o6/wETIStjnoKAwD4MqmybBiz4tjqzT
r3Eq/U2Mhkyq1CmMRgz4G/LwWlPpFdxfXBmnwaYSbh7iynwLMz0aXMKjcFMR
NaVv0CL89gkuv3l0Hf78B+5cfwtTURw9Hgva8jIUBWdQFiWgVrxOgdTdpC3C
bhZvurHA8lgj4wN2Vpf7uLg+T2/YwWDYJhrzdy6m0WpPI9JcKD0+yd6Sh8Wo
kfPhUmIyu9/9+jp/+f//4NbVCV5+9vvEHXyWpOOvcDbzMNnJz4lvlPJgq5e5
DqPMMuM7P3EYc7m4EOaLx/d49NkDRoc8jISUUstZ0bdcLNoEloYswvl8zou3
zHWbeXfRxa0LbTz56uf892/f587OGElxT3Pk4I/JTnwZTcHrlGQdFs+3CIft
3FhqlLnkUKvOIRpyMCX+FPFUSy3FuE3iY/12BvxVbMx3EhItXRnUiW8YmRd/
C4tnNJsL2Fnqgv97zB+/2GFxrBZl5iFSjj5H2tFn6BGv7msUXQnoUZ45wHxE
y3tr7aITSrZFs/1ViZJxXqHfZ2ahxyKeWcX9a+N8fGeRDqdCPM3K/nqUQV8p
K/21bE37qNcmi261SB7RkZP0IgUpLxFoKBa8HmVIstNSuIiKjBdwak7L90aG
27R8cGOWd6TeqCuF7bFqdubb6PZq+fj+FR49XJEepPP4w3eYkjw2FXHxzTdf
MRAw45P6WizZdHiEf+WJmBWHGPAWyFLSJv4001OFXXR+ut8t3viG5BAl9faq
73LEsDOVJenVgHhStDlfuJzDzY0R1mYD/Or+Gg/eu0B3Rx2///ornnz7e27s
LJGf9Iyca+RP39zl6vlOZsOVfLDhZ2uiRjLgWeFTHTrFSdYnvDRVZaBS5mKu
KSfr5IuoU19iskPDxlyr6FsVq5MuyW8qwXYZH927TKdbhcelZrK/kRsbo3z9
wTytwsmt+RB3RWeNijgWw3oe78d4eDkg/bLhFp5Nd0mmXW0nIH0oSD9CSXEa
yrxE7JpcyZYKRn3ibeITo0ED19cHmZ300+at/s5/POYkGjRvMhXScO9KlJWY
k3ODNiozX0CX8VNcZYf55FoPj269xR8+WiDWVsYlyb2Xp+rQZ70mmpZObVk8
0yMhttbmuL3i4eZMtWiHgmjYy/piLy5DOhbFqyz0i9Z0G+ltUbA3KxjtVuIV
35sbdnHtXBtLwhF99ovE3MKXWANG8Ty3JpGb6530SB6OWPKxlZ8UjFbz+M48
F6dbOR/ViUecwKVKxilYMJQcp8+SyITtGA/2lvnf//qclREDmzE9EZfkqs1u
nny+y2f3z/PxrUn2LoYIiibWqlMZ62uWjF/HaH9APFrFvd1F3h6x89m7Uvuv
rnL7cpi/AchRuro=
                    "], {{0, 28.}, {28., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, ImageSizeRaw -> {28., 28.}, 
                    PlotRange -> {{0, 28.}, {0, 28.}}], Background -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    FrameStyle -> GrayLevel[1], RoundingRadius -> 2, 
                    StripOnInput -> False], {0.8944271909999159, 0.}, 
                    BaseStyle -> "Graphics"]}, {
                    InsetBox[
                    "", {1.3416407864998738`, 0.894427190999916}, Automatic, {
                    0., 0.}], 
                    InsetBox[
                    FrameBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[
                    RawArray["UnsignedInteger8",{{{145, 145, 145, 255}, {129, 
                    129, 129, 255}, {129, 129, 129, 255}, {54, 54, 54, 
                    255}}, {{58, 58, 58, 255}, {154, 154, 154, 255}, {151, 
                    151, 151, 255}, {199, 199, 199, 255}}, {{49, 49, 49, 
                    255}, {186, 186, 186, 255}, {109, 109, 109, 255}, {69, 69,
                     69, 255}}, {{170, 170, 170, 255}, {127, 127, 127, 255}, {
                    36, 36, 36, 255}, {109, 109, 109, 255}}}], {{0, 4.}, {
                    4., 0}}, {0, 255}, ColorFunction -> RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
HRsdf3MiO7GcxE7rnE47vXV2cU53/ta5xfmpi7kL16XUpdHljivNNdR1umu9
61U3ohvLLc9tg9sld9Td113sXut+0QP18POQeGzw6BxBGBEwQjqifsQNT6on
27PYs9Hz/kjGyLiRC0e2jHw+ynFU5qiVo06P+uzl65XvtdXr9miT0eNGLxzd
Nvqlt7s337vW+6oPzSfKZ55Pq8+LMR5jhGM2jrnpS/cd7/utb7vvJz9/P7lf
k1+3v6N/ln+d/w2WKSuRtZR1JoAQEB4wL+BQwPtAv8CiwL2BfwZ5BuUF7Qx6
OtZlrHDs1rEPg+2DecGbg1UhzJCskO9DVKF2obzQ+tAHYQ5hgrBtYU/Ybuxc
9i7283CvcHn4gfC3nEDOHM6xCCwiOqIioiPSJDI1sibyXpR9lCiqMao32jd6
VvSxGEJMbMzKmBtcay6f28DtHec/bs64k7HU2OTYmtgHce5x8ri28ej4ceNX
j78T7xQvjW9JAAnchNUJdxNdEqcn/jyBOCFxQu2Ex0mjk2YnnU6mJ09L3pn8
JiU8ZXnK7VTXVGVqe5ph2uS0hrS36RHpq9JVE0dNnDPxfIZlhiSjNZOUmZa5
LbNvUuSktZO6JvtOLp98fYrLlJIpZ6daTs2fenia4TTetH1ZhKz0rJ1ZH3kJ
vHpeXzY3uy67l8/hr+M/E4QJ1gi6hcHCVcInOcE5q3KeioJFq0Xd4lBxlbhH
wpHUSF7kxuRuyn2bl5C3PW8gPz1/d4FeQVbBQamJNE96stCmsKSwU+YhK5ep
pgdOXzu9Vx4r36ZAFFMUrUWm8MB+Qemq/EZ5vzikuLb43Yy0GftKjEukJRdm
us9cMvNJaVTpD7PwWfxZ7bPtZi+YfX8Oe87mucjc7Lnt8xzmlc3rmh89f8cC
yoK8Bb8u9Fq4auHrRemL2sqsy+aXPfwm+pvGcoNyefmNb4O+3bQYXyxZ3LHE
Z8n6JZ8rBBXnKr0qqyo/LuUvPffd6O+qvxtYlrOsY7nf8o0riCukK66vDF25
Y5XxqtJVD1ePX928hrmmYs3rtdPWnq0aU7VpHWWdcp2qOq66db3j+hXrP9aI
a67VhtfurrOqW1L3doNgw+WNYRubNllvqtz04XvJ9zc3R29urneur9pC3FK8
5fHWtK2nf2D90LDNclvltk/bpdtVO5J2nGzwb2jYabVzeSPaqGzs3jV516Uf
I35sbfJs2rybsbtyD9ij3PP7T1k/Xd8bu7d9H2tf036n/XUH6AcqmpHmmc29
LeIWVWtGa+fBcQfb24LaDvw88ufth+wO1R42O7z8COVI2ZGBo6VH+47JjvUc
Fx1/2D6t/faJiSeunpxwsuNU7Kkzv0T9cuI0+/TRM8FnDp0NPHvwHOtcy3m/
880XfC8c+NX31wMdfh3NF/0vtl4KuNTWObbzyOXQy8evRFz55Sr36vlr8dc6
r6dev3lj8g3VTcHNp7fyb734rfi3/tvz7xDuVNw1ult1z+pe/b/c/rVb5ac6
fD/i/oUHyQ9uP+Q/fPZI8ehjV9lj2uOqJ7ZPGp56Pz3UHdV96fdJv3c9kz3r
7yn/w/iPuueuz/f/Gfbnhd6JvV0v5C8GXi59ZfFq++sxr9v7EvvuvSl40/+2
4p3Fux3vWe9Pf0j/8KR/xkfSx+pPbp/aPsd+vjNQMDAg48l5mqMABhuakwPA
y+0A0DIAoF+C54dJ2nueRhDt3VSDwH/C2rugRvwAaIIP9XGdcwyAPbA5z4fc
sKmP6ilhAPXxGWo6UeT4eGu5qPDGQ3g3MPDKGgBSGwCf5AMD/RsGBj5thcHe
AuDYdO39Ui1EeDf4PkyNrpkL5oOv5N8GDIyv
                    "], "RGB", "XYZ"], Interleaving -> True, Magnification -> 
                    Automatic, MetaInformation -> 
                    Association["XMP" -> Association[]]], Selectable -> 
                    False], DefaultBaseStyle -> "ImageGraphics", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, ImageSizeRaw -> {4., 4.}, 
                    PlotRange -> {{0, 4.}, {0, 4.}}], Background -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    FrameStyle -> GrayLevel[1], RoundingRadius -> 2, 
                    StripOnInput -> False], {1.3416407864998738`, 
                    0.894427190999916}, BaseStyle -> "Graphics"]}, {
                    InsetBox[
                    "", {1.7888543819998317`, 1.788854381999832}, Automatic, {
                    0., 0.}], 
                    InsetBox[
                    FrameBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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

                    "], {{0, 25.}, {35., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", ImageSize -> {
                    Rational[107, 4], 
                    Rational[107, 4]}, ImageSizeRaw -> {35., 25.}, 
                    PlotRange -> {{0, 35.}, {0, 25.}}], Background -> 
                    GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
                    FrameStyle -> GrayLevel[1], RoundingRadius -> 2, 
                    StripOnInput -> False], {1.7888543819998317`, 
                    1.788854381999832}, BaseStyle -> "Graphics"]}}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False]], AlignmentPoint -> 
                    Center, Axes -> False, AxesLabel -> None, AxesOrigin -> 
                    Automatic, AxesStyle -> {}, Background -> None, 
                    BaseStyle -> {}, BaselinePosition -> Automatic, 
                    ContentSelectable -> Automatic, 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, Epilog -> {}, FormatType -> 
                    TraditionalForm, Frame -> False, FrameLabel -> None, 
                    FrameStyle -> {}, FrameTicks -> None, 
                    FrameTicksStyle -> {}, GridLines -> None, 
                    GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> 
                    All, ImageSize -> Automatic, LabelStyle -> {}, PlotLabel -> 
                    None, PlotRange -> All, PlotRangeClipping -> False, 
                    PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
                    Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
                    TicksStyle -> {}]], "Output", ShowStringCharacters -> 
                    True]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              FrameStyle -> GrayLevel[0.7]], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Options", "scanner" -> "Data", "id" -> 
     "OptionsPod:WolframLanguageData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \
\"ClusteringTree\"][EntityProperty[\"WolframLanguageSymbol\", \
\"OptionNames\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AlignmentPoint\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AlignmentPoint"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AnnotationRules\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AnnotationRules"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AspectRatio\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AspectRatio"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Axes\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Axes"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AxesLabel\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AxesLabel"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AxesOrigin\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AxesOrigin"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"AxesStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "AxesStyle"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Background\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Background"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"BaselinePosition\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "BaselinePosition"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"BaseStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "BaseStyle"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ClusterDissimilarityFunction\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {
                    WolframLanguageData, "ClusterDissimilarityFunction"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ContentSelectable\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ContentSelectable"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\\\"DataDissimilarityMatrix\\\"\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"DirectedEdges\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "DirectedEdges"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\\\"DistanceCombiner\\\"\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"DistanceFunction\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "DistanceFunction"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeCapacity\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeCapacity"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeCost\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeCost"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeLabels\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeLabels"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeLabelStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeLabelStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeShapeFunction\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeShapeFunction"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeStyle"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"EdgeWeight\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "EdgeWeight"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Editable\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Editable"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Epilog\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Epilog"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FeatureExtractor\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FeatureExtractor"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FormatType\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FormatType"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Frame\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Frame"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FrameLabel\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FrameLabel"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FrameStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FrameStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FrameTicks\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FrameTicks"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FrameTicksStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FrameTicksStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GraphHighlight\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GraphHighlight"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GraphHighlightStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GraphHighlightStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GraphLayout\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GraphLayout"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], "\"GraphRoot\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], "\"GraphStyle\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GridLines\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GridLines"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"GridLinesStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "GridLinesStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ImageMargins\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ImageMargins"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ImagePadding\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ImagePadding"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ImageSize\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ImageSize"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"LabelStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "LabelStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PerformanceGoal\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PerformanceGoal"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotLabel\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotLabel"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotRange\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotRange"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotRangeClipping\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotRangeClipping"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotRangePadding\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotRangePadding"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotRegion\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotRegion"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"PlotTheme\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "PlotTheme"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Prolog\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Prolog"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], "\"Properties\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"RotateLabel\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "RotateLabel"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Ticks\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Ticks"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"TicksStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "TicksStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexCapacity\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexCapacity"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexCoordinates\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexCoordinates"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexLabels\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexLabels"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexLabelStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexLabelStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexShape\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexShape"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexShapeFunction\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexShapeFunction"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexSize\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexSize"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexStyle\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexStyle"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"VertexWeight\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "VertexWeight"}]], 
                 Identity], TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show defaults", "input" -> 
         "OptionsPod:WolframLanguageData__Show defaults"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Attributes", "scanner" -> "Data", "id" -> 
     "AttributesPod:WolframLanguageData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \
\"ClusteringTree\"][EntityProperty[\"WolframLanguageSymbol\", \
\"Attributes\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Protected\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Protected"}]], Identity],
                 TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ReadProtected\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ReadProtected"}]], 
                 Identity], TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Relationships with other entities", "scanner" -> 
     "Data", "id" -> "RelatedEntitiesPod:WolframLanguageData", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Related symbols"}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \
\"ClusteringTree\"][EntityProperty[\"WolframLanguageSymbol\", \
\"RelatedSymbols\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"Dendrogram\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "Dendrogram"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"FindClusters\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "FindClusters"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"ClusteringComponents\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "ClusteringComponents"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox[
                  StyleBox[
                  "\"NearestNeighborGraph\"", {
                   FontSize -> -1 + Inherited, FontFamily -> "Roboto"}, 
                   StripOnInput -> False], 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {WolframLanguageData, "NearestNeighborGraph"}]],
                  Identity], TraditionalForm]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"WolframLanguageSymbol\", \
\"ClusteringTree\"][EntityProperty[\"WolframLanguageSymbol\", \
\"RelationshipCommunityGraph\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                EdgeForm[
                 Directive[
                  GrayLevel[0.5]]], 
                FaceForm[], 
                FilledCurveBox[
                 
                 BSplineCurve[{{2.0868910751603544`, -0.8276270480836527}, {
                  2.2302012837889795`, -0.8276270480836527}, {
                  2.2302012837889795`, -0.6843168394550276}, {
                  2.160096164415971, -0.09027145808813228}, {
                  2.0167859557873458`, -0.09027145808813228}, {
                  1.7306122328834137`, -0.4418544258713146}, {
                  1.7306122328834137`, -0.5851646344999397}}, SplineClosed -> 
                  True]]}, {
                EdgeForm[
                 Directive[
                  GrayLevel[0.5]]], 
                FaceForm[], 
                FilledCurveBox[
                 
                 BSplineCurve[{{0.09027145808813228, -0.44217195354324845`}, {
                  0.5837770392707784, -0.7414343067003395}, {
                  0.7270872478994035, -0.7414343067003395}, {
                  0.7270872478994035, -0.5981240980717144}, {
                  0.23358166671675742`, -0.29886174491462336`}, {
                  0.09027145808813228, -0.29886174491462336`}}, SplineClosed -> 
                  True]]}, {
                EdgeForm[
                 Directive[
                  GrayLevel[0.5]]], 
                FaceForm[], 
                FilledCurveBox[
                 
                 BSplineCurve[{{0.09027145808813228, -1.1514801728885424`}, {
                  0.23358166671675742`, -1.1514801728885424`}, {
                  0.23358166671675742`, -1.0081699642599173`}, {
                  0.09027145808813228, -1.0081699642599173`}}, SplineClosed -> 
                  True]]}}, {{
                Directive[
                 Opacity[0.7], 
                 Hue[0.6, 0.7, 0.5]], 
                
                LineBox[{{2.158546179474667, -0.7559719437693402}, {
                 1.8022673371977262`, -0.5135095301856272}}], 
                
                BezierCurveBox[{{2.158546179474667, -0.7559719437693402}, {
                 1.6761716800897857`, -0.5252968096858598}, {
                 1.335925167921554, -0.5734576072525821}, {
                 0.9956786557533226, -0.6216184048193045}, {
                 0.6554321435850909, -0.669779202386027}}, SplineDegree -> 2], 
                
                LineBox[{{2.158546179474667, -0.7559719437693402}, {
                 2.0884410601016583`, -0.16192656240244485`}}], 
                
                LineBox[{{0.16192656240244485`, -0.3705168492289359}, {
                 0.6554321435850909, -0.669779202386027}}], 
                
                BezierCurveBox[{{1.8022673371977262`, -0.5135095301856272}, {
                 1.6761716800897857`, -0.5252968096858598}, {
                 1.335925167921554, -0.5734576072525821}, {
                 0.9956786557533226, -0.6216184048193045}, {
                 0.6554321435850909, -0.669779202386027}}, SplineDegree -> 2], 
                
                LineBox[{{1.8022673371977262`, -0.5135095301856272}, {
                 2.0884410601016583`, -0.16192656240244485`}}], 
                
                BezierCurveBox[{{0.6554321435850909, -0.669779202386027}, {
                 0.9956786557533226, -0.6216184048193045}, {
                 1.335925167921554, -0.5734576072525821}, {
                 1.6761716800897857`, -0.5252968096858598}, {
                 2.0884410601016583`, -0.16192656240244485`}}, SplineDegree -> 
                 2]}, {
                Directive[
                 Hue[0.6, 0.2, 0.8], 
                 EdgeForm[
                  Directive[
                   GrayLevel[0], 
                   Opacity[0.7]]]], {
                 StyleBox[
                  
                  DiskBox[{2.158546179474667, -0.7559719437693402}, 
                   0.022584030906582814`], 
                  Hue[0, 1, 0.8], StripOnInput -> False], 
                 InsetBox[
                  FormBox["\"ClusterClassify\"", TraditionalForm], 
                  Offset[{2, 2}, {2.1811302103812498`, -0.7333879128627574}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                 StyleBox[
                  
                  DiskBox[{0.16192656240244485`, -0.3705168492289359}, 
                   0.022584030906582814`], 
                  Hue[0.14, 1, 0.9], StripOnInput -> False], 
                 InsetBox[
                  FormBox[
                  "\"ClusterDissimilarityFunction\"", TraditionalForm], 
                  Offset[{2, 2}, {0.18451059330902767`, -0.3479328183223531}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                 StyleBox[
                  
                  DiskBox[{1.8022673371977262`, -0.5135095301856272}, 
                   0.022584030906582814`], 
                  Hue[0, 1, 0.8], StripOnInput -> False], 
                 InsetBox[
                  FormBox["\"ClusteringComponents\"", TraditionalForm], 
                  Offset[{2, 2}, {1.824851368104309, -0.4909254992790444}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                 StyleBox[
                  
                  DiskBox[{0.6554321435850909, -0.669779202386027}, 
                   0.022584030906582814`], 
                  Hue[0.14, 1, 0.9], StripOnInput -> False], 
                 InsetBox[
                  FormBox["\"Dendrogram\"", TraditionalForm], 
                  Offset[{2, 2}, {0.6780161744916737, -0.6471951714794442}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                 StyleBox[
                  
                  DiskBox[{2.0884410601016583`, -0.16192656240244485`}, 
                   0.022584030906582814`], 
                  Hue[0, 1, 0.8], StripOnInput -> False], 
                 InsetBox[
                  FormBox["\"FindClusters\"", TraditionalForm], 
                  Offset[{2, 2}, {2.111025091008241, -0.13934253149586204`}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                 StyleBox[
                  
                  DiskBox[{0.16192656240244485`, -1.0798250685742299`}, 
                   0.022584030906582814`], 
                  Hue[0.8, 0.6, 0.8], StripOnInput -> False], 
                 InsetBox[
                  FormBox["\"NearestNeighborGraph\"", TraditionalForm], 
                  Offset[{2, 2}, {0.18451059330902767`, -1.057241037667647}], 
                  ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, ImageSize -> {440.}, 
              FormatType -> TraditionalForm, FrameTicks -> None}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide relationship communities", "input" -> 
         "RelatedEntitiesPod:WolframLanguageData__Hide relationship \
communities"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Typical ranks of usage in programs", "scanner" -> 
     "Data", "id" -> "RanksPod:WolframLanguageData", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Frequency of usage in all corpuses"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               SuperscriptBox["3823", "\"rd\""], 
               $CellContext`TagBoxWrapper[
               "StringBoxes" -> 
                RowBox[{"3823", "\[InvisibleSpace]", "\"rd\""}]]], 
              "\" most common \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"1 in 4690000 symbols\"", 
                 "\[NoBreak]", "\")\""}], {
               FontFamily -> "Roboto", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement[
     "subpod", {"title" -> "Rank of usage in the Wolfram documentation"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               SuperscriptBox["2058", "\"th\""], 
               $CellContext`TagBoxWrapper[
               "StringBoxes" -> 
                RowBox[{"2058", "\[InvisibleSpace]", "\"th\""}]]], 
              "\" most common \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"1 in 50200 symbols\"", "\[NoBreak]",
                  "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show more ranks", "input" -> 
         "RanksPod:WolframLanguageData__Show more ranks"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "History", "scanner" -> "Data", "id" -> 
     "HistoryPod:WolframLanguageData", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Version introduced or modified"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TemplateBox[{
                   TagBox[
                    TemplateBox[{
                    StyleBox["\"introduced in Version\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" 10.4\""}, "RowDefault"], Identity], "\" \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"March 2016\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                 TemplateBox[{
                   TagBox[
                    TemplateBox[{
                    StyleBox["\"last modified in Version\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" 11.1\""}, "RowDefault"], Identity], "\" \"", 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"March 2017\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{{Top}, {Bottom}}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {
                "Columns" -> None, "Rows" -> {{True}}, 
                 "ItemsIndexed" -> {{{1, -1}, {1, -1}} -> None}}, 
               GridBoxItemSize -> {"Columns" -> {Automatic}}, 
               GridBoxSpacings -> {"Columns" -> {0.6, 0}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Timeline", "scanner" -> "Data", "id" -> 
     "TimelinePod:WolframLanguageData", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6]], 
                 
                 LineBox[{{2016.167280667664, 1.}, {2017.2049474233127`, 
                  1.}}]}, {
                 Hue[0.9060679774997897, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[1], 
                  RGBColor[1, 0, 0]], 
                 
                 LineBox[{{2017.2049474233127`, 1.}, {2017.2049474233127`, 
                  1.}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6]], 
                 GeometricTransformationBox[
                  TagBox[
                   InsetBox["\[FilledSmallSquare]", {0., 0.}], 
                   "InsetString"], {{{2016.167280667664, 1.}}, {{
                  2017.2049474233127`, 1.}}}]}, {
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[1], 
                  RGBColor[1, 0, 0]], 
                 GeometricTransformationBox[
                  TagBox[
                   InsetBox["\[FilledSmallSquare]", {0., 0.}], 
                   "InsetString"], {{{2017.2049474233127`, 1.}}, {{
                  2017.2049474233127`, 1.}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6]]}, {
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[1], 
                  RGBColor[1, 0, 0]]}, {}, {}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6]]}, {
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[1], 
                  RGBColor[1, 0, 0]]}, {}, {}, {}}}, {{}, {}}}, {
             GridLines -> Dynamic[
                Join[{{2015, 2020}, {1.}}, 
                 Replace[
                  MousePosition[{"Graphics", Graphics}, None], {
                  None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], DisplayFunction -> Identity, 
              DisplayFunction -> Identity, AspectRatio -> Full, 
              Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {2014.6057434835081`, 0}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{True, False}, {True, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {{
                 Opacity[0], None}, {None, None}}, FrameTicks -> {{{{1., 
                   FormBox[
                    StyleBox[
                    "\"ClusteringTree\"", {
                    FontSize -> 9, FontFamily -> "Roboto"}, StripOnInput -> 
                    False], TraditionalForm], 0}}, None}, {{{2015, 
                   FormBox["\"2015\"", TraditionalForm]}, {2020, 
                   FormBox["\"2020\"", TraditionalForm]}}, None}}, 
              FrameTicksStyle -> {{
                 Opacity[1], None}, {None, None}}, 
              GridLines -> {{2015, 2020}, {1.}}, GridLinesStyle -> 
              GrayLevel[0.9], ImageSize -> {550, 38.}, 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> NCache[{{
                  Rational[278682095577851, 138264531120], 
                  Rational[16038517925, 7889238]}, {0, 1.5}}, {{
                 2015.571841313246, 2032.9616022485316`}, {0, 1.5}}], 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {0, 0}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show release numbers", "input" -> 
         "TimelinePod:WolframLanguageData__Show release numbers"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False, False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "9", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.889", "parsetiming" -> "0.049", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP9581c87850a1cca80ae00004639g01g6318d6gb", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa9591c87850a1cca80ae00004d7h1dg6ca2620576249686130609588165", "version" -> 
    "2.6", "inputstring" -> "clusteringTree"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 32, 17.3241358`8.991226522199756}, "Line" -> 
    90, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "clusteringTree"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {1238., 1244.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802906106914883`*^9, 3.880290737491686*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"762ed00a-cd3b-4aad-b00c-509ec56daf49"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.", "Title",
 CellChangeTimes->{{3.8802909558119564`*^9, 
  3.8802909580901985`*^9}},ExpressionUUID->"ce2a40ac-88e8-4e09-97bc-\
81688bcfa218"],

Cell["4. \:0418\:0437\:0432\:043b\:0435\:0447\:0435\:043d\:0438\:0435 Web-\
\:043a\:043e\:043d\:0442\:0435\:043d\:0442\:0430 \:0432 \:043f\:0440\:043e\
\:0446\:0435\:0441\:0441\:0435 \:0438\:043d\:0444\:043e\:0440\:043c\:0430\
\:0446\:0438\:043e\:043d\:043d\:043e\:0433\:043e \:043f\:043e\:0438\:0441\
\:043a\:0430", "Subtitle",
 CellChangeTimes->{{3.8802909301929274`*^9, 
  3.8802909462628465`*^9}},ExpressionUUID->"635d014c-3745-49a2-b645-\
8e6020055b2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "\:043f\:043e\:0438\:0441\:043a", " ", 
    "\:0441\:0438\:043d\:043e\:043d\:0438\:043c\:0430", " ", 
    "\:0441\:043b\:043e\:0432\:0430", " ", "smart"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"WolframAlpha", "[", "\"\<synonums smart\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.880291041636458*^9, 3.880291207061201*^9}, {
  3.8802914733079863`*^9, 3.8802914831418266`*^9}, {3.8802915717950077`*^9, 
  3.8802915910808506`*^9}, {3.8802916668113422`*^9, 
  3.880291734330825*^9}},ExpressionUUID->"990592bf-1cfd-4f4f-9115-\
47b8111b4540"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "synonums smart", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"smart\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "smart"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"English word\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"synonyms\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> 
     "Synonyms:WordData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"smart\"][EntityProperty[\"Word\", \
\"SynonymsList\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 FormBox[
                  TagBox[
                   TagBox["\"prudent\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "prudent"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"chic\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "chic"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"snazzy\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "snazzy"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"voguish\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "voguish"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"bright\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "bright"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"fresh\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "fresh"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"impertinent\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "impertinent"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"impudent\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "impudent"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"overbold\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "overbold"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"sassy\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "sassy"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"saucy\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "saucy"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"wise\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "wise"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"smarting\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "smarting"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"smartness\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "smartness"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"ache\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "ache"}]], Identity], 
                  TraditionalForm], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 FormBox[
                  TagBox[
                   TagBox["\"hurt\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "hurt"}]], Identity], 
                  TraditionalForm]}], "   ", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{" ", "\"total:\"", "16"}, "RowWithSeparator"], 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Show synonym network", "input" -> 
         "Synonyms:WordData__Show synonym network"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Meanings combined", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Meanings divided", "input" -> 
           "Synonyms:WordData__Meanings divided"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Meanings combined", "input" -> 
           "Synonyms:WordData__Meanings combined"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Synonyms:WordData__More"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Definitions", "scanner" -> "Data", "id" -> 
     "Definition:WordData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"WordData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Word\", \"smart\"][EntityProperty[\"Word\", \
\"Definitions\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["1", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"showing mental alertness and calculation and \
resourcefulness\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["2", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"elegant and stylish\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["3", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"characterized by quickness and ease in learning\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["4", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"improperly forward or bold\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["5", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"painfully severe\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["6", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"quick and brisk\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["7", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"adjective\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"capable of independent and apparently intelligent \
action\"", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["8", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"noun\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"a kind of pain such as that caused by a wound or a \
burn or a sore\"", {LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox["9", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"verb\"", {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    "\"be the source of pain\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{{Top}, {Bottom}}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> {{True}}, 
                    "ItemsIndexed" -> {{{1, -1}, {1, -1}} -> None}}, 
                   GridBoxItemSize -> {"Columns" -> {
                    Scaled[0.045], Automatic, Automatic}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {0, 0, 0.8, 0}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"9", "\" meanings\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show all", "input" -> 
         "Definition:WordData__Show all"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Definition:WordData__More"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
WordDataSourceInformationNotes.html", "text" -> "Word data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Word", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.547", "parsetiming" -> "0.163", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP112316fda030ac2b5890000040faba1cd61726he", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "20", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa112416fda030ac2b589000004e972faa5h344fib8458888475783217078", "version" -> 
    "2.6", "inputstring" -> "synonums smart"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 48, 37.1772799`9.322852499399794}, "Line" -> 
    105, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3},
    Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "synonums smart"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{660., {231., 237.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.8802911460040827`*^9, 3.880291210664921*^9}, 
   3.8802914857983866`*^9, {3.880291577027525*^9, 3.880291593650448*^9}, {
   3.880291671515092*^9, 3.880291717225119*^9}},
 CellLabel->
  "Out[105]=",ExpressionUUID->"be40c1f2-34ed-4d52-ae11-6ede3248a4ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<Leaves of Grass\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "\:0447\:0430\:0441\:0442\:043e", " ", 
    "\:0432\:0441\:0442\:0440\:0435\:0447\:0430\:0435\:043c\:044b\:0435", " ",
     "\:0441\:043b\:043e\:0432\:0430"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.88029275483801*^9, 3.880292761894377*^9}, {
  3.880293003073804*^9, 
  3.8802930123156385`*^9}},ExpressionUUID->"a8018845-6269-40a8-be16-\
709bd376d9c7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Leaves of Grass", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"Leaves of Grass\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {$CellContext`FamousTextData, {
                   "LeavesOfGrass"}}]], Identity], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Basic information", "scanner" -> "Data", "id" -> 
     "Basic:FamousTextData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"full title\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  TagBox["\"Leaves of Grass\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass"}}]], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"document type\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  TagBox["\"poetry collection\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {WordData, "poetry collection"}]], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"author\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  TagBox["\"Walt Whitman\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {$CellContext`PeopleData, 
                    "WaltWhitman::572yw"}]], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"first publication date\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox["\"1855\"", Identity], TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["167", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" ago\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"publisher\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"self-published\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"original language\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  TagBox["\"English\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {WordData, "English"}]], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> 
     "Image:FamousTextData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "imagesource", {}, {
        "http://www.lib.unc.edu/blogs/rbc/index.php/2012/01/19/judging-the-\
1855-leaves-of-grass-by-its-covers/"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1: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
yXHQ1IMy3wdVf/7p+mQ7OTmZfvzx4uOPVo8/WsbJ/vlZ9OcfTr/9svz5x+PP
Pk7z5K3bJ6O//vxwsxoW2c263I/Dqzi29eHjRxVugrvNvCu375X3HjYQkrfv
ZlUzBM73H1Z37paLNbzXoWALm1yDBjSkLV5kK4mYCwSj5ZmXngHtQe6B9pg7
2q7Fq60kD21al/O6loJmXcKeekMgbAgECIp5chikeyC8KH7z5Pjoq8/LR/dm
dXHF914vivfw+qvN/C8/PX78oPjyk+2iPPj8ozXaH748/+j9ZruYfPR+9fc/
f7SsDj993J5uxj/9cPfH78+//GK52Qw2m9H56fyD9/NPHlf3zv0fvj377HH5
8G6A/sP7yV//8vjjj9aSaVMc/PHb1XdfFn/6bnnv/CiP3lzU1z/9sNwsDjaL
o48/KN+/F3/wID5bDz98GH3yQYqPVkvY/8M79/IPHy8++3R7fDw73sy3m/mD
+0W7hLA6jFKpF0dzTpchzC2IZBEkCdF7B9C5z7787DgYEz2jvUyrT1Pu0Vru
9E6P3jwR2gN6Ybafl3t5fm21vPXH79ZffZaV2Vth8Prp6eTkzP/D93f/9fdP
b2+nf/r2Do6fPKo3zQDHP39//3Q1uXsy/8fPH23bo+MFTub/z//9h7tnk7//
7eH7D8Nvv9kCyZP14P7ZHO++KN57fC8AAtv24A9fHf/3v3wIYm6r8eMH1T/+
eu+P39Rff5qdbm4+uD29ezq6vR3j+jvHk3/+9YNPPyjwrc8+yD5+GLXZlX/9
/dGDeyl09A/fP9iuJ9LfTn787t7JdvboYRFHN5L4ZlFK7WKpPBANWazJnDgG
QLqJXUWPnAu5B84dhwNQFOsysaYodC5prwsaw8jMfehx4CyzS9EBRMrJWXjv
XvTofgDp/flHaZG+fXoy/PEvD5fbCQyJP/1wP4+ut8X+7WPvL398eLKagNK+
+nSTBldx5m8/ffD4YVYk1z7+IP/Xf//wdDM83h4t2psPH0R//8vD//Wvz77+
dFHFV+6fTh7d8T5+lJxvRv/42wfffnECqkujva+/PPvLH09++r79/qv6dHXr
+69X//zb+z99d/7BvehkOfzms+XJ8mjd3DxdH375Sbksrv3x2+3tsyAKr3/z
1fn/+T+/AfE3xc0vP13++P2dzz5ZFdneajmFmIUcjvORFw64mM5ibhaqEijU
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

                "], {{0, 150}, {106, 0}}, {0, 255}, ColorFunction -> 
                RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyNVE1oE0EUfoktKVjUQ9UeVNYeimhblhbES4UkTUtsiGHTP4sim9lJsu12
d5ndpLZ4UsGL4A8evFqLFxXRg9abiiAomkNbvRRRFARFKBR6qSW+2Wy7G6Po
LDvzvW++eX8wsz9jSNkgAFgNOEnyZJgxeSq9A41B3VJzOlXiuk1zlB3JBJBM
1OME9QnZNLWggMeIzqS+iDByYlQIzUMIuAiHTCwznEolHIxaqBmr7yra+Xa+
3/0sNHPncez+14+nDq2NdR+u1VeNrQwDAgR40k25Ct7DcaaCRY4nbdNG3MMx
ycsK4hHEbWxAiiK+gHhbzoczPqxQiwDULSE2iMnQT90NxGHFIhOouQ6wJchr
rqRj9wMc3Yvca48btQDu3gbY3epxB5oBdg4DzHV53Irk9CGwq2RluzodKtAY
wR5/KJdXWgFC1wDWr5bLazPl8votjIE5PdVIgRXdXgQCbwAmtAJx7e34N1J9
MI0rng8uUSvGcQevTZF7MFfA/gabFdoT4/1AfiGr9sYrGF5kWe+gy7eodnzA
9fNI15IJFyd1I3kccQtqHpp2REJ8EPlLVjHNffI6lsfkYylc96EmOW70cw3W
H7Sn8wPDFRzQpvPRpMsDpGEcZNDxo8BAxVUACfogAu1gImNAFlkVNPxreQ3V
WVhFW8Adbiv4fwELfTL0mKpSSjCEKgE1BZzTQDYjF4CJT8R74mfx1WZ8QXwv
/hAXxZvirPidnCeloby3d46dVknp8jJG4Hl7EZxdzJDHlxHFMBcCn9z6Niqw
qqr217OhSP1W40+nRn/OLDNOSslvXlSeD72YXN30kUEVj8T7WkSsoUVRb7te
q7z9obu0VvV89u2VBw1ezMW6uZPzjS/P/qUPihOvOo6/MsOnrVZVW57Kf5ri
LaRnbH4BooY5xdRc3hY6RbFLCOPzQoWoMWEWbMqEuE462gRZ0wRHYwmMWpQV
qdLBz1buvTOa0kTWdTzB37cUM7KqRn1P0D+2/3P8Am2OHUk=
                  "], "RGB", "XYZ"], ImageResolution -> {150, 150}, 
                Interleaving -> True, MetaInformation -> 
                Association[
                 "Exif" -> Association[
                   "ImageWidth" -> 1732, "ImageLength" -> 1226, 
                    "BitsPerSample" -> {8, 8, 8}, "Compression" -> 
                    "Uncompressed", "PhotometricInterpretation" -> "RGB", 
                    "Orientation" -> 
                    Association[
                    "CameraTopOrientation" -> Top, "Mirrored" -> False], 
                    "SamplesPerPixel" -> 3, "XResolution" -> 150, 
                    "YResolution" -> 150, "PlanarConfiguration" -> 1, 
                    "ResolutionUnit" -> "inch", "Software" -> 
                    "Adobe Photoshop CS2 Macintosh", "DateTime" -> 
                    DateObject[{2011, 10, 19, 13, 54, 58.}, "Instant", 
                    "Gregorian", None], "ColorSpace" -> "Uncalibrated", 
                    "PixelXDimension" -> 1209, "PixelYDimension" -> 1708], 
                  "XMP" -> 
                  Association[
                   "DublinCoreSchema" -> 
                    Association["Format" -> "image/jpeg"], "PhotoshopSchema" -> 
                    Association[
                    "ColorMode" -> 3, "ICCProfile" -> "Scanner RGB Profile"], 
                    "BasicSchema" -> 
                    Association[
                    "CreateDate" -> 
                    DateObject[{2011, 10, 19, 13, 54, 15.}, "Instant", 
                    "Gregorian", -6.], "CreatorTool" -> 
                    "Adobe Photoshop CS2 Macintosh", "MetadataDate" -> 
                    DateObject[{2011, 10, 19, 13, 54, 58.}, "Instant", 
                    "Gregorian", -6.], "ModifyDate" -> 
                    DateObject[{2011, 10, 19, 13, 54, 58.}, "Instant", 
                    "Gregorian", -6.]], "MediaManagementSchema" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> "uuid:9900245AFB0511E0873BBC5BBCFC991F", 
                    "DocumentID" -> "uuid:9900245AFB0511E0873BBC5BBCFC991F"]],
                     "DocumentID" -> "uuid:2E8F7EDAFBEC11E0873BBC5BBCFC991F", 
                    "InstanceID" -> "uuid:2E8F7EDEFBEC11E0873BBC5BBCFC991F"], 
                    "RightsManagementSchema" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> "uuid:9900245AFB0511E0873BBC5BBCFC991F", 
                    "DocumentID" -> 
                    "uuid:9900245AFB0511E0873BBC5BBCFC991F"]]], 
                    "PagedTextSchema" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "DerivedFrom" -> 
                    Association[
                    "InstanceID" -> "uuid:9900245AFB0511E0873BBC5BBCFC991F", 
                    "DocumentID" -> 
                    "uuid:9900245AFB0511E0873BBC5BBCFC991F"]]]]]], Selectable -> 
               False], DefaultBaseStyle -> "ImageGraphics", 
              ImageSizeRaw -> {106, 150}, PlotRange -> {{0, 106}, {0, 150}}], 
             Annotation[#, 
              Association[
              "URL" -> 
               "http://www.wolframcdn.com/waimage/hset047/c64/\
c640ed7c4f5e9be1a24db33f04154e4c_v001s.jpg", "Dimensions" -> {106, 150}, 
               "Source" -> 
               "http://www.lib.unc.edu/blogs/rbc/index.php/2012/01/19/judging-\
the-1855-leaves-of-grass-by-its-covers/", "Popup" -> 
               "hset047/c64/c640ed7c4f5e9be1a24db33f04154e4c_v001ms.jpg"], 
              "Image"]& ], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Basic structure", "scanner" -> "Data", "id" -> 
     "BasicStructure:FamousTextData", "position" -> "400", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"books\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["35", #& ]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"poems\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["382", #& ]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"cantos\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["289", #& ]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"stanzas\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["2059", #& ]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Opening phrase", "scanner" -> "Data", "id" -> 
     "Opening:FamousTextData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"Come, said my soul, Such verses for my Body let us write\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Word properties", "scanner" -> "Data", "id" -> 
     "Word:FamousTextData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"number of words\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["122355", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "7", "SRString" -> "7"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"hours\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"number of unique words\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["12577", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"number of unique word stems\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["8449", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8449", "SRString" -> "8449"]]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "8449"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"average word length\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4.381", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.381", "SRString" -> "4.381"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"characters\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"longest words\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    TagBox[
                    TagBox["\"incomprehensible\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "incomprehensible"}]], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TagBox["\"circumnavigation\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "circumnavigation"}]], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TagBox["\"inextinguishable\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "inextinguishable"}]], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TagBox["\"indiscriminately\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "indiscriminately"}]], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TagBox["\"constructiveness\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "constructiveness"}]], Identity]}],
                   LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show distribution", "input" -> 
         "Word:FamousTextData__Show distribution"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Most frequent words", "scanner" -> "Data", "id" -> 
     "MostCommonWords:FamousTextData", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"the\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "the"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["8.17", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8.17", "SRString" -> "8.17"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0\
}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"and\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "and"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4.34", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.34", "SRString" -> "4.34"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"of\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "of"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3.44", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "3.44", "SRString" -> "3.44"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"I\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "I"}]], 
                   Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2.35", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.35", "SRString" -> "2.35"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"to\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "to"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.8", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.8", "SRString" -> "1.8"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"in\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "in"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.51", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.51", "SRString" -> "1.51"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"you\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "you"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.25", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.25", "SRString" -> "1.25"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"a\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "a"}]], 
                   Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.02", "SRString" -> "1.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"with\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "with"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.02", "SRString" -> "1.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"is\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "is"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.9", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.9", "SRString" -> "0.9"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"all\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "all"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.87", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.87", "SRString" -> "0.87"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"or\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "or"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.82", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.82", "SRString" -> "0.82"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"me\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "me"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.81", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.81", "SRString" -> "0.81"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"my\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "my"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.81", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.81", "SRString" -> "0.81"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"for\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "for"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.8", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.8", "SRString" -> "0.8"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"not\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "not"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.71", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.71", "SRString" -> "0.71"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"that\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "that"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.69", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.69", "SRString" -> "0.69"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"as\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "as"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.65", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.65", "SRString" -> "0.65"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"it\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "it"}]],
                    Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.65", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.65", "SRString" -> "0.65"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"from\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "from"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.56", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.56", "SRString" -> "0.56"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "MostCommonWords:FamousTextData__More"}, {}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Most frequent capitalized words", "scanner" -> "Data", 
     "id" -> "MostCommonCapitalizedWords:FamousTextData", "position" -> "800",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"I\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "I"}]], 
                   Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2.35", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.35", "SRString" -> "2.35"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"O\"", 
                    $CellContext`TagBoxWrapper["Entity" -> {WordData, "O"}]], 
                   Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.47", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.47", "SRString" -> "0.47"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"America\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "America"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.06", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.06", "SRString" -> "0.06"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Nature\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Nature"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.05", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.05", "SRString" -> "0.05"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Manhattan\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Manhattan"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.02", "SRString" -> "0.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Asia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Asia"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.02", "SRString" -> "0.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"President\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "President"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.02", "SRString" -> "0.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Mississippi\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Mississippi"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.02", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.02", "SRString" -> "0.02"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Libertad\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Libertad"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Europe\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Europe"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"I'd\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "I'd"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"California\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "California"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Paumanok\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Paumanok"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Mannahatta\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Mannahatta"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Ohio\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Ohio"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"India\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "India"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"American\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "American"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.01", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.01", "SRString" -> "0.01"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Washington\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Washington"}]], Identity], 
                  "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.009", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.009", "SRString" -> "0.009"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"Virginia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "Virginia"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.009", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.009", "SRString" -> "0.009"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{
                  TagBox[
                   TagBox["\"France\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {WordData, "France"}]], Identity], "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.009", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.009", "SRString" -> "0.009"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "MostCommonCapitalizedWords:FamousTextData__More"}, {}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Most frequent two-word phrases", "scanner" -> "Data", 
     "id" -> "MostCommonTwoWordPhrases:FamousTextData", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{"\"of the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"1241 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"in the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"600 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"and the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"552 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"to the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"294 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"I see\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"291 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"on the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"263 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"from the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"244 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"it is\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"199 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"with the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"193 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"I am\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"190 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"to me\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"174 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"all the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"167 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"by the\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"148 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"the earth\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"146 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"out of\"", "\"  \"", 
                  StyleBox[
                   
                   RowBox[{
                    "\"(\"", "\[NoBreak]", "\"145 times\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "MostCommonTwoWordPhrases:FamousTextData__More"}, {}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Contents", "scanner" -> "Data", "id" -> 
     "Content:FamousTextData", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book I\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKI"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2477", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["9", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "9", "SRString" -> "9"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book II\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKII"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3137", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["11", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "11", "SRString" -> "11"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book III\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKIII"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["16031", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["58", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "58", "SRString" -> "58"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                StyleBox[
                 TemplateBox[{"\" \[Ellipsis] (\"", 
                   TemplateBox[{"29", "\" parts with \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["88409", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], 
                   "\") \[Ellipsis] \""}, "RowDefault"], {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book XXXIII\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKXXXIII"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3698", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["13", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "13", "SRString" -> "13"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book XXXIV\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKXXXIV"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["5220", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["19", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "19", "SRString" -> "19"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                StyleBox[
                 TemplateBox[{
                   TagBox[
                    TagBox["\"Book XXXV\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`FamousTextData, {
                    "LeavesOfGrass", "BOOKXXXV"}}]], Identity], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["3306", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"words\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\", silent reading: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["12", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "12", "SRString" -> "12"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"minutes\"", {
                    FontFamily -> "Roboto", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Row", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{
                    StyleBox[
                    "BaseStyle", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "\[Rule]", "\"Caption\""}]}],
                     "]"}]& ), BaseStyle -> "Caption"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Content:FamousTextData__More"}, {}]}]}],
    Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Wikipedia summary", "scanner" -> "Data", "id" -> 
     "WikipediaSummary:FamousTextData", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             Cell[
              TextData[{
                StyleBox[
                "Leaves of Grass", FontSlant -> "Italic", StripOnInput -> 
                 False], 
                " is a poetry collection by American poet Walt Whitman. \
Though it was first published in 1855, Whitman spent most of his professional \
life writing and rewriting ", 
                StyleBox[
                "Leaves of Grass", FontSlant -> "Italic", StripOnInput -> 
                 False], 
                ", revising it multiple times until his death. There have \
been held to be either six or nine individual editions of ", 
                StyleBox[
                "Leaves of Grass", FontSlant -> "Italic", StripOnInput -> 
                 False], ", the count varying depending on \[Ellipsis]"}], 
              FontFamily -> "Roboto", FontSize -> 12, LineSpacing -> {1, 3}], 
             TextCell[
              Row[{
                Style["Leaves of Grass", FontSlant -> "Italic"], 
                " is a poetry collection by American poet Walt Whitman. \
Though it was first published in 1855, Whitman spent most of his professional \
life writing and rewriting ", 
                Style["Leaves of Grass", FontSlant -> "Italic"], 
                ", revising it multiple times until his death. There have \
been held to be either six or nine individual editions of ", 
                Style["Leaves of Grass", FontSlant -> "Italic"], 
                ", the count varying depending on \[Ellipsis]"}], FontFamily -> 
              "Roboto", FontSize -> 12, LineSpacing -> {1, 3}]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {}, {
           XMLElement[
           "link", {
            "url" -> "http://en.wikipedia.org/wiki/Leaves_of_Grass", "text" -> 
             "Full entry"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "WikipediaSummary:FamousTextData__More"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "word" -> "", "template" -> 
        "Assuming the input is a poetry collection${separator}Use as ${desc} \
or ${desc} instead${separator}Use \"Grass\" as ${desc}", "count" -> "4", 
        "pulldown" -> "false", "type" -> "MultiClash", "default" -> 
        "{\"MC\", \"\"} -> {\"FamousText\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "FamousText", "desc" -> "a poetry collection", "input" -> 
          "{\"MC\", \"\"} -> {{\"FamousText\", \"a poetry collection\"}}", 
          "word" -> "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Movie", "desc" -> "a movie", "input" -> 
          "{\"MC\", \"\"} -> {\"Movie\"}", "word" -> "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MusicWork", "desc" -> "a music work", "input" -> 
          "{\"MC\", \"\"} -> {\"MusicWork\"}", "word" -> "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Plant", "desc" -> "a plant", "input" -> 
          "{\"MC\", \"\"} -> {\"Plant\"}", "word" -> "Grass"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.885", "parsetiming" -> "0.218", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP191119d7d39a30eb8cg6000040997fde1f7e2201", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa191219d7d39a30eb8cg600003313c3fde4aeeh3g1697175660060143921", "version" -> 
    "2.6", "inputstring" -> "Leaves of Grass"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 22, 6, 7.7169493`8.64002061703191}, "Line" -> 
    108, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Leaves of Grass"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{660., {744., 750.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.880292767920404*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"3db3ddde-f1d2-4259-af27-7acda07f24c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9 \:042d\:0442\:0430\:043f \:0438\:0437\:0432\:043b\:0435\:0447\:0435\
\:043d\:0438\:044f \:0448\:0430\:0431\:043b\:043e\:043d\:043e\:0432", \
"Subtitle",
 CellChangeTimes->{{3.880292497690284*^9, 3.8802925071700473`*^9}, {
  3.8802932857264204`*^9, 
  3.8802932993902893`*^9}},ExpressionUUID->"a720fc61-e8ce-4aed-a20c-\
17626a590e76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<_al__la__\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "\:043f\:043e\:0438\:0441\:043a", " ", 
    "\:0441\:043e\:043e\:0442\:0432\:0435\:0442\:0441\:0442\:0432\:0438\:044f\
", " ", "\:0448\:0430\:0431\:043b\:043e\:043d\:0443"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8802919530933*^9, 
  3.880291984035491*^9}},ExpressionUUID->"c842b75d-101f-46dd-b8c0-\
be503317b5e5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "_al__la__", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DictionaryLookup[_~~\"al\"~~_~~_~~\"la\"~~_~~_]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              
              GridBox[{{
                "\"_\"", "\"a\"", "\"l\"", "\"_\"", "\"_\"", "\"l\"", "\"a\"",
                  "\"_\"", "\"_\""}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{1}}}], 
              "Grid"], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "English words", "scanner" -> "WordPuzzle", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DictionaryLookup"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  
                  GridBox[{{
                    "\"b\"", "\"a\"", "\"l\"", "\"a\"", "\"c\"", "\"l\"", 
                    "\"a\"", "\"v\"", "\"a\""}, {
                    "\"c\"", "\"a\"", "\"l\"", "\"c\"", "\"u\"", "\"l\"", 
                    "\"a\"", "\"r\"", "\"y\""}, {
                    "\"c\"", "\"a\"", "\"l\"", "\"c\"", "\"u\"", "\"l\"", 
                    "\"a\"", "\"t\"", "\"e\""}, {
                    "\"f\"", "\"a\"", "\"l\"", "\"c\"", "\"u\"", "\"l\"", 
                    "\"a\"", "\"t\"", "\"e\""}, {
                    "\"m\"", "\"a\"", "\"l\"", "\"t\"", "\"o\"", "\"l\"", 
                    "\"a\"", "\"t\"", "\"e\""}, {
                    "\"m\"", "\"a\"", "\"l\"", "\"v\"", "\"a\"", "\"l\"", 
                    "\"a\"", "\"t\"", "\"e\""}, {
                    "\"s\"", "\"a\"", "\"l\"", "\"e\"", "\"s\"", "\"l\"", 
                    "\"a\"", "\"d\"", "\"y\""}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {"Columns" -> False, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {0.8, {0.2}, 0.8}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84], BaselinePosition -> 
                   Automatic, AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   TemplateBox[{"7", "\" words\""}, "RowDefault"], 
                   "\[NoBreak]", "\")\""}], {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
DictionaryLookupSourceInformationNotes.html", "text" -> 
        "Dictionary lookup"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.456", "parsetiming" -> "0.14200000000000002", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1546189a71ee01fd87a2000060b8g3iei6c5i8eg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1547189a71ee01fd87a200001f10gbfb93981i934222294402565530544", "version" -> 
    "2.6", "inputstring" -> "_al__la__"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 52, 41.8149484`9.373906442529313}, "Line" -> 
    106, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "_al__la__"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {156., 162.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802919618339405`*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"ef86754b-2362-4182-ba0f-8eb4223078a1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["10. \:042d\:0442\:0430\:043f \:0430\:043d\:0430\:043b\:0438\:0437\:0430 \
\:0448\:0430\:0431\:043b\:043e\:043d\:043e\:0432 \:0438 \:0438\:0445 \:043f\
\:0440\:0438\:043c\:0435\:043d\:0435\:043d\:0438\:0435", "Subtitle",
 CellChangeTimes->{{3.88029246413*^9, 3.8802924787901945`*^9}, {
  3.8802932796359367`*^9, 
  3.880293302172863*^9}},ExpressionUUID->"c0cc8b2d-7e2c-4816-b6ff-\
b3c9b2bcd01f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframAlpha", "[", "\"\<languages Spain\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "\:044f\:0437\:044b\:043a\:0438", " ", "\:043d\:0430", " ", 
    "\:043a\:043e\:0442\:043e\:0440\:044b\:0445", " ", 
    "\:0433\:043e\:0432\:043e\:0440\:044f\:0442", " ", "\:0432", " ", 
    "\:0441\:0442\:0440\:0430\:043d\:0435"}], "*)"}], " ", 
  RowBox[{
  "(*", "\:043f\:0435\:0440\:0441\:043e\:043d\:0430\:043b\:0438\:0437\:0430\
\:0446\:0438\:044f", "*)"}]}]], "Input",
 CellChangeTimes->{{3.880292334103024*^9, 3.8802923529969473`*^9}, {
  3.8802924391388764`*^9, 
  3.8802924476925063`*^9}},ExpressionUUID->"3d82badb-85b8-4dba-bd53-\
2b277cf52d92"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "languages Spain", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"Spain\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Spain"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"languages\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Data", "id" -> 
     "Languages:CountryData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CIAFactbook"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Country\", \"Spain\"][EntityProperty[\"Country\", \
\"LanguagesFractions\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Spanish\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Spanish::77gfp"}]], Identity],
                     TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["88", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "88", "SRString" -> "88"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Catalan\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Catalan::qy78h"}]], Identity],
                     TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["15", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "15", "SRString" -> "15"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Galician\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Galician::56d29"}]], 
                    Identity], TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["7.2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "7.2", "SRString" -> "7.2"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Basque\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Basque::8747x"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.3", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.3", "SRString" -> "1.3"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Extremaduran\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Extremaduran::7trsm"}]], 
                    Identity], TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.45", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.45", "SRString" -> "0.45"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Spanish Sign Language\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    LanguageData, "SpanishSignLanguage::5vmr6"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.23", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.23", "SRString" -> "0.23"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Asturian\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Asturian::5sbh8"}]], 
                    Identity], TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.23", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.23", "SRString" -> "0.23"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Cal\[OAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Calo::p2s96"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.09", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.09", "SRString" -> "0.09"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Catalonian Sign Language\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    LanguageData, "CatalanSignLanguage::85p23"}]], Identity], 
                    TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.041", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.041", "SRString" -> "0.041"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox[
                    TagBox["\"Aragonese\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {LanguageData, "Aragonese::43bdc"}]], 
                    Identity], TraditionalForm], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.025", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.025", "SRString" -> "0.025"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Roboto", FontSize -> Smaller]}], 
                    Identity], #& , SyntaxForm -> Dot], "Unit", SyntaxForm -> 
                    Dot], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0, ZeroWidthTimes -> False], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
                 StyleBox[
                  RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                 "\"\[Ellipsis]\""}], "   ", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{" ", "\"total:\"", "12"}, "RowWithSeparator"], 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "Languages:CountryData__More"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "word" -> "", "template" -> 
        "Assuming \"Spain\" is a country${separator}Use the input as ${desc} \
or ${desc} instead", "count" -> "3", "pulldown" -> "false", "type" -> 
        "MultiClash", "default" -> 
        "{\"MC\", \"\"} -> {\"Country\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Country", "desc" -> "a country", "input" -> 
          "{\"MC\", \"\"} -> {\"Country\"}", "word" -> "Spain"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Language", "desc" -> "a language", "input" -> 
          "{\"MC\", \"\"} -> {\"Language\"}", "word" -> "the input"}, {}], 
        XMLElement[
        "value", {
         "name" -> "WordData", "desc" -> " referring to English words", 
          "input" -> "{\"MC\", \"\"} -> {\"WordData\"}", "word" -> 
          "the input"}, {}]}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Country", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "0.422", "parsetiming" -> "0.136", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP18461c878509d5ad5efh00001bccgg855c32fa1i", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa18471c878509d5ad5efh000013e5h281177ae1a06249686130609588165", "version" -> 
    "2.6", "inputstring" -> "languages Spain"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2022, 12, 17, 21, 59, 15.917977`8.954462821098197}, "Line" -> 
    107, "SessionID" -> 28156321337153577703}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "languages Spain"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{653., {120., 126.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.8802923559528837`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"511499c3-549d-4ad5-9849-a51dfb59c402"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{774, 768},
WindowMargins->{{Automatic, 18}, {Automatic, 5}},
Magnification:>0.9 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 147, 3, 87, "Title",ExpressionUUID->"cc4bfd8d-b628-4394-bfd4-da4dcba9265f"],
Cell[730, 27, 342, 6, 48, "Subtitle",ExpressionUUID->"dd937140-3fc8-46f4-94aa-ddb5370f56f3"],
Cell[CellGroupData[{
Cell[1097, 37, 752, 14, 62, InheritFromParent,ExpressionUUID->"bf3fc263-ef82-4352-b76f-ad32ea8ee1aa"],
Cell[1852, 53, 367986, 6741, 1744, "Output",ExpressionUUID->"f25c346d-baf9-4e1c-abdc-8f4a762051f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369875, 6799, 258, 4, 48, "Subtitle",ExpressionUUID->"8e56cf88-1dfa-4efa-862e-48a604838461"],
Cell[CellGroupData[{
Cell[370158, 6807, 422, 9, 60, "Input",ExpressionUUID->"9d8d35bb-26b1-4029-825e-fe4a95fe75c0"],
Cell[370583, 6818, 69833, 1391, 1372, "Output",ExpressionUUID->"18c3fd30-f0d8-48a1-99f9-9b6f63e3d33d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440453, 8214, 408, 6, 42, "Input",ExpressionUUID->"839182d2-b893-47fc-8c51-e9cd1c070b92"],
Cell[440864, 8222, 150607, 2686, 1664, "Output",ExpressionUUID->"8bb50b9f-7f72-4154-a2a2-8fed37924553"]
}, Open  ]],
Cell[CellGroupData[{
Cell[591508, 10913, 297, 5, 42, "Input",ExpressionUUID->"08180781-9942-4434-97de-0eb4cd10d597"],
Cell[591808, 10920, 26392, 537, 456, "Output",ExpressionUUID->"84984dca-8b91-4a0d-bbd6-821d7d9b218d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[618237, 11462, 287, 6, 42, "Input",ExpressionUUID->"1d6c2b1a-a8e8-4b8c-aba4-bd6852a3f567"],
Cell[618527, 11470, 483266, 8184, 1028, "Output",ExpressionUUID->"c4dcb6c7-f361-4d3d-aed7-53af39002bef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1101830, 19659, 240, 3, 42, "Input",ExpressionUUID->"da746392-1f72-40cc-b00c-52866da9a2dc"],
Cell[1102073, 19664, 27691, 556, 852, "Output",ExpressionUUID->"0111daf3-d37c-4a27-9e86-e8f1f08df758"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1129801, 20225, 224, 3, 42, "Input",ExpressionUUID->"800b1958-e2f4-4bf7-8f64-100f88c92018"],
Cell[1130028, 20230, 102904, 2010, 1728, "Output",ExpressionUUID->"a71bfc6e-5dab-447e-be3c-c2c635e4b13f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1232969, 22245, 237, 3, 41, "Input",ExpressionUUID->"404c75db-df3a-4108-b790-dbe138c0567e"],
Cell[1233209, 22250, 822808, 15202, 3700, "Output",ExpressionUUID->"2c638315-6262-4bf1-8a90-533e208a03cc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2056066, 37458, 270, 4, 48, "Subtitle",ExpressionUUID->"0c518b35-7452-45ab-8ebb-4ea3260b5a64"],
Cell[CellGroupData[{
Cell[2056361, 37466, 395, 6, 77, "Input",ExpressionUUID->"d7d53429-bd9d-443a-aeac-abacff918887"],
Cell[2056759, 37474, 60261, 1199, 1438, "Output",ExpressionUUID->"f3afd172-467f-49e8-9bc6-793b3a182dfe"],
Cell[2117023, 38675, 316841, 5475, 1174, "Output",ExpressionUUID->"ccee1c65-d77e-4bb7-b434-ceb1cdf30416"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2433901, 44155, 399, 6, 77, "Input",ExpressionUUID->"e0813a50-132a-40da-ad7c-7b25a70cdb1b"],
Cell[2434303, 44163, 20413, 406, 474, "Output",ExpressionUUID->"bd533400-f3ca-48fd-bf72-f232812261cd"],
Cell[2454719, 44571, 192587, 3677, 2500, "Output",ExpressionUUID->"762ed00a-cd3b-4aad-b00c-509ec56daf49"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2647367, 48255, 149, 3, 87, "Title",ExpressionUUID->"ce2a40ac-88e8-4e09-97bc-81688bcfa218"],
Cell[2647519, 48260, 458, 7, 48, "Subtitle",ExpressionUUID->"635d014c-3745-49a2-b645-8e6020055b2c"],
Cell[CellGroupData[{
Cell[2648002, 48271, 602, 13, 60, "Input",ExpressionUUID->"990592bf-1cfd-4f4f-9115-47b8111b4540"],
Cell[2648607, 48286, 37283, 754, 486, "Output",ExpressionUUID->"be40c1f2-34ed-4d52-ae11-6ede3248a4ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2685927, 49045, 482, 11, 42, "Input",ExpressionUUID->"a8018845-6269-40a8-be16-709bd376d9c7"],
Cell[2686412, 49058, 166910, 3307, 1512, "Output",ExpressionUUID->"3db3ddde-f1d2-4259-af27-7acda07f24c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2853359, 52370, 341, 6, 48, "Subtitle",ExpressionUUID->"a720fc61-e8ce-4aed-a20c-17626a590e76"],
Cell[CellGroupData[{
Cell[2853725, 52380, 439, 10, 42, "Input",ExpressionUUID->"c842b75d-101f-46dd-b8c0-be503317b5e5"],
Cell[2854167, 52392, 9464, 181, 336, "Output",ExpressionUUID->"ef86754b-2362-4182-ba0f-8eb4223078a1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2863680, 52579, 400, 6, 48, "Subtitle",ExpressionUUID->"c0cc8b2d-7e2c-4816-b6ff-b3c9b2bcd01f"],
Cell[CellGroupData[{
Cell[2864105, 52589, 684, 15, 62, "Input",ExpressionUUID->"3d82badb-85b8-4dba-bd53-2b277cf52d92"],
Cell[2864792, 52606, 25944, 541, 264, "Output",ExpressionUUID->"511499c3-549d-4ad5-9849-a51dfb59c402"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

